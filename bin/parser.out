Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    SUPER

Grammar

Rule 0     S' -> Goal
Rule 1     Goal -> CompilationUnit
Rule 2     Literal -> DECIMAL_LITERAL
Rule 3     Literal -> HEX_LITERAL
Rule 4     Literal -> BINARY_LITERAL
Rule 5     Literal -> FLOAT_LITERAL
Rule 6     Literal -> BOOL_LITERAL
Rule 7     Literal -> CHAR_LITERAL
Rule 8     Literal -> STRING_LITERAL
Rule 9     Literal -> NULL
Rule 10    Type -> PrimitiveType
Rule 11    Type -> ReferenceType
Rule 12    PrimitiveType -> NumericType
Rule 13    PrimitiveType -> BOOLEAN
Rule 14    NumericType -> IntegralType
Rule 15    NumericType -> FloatingPointType
Rule 16    IntegralType -> BYTE
Rule 17    IntegralType -> SHORT
Rule 18    IntegralType -> INT
Rule 19    IntegralType -> LONG
Rule 20    IntegralType -> CHAR
Rule 21    FloatingPointType -> FLOAT
Rule 22    FloatingPointType -> DOUBLE
Rule 23    ReferenceType -> ArrayType
Rule 24    ReferenceType -> ClassType
Rule 25    ClassType -> Name
Rule 26    ArrayType -> PrimitiveType Dims
Rule 27    ArrayType -> Name Dims
Rule 28    Name -> SimpleName
Rule 29    Name -> QualifiedName
Rule 30    SimpleName -> IDENTIFIER
Rule 31    QualifiedName -> Name DOT IDENTIFIER
Rule 32    CompilationUnit -> PackageDeclaration ImportDeclarations TypeDeclarations
Rule 33    CompilationUnit -> PackageDeclaration ImportDeclarations
Rule 34    CompilationUnit -> PackageDeclaration
Rule 35    CompilationUnit -> PackageDeclaration TypeDeclarations
Rule 36    CompilationUnit -> ImportDeclarations
Rule 37    CompilationUnit -> ImportDeclarations TypeDeclarations
Rule 38    CompilationUnit -> TypeDeclarations
Rule 39    ImportDeclarations -> ImportDeclaration
Rule 40    ImportDeclarations -> ImportDeclarations ImportDeclaration
Rule 41    TypeDeclarations -> TypeDeclaration
Rule 42    TypeDeclarations -> TypeDeclarations TypeDeclaration
Rule 43    PackageDeclaration -> PACKAGE IDENTIFIER SEMI
Rule 44    ImportDeclaration -> SingleTypeImportDeclaration
Rule 45    ImportDeclaration -> TypeImportOnDemandDeclaration
Rule 46    SingleTypeImportDeclaration -> IMPORT import_identifier SEMI
Rule 47    TypeImportOnDemandDeclaration -> IMPORT import_identifier DOT MUL SEMI
Rule 48    import_identifier -> import_identifier DOT IDENTIFIER
Rule 49    import_identifier -> IDENTIFIER
Rule 50    TypeDeclaration -> ClassDeclaration
Rule 51    TypeDeclaration -> SEMI
Rule 52    Modifiers -> Modifier
Rule 53    Modifiers -> Modifiers Modifier
Rule 54    Modifier -> STATIC
Rule 55    Modifier -> FINAL
Rule 56    Modifier -> PRIVATE
Rule 57    Modifier -> PROTECTED
Rule 58    Modifier -> PUBLIC
Rule 59    ClassDeclaration -> Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody
Rule 60    ClassDeclaration -> CLASS IDENTIFIER decl_mark_2 ClassBody
Rule 61    ClassBody -> LBRACE RBRACE
Rule 62    ClassBody -> LBRACE ClassBodyDeclarations RBRACE
Rule 63    ClassBodyDeclarations -> ClassBodyDeclaration
Rule 64    ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration
Rule 65    ClassBodyDeclaration -> ClassMemberDeclaration
Rule 66    ClassBodyDeclaration -> ConstructorDeclaration
Rule 67    ClassMemberDeclaration -> FieldDeclaration
Rule 68    ClassMemberDeclaration -> MethodDeclaration
Rule 69    FieldDeclaration -> Modifiers Type VariableDeclarators SEMI
Rule 70    FieldDeclaration -> Type VariableDeclarators SEMI
Rule 71    VariableDeclarators -> VariableDeclarator
Rule 72    VariableDeclarators -> VariableDeclarators COMMA VariableDeclarator
Rule 73    VariableDeclarator -> VariableDeclaratorId
Rule 74    VariableDeclarator -> VariableDeclaratorId ASSIGN VariableInitializer
Rule 75    VariableDeclaratorId -> IDENTIFIER
Rule 76    VariableDeclaratorId -> IDENTIFIER Dims
Rule 77    VariableInitializer -> Expression
Rule 78    MethodDeclaration -> MethodHeader MethodBody
Rule 79    MethodHeader -> Modifiers Type MethodDeclarator
Rule 80    MethodHeader -> Type MethodDeclarator
Rule 81    MethodHeader -> Modifiers VOID MethodDeclarator
Rule 82    MethodHeader -> VOID MethodDeclarator
Rule 83    MethodDeclarator -> IDENTIFIER LPAREN RPAREN
Rule 84    MethodDeclarator -> IDENTIFIER LPAREN FormalParameterList RPAREN
Rule 85    FormalParameterList -> FormalParameter
Rule 86    FormalParameterList -> FormalParameterList COMMA FormalParameter
Rule 87    FormalParameter -> Type VariableDeclaratorId
Rule 88    MethodBody -> Block
Rule 89    MethodBody -> SEMI
Rule 90    ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody
Rule 91    ConstructorDeclaration -> ConstructorDeclarator ConstructorBody
Rule 92    ConstructorDeclarator -> SimpleName LPAREN FormalParameterList RPAREN
Rule 93    ConstructorDeclarator -> SimpleName LPAREN RPAREN
Rule 94    ConstructorBody -> <empty>
Rule 95    ConstructorBody -> LBRACE BlockStatements RBRACE
Rule 96    ConstructorBody -> LBRACE RBRACE
Rule 97    ExplicitConstructorInvocation -> THIS LPAREN ArgumentList RPAREN SEMI
Rule 98    ExplicitConstructorInvocation -> THIS LPAREN RPAREN SEMI
Rule 99    VariableInitializers -> VariableInitializer
Rule 100   VariableInitializers -> VariableInitializers COMMA VariableInitializer
Rule 101   Block -> LBRACE RBRACE
Rule 102   Block -> LBRACE BlockStatements RBRACE
Rule 103   BlockStatements -> BlockStatement
Rule 104   BlockStatements -> BlockStatements BlockStatement
Rule 105   BlockStatement -> LocalVariableDeclarationStatement
Rule 106   BlockStatement -> Statement
Rule 107   LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI
Rule 108   LocalVariableDeclaration -> Type VariableDeclarators
Rule 109   Statement -> StatementWithoutTrailingSubstatement
Rule 110   Statement -> LabeledStatement
Rule 111   Statement -> IfThenStatement
Rule 112   Statement -> IfThenElseStatement
Rule 113   Statement -> WhileStatement
Rule 114   Statement -> ForStatement
Rule 115   StatementNoShortIf -> StatementWithoutTrailingSubstatement
Rule 116   StatementNoShortIf -> LabeledStatementNoShortIf
Rule 117   StatementNoShortIf -> IfThenElseStatementNoShortIf
Rule 118   StatementNoShortIf -> WhileStatementNoShortIf
Rule 119   StatementNoShortIf -> ForStatementNoShortIf
Rule 120   StatementWithoutTrailingSubstatement -> Block
Rule 121   StatementWithoutTrailingSubstatement -> EmptyStatement
Rule 122   StatementWithoutTrailingSubstatement -> ExpressionStatement
Rule 123   StatementWithoutTrailingSubstatement -> SwitchStatement
Rule 124   StatementWithoutTrailingSubstatement -> DoStatement
Rule 125   StatementWithoutTrailingSubstatement -> BreakStatement
Rule 126   StatementWithoutTrailingSubstatement -> ContinueStatement
Rule 127   StatementWithoutTrailingSubstatement -> ReturnStatement
Rule 128   EmptyStatement -> SEMI
Rule 129   LabeledStatement -> IDENTIFIER COLON Statement
Rule 130   LabeledStatementNoShortIf -> IDENTIFIER COLON StatementNoShortIf
Rule 131   ExpressionStatement -> StatementExpression SEMI
Rule 132   StatementExpression -> Assignment
Rule 133   StatementExpression -> PreIncrementExpression
Rule 134   StatementExpression -> PreDecrementExpression
Rule 135   StatementExpression -> PostIncrementExpression
Rule 136   StatementExpression -> PostDecrementExpression
Rule 137   StatementExpression -> MethodInvocation
Rule 138   StatementExpression -> ClassInstanceCreationExpression
Rule 139   IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
Rule 140   ifMark1 -> <empty>
Rule 141   ifMark2 -> <empty>
Rule 142   ifMark3 -> <empty>
Rule 143   IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
Rule 144   IfThenElseStatementNoShortIf -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
Rule 145   SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock
Rule 146   SwitchBlock -> LBRACE RBRACE
Rule 147   SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE
Rule 148   SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE
Rule 149   SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE
Rule 150   SwitchBlockStatementGroups -> SwitchBlockStatementGroup
Rule 151   SwitchBlockStatementGroups -> SwitchBlockStatementGroups SwitchBlockStatementGroup
Rule 152   SwitchBlockStatementGroup -> begin_scope SwitchLabels BlockStatements end_scope
Rule 153   SwitchLabels -> SwitchLabel
Rule 154   SwitchLabels -> SwitchLabels SwitchLabel
Rule 155   SwitchLabel -> CASE ConstantExpression COLON
Rule 156   SwitchLabel -> DEFAULT COLON
Rule 157   WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
Rule 158   WhileStatementNoShortIf -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
Rule 159   prep_fw_stack -> <empty>
Rule 160   while_l1 -> <empty>
Rule 161   while_l2 -> <empty>
Rule 162   DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
Rule 163   dwhile_l1 -> <empty>
Rule 164   dwhile_l2 -> <empty>
Rule 165   ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
Rule 166   ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
Rule 167   ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
Rule 168   ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
Rule 169   ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
Rule 170   ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
Rule 171   ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
Rule 172   ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
Rule 173   ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
Rule 174   ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
Rule 175   ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
Rule 176   ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
Rule 177   ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
Rule 178   ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
Rule 179   ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
Rule 180   ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
Rule 181   for_l1 -> <empty>
Rule 182   for_l2 -> <empty>
Rule 183   for_l3 -> <empty>
Rule 184   ForInit -> StatementExpressionList
Rule 185   ForInit -> LocalVariableDeclaration
Rule 186   ForUpdate -> StatementExpressionList
Rule 187   StatementExpressionList -> StatementExpression
Rule 188   StatementExpressionList -> StatementExpressionList COMMA StatementExpression
Rule 189   BreakStatement -> BREAK IDENTIFIER SEMI
Rule 190   BreakStatement -> BREAK SEMI
Rule 191   ContinueStatement -> CONTINUE IDENTIFIER SEMI
Rule 192   ContinueStatement -> CONTINUE SEMI
Rule 193   ReturnStatement -> RETURN Expression SEMI
Rule 194   ReturnStatement -> RETURN SEMI
Rule 195   Primary -> PrimaryNoNewArray
Rule 196   Primary -> ArrayCreationExpression
Rule 197   PrimaryNoNewArray -> Literal
Rule 198   PrimaryNoNewArray -> THIS
Rule 199   PrimaryNoNewArray -> LPAREN Expression RPAREN
Rule 200   PrimaryNoNewArray -> ClassInstanceCreationExpression
Rule 201   PrimaryNoNewArray -> FieldAccess
Rule 202   PrimaryNoNewArray -> MethodInvocation
Rule 203   PrimaryNoNewArray -> ArrayAccess
Rule 204   ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN
Rule 205   ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN
Rule 206   ArgumentList -> Expression
Rule 207   ArgumentList -> ArgumentList COMMA Expression
Rule 208   ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims
Rule 209   ArrayCreationExpression -> NEW PrimitiveType DimExprs
Rule 210   ArrayCreationExpression -> NEW ClassType DimExprs Dims
Rule 211   ArrayCreationExpression -> NEW ClassType DimExprs
Rule 212   DimExprs -> DimExpr
Rule 213   DimExprs -> DimExprs DimExpr
Rule 214   DimExpr -> LBRACK Expression RBRACK
Rule 215   Dims -> LBRACK RBRACK
Rule 216   Dims -> Dims LBRACK RBRACK
Rule 217   FieldAccess -> Primary DOT Name
Rule 218   MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
Rule 219   MethodInvocation -> Name LPAREN ArgumentList RPAREN
Rule 220   MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN
Rule 221   MethodInvocation -> Name LPAREN RPAREN
Rule 222   ArrayAccess -> Name LBRACK Expression RBRACK
Rule 223   ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK
Rule 224   PostfixExpression -> Primary
Rule 225   PostfixExpression -> Name
Rule 226   PostfixExpression -> PostIncrementExpression
Rule 227   PostfixExpression -> PostDecrementExpression
Rule 228   PostIncrementExpression -> PostfixExpression INC
Rule 229   PostDecrementExpression -> PostfixExpression DEC
Rule 230   UnaryExpression -> PreIncrementExpression
Rule 231   UnaryExpression -> PreDecrementExpression
Rule 232   UnaryExpression -> ADD UnaryExpression
Rule 233   UnaryExpression -> SUB UnaryExpression
Rule 234   UnaryExpression -> UnaryExpressionNotAddSub
Rule 235   PreIncrementExpression -> INC UnaryExpression
Rule 236   PreDecrementExpression -> DEC UnaryExpression
Rule 237   UnaryExpressionNotAddSub -> PostfixExpression
Rule 238   UnaryExpressionNotAddSub -> BANG UnaryExpression
Rule 239   UnaryExpressionNotAddSub -> TILDE UnaryExpression
Rule 240   UnaryExpressionNotAddSub -> CastExpression
Rule 241   CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression
Rule 242   CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression
Rule 243   CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub
Rule 244   CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
Rule 245   MultiplicativeExpression -> UnaryExpression
Rule 246   MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression
Rule 247   MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression
Rule 248   MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression
Rule 249   AdditiveExpression -> MultiplicativeExpression
Rule 250   AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression
Rule 251   AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression
Rule 252   ShiftExpression -> AdditiveExpression
Rule 253   ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression
Rule 254   ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression
Rule 255   ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression
Rule 256   RelationalExpression -> ShiftExpression
Rule 257   RelationalExpression -> RelationalExpression LT ShiftExpression
Rule 258   RelationalExpression -> RelationalExpression GT ShiftExpression
Rule 259   RelationalExpression -> RelationalExpression LE ShiftExpression
Rule 260   RelationalExpression -> RelationalExpression GE ShiftExpression
Rule 261   EqualityExpression -> RelationalExpression
Rule 262   EqualityExpression -> EqualityExpression EQUAL RelationalExpression
Rule 263   EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression
Rule 264   AndExpression -> EqualityExpression
Rule 265   AndExpression -> AndExpression BITAND EqualityExpression
Rule 266   ExclusiveOrExpression -> AndExpression
Rule 267   ExclusiveOrExpression -> ExclusiveOrExpression CARET AndExpression
Rule 268   InclusiveOrExpression -> ExclusiveOrExpression
Rule 269   InclusiveOrExpression -> InclusiveOrExpression BITOR ExclusiveOrExpression
Rule 270   ConditionalAndExpression -> InclusiveOrExpression
Rule 271   ConditionalAndExpression -> ConditionalAndExpression AND ConMarker InclusiveOrExpression
Rule 272   ConditionalOrExpression -> ConditionalAndExpression
Rule 273   ConditionalOrExpression -> ConditionalOrExpression OR ConMarker ConditionalAndExpression
Rule 274   ConMarker -> <empty>
Rule 275   ConditionalExpression -> ConditionalOrExpression
Rule 276   ConditionalExpression -> ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
Rule 277   AssignmentExpression -> ConditionalExpression
Rule 278   AssignmentExpression -> Assignment
Rule 279   Assignment -> LeftHandSide AssignmentOperator AssignmentExpression
Rule 280   LeftHandSide -> Name
Rule 281   LeftHandSide -> FieldAccess
Rule 282   LeftHandSide -> ArrayAccess
Rule 283   AssignmentOperator -> ASSIGN
Rule 284   AssignmentOperator -> ADD_ASSIGN
Rule 285   AssignmentOperator -> SUB_ASSIGN
Rule 286   AssignmentOperator -> MUL_ASSIGN
Rule 287   AssignmentOperator -> DIV_ASSIGN
Rule 288   AssignmentOperator -> AND_ASSIGN
Rule 289   AssignmentOperator -> OR_ASSIGN
Rule 290   AssignmentOperator -> XOR_ASSIGN
Rule 291   AssignmentOperator -> MOD_ASSIGN
Rule 292   AssignmentOperator -> LSHIFT_ASSIGN
Rule 293   AssignmentOperator -> RSHIFT_ASSIGN
Rule 294   AssignmentOperator -> URSHIFT_ASSIGN
Rule 295   Expression -> AssignmentExpression
Rule 296   ConstantExpression -> Expression
Rule 297   decl_mark -> <empty>
Rule 298   decl_mark_2 -> <empty>
Rule 299   begin_scope -> <empty>
Rule 300   end_scope -> <empty>

Terminals, with rules where they appear

ADD                  : 232 250
ADD_ASSIGN           : 284
AND                  : 271
AND_ASSIGN           : 288
ASSIGN               : 74 283
BANG                 : 238
BINARY_LITERAL       : 4
BITAND               : 265
BITOR                : 269
BOOLEAN              : 13
BOOL_LITERAL         : 6
BREAK                : 189 190
BYTE                 : 16
CARET                : 267
CASE                 : 155
CHAR                 : 20
CHAR_LITERAL         : 7
CLASS                : 59 60
COLON                : 129 130 155 156 276
COMMA                : 72 86 100 188 207
CONTINUE             : 191 192
DEC                  : 229 236
DECIMAL_LITERAL      : 2
DEFAULT              : 156
DIV                  : 247
DIV_ASSIGN           : 287
DO                   : 162
DOT                  : 31 47 48 217 218 220
DOUBLE               : 22
ELSE                 : 143 144
EQUAL                : 262
FINAL                : 55
FLOAT                : 21
FLOAT_LITERAL        : 5
FOR                  : 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180
GE                   : 260
GT                   : 258
HEX_LITERAL          : 3
IDENTIFIER           : 30 31 43 48 49 59 60 75 76 83 84 129 130 189 191 218 220
IF                   : 139 143 144
IMPORT               : 46 47
INC                  : 228 235
INT                  : 18
LBRACE               : 61 62 95 96 101 102 146 147 148 149
LBRACK               : 214 215 216 222 223
LE                   : 259
LONG                 : 19
LPAREN               : 83 84 92 93 97 98 139 143 144 145 157 158 162 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 199 204 205 218 219 220 221 241 242 243 244
LSHIFT               : 253
LSHIFT_ASSIGN        : 292
LT                   : 257
MOD                  : 248
MOD_ASSIGN           : 291
MUL                  : 47 246
MUL_ASSIGN           : 286
NEW                  : 204 205 208 209 210 211
NOTEQUAL             : 263
NULL                 : 9
OR                   : 273
OR_ASSIGN            : 289
PACKAGE              : 43
PRIVATE              : 56
PROTECTED            : 57
PUBLIC               : 58
QUESTION             : 276
RBRACE               : 61 62 95 96 101 102 146 147 148 149
RBRACK               : 214 215 216 222 223
RETURN               : 193 194
RPAREN               : 83 84 92 93 97 98 139 143 144 145 157 158 162 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 199 204 205 218 219 220 221 241 242 243 244
RSHIFT               : 254
RSHIFT_ASSIGN        : 293
SEMI                 : 43 46 47 51 69 70 89 97 98 107 128 131 162 165 165 166 166 167 167 168 168 169 169 170 170 171 171 172 172 173 173 174 174 175 175 176 176 177 177 178 178 179 179 180 180 189 190 191 192 193 194
SHORT                : 17
STATIC               : 54
STRING_LITERAL       : 8
SUB                  : 233 251
SUB_ASSIGN           : 285
SUPER                : 
SWITCH               : 145
THIS                 : 97 98 198
TILDE                : 239
URSHIFT              : 255
URSHIFT_ASSIGN       : 294
VOID                 : 81 82
WHILE                : 157 158 162
XOR_ASSIGN           : 290
error                : 

Nonterminals, with rules where they appear

AdditiveExpression   : 250 251 252 253 254 255
AndExpression        : 265 266 267
ArgumentList         : 97 205 207 218 219
ArrayAccess          : 203 282
ArrayCreationExpression : 196
ArrayType            : 23
Assignment           : 132 278
AssignmentExpression : 279 295
AssignmentOperator   : 279
Block                : 88 120
BlockStatement       : 103 104
BlockStatements      : 95 102 104 152
BreakStatement       : 125
CastExpression       : 240
ClassBody            : 59 60
ClassBodyDeclaration : 63 64
ClassBodyDeclarations : 62 64
ClassDeclaration     : 50
ClassInstanceCreationExpression : 138 200
ClassMemberDeclaration : 65
ClassType            : 24 204 205 210 211
CompilationUnit      : 1
ConMarker            : 271 273
ConditionalAndExpression : 271 272 273
ConditionalExpression : 276 277
ConditionalOrExpression : 273 275 276
ConstantExpression   : 155
ConstructorBody      : 90 91
ConstructorDeclaration : 66
ConstructorDeclarator : 90 91
ContinueStatement    : 126
DimExpr              : 212 213
DimExprs             : 208 209 210 211 213
Dims                 : 26 27 76 208 210 216 241 244
DoStatement          : 124
EmptyStatement       : 121
EqualityExpression   : 262 263 264 265
ExclusiveOrExpression : 267 268 269
ExplicitConstructorInvocation : 
Expression           : 77 139 143 144 145 157 158 162 165 166 168 170 173 174 176 178 193 199 206 207 214 222 223 243 276 296
ExpressionStatement  : 122
FieldAccess          : 201 281
FieldDeclaration     : 67
FloatingPointType    : 15
ForInit              : 165 167 168 169 173 175 176 177
ForStatement         : 114
ForStatementNoShortIf : 119
ForUpdate            : 165 166 167 171 173 174 175 179
FormalParameter      : 85 86
FormalParameterList  : 84 86 92
Goal                 : 0
IfThenElseStatement  : 112
IfThenElseStatementNoShortIf : 117
IfThenStatement      : 111
ImportDeclaration    : 39 40
ImportDeclarations   : 32 33 36 37 40
InclusiveOrExpression : 269 270 271
IntegralType         : 14
LabeledStatement     : 110
LabeledStatementNoShortIf : 116
LeftHandSide         : 279
Literal              : 197
LocalVariableDeclaration : 107 185
LocalVariableDeclarationStatement : 105
MethodBody           : 78
MethodDeclaration    : 68
MethodDeclarator     : 79 80 81 82
MethodHeader         : 78
MethodInvocation     : 137 202
Modifier             : 52 53
Modifiers            : 53 59 69 79 81 90
MultiplicativeExpression : 246 247 248 249 250 251
Name                 : 25 27 31 217 219 221 222 225 244 280
NumericType          : 12
PackageDeclaration   : 32 33 34 35
PostDecrementExpression : 136 227
PostIncrementExpression : 135 226
PostfixExpression    : 228 229 237
PreDecrementExpression : 134 231
PreIncrementExpression : 133 230
Primary              : 217 218 220 224
PrimaryNoNewArray    : 195 223
PrimitiveType        : 10 26 208 209 241 242
QualifiedName        : 29
ReferenceType        : 11
RelationalExpression : 257 258 259 260 261 262 263
ReturnStatement      : 127
ShiftExpression      : 253 254 255 256 257 258 259 260
SimpleName           : 28 92 93
SingleTypeImportDeclaration : 44
Statement            : 106 129 139 143 157 162 165 166 167 168 169 170 171 172
StatementExpression  : 131 187 188
StatementExpressionList : 184 186 188
StatementNoShortIf   : 130 143 144 144 158 173 174 175 176 177 178 179 180
StatementWithoutTrailingSubstatement : 109 115
SwitchBlock          : 145
SwitchBlockStatementGroup : 150 151
SwitchBlockStatementGroups : 147 148 151
SwitchLabel          : 153 154
SwitchLabels         : 147 149 152 154
SwitchStatement      : 123
Type                 : 69 70 79 80 87 108
TypeDeclaration      : 41 42
TypeDeclarations     : 32 35 37 38 42
TypeImportOnDemandDeclaration : 45
UnaryExpression      : 232 233 235 236 238 239 241 242 245 246 247 248
UnaryExpressionNotAddSub : 234 243 244
VariableDeclarator   : 71 72
VariableDeclaratorId : 73 74 87
VariableDeclarators  : 69 70 72 108
VariableInitializer  : 74 99 100
VariableInitializers : 100
WhileStatement       : 113
WhileStatementNoShortIf : 118
begin_scope          : 139 143 143 144 144 147 149 152 157 158 162 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180
decl_mark            : 
decl_mark_2          : 59 60
dwhile_l1            : 162 162
dwhile_l2            : 162
end_scope            : 139 143 143 144 144 147 149 152 157 158 162 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180
for_l1               : 165 165 165 166 166 166 167 167 167 168 168 168 169 169 169 170 170 170 171 171 171 172 172 172 173 173 173 174 174 174 175 175 175 176 176 176 177 177 177 178 178 178 179 179 179 180 180 180
for_l2               : 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180
for_l3               : 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180
ifMark1              : 139 139 143 144
ifMark2              : 143 144
ifMark3              : 143 144
import_identifier    : 46 47 48
prep_fw_stack        : 157 158 162 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180
while_l1             : 157 157 158 158
while_l2             : 157 158

Parsing method: LALR

state 0

    (0) S' -> . Goal
    (1) Goal -> . CompilationUnit
    (32) CompilationUnit -> . PackageDeclaration ImportDeclarations TypeDeclarations
    (33) CompilationUnit -> . PackageDeclaration ImportDeclarations
    (34) CompilationUnit -> . PackageDeclaration
    (35) CompilationUnit -> . PackageDeclaration TypeDeclarations
    (36) CompilationUnit -> . ImportDeclarations
    (37) CompilationUnit -> . ImportDeclarations TypeDeclarations
    (38) CompilationUnit -> . TypeDeclarations
    (43) PackageDeclaration -> . PACKAGE IDENTIFIER SEMI
    (39) ImportDeclarations -> . ImportDeclaration
    (40) ImportDeclarations -> . ImportDeclarations ImportDeclaration
    (41) TypeDeclarations -> . TypeDeclaration
    (42) TypeDeclarations -> . TypeDeclarations TypeDeclaration
    (44) ImportDeclaration -> . SingleTypeImportDeclaration
    (45) ImportDeclaration -> . TypeImportOnDemandDeclaration
    (50) TypeDeclaration -> . ClassDeclaration
    (51) TypeDeclaration -> . SEMI
    (46) SingleTypeImportDeclaration -> . IMPORT import_identifier SEMI
    (47) TypeImportOnDemandDeclaration -> . IMPORT import_identifier DOT MUL SEMI
    (59) ClassDeclaration -> . Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody
    (60) ClassDeclaration -> . CLASS IDENTIFIER decl_mark_2 ClassBody
    (52) Modifiers -> . Modifier
    (53) Modifiers -> . Modifiers Modifier
    (54) Modifier -> . STATIC
    (55) Modifier -> . FINAL
    (56) Modifier -> . PRIVATE
    (57) Modifier -> . PROTECTED
    (58) Modifier -> . PUBLIC

    PACKAGE         shift and go to state 6
    SEMI            shift and go to state 7
    IMPORT          shift and go to state 13
    CLASS           shift and go to state 15
    STATIC          shift and go to state 17
    FINAL           shift and go to state 18
    PRIVATE         shift and go to state 19
    PROTECTED       shift and go to state 20
    PUBLIC          shift and go to state 21

    Goal                           shift and go to state 1
    CompilationUnit                shift and go to state 2
    PackageDeclaration             shift and go to state 3
    ImportDeclarations             shift and go to state 4
    TypeDeclarations               shift and go to state 5
    ImportDeclaration              shift and go to state 8
    TypeDeclaration                shift and go to state 9
    SingleTypeImportDeclaration    shift and go to state 10
    TypeImportOnDemandDeclaration  shift and go to state 11
    ClassDeclaration               shift and go to state 12
    Modifiers                      shift and go to state 14
    Modifier                       shift and go to state 16

state 1

    (0) S' -> Goal .



state 2

    (1) Goal -> CompilationUnit .

    $end            reduce using rule 1 (Goal -> CompilationUnit .)


state 3

    (32) CompilationUnit -> PackageDeclaration . ImportDeclarations TypeDeclarations
    (33) CompilationUnit -> PackageDeclaration . ImportDeclarations
    (34) CompilationUnit -> PackageDeclaration .
    (35) CompilationUnit -> PackageDeclaration . TypeDeclarations
    (39) ImportDeclarations -> . ImportDeclaration
    (40) ImportDeclarations -> . ImportDeclarations ImportDeclaration
    (41) TypeDeclarations -> . TypeDeclaration
    (42) TypeDeclarations -> . TypeDeclarations TypeDeclaration
    (44) ImportDeclaration -> . SingleTypeImportDeclaration
    (45) ImportDeclaration -> . TypeImportOnDemandDeclaration
    (50) TypeDeclaration -> . ClassDeclaration
    (51) TypeDeclaration -> . SEMI
    (46) SingleTypeImportDeclaration -> . IMPORT import_identifier SEMI
    (47) TypeImportOnDemandDeclaration -> . IMPORT import_identifier DOT MUL SEMI
    (59) ClassDeclaration -> . Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody
    (60) ClassDeclaration -> . CLASS IDENTIFIER decl_mark_2 ClassBody
    (52) Modifiers -> . Modifier
    (53) Modifiers -> . Modifiers Modifier
    (54) Modifier -> . STATIC
    (55) Modifier -> . FINAL
    (56) Modifier -> . PRIVATE
    (57) Modifier -> . PROTECTED
    (58) Modifier -> . PUBLIC

    $end            reduce using rule 34 (CompilationUnit -> PackageDeclaration .)
    SEMI            shift and go to state 7
    IMPORT          shift and go to state 13
    CLASS           shift and go to state 15
    STATIC          shift and go to state 17
    FINAL           shift and go to state 18
    PRIVATE         shift and go to state 19
    PROTECTED       shift and go to state 20
    PUBLIC          shift and go to state 21

    ImportDeclarations             shift and go to state 22
    TypeDeclarations               shift and go to state 23
    ImportDeclaration              shift and go to state 8
    TypeDeclaration                shift and go to state 9
    SingleTypeImportDeclaration    shift and go to state 10
    TypeImportOnDemandDeclaration  shift and go to state 11
    ClassDeclaration               shift and go to state 12
    Modifiers                      shift and go to state 14
    Modifier                       shift and go to state 16

state 4

    (36) CompilationUnit -> ImportDeclarations .
    (37) CompilationUnit -> ImportDeclarations . TypeDeclarations
    (40) ImportDeclarations -> ImportDeclarations . ImportDeclaration
    (41) TypeDeclarations -> . TypeDeclaration
    (42) TypeDeclarations -> . TypeDeclarations TypeDeclaration
    (44) ImportDeclaration -> . SingleTypeImportDeclaration
    (45) ImportDeclaration -> . TypeImportOnDemandDeclaration
    (50) TypeDeclaration -> . ClassDeclaration
    (51) TypeDeclaration -> . SEMI
    (46) SingleTypeImportDeclaration -> . IMPORT import_identifier SEMI
    (47) TypeImportOnDemandDeclaration -> . IMPORT import_identifier DOT MUL SEMI
    (59) ClassDeclaration -> . Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody
    (60) ClassDeclaration -> . CLASS IDENTIFIER decl_mark_2 ClassBody
    (52) Modifiers -> . Modifier
    (53) Modifiers -> . Modifiers Modifier
    (54) Modifier -> . STATIC
    (55) Modifier -> . FINAL
    (56) Modifier -> . PRIVATE
    (57) Modifier -> . PROTECTED
    (58) Modifier -> . PUBLIC

    $end            reduce using rule 36 (CompilationUnit -> ImportDeclarations .)
    SEMI            shift and go to state 7
    IMPORT          shift and go to state 13
    CLASS           shift and go to state 15
    STATIC          shift and go to state 17
    FINAL           shift and go to state 18
    PRIVATE         shift and go to state 19
    PROTECTED       shift and go to state 20
    PUBLIC          shift and go to state 21

    TypeDeclarations               shift and go to state 24
    ImportDeclaration              shift and go to state 25
    TypeDeclaration                shift and go to state 9
    SingleTypeImportDeclaration    shift and go to state 10
    TypeImportOnDemandDeclaration  shift and go to state 11
    ClassDeclaration               shift and go to state 12
    Modifiers                      shift and go to state 14
    Modifier                       shift and go to state 16

state 5

    (38) CompilationUnit -> TypeDeclarations .
    (42) TypeDeclarations -> TypeDeclarations . TypeDeclaration
    (50) TypeDeclaration -> . ClassDeclaration
    (51) TypeDeclaration -> . SEMI
    (59) ClassDeclaration -> . Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody
    (60) ClassDeclaration -> . CLASS IDENTIFIER decl_mark_2 ClassBody
    (52) Modifiers -> . Modifier
    (53) Modifiers -> . Modifiers Modifier
    (54) Modifier -> . STATIC
    (55) Modifier -> . FINAL
    (56) Modifier -> . PRIVATE
    (57) Modifier -> . PROTECTED
    (58) Modifier -> . PUBLIC

    $end            reduce using rule 38 (CompilationUnit -> TypeDeclarations .)
    SEMI            shift and go to state 7
    CLASS           shift and go to state 15
    STATIC          shift and go to state 17
    FINAL           shift and go to state 18
    PRIVATE         shift and go to state 19
    PROTECTED       shift and go to state 20
    PUBLIC          shift and go to state 21

    TypeDeclaration                shift and go to state 26
    ClassDeclaration               shift and go to state 12
    Modifiers                      shift and go to state 14
    Modifier                       shift and go to state 16

state 6

    (43) PackageDeclaration -> PACKAGE . IDENTIFIER SEMI

    IDENTIFIER      shift and go to state 27


state 7

    (51) TypeDeclaration -> SEMI .

    SEMI            reduce using rule 51 (TypeDeclaration -> SEMI .)
    CLASS           reduce using rule 51 (TypeDeclaration -> SEMI .)
    STATIC          reduce using rule 51 (TypeDeclaration -> SEMI .)
    FINAL           reduce using rule 51 (TypeDeclaration -> SEMI .)
    PRIVATE         reduce using rule 51 (TypeDeclaration -> SEMI .)
    PROTECTED       reduce using rule 51 (TypeDeclaration -> SEMI .)
    PUBLIC          reduce using rule 51 (TypeDeclaration -> SEMI .)
    $end            reduce using rule 51 (TypeDeclaration -> SEMI .)


state 8

    (39) ImportDeclarations -> ImportDeclaration .

    SEMI            reduce using rule 39 (ImportDeclarations -> ImportDeclaration .)
    IMPORT          reduce using rule 39 (ImportDeclarations -> ImportDeclaration .)
    CLASS           reduce using rule 39 (ImportDeclarations -> ImportDeclaration .)
    STATIC          reduce using rule 39 (ImportDeclarations -> ImportDeclaration .)
    FINAL           reduce using rule 39 (ImportDeclarations -> ImportDeclaration .)
    PRIVATE         reduce using rule 39 (ImportDeclarations -> ImportDeclaration .)
    PROTECTED       reduce using rule 39 (ImportDeclarations -> ImportDeclaration .)
    PUBLIC          reduce using rule 39 (ImportDeclarations -> ImportDeclaration .)
    $end            reduce using rule 39 (ImportDeclarations -> ImportDeclaration .)


state 9

    (41) TypeDeclarations -> TypeDeclaration .

    SEMI            reduce using rule 41 (TypeDeclarations -> TypeDeclaration .)
    CLASS           reduce using rule 41 (TypeDeclarations -> TypeDeclaration .)
    STATIC          reduce using rule 41 (TypeDeclarations -> TypeDeclaration .)
    FINAL           reduce using rule 41 (TypeDeclarations -> TypeDeclaration .)
    PRIVATE         reduce using rule 41 (TypeDeclarations -> TypeDeclaration .)
    PROTECTED       reduce using rule 41 (TypeDeclarations -> TypeDeclaration .)
    PUBLIC          reduce using rule 41 (TypeDeclarations -> TypeDeclaration .)
    $end            reduce using rule 41 (TypeDeclarations -> TypeDeclaration .)


state 10

    (44) ImportDeclaration -> SingleTypeImportDeclaration .

    SEMI            reduce using rule 44 (ImportDeclaration -> SingleTypeImportDeclaration .)
    IMPORT          reduce using rule 44 (ImportDeclaration -> SingleTypeImportDeclaration .)
    CLASS           reduce using rule 44 (ImportDeclaration -> SingleTypeImportDeclaration .)
    STATIC          reduce using rule 44 (ImportDeclaration -> SingleTypeImportDeclaration .)
    FINAL           reduce using rule 44 (ImportDeclaration -> SingleTypeImportDeclaration .)
    PRIVATE         reduce using rule 44 (ImportDeclaration -> SingleTypeImportDeclaration .)
    PROTECTED       reduce using rule 44 (ImportDeclaration -> SingleTypeImportDeclaration .)
    PUBLIC          reduce using rule 44 (ImportDeclaration -> SingleTypeImportDeclaration .)
    $end            reduce using rule 44 (ImportDeclaration -> SingleTypeImportDeclaration .)


state 11

    (45) ImportDeclaration -> TypeImportOnDemandDeclaration .

    SEMI            reduce using rule 45 (ImportDeclaration -> TypeImportOnDemandDeclaration .)
    IMPORT          reduce using rule 45 (ImportDeclaration -> TypeImportOnDemandDeclaration .)
    CLASS           reduce using rule 45 (ImportDeclaration -> TypeImportOnDemandDeclaration .)
    STATIC          reduce using rule 45 (ImportDeclaration -> TypeImportOnDemandDeclaration .)
    FINAL           reduce using rule 45 (ImportDeclaration -> TypeImportOnDemandDeclaration .)
    PRIVATE         reduce using rule 45 (ImportDeclaration -> TypeImportOnDemandDeclaration .)
    PROTECTED       reduce using rule 45 (ImportDeclaration -> TypeImportOnDemandDeclaration .)
    PUBLIC          reduce using rule 45 (ImportDeclaration -> TypeImportOnDemandDeclaration .)
    $end            reduce using rule 45 (ImportDeclaration -> TypeImportOnDemandDeclaration .)


state 12

    (50) TypeDeclaration -> ClassDeclaration .

    SEMI            reduce using rule 50 (TypeDeclaration -> ClassDeclaration .)
    CLASS           reduce using rule 50 (TypeDeclaration -> ClassDeclaration .)
    STATIC          reduce using rule 50 (TypeDeclaration -> ClassDeclaration .)
    FINAL           reduce using rule 50 (TypeDeclaration -> ClassDeclaration .)
    PRIVATE         reduce using rule 50 (TypeDeclaration -> ClassDeclaration .)
    PROTECTED       reduce using rule 50 (TypeDeclaration -> ClassDeclaration .)
    PUBLIC          reduce using rule 50 (TypeDeclaration -> ClassDeclaration .)
    $end            reduce using rule 50 (TypeDeclaration -> ClassDeclaration .)


state 13

    (46) SingleTypeImportDeclaration -> IMPORT . import_identifier SEMI
    (47) TypeImportOnDemandDeclaration -> IMPORT . import_identifier DOT MUL SEMI
    (48) import_identifier -> . import_identifier DOT IDENTIFIER
    (49) import_identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 29

    import_identifier              shift and go to state 28

state 14

    (59) ClassDeclaration -> Modifiers . CLASS IDENTIFIER decl_mark_2 ClassBody
    (53) Modifiers -> Modifiers . Modifier
    (54) Modifier -> . STATIC
    (55) Modifier -> . FINAL
    (56) Modifier -> . PRIVATE
    (57) Modifier -> . PROTECTED
    (58) Modifier -> . PUBLIC

    CLASS           shift and go to state 30
    STATIC          shift and go to state 17
    FINAL           shift and go to state 18
    PRIVATE         shift and go to state 19
    PROTECTED       shift and go to state 20
    PUBLIC          shift and go to state 21

    Modifier                       shift and go to state 31

state 15

    (60) ClassDeclaration -> CLASS . IDENTIFIER decl_mark_2 ClassBody

    IDENTIFIER      shift and go to state 32


state 16

    (52) Modifiers -> Modifier .

    CLASS           reduce using rule 52 (Modifiers -> Modifier .)
    STATIC          reduce using rule 52 (Modifiers -> Modifier .)
    FINAL           reduce using rule 52 (Modifiers -> Modifier .)
    PRIVATE         reduce using rule 52 (Modifiers -> Modifier .)
    PROTECTED       reduce using rule 52 (Modifiers -> Modifier .)
    PUBLIC          reduce using rule 52 (Modifiers -> Modifier .)
    VOID            reduce using rule 52 (Modifiers -> Modifier .)
    IDENTIFIER      reduce using rule 52 (Modifiers -> Modifier .)
    BOOLEAN         reduce using rule 52 (Modifiers -> Modifier .)
    BYTE            reduce using rule 52 (Modifiers -> Modifier .)
    SHORT           reduce using rule 52 (Modifiers -> Modifier .)
    INT             reduce using rule 52 (Modifiers -> Modifier .)
    LONG            reduce using rule 52 (Modifiers -> Modifier .)
    CHAR            reduce using rule 52 (Modifiers -> Modifier .)
    FLOAT           reduce using rule 52 (Modifiers -> Modifier .)
    DOUBLE          reduce using rule 52 (Modifiers -> Modifier .)


state 17

    (54) Modifier -> STATIC .

    CLASS           reduce using rule 54 (Modifier -> STATIC .)
    STATIC          reduce using rule 54 (Modifier -> STATIC .)
    FINAL           reduce using rule 54 (Modifier -> STATIC .)
    PRIVATE         reduce using rule 54 (Modifier -> STATIC .)
    PROTECTED       reduce using rule 54 (Modifier -> STATIC .)
    PUBLIC          reduce using rule 54 (Modifier -> STATIC .)
    VOID            reduce using rule 54 (Modifier -> STATIC .)
    IDENTIFIER      reduce using rule 54 (Modifier -> STATIC .)
    BOOLEAN         reduce using rule 54 (Modifier -> STATIC .)
    BYTE            reduce using rule 54 (Modifier -> STATIC .)
    SHORT           reduce using rule 54 (Modifier -> STATIC .)
    INT             reduce using rule 54 (Modifier -> STATIC .)
    LONG            reduce using rule 54 (Modifier -> STATIC .)
    CHAR            reduce using rule 54 (Modifier -> STATIC .)
    FLOAT           reduce using rule 54 (Modifier -> STATIC .)
    DOUBLE          reduce using rule 54 (Modifier -> STATIC .)


state 18

    (55) Modifier -> FINAL .

    CLASS           reduce using rule 55 (Modifier -> FINAL .)
    STATIC          reduce using rule 55 (Modifier -> FINAL .)
    FINAL           reduce using rule 55 (Modifier -> FINAL .)
    PRIVATE         reduce using rule 55 (Modifier -> FINAL .)
    PROTECTED       reduce using rule 55 (Modifier -> FINAL .)
    PUBLIC          reduce using rule 55 (Modifier -> FINAL .)
    VOID            reduce using rule 55 (Modifier -> FINAL .)
    IDENTIFIER      reduce using rule 55 (Modifier -> FINAL .)
    BOOLEAN         reduce using rule 55 (Modifier -> FINAL .)
    BYTE            reduce using rule 55 (Modifier -> FINAL .)
    SHORT           reduce using rule 55 (Modifier -> FINAL .)
    INT             reduce using rule 55 (Modifier -> FINAL .)
    LONG            reduce using rule 55 (Modifier -> FINAL .)
    CHAR            reduce using rule 55 (Modifier -> FINAL .)
    FLOAT           reduce using rule 55 (Modifier -> FINAL .)
    DOUBLE          reduce using rule 55 (Modifier -> FINAL .)


state 19

    (56) Modifier -> PRIVATE .

    CLASS           reduce using rule 56 (Modifier -> PRIVATE .)
    STATIC          reduce using rule 56 (Modifier -> PRIVATE .)
    FINAL           reduce using rule 56 (Modifier -> PRIVATE .)
    PRIVATE         reduce using rule 56 (Modifier -> PRIVATE .)
    PROTECTED       reduce using rule 56 (Modifier -> PRIVATE .)
    PUBLIC          reduce using rule 56 (Modifier -> PRIVATE .)
    VOID            reduce using rule 56 (Modifier -> PRIVATE .)
    IDENTIFIER      reduce using rule 56 (Modifier -> PRIVATE .)
    BOOLEAN         reduce using rule 56 (Modifier -> PRIVATE .)
    BYTE            reduce using rule 56 (Modifier -> PRIVATE .)
    SHORT           reduce using rule 56 (Modifier -> PRIVATE .)
    INT             reduce using rule 56 (Modifier -> PRIVATE .)
    LONG            reduce using rule 56 (Modifier -> PRIVATE .)
    CHAR            reduce using rule 56 (Modifier -> PRIVATE .)
    FLOAT           reduce using rule 56 (Modifier -> PRIVATE .)
    DOUBLE          reduce using rule 56 (Modifier -> PRIVATE .)


state 20

    (57) Modifier -> PROTECTED .

    CLASS           reduce using rule 57 (Modifier -> PROTECTED .)
    STATIC          reduce using rule 57 (Modifier -> PROTECTED .)
    FINAL           reduce using rule 57 (Modifier -> PROTECTED .)
    PRIVATE         reduce using rule 57 (Modifier -> PROTECTED .)
    PROTECTED       reduce using rule 57 (Modifier -> PROTECTED .)
    PUBLIC          reduce using rule 57 (Modifier -> PROTECTED .)
    VOID            reduce using rule 57 (Modifier -> PROTECTED .)
    IDENTIFIER      reduce using rule 57 (Modifier -> PROTECTED .)
    BOOLEAN         reduce using rule 57 (Modifier -> PROTECTED .)
    BYTE            reduce using rule 57 (Modifier -> PROTECTED .)
    SHORT           reduce using rule 57 (Modifier -> PROTECTED .)
    INT             reduce using rule 57 (Modifier -> PROTECTED .)
    LONG            reduce using rule 57 (Modifier -> PROTECTED .)
    CHAR            reduce using rule 57 (Modifier -> PROTECTED .)
    FLOAT           reduce using rule 57 (Modifier -> PROTECTED .)
    DOUBLE          reduce using rule 57 (Modifier -> PROTECTED .)


state 21

    (58) Modifier -> PUBLIC .

    CLASS           reduce using rule 58 (Modifier -> PUBLIC .)
    STATIC          reduce using rule 58 (Modifier -> PUBLIC .)
    FINAL           reduce using rule 58 (Modifier -> PUBLIC .)
    PRIVATE         reduce using rule 58 (Modifier -> PUBLIC .)
    PROTECTED       reduce using rule 58 (Modifier -> PUBLIC .)
    PUBLIC          reduce using rule 58 (Modifier -> PUBLIC .)
    VOID            reduce using rule 58 (Modifier -> PUBLIC .)
    IDENTIFIER      reduce using rule 58 (Modifier -> PUBLIC .)
    BOOLEAN         reduce using rule 58 (Modifier -> PUBLIC .)
    BYTE            reduce using rule 58 (Modifier -> PUBLIC .)
    SHORT           reduce using rule 58 (Modifier -> PUBLIC .)
    INT             reduce using rule 58 (Modifier -> PUBLIC .)
    LONG            reduce using rule 58 (Modifier -> PUBLIC .)
    CHAR            reduce using rule 58 (Modifier -> PUBLIC .)
    FLOAT           reduce using rule 58 (Modifier -> PUBLIC .)
    DOUBLE          reduce using rule 58 (Modifier -> PUBLIC .)


state 22

    (32) CompilationUnit -> PackageDeclaration ImportDeclarations . TypeDeclarations
    (33) CompilationUnit -> PackageDeclaration ImportDeclarations .
    (40) ImportDeclarations -> ImportDeclarations . ImportDeclaration
    (41) TypeDeclarations -> . TypeDeclaration
    (42) TypeDeclarations -> . TypeDeclarations TypeDeclaration
    (44) ImportDeclaration -> . SingleTypeImportDeclaration
    (45) ImportDeclaration -> . TypeImportOnDemandDeclaration
    (50) TypeDeclaration -> . ClassDeclaration
    (51) TypeDeclaration -> . SEMI
    (46) SingleTypeImportDeclaration -> . IMPORT import_identifier SEMI
    (47) TypeImportOnDemandDeclaration -> . IMPORT import_identifier DOT MUL SEMI
    (59) ClassDeclaration -> . Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody
    (60) ClassDeclaration -> . CLASS IDENTIFIER decl_mark_2 ClassBody
    (52) Modifiers -> . Modifier
    (53) Modifiers -> . Modifiers Modifier
    (54) Modifier -> . STATIC
    (55) Modifier -> . FINAL
    (56) Modifier -> . PRIVATE
    (57) Modifier -> . PROTECTED
    (58) Modifier -> . PUBLIC

    $end            reduce using rule 33 (CompilationUnit -> PackageDeclaration ImportDeclarations .)
    SEMI            shift and go to state 7
    IMPORT          shift and go to state 13
    CLASS           shift and go to state 15
    STATIC          shift and go to state 17
    FINAL           shift and go to state 18
    PRIVATE         shift and go to state 19
    PROTECTED       shift and go to state 20
    PUBLIC          shift and go to state 21

    TypeDeclarations               shift and go to state 33
    ImportDeclaration              shift and go to state 25
    TypeDeclaration                shift and go to state 9
    SingleTypeImportDeclaration    shift and go to state 10
    TypeImportOnDemandDeclaration  shift and go to state 11
    ClassDeclaration               shift and go to state 12
    Modifiers                      shift and go to state 14
    Modifier                       shift and go to state 16

state 23

    (35) CompilationUnit -> PackageDeclaration TypeDeclarations .
    (42) TypeDeclarations -> TypeDeclarations . TypeDeclaration
    (50) TypeDeclaration -> . ClassDeclaration
    (51) TypeDeclaration -> . SEMI
    (59) ClassDeclaration -> . Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody
    (60) ClassDeclaration -> . CLASS IDENTIFIER decl_mark_2 ClassBody
    (52) Modifiers -> . Modifier
    (53) Modifiers -> . Modifiers Modifier
    (54) Modifier -> . STATIC
    (55) Modifier -> . FINAL
    (56) Modifier -> . PRIVATE
    (57) Modifier -> . PROTECTED
    (58) Modifier -> . PUBLIC

    $end            reduce using rule 35 (CompilationUnit -> PackageDeclaration TypeDeclarations .)
    SEMI            shift and go to state 7
    CLASS           shift and go to state 15
    STATIC          shift and go to state 17
    FINAL           shift and go to state 18
    PRIVATE         shift and go to state 19
    PROTECTED       shift and go to state 20
    PUBLIC          shift and go to state 21

    TypeDeclaration                shift and go to state 26
    ClassDeclaration               shift and go to state 12
    Modifiers                      shift and go to state 14
    Modifier                       shift and go to state 16

state 24

    (37) CompilationUnit -> ImportDeclarations TypeDeclarations .
    (42) TypeDeclarations -> TypeDeclarations . TypeDeclaration
    (50) TypeDeclaration -> . ClassDeclaration
    (51) TypeDeclaration -> . SEMI
    (59) ClassDeclaration -> . Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody
    (60) ClassDeclaration -> . CLASS IDENTIFIER decl_mark_2 ClassBody
    (52) Modifiers -> . Modifier
    (53) Modifiers -> . Modifiers Modifier
    (54) Modifier -> . STATIC
    (55) Modifier -> . FINAL
    (56) Modifier -> . PRIVATE
    (57) Modifier -> . PROTECTED
    (58) Modifier -> . PUBLIC

    $end            reduce using rule 37 (CompilationUnit -> ImportDeclarations TypeDeclarations .)
    SEMI            shift and go to state 7
    CLASS           shift and go to state 15
    STATIC          shift and go to state 17
    FINAL           shift and go to state 18
    PRIVATE         shift and go to state 19
    PROTECTED       shift and go to state 20
    PUBLIC          shift and go to state 21

    TypeDeclaration                shift and go to state 26
    ClassDeclaration               shift and go to state 12
    Modifiers                      shift and go to state 14
    Modifier                       shift and go to state 16

state 25

    (40) ImportDeclarations -> ImportDeclarations ImportDeclaration .

    SEMI            reduce using rule 40 (ImportDeclarations -> ImportDeclarations ImportDeclaration .)
    IMPORT          reduce using rule 40 (ImportDeclarations -> ImportDeclarations ImportDeclaration .)
    CLASS           reduce using rule 40 (ImportDeclarations -> ImportDeclarations ImportDeclaration .)
    STATIC          reduce using rule 40 (ImportDeclarations -> ImportDeclarations ImportDeclaration .)
    FINAL           reduce using rule 40 (ImportDeclarations -> ImportDeclarations ImportDeclaration .)
    PRIVATE         reduce using rule 40 (ImportDeclarations -> ImportDeclarations ImportDeclaration .)
    PROTECTED       reduce using rule 40 (ImportDeclarations -> ImportDeclarations ImportDeclaration .)
    PUBLIC          reduce using rule 40 (ImportDeclarations -> ImportDeclarations ImportDeclaration .)
    $end            reduce using rule 40 (ImportDeclarations -> ImportDeclarations ImportDeclaration .)


state 26

    (42) TypeDeclarations -> TypeDeclarations TypeDeclaration .

    SEMI            reduce using rule 42 (TypeDeclarations -> TypeDeclarations TypeDeclaration .)
    CLASS           reduce using rule 42 (TypeDeclarations -> TypeDeclarations TypeDeclaration .)
    STATIC          reduce using rule 42 (TypeDeclarations -> TypeDeclarations TypeDeclaration .)
    FINAL           reduce using rule 42 (TypeDeclarations -> TypeDeclarations TypeDeclaration .)
    PRIVATE         reduce using rule 42 (TypeDeclarations -> TypeDeclarations TypeDeclaration .)
    PROTECTED       reduce using rule 42 (TypeDeclarations -> TypeDeclarations TypeDeclaration .)
    PUBLIC          reduce using rule 42 (TypeDeclarations -> TypeDeclarations TypeDeclaration .)
    $end            reduce using rule 42 (TypeDeclarations -> TypeDeclarations TypeDeclaration .)


state 27

    (43) PackageDeclaration -> PACKAGE IDENTIFIER . SEMI

    SEMI            shift and go to state 34


state 28

    (46) SingleTypeImportDeclaration -> IMPORT import_identifier . SEMI
    (47) TypeImportOnDemandDeclaration -> IMPORT import_identifier . DOT MUL SEMI
    (48) import_identifier -> import_identifier . DOT IDENTIFIER

    SEMI            shift and go to state 35
    DOT             shift and go to state 36


state 29

    (49) import_identifier -> IDENTIFIER .

    SEMI            reduce using rule 49 (import_identifier -> IDENTIFIER .)
    DOT             reduce using rule 49 (import_identifier -> IDENTIFIER .)


state 30

    (59) ClassDeclaration -> Modifiers CLASS . IDENTIFIER decl_mark_2 ClassBody

    IDENTIFIER      shift and go to state 37


state 31

    (53) Modifiers -> Modifiers Modifier .

    CLASS           reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    STATIC          reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    FINAL           reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    PRIVATE         reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    PROTECTED       reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    PUBLIC          reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    VOID            reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    IDENTIFIER      reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    BOOLEAN         reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    BYTE            reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    SHORT           reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    INT             reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    LONG            reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    CHAR            reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    FLOAT           reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    DOUBLE          reduce using rule 53 (Modifiers -> Modifiers Modifier .)


state 32

    (60) ClassDeclaration -> CLASS IDENTIFIER . decl_mark_2 ClassBody
    (298) decl_mark_2 -> .

    LBRACE          reduce using rule 298 (decl_mark_2 -> .)

    decl_mark_2                    shift and go to state 38

state 33

    (32) CompilationUnit -> PackageDeclaration ImportDeclarations TypeDeclarations .
    (42) TypeDeclarations -> TypeDeclarations . TypeDeclaration
    (50) TypeDeclaration -> . ClassDeclaration
    (51) TypeDeclaration -> . SEMI
    (59) ClassDeclaration -> . Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody
    (60) ClassDeclaration -> . CLASS IDENTIFIER decl_mark_2 ClassBody
    (52) Modifiers -> . Modifier
    (53) Modifiers -> . Modifiers Modifier
    (54) Modifier -> . STATIC
    (55) Modifier -> . FINAL
    (56) Modifier -> . PRIVATE
    (57) Modifier -> . PROTECTED
    (58) Modifier -> . PUBLIC

    $end            reduce using rule 32 (CompilationUnit -> PackageDeclaration ImportDeclarations TypeDeclarations .)
    SEMI            shift and go to state 7
    CLASS           shift and go to state 15
    STATIC          shift and go to state 17
    FINAL           shift and go to state 18
    PRIVATE         shift and go to state 19
    PROTECTED       shift and go to state 20
    PUBLIC          shift and go to state 21

    TypeDeclaration                shift and go to state 26
    ClassDeclaration               shift and go to state 12
    Modifiers                      shift and go to state 14
    Modifier                       shift and go to state 16

state 34

    (43) PackageDeclaration -> PACKAGE IDENTIFIER SEMI .

    SEMI            reduce using rule 43 (PackageDeclaration -> PACKAGE IDENTIFIER SEMI .)
    IMPORT          reduce using rule 43 (PackageDeclaration -> PACKAGE IDENTIFIER SEMI .)
    CLASS           reduce using rule 43 (PackageDeclaration -> PACKAGE IDENTIFIER SEMI .)
    STATIC          reduce using rule 43 (PackageDeclaration -> PACKAGE IDENTIFIER SEMI .)
    FINAL           reduce using rule 43 (PackageDeclaration -> PACKAGE IDENTIFIER SEMI .)
    PRIVATE         reduce using rule 43 (PackageDeclaration -> PACKAGE IDENTIFIER SEMI .)
    PROTECTED       reduce using rule 43 (PackageDeclaration -> PACKAGE IDENTIFIER SEMI .)
    PUBLIC          reduce using rule 43 (PackageDeclaration -> PACKAGE IDENTIFIER SEMI .)
    $end            reduce using rule 43 (PackageDeclaration -> PACKAGE IDENTIFIER SEMI .)


state 35

    (46) SingleTypeImportDeclaration -> IMPORT import_identifier SEMI .

    SEMI            reduce using rule 46 (SingleTypeImportDeclaration -> IMPORT import_identifier SEMI .)
    IMPORT          reduce using rule 46 (SingleTypeImportDeclaration -> IMPORT import_identifier SEMI .)
    CLASS           reduce using rule 46 (SingleTypeImportDeclaration -> IMPORT import_identifier SEMI .)
    STATIC          reduce using rule 46 (SingleTypeImportDeclaration -> IMPORT import_identifier SEMI .)
    FINAL           reduce using rule 46 (SingleTypeImportDeclaration -> IMPORT import_identifier SEMI .)
    PRIVATE         reduce using rule 46 (SingleTypeImportDeclaration -> IMPORT import_identifier SEMI .)
    PROTECTED       reduce using rule 46 (SingleTypeImportDeclaration -> IMPORT import_identifier SEMI .)
    PUBLIC          reduce using rule 46 (SingleTypeImportDeclaration -> IMPORT import_identifier SEMI .)
    $end            reduce using rule 46 (SingleTypeImportDeclaration -> IMPORT import_identifier SEMI .)


state 36

    (47) TypeImportOnDemandDeclaration -> IMPORT import_identifier DOT . MUL SEMI
    (48) import_identifier -> import_identifier DOT . IDENTIFIER

    MUL             shift and go to state 39
    IDENTIFIER      shift and go to state 40


state 37

    (59) ClassDeclaration -> Modifiers CLASS IDENTIFIER . decl_mark_2 ClassBody
    (298) decl_mark_2 -> .

    LBRACE          reduce using rule 298 (decl_mark_2 -> .)

    decl_mark_2                    shift and go to state 41

state 38

    (60) ClassDeclaration -> CLASS IDENTIFIER decl_mark_2 . ClassBody
    (61) ClassBody -> . LBRACE RBRACE
    (62) ClassBody -> . LBRACE ClassBodyDeclarations RBRACE

    LBRACE          shift and go to state 43

    ClassBody                      shift and go to state 42

state 39

    (47) TypeImportOnDemandDeclaration -> IMPORT import_identifier DOT MUL . SEMI

    SEMI            shift and go to state 44


state 40

    (48) import_identifier -> import_identifier DOT IDENTIFIER .

    SEMI            reduce using rule 48 (import_identifier -> import_identifier DOT IDENTIFIER .)
    DOT             reduce using rule 48 (import_identifier -> import_identifier DOT IDENTIFIER .)


state 41

    (59) ClassDeclaration -> Modifiers CLASS IDENTIFIER decl_mark_2 . ClassBody
    (61) ClassBody -> . LBRACE RBRACE
    (62) ClassBody -> . LBRACE ClassBodyDeclarations RBRACE

    LBRACE          shift and go to state 43

    ClassBody                      shift and go to state 45

state 42

    (60) ClassDeclaration -> CLASS IDENTIFIER decl_mark_2 ClassBody .

    SEMI            reduce using rule 60 (ClassDeclaration -> CLASS IDENTIFIER decl_mark_2 ClassBody .)
    CLASS           reduce using rule 60 (ClassDeclaration -> CLASS IDENTIFIER decl_mark_2 ClassBody .)
    STATIC          reduce using rule 60 (ClassDeclaration -> CLASS IDENTIFIER decl_mark_2 ClassBody .)
    FINAL           reduce using rule 60 (ClassDeclaration -> CLASS IDENTIFIER decl_mark_2 ClassBody .)
    PRIVATE         reduce using rule 60 (ClassDeclaration -> CLASS IDENTIFIER decl_mark_2 ClassBody .)
    PROTECTED       reduce using rule 60 (ClassDeclaration -> CLASS IDENTIFIER decl_mark_2 ClassBody .)
    PUBLIC          reduce using rule 60 (ClassDeclaration -> CLASS IDENTIFIER decl_mark_2 ClassBody .)
    $end            reduce using rule 60 (ClassDeclaration -> CLASS IDENTIFIER decl_mark_2 ClassBody .)


state 43

    (61) ClassBody -> LBRACE . RBRACE
    (62) ClassBody -> LBRACE . ClassBodyDeclarations RBRACE
    (63) ClassBodyDeclarations -> . ClassBodyDeclaration
    (64) ClassBodyDeclarations -> . ClassBodyDeclarations ClassBodyDeclaration
    (65) ClassBodyDeclaration -> . ClassMemberDeclaration
    (66) ClassBodyDeclaration -> . ConstructorDeclaration
    (67) ClassMemberDeclaration -> . FieldDeclaration
    (68) ClassMemberDeclaration -> . MethodDeclaration
    (90) ConstructorDeclaration -> . Modifiers ConstructorDeclarator ConstructorBody
    (91) ConstructorDeclaration -> . ConstructorDeclarator ConstructorBody
    (69) FieldDeclaration -> . Modifiers Type VariableDeclarators SEMI
    (70) FieldDeclaration -> . Type VariableDeclarators SEMI
    (78) MethodDeclaration -> . MethodHeader MethodBody
    (52) Modifiers -> . Modifier
    (53) Modifiers -> . Modifiers Modifier
    (92) ConstructorDeclarator -> . SimpleName LPAREN FormalParameterList RPAREN
    (93) ConstructorDeclarator -> . SimpleName LPAREN RPAREN
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (79) MethodHeader -> . Modifiers Type MethodDeclarator
    (80) MethodHeader -> . Type MethodDeclarator
    (81) MethodHeader -> . Modifiers VOID MethodDeclarator
    (82) MethodHeader -> . VOID MethodDeclarator
    (54) Modifier -> . STATIC
    (55) Modifier -> . FINAL
    (56) Modifier -> . PRIVATE
    (57) Modifier -> . PROTECTED
    (58) Modifier -> . PUBLIC
    (30) SimpleName -> . IDENTIFIER
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (31) QualifiedName -> . Name DOT IDENTIFIER

    RBRACE          shift and go to state 46
    VOID            shift and go to state 60
    STATIC          shift and go to state 17
    FINAL           shift and go to state 18
    PRIVATE         shift and go to state 19
    PROTECTED       shift and go to state 20
    PUBLIC          shift and go to state 21
    IDENTIFIER      shift and go to state 61
    BOOLEAN         shift and go to state 63
    BYTE            shift and go to state 69
    SHORT           shift and go to state 70
    INT             shift and go to state 71
    LONG            shift and go to state 72
    CHAR            shift and go to state 73
    FLOAT           shift and go to state 74
    DOUBLE          shift and go to state 75

    ClassBodyDeclarations          shift and go to state 47
    ClassBodyDeclaration           shift and go to state 48
    ClassMemberDeclaration         shift and go to state 49
    ConstructorDeclaration         shift and go to state 50
    FieldDeclaration               shift and go to state 51
    MethodDeclaration              shift and go to state 52
    Modifiers                      shift and go to state 53
    ConstructorDeclarator          shift and go to state 54
    Type                           shift and go to state 55
    MethodHeader                   shift and go to state 56
    Modifier                       shift and go to state 16
    SimpleName                     shift and go to state 57
    PrimitiveType                  shift and go to state 58
    ReferenceType                  shift and go to state 59
    NumericType                    shift and go to state 62
    ArrayType                      shift and go to state 64
    ClassType                      shift and go to state 65
    IntegralType                   shift and go to state 66
    FloatingPointType              shift and go to state 67
    Name                           shift and go to state 68
    QualifiedName                  shift and go to state 76

state 44

    (47) TypeImportOnDemandDeclaration -> IMPORT import_identifier DOT MUL SEMI .

    SEMI            reduce using rule 47 (TypeImportOnDemandDeclaration -> IMPORT import_identifier DOT MUL SEMI .)
    IMPORT          reduce using rule 47 (TypeImportOnDemandDeclaration -> IMPORT import_identifier DOT MUL SEMI .)
    CLASS           reduce using rule 47 (TypeImportOnDemandDeclaration -> IMPORT import_identifier DOT MUL SEMI .)
    STATIC          reduce using rule 47 (TypeImportOnDemandDeclaration -> IMPORT import_identifier DOT MUL SEMI .)
    FINAL           reduce using rule 47 (TypeImportOnDemandDeclaration -> IMPORT import_identifier DOT MUL SEMI .)
    PRIVATE         reduce using rule 47 (TypeImportOnDemandDeclaration -> IMPORT import_identifier DOT MUL SEMI .)
    PROTECTED       reduce using rule 47 (TypeImportOnDemandDeclaration -> IMPORT import_identifier DOT MUL SEMI .)
    PUBLIC          reduce using rule 47 (TypeImportOnDemandDeclaration -> IMPORT import_identifier DOT MUL SEMI .)
    $end            reduce using rule 47 (TypeImportOnDemandDeclaration -> IMPORT import_identifier DOT MUL SEMI .)


state 45

    (59) ClassDeclaration -> Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody .

    SEMI            reduce using rule 59 (ClassDeclaration -> Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody .)
    CLASS           reduce using rule 59 (ClassDeclaration -> Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody .)
    STATIC          reduce using rule 59 (ClassDeclaration -> Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody .)
    FINAL           reduce using rule 59 (ClassDeclaration -> Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody .)
    PRIVATE         reduce using rule 59 (ClassDeclaration -> Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody .)
    PROTECTED       reduce using rule 59 (ClassDeclaration -> Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody .)
    PUBLIC          reduce using rule 59 (ClassDeclaration -> Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody .)
    $end            reduce using rule 59 (ClassDeclaration -> Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody .)


state 46

    (61) ClassBody -> LBRACE RBRACE .

    SEMI            reduce using rule 61 (ClassBody -> LBRACE RBRACE .)
    CLASS           reduce using rule 61 (ClassBody -> LBRACE RBRACE .)
    STATIC          reduce using rule 61 (ClassBody -> LBRACE RBRACE .)
    FINAL           reduce using rule 61 (ClassBody -> LBRACE RBRACE .)
    PRIVATE         reduce using rule 61 (ClassBody -> LBRACE RBRACE .)
    PROTECTED       reduce using rule 61 (ClassBody -> LBRACE RBRACE .)
    PUBLIC          reduce using rule 61 (ClassBody -> LBRACE RBRACE .)
    $end            reduce using rule 61 (ClassBody -> LBRACE RBRACE .)


state 47

    (62) ClassBody -> LBRACE ClassBodyDeclarations . RBRACE
    (64) ClassBodyDeclarations -> ClassBodyDeclarations . ClassBodyDeclaration
    (65) ClassBodyDeclaration -> . ClassMemberDeclaration
    (66) ClassBodyDeclaration -> . ConstructorDeclaration
    (67) ClassMemberDeclaration -> . FieldDeclaration
    (68) ClassMemberDeclaration -> . MethodDeclaration
    (90) ConstructorDeclaration -> . Modifiers ConstructorDeclarator ConstructorBody
    (91) ConstructorDeclaration -> . ConstructorDeclarator ConstructorBody
    (69) FieldDeclaration -> . Modifiers Type VariableDeclarators SEMI
    (70) FieldDeclaration -> . Type VariableDeclarators SEMI
    (78) MethodDeclaration -> . MethodHeader MethodBody
    (52) Modifiers -> . Modifier
    (53) Modifiers -> . Modifiers Modifier
    (92) ConstructorDeclarator -> . SimpleName LPAREN FormalParameterList RPAREN
    (93) ConstructorDeclarator -> . SimpleName LPAREN RPAREN
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (79) MethodHeader -> . Modifiers Type MethodDeclarator
    (80) MethodHeader -> . Type MethodDeclarator
    (81) MethodHeader -> . Modifiers VOID MethodDeclarator
    (82) MethodHeader -> . VOID MethodDeclarator
    (54) Modifier -> . STATIC
    (55) Modifier -> . FINAL
    (56) Modifier -> . PRIVATE
    (57) Modifier -> . PROTECTED
    (58) Modifier -> . PUBLIC
    (30) SimpleName -> . IDENTIFIER
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (31) QualifiedName -> . Name DOT IDENTIFIER

    RBRACE          shift and go to state 77
    VOID            shift and go to state 60
    STATIC          shift and go to state 17
    FINAL           shift and go to state 18
    PRIVATE         shift and go to state 19
    PROTECTED       shift and go to state 20
    PUBLIC          shift and go to state 21
    IDENTIFIER      shift and go to state 61
    BOOLEAN         shift and go to state 63
    BYTE            shift and go to state 69
    SHORT           shift and go to state 70
    INT             shift and go to state 71
    LONG            shift and go to state 72
    CHAR            shift and go to state 73
    FLOAT           shift and go to state 74
    DOUBLE          shift and go to state 75

    ClassBodyDeclaration           shift and go to state 78
    ClassMemberDeclaration         shift and go to state 49
    ConstructorDeclaration         shift and go to state 50
    FieldDeclaration               shift and go to state 51
    MethodDeclaration              shift and go to state 52
    Modifiers                      shift and go to state 53
    ConstructorDeclarator          shift and go to state 54
    Type                           shift and go to state 55
    MethodHeader                   shift and go to state 56
    Modifier                       shift and go to state 16
    SimpleName                     shift and go to state 57
    PrimitiveType                  shift and go to state 58
    ReferenceType                  shift and go to state 59
    NumericType                    shift and go to state 62
    ArrayType                      shift and go to state 64
    ClassType                      shift and go to state 65
    IntegralType                   shift and go to state 66
    FloatingPointType              shift and go to state 67
    Name                           shift and go to state 68
    QualifiedName                  shift and go to state 76

state 48

    (63) ClassBodyDeclarations -> ClassBodyDeclaration .

    RBRACE          reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    VOID            reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    STATIC          reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    FINAL           reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    PRIVATE         reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    PROTECTED       reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    PUBLIC          reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    IDENTIFIER      reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    BOOLEAN         reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    BYTE            reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    SHORT           reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    INT             reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    LONG            reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    CHAR            reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    FLOAT           reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    DOUBLE          reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)


state 49

    (65) ClassBodyDeclaration -> ClassMemberDeclaration .

    RBRACE          reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    VOID            reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    STATIC          reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    FINAL           reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    PRIVATE         reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    PROTECTED       reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    PUBLIC          reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    IDENTIFIER      reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    BOOLEAN         reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    BYTE            reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    SHORT           reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    INT             reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    LONG            reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    CHAR            reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    FLOAT           reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    DOUBLE          reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)


state 50

    (66) ClassBodyDeclaration -> ConstructorDeclaration .

    RBRACE          reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    VOID            reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    STATIC          reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    FINAL           reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    PRIVATE         reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    PROTECTED       reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    PUBLIC          reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    IDENTIFIER      reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    BOOLEAN         reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    BYTE            reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    SHORT           reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    INT             reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    LONG            reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    CHAR            reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    FLOAT           reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    DOUBLE          reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)


state 51

    (67) ClassMemberDeclaration -> FieldDeclaration .

    RBRACE          reduce using rule 67 (ClassMemberDeclaration -> FieldDeclaration .)
    VOID            reduce using rule 67 (ClassMemberDeclaration -> FieldDeclaration .)
    STATIC          reduce using rule 67 (ClassMemberDeclaration -> FieldDeclaration .)
    FINAL           reduce using rule 67 (ClassMemberDeclaration -> FieldDeclaration .)
    PRIVATE         reduce using rule 67 (ClassMemberDeclaration -> FieldDeclaration .)
    PROTECTED       reduce using rule 67 (ClassMemberDeclaration -> FieldDeclaration .)
    PUBLIC          reduce using rule 67 (ClassMemberDeclaration -> FieldDeclaration .)
    IDENTIFIER      reduce using rule 67 (ClassMemberDeclaration -> FieldDeclaration .)
    BOOLEAN         reduce using rule 67 (ClassMemberDeclaration -> FieldDeclaration .)
    BYTE            reduce using rule 67 (ClassMemberDeclaration -> FieldDeclaration .)
    SHORT           reduce using rule 67 (ClassMemberDeclaration -> FieldDeclaration .)
    INT             reduce using rule 67 (ClassMemberDeclaration -> FieldDeclaration .)
    LONG            reduce using rule 67 (ClassMemberDeclaration -> FieldDeclaration .)
    CHAR            reduce using rule 67 (ClassMemberDeclaration -> FieldDeclaration .)
    FLOAT           reduce using rule 67 (ClassMemberDeclaration -> FieldDeclaration .)
    DOUBLE          reduce using rule 67 (ClassMemberDeclaration -> FieldDeclaration .)


state 52

    (68) ClassMemberDeclaration -> MethodDeclaration .

    RBRACE          reduce using rule 68 (ClassMemberDeclaration -> MethodDeclaration .)
    VOID            reduce using rule 68 (ClassMemberDeclaration -> MethodDeclaration .)
    STATIC          reduce using rule 68 (ClassMemberDeclaration -> MethodDeclaration .)
    FINAL           reduce using rule 68 (ClassMemberDeclaration -> MethodDeclaration .)
    PRIVATE         reduce using rule 68 (ClassMemberDeclaration -> MethodDeclaration .)
    PROTECTED       reduce using rule 68 (ClassMemberDeclaration -> MethodDeclaration .)
    PUBLIC          reduce using rule 68 (ClassMemberDeclaration -> MethodDeclaration .)
    IDENTIFIER      reduce using rule 68 (ClassMemberDeclaration -> MethodDeclaration .)
    BOOLEAN         reduce using rule 68 (ClassMemberDeclaration -> MethodDeclaration .)
    BYTE            reduce using rule 68 (ClassMemberDeclaration -> MethodDeclaration .)
    SHORT           reduce using rule 68 (ClassMemberDeclaration -> MethodDeclaration .)
    INT             reduce using rule 68 (ClassMemberDeclaration -> MethodDeclaration .)
    LONG            reduce using rule 68 (ClassMemberDeclaration -> MethodDeclaration .)
    CHAR            reduce using rule 68 (ClassMemberDeclaration -> MethodDeclaration .)
    FLOAT           reduce using rule 68 (ClassMemberDeclaration -> MethodDeclaration .)
    DOUBLE          reduce using rule 68 (ClassMemberDeclaration -> MethodDeclaration .)


state 53

    (90) ConstructorDeclaration -> Modifiers . ConstructorDeclarator ConstructorBody
    (69) FieldDeclaration -> Modifiers . Type VariableDeclarators SEMI
    (53) Modifiers -> Modifiers . Modifier
    (79) MethodHeader -> Modifiers . Type MethodDeclarator
    (81) MethodHeader -> Modifiers . VOID MethodDeclarator
    (92) ConstructorDeclarator -> . SimpleName LPAREN FormalParameterList RPAREN
    (93) ConstructorDeclarator -> . SimpleName LPAREN RPAREN
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (54) Modifier -> . STATIC
    (55) Modifier -> . FINAL
    (56) Modifier -> . PRIVATE
    (57) Modifier -> . PROTECTED
    (58) Modifier -> . PUBLIC
    (30) SimpleName -> . IDENTIFIER
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (31) QualifiedName -> . Name DOT IDENTIFIER

    VOID            shift and go to state 81
    STATIC          shift and go to state 17
    FINAL           shift and go to state 18
    PRIVATE         shift and go to state 19
    PROTECTED       shift and go to state 20
    PUBLIC          shift and go to state 21
    IDENTIFIER      shift and go to state 61
    BOOLEAN         shift and go to state 63
    BYTE            shift and go to state 69
    SHORT           shift and go to state 70
    INT             shift and go to state 71
    LONG            shift and go to state 72
    CHAR            shift and go to state 73
    FLOAT           shift and go to state 74
    DOUBLE          shift and go to state 75

    ConstructorDeclarator          shift and go to state 79
    Type                           shift and go to state 80
    Modifier                       shift and go to state 31
    SimpleName                     shift and go to state 57
    PrimitiveType                  shift and go to state 58
    ReferenceType                  shift and go to state 59
    NumericType                    shift and go to state 62
    ArrayType                      shift and go to state 64
    ClassType                      shift and go to state 65
    IntegralType                   shift and go to state 66
    FloatingPointType              shift and go to state 67
    Name                           shift and go to state 68
    QualifiedName                  shift and go to state 76

state 54

    (91) ConstructorDeclaration -> ConstructorDeclarator . ConstructorBody
    (94) ConstructorBody -> .
    (95) ConstructorBody -> . LBRACE BlockStatements RBRACE
    (96) ConstructorBody -> . LBRACE RBRACE

    RBRACE          reduce using rule 94 (ConstructorBody -> .)
    VOID            reduce using rule 94 (ConstructorBody -> .)
    STATIC          reduce using rule 94 (ConstructorBody -> .)
    FINAL           reduce using rule 94 (ConstructorBody -> .)
    PRIVATE         reduce using rule 94 (ConstructorBody -> .)
    PROTECTED       reduce using rule 94 (ConstructorBody -> .)
    PUBLIC          reduce using rule 94 (ConstructorBody -> .)
    IDENTIFIER      reduce using rule 94 (ConstructorBody -> .)
    BOOLEAN         reduce using rule 94 (ConstructorBody -> .)
    BYTE            reduce using rule 94 (ConstructorBody -> .)
    SHORT           reduce using rule 94 (ConstructorBody -> .)
    INT             reduce using rule 94 (ConstructorBody -> .)
    LONG            reduce using rule 94 (ConstructorBody -> .)
    CHAR            reduce using rule 94 (ConstructorBody -> .)
    FLOAT           reduce using rule 94 (ConstructorBody -> .)
    DOUBLE          reduce using rule 94 (ConstructorBody -> .)
    LBRACE          shift and go to state 83

    ConstructorBody                shift and go to state 82

state 55

    (70) FieldDeclaration -> Type . VariableDeclarators SEMI
    (80) MethodHeader -> Type . MethodDeclarator
    (71) VariableDeclarators -> . VariableDeclarator
    (72) VariableDeclarators -> . VariableDeclarators COMMA VariableDeclarator
    (83) MethodDeclarator -> . IDENTIFIER LPAREN RPAREN
    (84) MethodDeclarator -> . IDENTIFIER LPAREN FormalParameterList RPAREN
    (73) VariableDeclarator -> . VariableDeclaratorId
    (74) VariableDeclarator -> . VariableDeclaratorId ASSIGN VariableInitializer
    (75) VariableDeclaratorId -> . IDENTIFIER
    (76) VariableDeclaratorId -> . IDENTIFIER Dims

    IDENTIFIER      shift and go to state 87

    VariableDeclarators            shift and go to state 84
    MethodDeclarator               shift and go to state 85
    VariableDeclarator             shift and go to state 86
    VariableDeclaratorId           shift and go to state 88

state 56

    (78) MethodDeclaration -> MethodHeader . MethodBody
    (88) MethodBody -> . Block
    (89) MethodBody -> . SEMI
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE

    SEMI            shift and go to state 91
    LBRACE          shift and go to state 92

    MethodBody                     shift and go to state 89
    Block                          shift and go to state 90

state 57

    (92) ConstructorDeclarator -> SimpleName . LPAREN FormalParameterList RPAREN
    (93) ConstructorDeclarator -> SimpleName . LPAREN RPAREN
    (28) Name -> SimpleName .

    LPAREN          shift and go to state 93
    DOT             reduce using rule 28 (Name -> SimpleName .)
    LBRACK          reduce using rule 28 (Name -> SimpleName .)
    IDENTIFIER      reduce using rule 28 (Name -> SimpleName .)


state 58

    (10) Type -> PrimitiveType .
    (26) ArrayType -> PrimitiveType . Dims
    (215) Dims -> . LBRACK RBRACK
    (216) Dims -> . Dims LBRACK RBRACK

    IDENTIFIER      reduce using rule 10 (Type -> PrimitiveType .)
    LBRACK          shift and go to state 95

    Dims                           shift and go to state 94

state 59

    (11) Type -> ReferenceType .

    IDENTIFIER      reduce using rule 11 (Type -> ReferenceType .)


state 60

    (82) MethodHeader -> VOID . MethodDeclarator
    (83) MethodDeclarator -> . IDENTIFIER LPAREN RPAREN
    (84) MethodDeclarator -> . IDENTIFIER LPAREN FormalParameterList RPAREN

    IDENTIFIER      shift and go to state 97

    MethodDeclarator               shift and go to state 96

state 61

    (30) SimpleName -> IDENTIFIER .

    LPAREN          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    DOT             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    LBRACK          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    ASSIGN          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 30 (SimpleName -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 30 (SimpleName -> IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 30 (SimpleName -> IDENTIFIER .)
    URSHIFT_ASSIGN  reduce using rule 30 (SimpleName -> IDENTIFIER .)
    INC             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    DEC             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    MUL             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    DIV             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    MOD             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    ADD             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    SUB             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    LSHIFT          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    RSHIFT          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    URSHIFT         reduce using rule 30 (SimpleName -> IDENTIFIER .)
    LT              reduce using rule 30 (SimpleName -> IDENTIFIER .)
    GT              reduce using rule 30 (SimpleName -> IDENTIFIER .)
    LE              reduce using rule 30 (SimpleName -> IDENTIFIER .)
    GE              reduce using rule 30 (SimpleName -> IDENTIFIER .)
    EQUAL           reduce using rule 30 (SimpleName -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 30 (SimpleName -> IDENTIFIER .)
    BITAND          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    CARET           reduce using rule 30 (SimpleName -> IDENTIFIER .)
    BITOR           reduce using rule 30 (SimpleName -> IDENTIFIER .)
    AND             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    QUESTION        reduce using rule 30 (SimpleName -> IDENTIFIER .)
    OR              reduce using rule 30 (SimpleName -> IDENTIFIER .)
    RPAREN          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    SEMI            reduce using rule 30 (SimpleName -> IDENTIFIER .)
    COMMA           reduce using rule 30 (SimpleName -> IDENTIFIER .)
    RBRACK          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    COLON           reduce using rule 30 (SimpleName -> IDENTIFIER .)


state 62

    (12) PrimitiveType -> NumericType .

    LBRACK          reduce using rule 12 (PrimitiveType -> NumericType .)
    IDENTIFIER      reduce using rule 12 (PrimitiveType -> NumericType .)
    RPAREN          reduce using rule 12 (PrimitiveType -> NumericType .)


state 63

    (13) PrimitiveType -> BOOLEAN .

    LBRACK          reduce using rule 13 (PrimitiveType -> BOOLEAN .)
    IDENTIFIER      reduce using rule 13 (PrimitiveType -> BOOLEAN .)
    RPAREN          reduce using rule 13 (PrimitiveType -> BOOLEAN .)


state 64

    (23) ReferenceType -> ArrayType .

    IDENTIFIER      reduce using rule 23 (ReferenceType -> ArrayType .)


state 65

    (24) ReferenceType -> ClassType .

    IDENTIFIER      reduce using rule 24 (ReferenceType -> ClassType .)


state 66

    (14) NumericType -> IntegralType .

    LBRACK          reduce using rule 14 (NumericType -> IntegralType .)
    IDENTIFIER      reduce using rule 14 (NumericType -> IntegralType .)
    RPAREN          reduce using rule 14 (NumericType -> IntegralType .)


state 67

    (15) NumericType -> FloatingPointType .

    LBRACK          reduce using rule 15 (NumericType -> FloatingPointType .)
    IDENTIFIER      reduce using rule 15 (NumericType -> FloatingPointType .)
    RPAREN          reduce using rule 15 (NumericType -> FloatingPointType .)


state 68

    (27) ArrayType -> Name . Dims
    (25) ClassType -> Name .
    (31) QualifiedName -> Name . DOT IDENTIFIER
    (215) Dims -> . LBRACK RBRACK
    (216) Dims -> . Dims LBRACK RBRACK

    IDENTIFIER      reduce using rule 25 (ClassType -> Name .)
    DOT             shift and go to state 99
    LBRACK          shift and go to state 95

    Dims                           shift and go to state 98

state 69

    (16) IntegralType -> BYTE .

    LBRACK          reduce using rule 16 (IntegralType -> BYTE .)
    IDENTIFIER      reduce using rule 16 (IntegralType -> BYTE .)
    RPAREN          reduce using rule 16 (IntegralType -> BYTE .)


state 70

    (17) IntegralType -> SHORT .

    LBRACK          reduce using rule 17 (IntegralType -> SHORT .)
    IDENTIFIER      reduce using rule 17 (IntegralType -> SHORT .)
    RPAREN          reduce using rule 17 (IntegralType -> SHORT .)


state 71

    (18) IntegralType -> INT .

    LBRACK          reduce using rule 18 (IntegralType -> INT .)
    IDENTIFIER      reduce using rule 18 (IntegralType -> INT .)
    RPAREN          reduce using rule 18 (IntegralType -> INT .)


state 72

    (19) IntegralType -> LONG .

    LBRACK          reduce using rule 19 (IntegralType -> LONG .)
    IDENTIFIER      reduce using rule 19 (IntegralType -> LONG .)
    RPAREN          reduce using rule 19 (IntegralType -> LONG .)


state 73

    (20) IntegralType -> CHAR .

    LBRACK          reduce using rule 20 (IntegralType -> CHAR .)
    IDENTIFIER      reduce using rule 20 (IntegralType -> CHAR .)
    RPAREN          reduce using rule 20 (IntegralType -> CHAR .)


state 74

    (21) FloatingPointType -> FLOAT .

    LBRACK          reduce using rule 21 (FloatingPointType -> FLOAT .)
    IDENTIFIER      reduce using rule 21 (FloatingPointType -> FLOAT .)
    RPAREN          reduce using rule 21 (FloatingPointType -> FLOAT .)


state 75

    (22) FloatingPointType -> DOUBLE .

    LBRACK          reduce using rule 22 (FloatingPointType -> DOUBLE .)
    IDENTIFIER      reduce using rule 22 (FloatingPointType -> DOUBLE .)
    RPAREN          reduce using rule 22 (FloatingPointType -> DOUBLE .)


state 76

    (29) Name -> QualifiedName .

    DOT             reduce using rule 29 (Name -> QualifiedName .)
    LBRACK          reduce using rule 29 (Name -> QualifiedName .)
    IDENTIFIER      reduce using rule 29 (Name -> QualifiedName .)
    LPAREN          reduce using rule 29 (Name -> QualifiedName .)
    ASSIGN          reduce using rule 29 (Name -> QualifiedName .)
    ADD_ASSIGN      reduce using rule 29 (Name -> QualifiedName .)
    SUB_ASSIGN      reduce using rule 29 (Name -> QualifiedName .)
    MUL_ASSIGN      reduce using rule 29 (Name -> QualifiedName .)
    DIV_ASSIGN      reduce using rule 29 (Name -> QualifiedName .)
    AND_ASSIGN      reduce using rule 29 (Name -> QualifiedName .)
    OR_ASSIGN       reduce using rule 29 (Name -> QualifiedName .)
    XOR_ASSIGN      reduce using rule 29 (Name -> QualifiedName .)
    MOD_ASSIGN      reduce using rule 29 (Name -> QualifiedName .)
    LSHIFT_ASSIGN   reduce using rule 29 (Name -> QualifiedName .)
    RSHIFT_ASSIGN   reduce using rule 29 (Name -> QualifiedName .)
    URSHIFT_ASSIGN  reduce using rule 29 (Name -> QualifiedName .)
    INC             reduce using rule 29 (Name -> QualifiedName .)
    DEC             reduce using rule 29 (Name -> QualifiedName .)
    MUL             reduce using rule 29 (Name -> QualifiedName .)
    DIV             reduce using rule 29 (Name -> QualifiedName .)
    MOD             reduce using rule 29 (Name -> QualifiedName .)
    ADD             reduce using rule 29 (Name -> QualifiedName .)
    SUB             reduce using rule 29 (Name -> QualifiedName .)
    LSHIFT          reduce using rule 29 (Name -> QualifiedName .)
    RSHIFT          reduce using rule 29 (Name -> QualifiedName .)
    URSHIFT         reduce using rule 29 (Name -> QualifiedName .)
    LT              reduce using rule 29 (Name -> QualifiedName .)
    GT              reduce using rule 29 (Name -> QualifiedName .)
    LE              reduce using rule 29 (Name -> QualifiedName .)
    GE              reduce using rule 29 (Name -> QualifiedName .)
    EQUAL           reduce using rule 29 (Name -> QualifiedName .)
    NOTEQUAL        reduce using rule 29 (Name -> QualifiedName .)
    BITAND          reduce using rule 29 (Name -> QualifiedName .)
    CARET           reduce using rule 29 (Name -> QualifiedName .)
    BITOR           reduce using rule 29 (Name -> QualifiedName .)
    AND             reduce using rule 29 (Name -> QualifiedName .)
    QUESTION        reduce using rule 29 (Name -> QualifiedName .)
    OR              reduce using rule 29 (Name -> QualifiedName .)
    RPAREN          reduce using rule 29 (Name -> QualifiedName .)
    SEMI            reduce using rule 29 (Name -> QualifiedName .)
    COMMA           reduce using rule 29 (Name -> QualifiedName .)
    RBRACK          reduce using rule 29 (Name -> QualifiedName .)
    COLON           reduce using rule 29 (Name -> QualifiedName .)


state 77

    (62) ClassBody -> LBRACE ClassBodyDeclarations RBRACE .

    SEMI            reduce using rule 62 (ClassBody -> LBRACE ClassBodyDeclarations RBRACE .)
    CLASS           reduce using rule 62 (ClassBody -> LBRACE ClassBodyDeclarations RBRACE .)
    STATIC          reduce using rule 62 (ClassBody -> LBRACE ClassBodyDeclarations RBRACE .)
    FINAL           reduce using rule 62 (ClassBody -> LBRACE ClassBodyDeclarations RBRACE .)
    PRIVATE         reduce using rule 62 (ClassBody -> LBRACE ClassBodyDeclarations RBRACE .)
    PROTECTED       reduce using rule 62 (ClassBody -> LBRACE ClassBodyDeclarations RBRACE .)
    PUBLIC          reduce using rule 62 (ClassBody -> LBRACE ClassBodyDeclarations RBRACE .)
    $end            reduce using rule 62 (ClassBody -> LBRACE ClassBodyDeclarations RBRACE .)


state 78

    (64) ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .

    RBRACE          reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    VOID            reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    STATIC          reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    FINAL           reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    PRIVATE         reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    PROTECTED       reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    PUBLIC          reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    IDENTIFIER      reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    BOOLEAN         reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    BYTE            reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    SHORT           reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    INT             reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    LONG            reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    CHAR            reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    FLOAT           reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    DOUBLE          reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)


state 79

    (90) ConstructorDeclaration -> Modifiers ConstructorDeclarator . ConstructorBody
    (94) ConstructorBody -> .
    (95) ConstructorBody -> . LBRACE BlockStatements RBRACE
    (96) ConstructorBody -> . LBRACE RBRACE

    RBRACE          reduce using rule 94 (ConstructorBody -> .)
    VOID            reduce using rule 94 (ConstructorBody -> .)
    STATIC          reduce using rule 94 (ConstructorBody -> .)
    FINAL           reduce using rule 94 (ConstructorBody -> .)
    PRIVATE         reduce using rule 94 (ConstructorBody -> .)
    PROTECTED       reduce using rule 94 (ConstructorBody -> .)
    PUBLIC          reduce using rule 94 (ConstructorBody -> .)
    IDENTIFIER      reduce using rule 94 (ConstructorBody -> .)
    BOOLEAN         reduce using rule 94 (ConstructorBody -> .)
    BYTE            reduce using rule 94 (ConstructorBody -> .)
    SHORT           reduce using rule 94 (ConstructorBody -> .)
    INT             reduce using rule 94 (ConstructorBody -> .)
    LONG            reduce using rule 94 (ConstructorBody -> .)
    CHAR            reduce using rule 94 (ConstructorBody -> .)
    FLOAT           reduce using rule 94 (ConstructorBody -> .)
    DOUBLE          reduce using rule 94 (ConstructorBody -> .)
    LBRACE          shift and go to state 83

    ConstructorBody                shift and go to state 100

state 80

    (69) FieldDeclaration -> Modifiers Type . VariableDeclarators SEMI
    (79) MethodHeader -> Modifiers Type . MethodDeclarator
    (71) VariableDeclarators -> . VariableDeclarator
    (72) VariableDeclarators -> . VariableDeclarators COMMA VariableDeclarator
    (83) MethodDeclarator -> . IDENTIFIER LPAREN RPAREN
    (84) MethodDeclarator -> . IDENTIFIER LPAREN FormalParameterList RPAREN
    (73) VariableDeclarator -> . VariableDeclaratorId
    (74) VariableDeclarator -> . VariableDeclaratorId ASSIGN VariableInitializer
    (75) VariableDeclaratorId -> . IDENTIFIER
    (76) VariableDeclaratorId -> . IDENTIFIER Dims

    IDENTIFIER      shift and go to state 87

    VariableDeclarators            shift and go to state 101
    MethodDeclarator               shift and go to state 102
    VariableDeclarator             shift and go to state 86
    VariableDeclaratorId           shift and go to state 88

state 81

    (81) MethodHeader -> Modifiers VOID . MethodDeclarator
    (83) MethodDeclarator -> . IDENTIFIER LPAREN RPAREN
    (84) MethodDeclarator -> . IDENTIFIER LPAREN FormalParameterList RPAREN

    IDENTIFIER      shift and go to state 97

    MethodDeclarator               shift and go to state 103

state 82

    (91) ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .

    RBRACE          reduce using rule 91 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    VOID            reduce using rule 91 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    STATIC          reduce using rule 91 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    FINAL           reduce using rule 91 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    PRIVATE         reduce using rule 91 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    PROTECTED       reduce using rule 91 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    PUBLIC          reduce using rule 91 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    IDENTIFIER      reduce using rule 91 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    BOOLEAN         reduce using rule 91 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    BYTE            reduce using rule 91 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    SHORT           reduce using rule 91 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    INT             reduce using rule 91 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    LONG            reduce using rule 91 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    CHAR            reduce using rule 91 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    FLOAT           reduce using rule 91 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    DOUBLE          reduce using rule 91 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)


state 83

    (95) ConstructorBody -> LBRACE . BlockStatements RBRACE
    (96) ConstructorBody -> LBRACE . RBRACE
    (103) BlockStatements -> . BlockStatement
    (104) BlockStatements -> . BlockStatements BlockStatement
    (105) BlockStatement -> . LocalVariableDeclarationStatement
    (106) BlockStatement -> . Statement
    (107) LocalVariableDeclarationStatement -> . LocalVariableDeclaration SEMI
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (108) LocalVariableDeclaration -> . Type VariableDeclarators
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RBRACE          shift and go to state 105
    IDENTIFIER      shift and go to state 126
    IF              shift and go to state 127
    WHILE           shift and go to state 129
    FOR             shift and go to state 130
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    BOOLEAN         shift and go to state 63
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    BYTE            shift and go to state 69
    SHORT           shift and go to state 70
    INT             shift and go to state 71
    LONG            shift and go to state 72
    CHAR            shift and go to state 73
    FLOAT           shift and go to state 74
    DOUBLE          shift and go to state 75
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    BlockStatements                shift and go to state 104
    BlockStatement                 shift and go to state 106
    LocalVariableDeclarationStatement shift and go to state 107
    Statement                      shift and go to state 108
    LocalVariableDeclaration       shift and go to state 109
    StatementWithoutTrailingSubstatement shift and go to state 111
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    Type                           shift and go to state 117
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    PrimitiveType                  shift and go to state 58
    ReferenceType                  shift and go to state 59
    StatementExpression            shift and go to state 131
    NumericType                    shift and go to state 62
    ArrayType                      shift and go to state 64
    ClassType                      shift and go to state 65
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    IntegralType                   shift and go to state 66
    FloatingPointType              shift and go to state 67
    Name                           shift and go to state 144
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156

state 84

    (70) FieldDeclaration -> Type VariableDeclarators . SEMI
    (72) VariableDeclarators -> VariableDeclarators . COMMA VariableDeclarator

    SEMI            shift and go to state 166
    COMMA           shift and go to state 167


state 85

    (80) MethodHeader -> Type MethodDeclarator .

    SEMI            reduce using rule 80 (MethodHeader -> Type MethodDeclarator .)
    LBRACE          reduce using rule 80 (MethodHeader -> Type MethodDeclarator .)


state 86

    (71) VariableDeclarators -> VariableDeclarator .

    SEMI            reduce using rule 71 (VariableDeclarators -> VariableDeclarator .)
    COMMA           reduce using rule 71 (VariableDeclarators -> VariableDeclarator .)


state 87

    (83) MethodDeclarator -> IDENTIFIER . LPAREN RPAREN
    (84) MethodDeclarator -> IDENTIFIER . LPAREN FormalParameterList RPAREN
    (75) VariableDeclaratorId -> IDENTIFIER .
    (76) VariableDeclaratorId -> IDENTIFIER . Dims
    (215) Dims -> . LBRACK RBRACK
    (216) Dims -> . Dims LBRACK RBRACK

    LPAREN          shift and go to state 168
    ASSIGN          reduce using rule 75 (VariableDeclaratorId -> IDENTIFIER .)
    SEMI            reduce using rule 75 (VariableDeclaratorId -> IDENTIFIER .)
    COMMA           reduce using rule 75 (VariableDeclaratorId -> IDENTIFIER .)
    LBRACK          shift and go to state 95

    Dims                           shift and go to state 169

state 88

    (73) VariableDeclarator -> VariableDeclaratorId .
    (74) VariableDeclarator -> VariableDeclaratorId . ASSIGN VariableInitializer

    SEMI            reduce using rule 73 (VariableDeclarator -> VariableDeclaratorId .)
    COMMA           reduce using rule 73 (VariableDeclarator -> VariableDeclaratorId .)
    ASSIGN          shift and go to state 170


state 89

    (78) MethodDeclaration -> MethodHeader MethodBody .

    RBRACE          reduce using rule 78 (MethodDeclaration -> MethodHeader MethodBody .)
    VOID            reduce using rule 78 (MethodDeclaration -> MethodHeader MethodBody .)
    STATIC          reduce using rule 78 (MethodDeclaration -> MethodHeader MethodBody .)
    FINAL           reduce using rule 78 (MethodDeclaration -> MethodHeader MethodBody .)
    PRIVATE         reduce using rule 78 (MethodDeclaration -> MethodHeader MethodBody .)
    PROTECTED       reduce using rule 78 (MethodDeclaration -> MethodHeader MethodBody .)
    PUBLIC          reduce using rule 78 (MethodDeclaration -> MethodHeader MethodBody .)
    IDENTIFIER      reduce using rule 78 (MethodDeclaration -> MethodHeader MethodBody .)
    BOOLEAN         reduce using rule 78 (MethodDeclaration -> MethodHeader MethodBody .)
    BYTE            reduce using rule 78 (MethodDeclaration -> MethodHeader MethodBody .)
    SHORT           reduce using rule 78 (MethodDeclaration -> MethodHeader MethodBody .)
    INT             reduce using rule 78 (MethodDeclaration -> MethodHeader MethodBody .)
    LONG            reduce using rule 78 (MethodDeclaration -> MethodHeader MethodBody .)
    CHAR            reduce using rule 78 (MethodDeclaration -> MethodHeader MethodBody .)
    FLOAT           reduce using rule 78 (MethodDeclaration -> MethodHeader MethodBody .)
    DOUBLE          reduce using rule 78 (MethodDeclaration -> MethodHeader MethodBody .)


state 90

    (88) MethodBody -> Block .

    RBRACE          reduce using rule 88 (MethodBody -> Block .)
    VOID            reduce using rule 88 (MethodBody -> Block .)
    STATIC          reduce using rule 88 (MethodBody -> Block .)
    FINAL           reduce using rule 88 (MethodBody -> Block .)
    PRIVATE         reduce using rule 88 (MethodBody -> Block .)
    PROTECTED       reduce using rule 88 (MethodBody -> Block .)
    PUBLIC          reduce using rule 88 (MethodBody -> Block .)
    IDENTIFIER      reduce using rule 88 (MethodBody -> Block .)
    BOOLEAN         reduce using rule 88 (MethodBody -> Block .)
    BYTE            reduce using rule 88 (MethodBody -> Block .)
    SHORT           reduce using rule 88 (MethodBody -> Block .)
    INT             reduce using rule 88 (MethodBody -> Block .)
    LONG            reduce using rule 88 (MethodBody -> Block .)
    CHAR            reduce using rule 88 (MethodBody -> Block .)
    FLOAT           reduce using rule 88 (MethodBody -> Block .)
    DOUBLE          reduce using rule 88 (MethodBody -> Block .)


state 91

    (89) MethodBody -> SEMI .

    RBRACE          reduce using rule 89 (MethodBody -> SEMI .)
    VOID            reduce using rule 89 (MethodBody -> SEMI .)
    STATIC          reduce using rule 89 (MethodBody -> SEMI .)
    FINAL           reduce using rule 89 (MethodBody -> SEMI .)
    PRIVATE         reduce using rule 89 (MethodBody -> SEMI .)
    PROTECTED       reduce using rule 89 (MethodBody -> SEMI .)
    PUBLIC          reduce using rule 89 (MethodBody -> SEMI .)
    IDENTIFIER      reduce using rule 89 (MethodBody -> SEMI .)
    BOOLEAN         reduce using rule 89 (MethodBody -> SEMI .)
    BYTE            reduce using rule 89 (MethodBody -> SEMI .)
    SHORT           reduce using rule 89 (MethodBody -> SEMI .)
    INT             reduce using rule 89 (MethodBody -> SEMI .)
    LONG            reduce using rule 89 (MethodBody -> SEMI .)
    CHAR            reduce using rule 89 (MethodBody -> SEMI .)
    FLOAT           reduce using rule 89 (MethodBody -> SEMI .)
    DOUBLE          reduce using rule 89 (MethodBody -> SEMI .)


state 92

    (101) Block -> LBRACE . RBRACE
    (102) Block -> LBRACE . BlockStatements RBRACE
    (103) BlockStatements -> . BlockStatement
    (104) BlockStatements -> . BlockStatements BlockStatement
    (105) BlockStatement -> . LocalVariableDeclarationStatement
    (106) BlockStatement -> . Statement
    (107) LocalVariableDeclarationStatement -> . LocalVariableDeclaration SEMI
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (108) LocalVariableDeclaration -> . Type VariableDeclarators
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RBRACE          shift and go to state 171
    IDENTIFIER      shift and go to state 126
    IF              shift and go to state 127
    WHILE           shift and go to state 129
    FOR             shift and go to state 130
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    BOOLEAN         shift and go to state 63
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    BYTE            shift and go to state 69
    SHORT           shift and go to state 70
    INT             shift and go to state 71
    LONG            shift and go to state 72
    CHAR            shift and go to state 73
    FLOAT           shift and go to state 74
    DOUBLE          shift and go to state 75
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    BlockStatements                shift and go to state 172
    BlockStatement                 shift and go to state 106
    LocalVariableDeclarationStatement shift and go to state 107
    Statement                      shift and go to state 108
    LocalVariableDeclaration       shift and go to state 109
    StatementWithoutTrailingSubstatement shift and go to state 111
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    Type                           shift and go to state 117
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    PrimitiveType                  shift and go to state 58
    ReferenceType                  shift and go to state 59
    StatementExpression            shift and go to state 131
    NumericType                    shift and go to state 62
    ArrayType                      shift and go to state 64
    ClassType                      shift and go to state 65
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    IntegralType                   shift and go to state 66
    FloatingPointType              shift and go to state 67
    Name                           shift and go to state 144
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156

state 93

    (92) ConstructorDeclarator -> SimpleName LPAREN . FormalParameterList RPAREN
    (93) ConstructorDeclarator -> SimpleName LPAREN . RPAREN
    (85) FormalParameterList -> . FormalParameter
    (86) FormalParameterList -> . FormalParameterList COMMA FormalParameter
    (87) FormalParameter -> . Type VariableDeclaratorId
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER

    RPAREN          shift and go to state 174
    BOOLEAN         shift and go to state 63
    BYTE            shift and go to state 69
    SHORT           shift and go to state 70
    INT             shift and go to state 71
    LONG            shift and go to state 72
    CHAR            shift and go to state 73
    FLOAT           shift and go to state 74
    DOUBLE          shift and go to state 75
    IDENTIFIER      shift and go to state 61

    SimpleName                     shift and go to state 151
    FormalParameterList            shift and go to state 173
    FormalParameter                shift and go to state 175
    Type                           shift and go to state 176
    PrimitiveType                  shift and go to state 58
    ReferenceType                  shift and go to state 59
    NumericType                    shift and go to state 62
    ArrayType                      shift and go to state 64
    ClassType                      shift and go to state 65
    IntegralType                   shift and go to state 66
    FloatingPointType              shift and go to state 67
    Name                           shift and go to state 68
    QualifiedName                  shift and go to state 76

state 94

    (26) ArrayType -> PrimitiveType Dims .
    (216) Dims -> Dims . LBRACK RBRACK

    IDENTIFIER      reduce using rule 26 (ArrayType -> PrimitiveType Dims .)
    LBRACK          shift and go to state 177


state 95

    (215) Dims -> LBRACK . RBRACK

    RBRACK          shift and go to state 178


state 96

    (82) MethodHeader -> VOID MethodDeclarator .

    SEMI            reduce using rule 82 (MethodHeader -> VOID MethodDeclarator .)
    LBRACE          reduce using rule 82 (MethodHeader -> VOID MethodDeclarator .)


state 97

    (83) MethodDeclarator -> IDENTIFIER . LPAREN RPAREN
    (84) MethodDeclarator -> IDENTIFIER . LPAREN FormalParameterList RPAREN

    LPAREN          shift and go to state 168


state 98

    (27) ArrayType -> Name Dims .
    (216) Dims -> Dims . LBRACK RBRACK

    IDENTIFIER      reduce using rule 27 (ArrayType -> Name Dims .)
    LBRACK          shift and go to state 177


state 99

    (31) QualifiedName -> Name DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 179


state 100

    (90) ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .

    RBRACE          reduce using rule 90 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    VOID            reduce using rule 90 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    STATIC          reduce using rule 90 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    FINAL           reduce using rule 90 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    PRIVATE         reduce using rule 90 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    PROTECTED       reduce using rule 90 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    PUBLIC          reduce using rule 90 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    IDENTIFIER      reduce using rule 90 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    BOOLEAN         reduce using rule 90 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    BYTE            reduce using rule 90 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    SHORT           reduce using rule 90 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    INT             reduce using rule 90 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    LONG            reduce using rule 90 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    CHAR            reduce using rule 90 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    FLOAT           reduce using rule 90 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    DOUBLE          reduce using rule 90 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)


state 101

    (69) FieldDeclaration -> Modifiers Type VariableDeclarators . SEMI
    (72) VariableDeclarators -> VariableDeclarators . COMMA VariableDeclarator

    SEMI            shift and go to state 180
    COMMA           shift and go to state 167


state 102

    (79) MethodHeader -> Modifiers Type MethodDeclarator .

    SEMI            reduce using rule 79 (MethodHeader -> Modifiers Type MethodDeclarator .)
    LBRACE          reduce using rule 79 (MethodHeader -> Modifiers Type MethodDeclarator .)


state 103

    (81) MethodHeader -> Modifiers VOID MethodDeclarator .

    SEMI            reduce using rule 81 (MethodHeader -> Modifiers VOID MethodDeclarator .)
    LBRACE          reduce using rule 81 (MethodHeader -> Modifiers VOID MethodDeclarator .)


state 104

    (95) ConstructorBody -> LBRACE BlockStatements . RBRACE
    (104) BlockStatements -> BlockStatements . BlockStatement
    (105) BlockStatement -> . LocalVariableDeclarationStatement
    (106) BlockStatement -> . Statement
    (107) LocalVariableDeclarationStatement -> . LocalVariableDeclaration SEMI
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (108) LocalVariableDeclaration -> . Type VariableDeclarators
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RBRACE          shift and go to state 181
    IDENTIFIER      shift and go to state 126
    IF              shift and go to state 127
    WHILE           shift and go to state 129
    FOR             shift and go to state 130
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    BOOLEAN         shift and go to state 63
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    BYTE            shift and go to state 69
    SHORT           shift and go to state 70
    INT             shift and go to state 71
    LONG            shift and go to state 72
    CHAR            shift and go to state 73
    FLOAT           shift and go to state 74
    DOUBLE          shift and go to state 75
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    BlockStatement                 shift and go to state 182
    LocalVariableDeclarationStatement shift and go to state 107
    Statement                      shift and go to state 108
    LocalVariableDeclaration       shift and go to state 109
    StatementWithoutTrailingSubstatement shift and go to state 111
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    Type                           shift and go to state 117
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    PrimitiveType                  shift and go to state 58
    ReferenceType                  shift and go to state 59
    StatementExpression            shift and go to state 131
    NumericType                    shift and go to state 62
    ArrayType                      shift and go to state 64
    ClassType                      shift and go to state 65
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    IntegralType                   shift and go to state 66
    FloatingPointType              shift and go to state 67
    Name                           shift and go to state 144
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156

state 105

    (96) ConstructorBody -> LBRACE RBRACE .

    RBRACE          reduce using rule 96 (ConstructorBody -> LBRACE RBRACE .)
    VOID            reduce using rule 96 (ConstructorBody -> LBRACE RBRACE .)
    STATIC          reduce using rule 96 (ConstructorBody -> LBRACE RBRACE .)
    FINAL           reduce using rule 96 (ConstructorBody -> LBRACE RBRACE .)
    PRIVATE         reduce using rule 96 (ConstructorBody -> LBRACE RBRACE .)
    PROTECTED       reduce using rule 96 (ConstructorBody -> LBRACE RBRACE .)
    PUBLIC          reduce using rule 96 (ConstructorBody -> LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 96 (ConstructorBody -> LBRACE RBRACE .)
    BOOLEAN         reduce using rule 96 (ConstructorBody -> LBRACE RBRACE .)
    BYTE            reduce using rule 96 (ConstructorBody -> LBRACE RBRACE .)
    SHORT           reduce using rule 96 (ConstructorBody -> LBRACE RBRACE .)
    INT             reduce using rule 96 (ConstructorBody -> LBRACE RBRACE .)
    LONG            reduce using rule 96 (ConstructorBody -> LBRACE RBRACE .)
    CHAR            reduce using rule 96 (ConstructorBody -> LBRACE RBRACE .)
    FLOAT           reduce using rule 96 (ConstructorBody -> LBRACE RBRACE .)
    DOUBLE          reduce using rule 96 (ConstructorBody -> LBRACE RBRACE .)


state 106

    (103) BlockStatements -> BlockStatement .

    RBRACE          reduce using rule 103 (BlockStatements -> BlockStatement .)
    IDENTIFIER      reduce using rule 103 (BlockStatements -> BlockStatement .)
    IF              reduce using rule 103 (BlockStatements -> BlockStatement .)
    WHILE           reduce using rule 103 (BlockStatements -> BlockStatement .)
    FOR             reduce using rule 103 (BlockStatements -> BlockStatement .)
    LBRACE          reduce using rule 103 (BlockStatements -> BlockStatement .)
    SEMI            reduce using rule 103 (BlockStatements -> BlockStatement .)
    SWITCH          reduce using rule 103 (BlockStatements -> BlockStatement .)
    DO              reduce using rule 103 (BlockStatements -> BlockStatement .)
    BREAK           reduce using rule 103 (BlockStatements -> BlockStatement .)
    CONTINUE        reduce using rule 103 (BlockStatements -> BlockStatement .)
    RETURN          reduce using rule 103 (BlockStatements -> BlockStatement .)
    BOOLEAN         reduce using rule 103 (BlockStatements -> BlockStatement .)
    INC             reduce using rule 103 (BlockStatements -> BlockStatement .)
    DEC             reduce using rule 103 (BlockStatements -> BlockStatement .)
    NEW             reduce using rule 103 (BlockStatements -> BlockStatement .)
    BYTE            reduce using rule 103 (BlockStatements -> BlockStatement .)
    SHORT           reduce using rule 103 (BlockStatements -> BlockStatement .)
    INT             reduce using rule 103 (BlockStatements -> BlockStatement .)
    LONG            reduce using rule 103 (BlockStatements -> BlockStatement .)
    CHAR            reduce using rule 103 (BlockStatements -> BlockStatement .)
    FLOAT           reduce using rule 103 (BlockStatements -> BlockStatement .)
    DOUBLE          reduce using rule 103 (BlockStatements -> BlockStatement .)
    THIS            reduce using rule 103 (BlockStatements -> BlockStatement .)
    LPAREN          reduce using rule 103 (BlockStatements -> BlockStatement .)
    DECIMAL_LITERAL reduce using rule 103 (BlockStatements -> BlockStatement .)
    HEX_LITERAL     reduce using rule 103 (BlockStatements -> BlockStatement .)
    BINARY_LITERAL  reduce using rule 103 (BlockStatements -> BlockStatement .)
    FLOAT_LITERAL   reduce using rule 103 (BlockStatements -> BlockStatement .)
    BOOL_LITERAL    reduce using rule 103 (BlockStatements -> BlockStatement .)
    CHAR_LITERAL    reduce using rule 103 (BlockStatements -> BlockStatement .)
    STRING_LITERAL  reduce using rule 103 (BlockStatements -> BlockStatement .)
    NULL            reduce using rule 103 (BlockStatements -> BlockStatement .)
    CASE            reduce using rule 103 (BlockStatements -> BlockStatement .)
    DEFAULT         reduce using rule 103 (BlockStatements -> BlockStatement .)


state 107

    (105) BlockStatement -> LocalVariableDeclarationStatement .

    RBRACE          reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    IDENTIFIER      reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    IF              reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    WHILE           reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    FOR             reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    LBRACE          reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    SEMI            reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    SWITCH          reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    DO              reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    BREAK           reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    CONTINUE        reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    RETURN          reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    BOOLEAN         reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    INC             reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    DEC             reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    NEW             reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    BYTE            reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    SHORT           reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    INT             reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    LONG            reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    CHAR            reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    FLOAT           reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    DOUBLE          reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    THIS            reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    LPAREN          reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    DECIMAL_LITERAL reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    HEX_LITERAL     reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    BINARY_LITERAL  reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    FLOAT_LITERAL   reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    BOOL_LITERAL    reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    CHAR_LITERAL    reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    STRING_LITERAL  reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    NULL            reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    CASE            reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)
    DEFAULT         reduce using rule 105 (BlockStatement -> LocalVariableDeclarationStatement .)


state 108

    (106) BlockStatement -> Statement .

    RBRACE          reduce using rule 106 (BlockStatement -> Statement .)
    IDENTIFIER      reduce using rule 106 (BlockStatement -> Statement .)
    IF              reduce using rule 106 (BlockStatement -> Statement .)
    WHILE           reduce using rule 106 (BlockStatement -> Statement .)
    FOR             reduce using rule 106 (BlockStatement -> Statement .)
    LBRACE          reduce using rule 106 (BlockStatement -> Statement .)
    SEMI            reduce using rule 106 (BlockStatement -> Statement .)
    SWITCH          reduce using rule 106 (BlockStatement -> Statement .)
    DO              reduce using rule 106 (BlockStatement -> Statement .)
    BREAK           reduce using rule 106 (BlockStatement -> Statement .)
    CONTINUE        reduce using rule 106 (BlockStatement -> Statement .)
    RETURN          reduce using rule 106 (BlockStatement -> Statement .)
    BOOLEAN         reduce using rule 106 (BlockStatement -> Statement .)
    INC             reduce using rule 106 (BlockStatement -> Statement .)
    DEC             reduce using rule 106 (BlockStatement -> Statement .)
    NEW             reduce using rule 106 (BlockStatement -> Statement .)
    BYTE            reduce using rule 106 (BlockStatement -> Statement .)
    SHORT           reduce using rule 106 (BlockStatement -> Statement .)
    INT             reduce using rule 106 (BlockStatement -> Statement .)
    LONG            reduce using rule 106 (BlockStatement -> Statement .)
    CHAR            reduce using rule 106 (BlockStatement -> Statement .)
    FLOAT           reduce using rule 106 (BlockStatement -> Statement .)
    DOUBLE          reduce using rule 106 (BlockStatement -> Statement .)
    THIS            reduce using rule 106 (BlockStatement -> Statement .)
    LPAREN          reduce using rule 106 (BlockStatement -> Statement .)
    DECIMAL_LITERAL reduce using rule 106 (BlockStatement -> Statement .)
    HEX_LITERAL     reduce using rule 106 (BlockStatement -> Statement .)
    BINARY_LITERAL  reduce using rule 106 (BlockStatement -> Statement .)
    FLOAT_LITERAL   reduce using rule 106 (BlockStatement -> Statement .)
    BOOL_LITERAL    reduce using rule 106 (BlockStatement -> Statement .)
    CHAR_LITERAL    reduce using rule 106 (BlockStatement -> Statement .)
    STRING_LITERAL  reduce using rule 106 (BlockStatement -> Statement .)
    NULL            reduce using rule 106 (BlockStatement -> Statement .)
    CASE            reduce using rule 106 (BlockStatement -> Statement .)
    DEFAULT         reduce using rule 106 (BlockStatement -> Statement .)


state 109

    (107) LocalVariableDeclarationStatement -> LocalVariableDeclaration . SEMI

    SEMI            shift and go to state 183


state 110

    (128) EmptyStatement -> SEMI .

    RBRACE          reduce using rule 128 (EmptyStatement -> SEMI .)
    IDENTIFIER      reduce using rule 128 (EmptyStatement -> SEMI .)
    IF              reduce using rule 128 (EmptyStatement -> SEMI .)
    WHILE           reduce using rule 128 (EmptyStatement -> SEMI .)
    FOR             reduce using rule 128 (EmptyStatement -> SEMI .)
    LBRACE          reduce using rule 128 (EmptyStatement -> SEMI .)
    SEMI            reduce using rule 128 (EmptyStatement -> SEMI .)
    SWITCH          reduce using rule 128 (EmptyStatement -> SEMI .)
    DO              reduce using rule 128 (EmptyStatement -> SEMI .)
    BREAK           reduce using rule 128 (EmptyStatement -> SEMI .)
    CONTINUE        reduce using rule 128 (EmptyStatement -> SEMI .)
    RETURN          reduce using rule 128 (EmptyStatement -> SEMI .)
    BOOLEAN         reduce using rule 128 (EmptyStatement -> SEMI .)
    INC             reduce using rule 128 (EmptyStatement -> SEMI .)
    DEC             reduce using rule 128 (EmptyStatement -> SEMI .)
    NEW             reduce using rule 128 (EmptyStatement -> SEMI .)
    BYTE            reduce using rule 128 (EmptyStatement -> SEMI .)
    SHORT           reduce using rule 128 (EmptyStatement -> SEMI .)
    INT             reduce using rule 128 (EmptyStatement -> SEMI .)
    LONG            reduce using rule 128 (EmptyStatement -> SEMI .)
    CHAR            reduce using rule 128 (EmptyStatement -> SEMI .)
    FLOAT           reduce using rule 128 (EmptyStatement -> SEMI .)
    DOUBLE          reduce using rule 128 (EmptyStatement -> SEMI .)
    THIS            reduce using rule 128 (EmptyStatement -> SEMI .)
    LPAREN          reduce using rule 128 (EmptyStatement -> SEMI .)
    DECIMAL_LITERAL reduce using rule 128 (EmptyStatement -> SEMI .)
    HEX_LITERAL     reduce using rule 128 (EmptyStatement -> SEMI .)
    BINARY_LITERAL  reduce using rule 128 (EmptyStatement -> SEMI .)
    FLOAT_LITERAL   reduce using rule 128 (EmptyStatement -> SEMI .)
    BOOL_LITERAL    reduce using rule 128 (EmptyStatement -> SEMI .)
    CHAR_LITERAL    reduce using rule 128 (EmptyStatement -> SEMI .)
    STRING_LITERAL  reduce using rule 128 (EmptyStatement -> SEMI .)
    NULL            reduce using rule 128 (EmptyStatement -> SEMI .)
    CASE            reduce using rule 128 (EmptyStatement -> SEMI .)
    DEFAULT         reduce using rule 128 (EmptyStatement -> SEMI .)
    ELSE            reduce using rule 128 (EmptyStatement -> SEMI .)


state 111

    (109) Statement -> StatementWithoutTrailingSubstatement .

    RBRACE          reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    IDENTIFIER      reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    IF              reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    WHILE           reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    FOR             reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    LBRACE          reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    SEMI            reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    SWITCH          reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    DO              reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    BREAK           reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    CONTINUE        reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    RETURN          reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    BOOLEAN         reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    INC             reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    DEC             reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    NEW             reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    BYTE            reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    SHORT           reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    INT             reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    LONG            reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    CHAR            reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    FLOAT           reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    DOUBLE          reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    THIS            reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    LPAREN          reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    DECIMAL_LITERAL reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    HEX_LITERAL     reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    BINARY_LITERAL  reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    FLOAT_LITERAL   reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    BOOL_LITERAL    reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    CHAR_LITERAL    reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    STRING_LITERAL  reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    NULL            reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    CASE            reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    DEFAULT         reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)


state 112

    (110) Statement -> LabeledStatement .

    RBRACE          reduce using rule 110 (Statement -> LabeledStatement .)
    IDENTIFIER      reduce using rule 110 (Statement -> LabeledStatement .)
    IF              reduce using rule 110 (Statement -> LabeledStatement .)
    WHILE           reduce using rule 110 (Statement -> LabeledStatement .)
    FOR             reduce using rule 110 (Statement -> LabeledStatement .)
    LBRACE          reduce using rule 110 (Statement -> LabeledStatement .)
    SEMI            reduce using rule 110 (Statement -> LabeledStatement .)
    SWITCH          reduce using rule 110 (Statement -> LabeledStatement .)
    DO              reduce using rule 110 (Statement -> LabeledStatement .)
    BREAK           reduce using rule 110 (Statement -> LabeledStatement .)
    CONTINUE        reduce using rule 110 (Statement -> LabeledStatement .)
    RETURN          reduce using rule 110 (Statement -> LabeledStatement .)
    BOOLEAN         reduce using rule 110 (Statement -> LabeledStatement .)
    INC             reduce using rule 110 (Statement -> LabeledStatement .)
    DEC             reduce using rule 110 (Statement -> LabeledStatement .)
    NEW             reduce using rule 110 (Statement -> LabeledStatement .)
    BYTE            reduce using rule 110 (Statement -> LabeledStatement .)
    SHORT           reduce using rule 110 (Statement -> LabeledStatement .)
    INT             reduce using rule 110 (Statement -> LabeledStatement .)
    LONG            reduce using rule 110 (Statement -> LabeledStatement .)
    CHAR            reduce using rule 110 (Statement -> LabeledStatement .)
    FLOAT           reduce using rule 110 (Statement -> LabeledStatement .)
    DOUBLE          reduce using rule 110 (Statement -> LabeledStatement .)
    THIS            reduce using rule 110 (Statement -> LabeledStatement .)
    LPAREN          reduce using rule 110 (Statement -> LabeledStatement .)
    DECIMAL_LITERAL reduce using rule 110 (Statement -> LabeledStatement .)
    HEX_LITERAL     reduce using rule 110 (Statement -> LabeledStatement .)
    BINARY_LITERAL  reduce using rule 110 (Statement -> LabeledStatement .)
    FLOAT_LITERAL   reduce using rule 110 (Statement -> LabeledStatement .)
    BOOL_LITERAL    reduce using rule 110 (Statement -> LabeledStatement .)
    CHAR_LITERAL    reduce using rule 110 (Statement -> LabeledStatement .)
    STRING_LITERAL  reduce using rule 110 (Statement -> LabeledStatement .)
    NULL            reduce using rule 110 (Statement -> LabeledStatement .)
    CASE            reduce using rule 110 (Statement -> LabeledStatement .)
    DEFAULT         reduce using rule 110 (Statement -> LabeledStatement .)


state 113

    (111) Statement -> IfThenStatement .

    RBRACE          reduce using rule 111 (Statement -> IfThenStatement .)
    IDENTIFIER      reduce using rule 111 (Statement -> IfThenStatement .)
    IF              reduce using rule 111 (Statement -> IfThenStatement .)
    WHILE           reduce using rule 111 (Statement -> IfThenStatement .)
    FOR             reduce using rule 111 (Statement -> IfThenStatement .)
    LBRACE          reduce using rule 111 (Statement -> IfThenStatement .)
    SEMI            reduce using rule 111 (Statement -> IfThenStatement .)
    SWITCH          reduce using rule 111 (Statement -> IfThenStatement .)
    DO              reduce using rule 111 (Statement -> IfThenStatement .)
    BREAK           reduce using rule 111 (Statement -> IfThenStatement .)
    CONTINUE        reduce using rule 111 (Statement -> IfThenStatement .)
    RETURN          reduce using rule 111 (Statement -> IfThenStatement .)
    BOOLEAN         reduce using rule 111 (Statement -> IfThenStatement .)
    INC             reduce using rule 111 (Statement -> IfThenStatement .)
    DEC             reduce using rule 111 (Statement -> IfThenStatement .)
    NEW             reduce using rule 111 (Statement -> IfThenStatement .)
    BYTE            reduce using rule 111 (Statement -> IfThenStatement .)
    SHORT           reduce using rule 111 (Statement -> IfThenStatement .)
    INT             reduce using rule 111 (Statement -> IfThenStatement .)
    LONG            reduce using rule 111 (Statement -> IfThenStatement .)
    CHAR            reduce using rule 111 (Statement -> IfThenStatement .)
    FLOAT           reduce using rule 111 (Statement -> IfThenStatement .)
    DOUBLE          reduce using rule 111 (Statement -> IfThenStatement .)
    THIS            reduce using rule 111 (Statement -> IfThenStatement .)
    LPAREN          reduce using rule 111 (Statement -> IfThenStatement .)
    DECIMAL_LITERAL reduce using rule 111 (Statement -> IfThenStatement .)
    HEX_LITERAL     reduce using rule 111 (Statement -> IfThenStatement .)
    BINARY_LITERAL  reduce using rule 111 (Statement -> IfThenStatement .)
    FLOAT_LITERAL   reduce using rule 111 (Statement -> IfThenStatement .)
    BOOL_LITERAL    reduce using rule 111 (Statement -> IfThenStatement .)
    CHAR_LITERAL    reduce using rule 111 (Statement -> IfThenStatement .)
    STRING_LITERAL  reduce using rule 111 (Statement -> IfThenStatement .)
    NULL            reduce using rule 111 (Statement -> IfThenStatement .)
    CASE            reduce using rule 111 (Statement -> IfThenStatement .)
    DEFAULT         reduce using rule 111 (Statement -> IfThenStatement .)


state 114

    (112) Statement -> IfThenElseStatement .

    RBRACE          reduce using rule 112 (Statement -> IfThenElseStatement .)
    IDENTIFIER      reduce using rule 112 (Statement -> IfThenElseStatement .)
    IF              reduce using rule 112 (Statement -> IfThenElseStatement .)
    WHILE           reduce using rule 112 (Statement -> IfThenElseStatement .)
    FOR             reduce using rule 112 (Statement -> IfThenElseStatement .)
    LBRACE          reduce using rule 112 (Statement -> IfThenElseStatement .)
    SEMI            reduce using rule 112 (Statement -> IfThenElseStatement .)
    SWITCH          reduce using rule 112 (Statement -> IfThenElseStatement .)
    DO              reduce using rule 112 (Statement -> IfThenElseStatement .)
    BREAK           reduce using rule 112 (Statement -> IfThenElseStatement .)
    CONTINUE        reduce using rule 112 (Statement -> IfThenElseStatement .)
    RETURN          reduce using rule 112 (Statement -> IfThenElseStatement .)
    BOOLEAN         reduce using rule 112 (Statement -> IfThenElseStatement .)
    INC             reduce using rule 112 (Statement -> IfThenElseStatement .)
    DEC             reduce using rule 112 (Statement -> IfThenElseStatement .)
    NEW             reduce using rule 112 (Statement -> IfThenElseStatement .)
    BYTE            reduce using rule 112 (Statement -> IfThenElseStatement .)
    SHORT           reduce using rule 112 (Statement -> IfThenElseStatement .)
    INT             reduce using rule 112 (Statement -> IfThenElseStatement .)
    LONG            reduce using rule 112 (Statement -> IfThenElseStatement .)
    CHAR            reduce using rule 112 (Statement -> IfThenElseStatement .)
    FLOAT           reduce using rule 112 (Statement -> IfThenElseStatement .)
    DOUBLE          reduce using rule 112 (Statement -> IfThenElseStatement .)
    THIS            reduce using rule 112 (Statement -> IfThenElseStatement .)
    LPAREN          reduce using rule 112 (Statement -> IfThenElseStatement .)
    DECIMAL_LITERAL reduce using rule 112 (Statement -> IfThenElseStatement .)
    HEX_LITERAL     reduce using rule 112 (Statement -> IfThenElseStatement .)
    BINARY_LITERAL  reduce using rule 112 (Statement -> IfThenElseStatement .)
    FLOAT_LITERAL   reduce using rule 112 (Statement -> IfThenElseStatement .)
    BOOL_LITERAL    reduce using rule 112 (Statement -> IfThenElseStatement .)
    CHAR_LITERAL    reduce using rule 112 (Statement -> IfThenElseStatement .)
    STRING_LITERAL  reduce using rule 112 (Statement -> IfThenElseStatement .)
    NULL            reduce using rule 112 (Statement -> IfThenElseStatement .)
    CASE            reduce using rule 112 (Statement -> IfThenElseStatement .)
    DEFAULT         reduce using rule 112 (Statement -> IfThenElseStatement .)


state 115

    (113) Statement -> WhileStatement .

    RBRACE          reduce using rule 113 (Statement -> WhileStatement .)
    IDENTIFIER      reduce using rule 113 (Statement -> WhileStatement .)
    IF              reduce using rule 113 (Statement -> WhileStatement .)
    WHILE           reduce using rule 113 (Statement -> WhileStatement .)
    FOR             reduce using rule 113 (Statement -> WhileStatement .)
    LBRACE          reduce using rule 113 (Statement -> WhileStatement .)
    SEMI            reduce using rule 113 (Statement -> WhileStatement .)
    SWITCH          reduce using rule 113 (Statement -> WhileStatement .)
    DO              reduce using rule 113 (Statement -> WhileStatement .)
    BREAK           reduce using rule 113 (Statement -> WhileStatement .)
    CONTINUE        reduce using rule 113 (Statement -> WhileStatement .)
    RETURN          reduce using rule 113 (Statement -> WhileStatement .)
    BOOLEAN         reduce using rule 113 (Statement -> WhileStatement .)
    INC             reduce using rule 113 (Statement -> WhileStatement .)
    DEC             reduce using rule 113 (Statement -> WhileStatement .)
    NEW             reduce using rule 113 (Statement -> WhileStatement .)
    BYTE            reduce using rule 113 (Statement -> WhileStatement .)
    SHORT           reduce using rule 113 (Statement -> WhileStatement .)
    INT             reduce using rule 113 (Statement -> WhileStatement .)
    LONG            reduce using rule 113 (Statement -> WhileStatement .)
    CHAR            reduce using rule 113 (Statement -> WhileStatement .)
    FLOAT           reduce using rule 113 (Statement -> WhileStatement .)
    DOUBLE          reduce using rule 113 (Statement -> WhileStatement .)
    THIS            reduce using rule 113 (Statement -> WhileStatement .)
    LPAREN          reduce using rule 113 (Statement -> WhileStatement .)
    DECIMAL_LITERAL reduce using rule 113 (Statement -> WhileStatement .)
    HEX_LITERAL     reduce using rule 113 (Statement -> WhileStatement .)
    BINARY_LITERAL  reduce using rule 113 (Statement -> WhileStatement .)
    FLOAT_LITERAL   reduce using rule 113 (Statement -> WhileStatement .)
    BOOL_LITERAL    reduce using rule 113 (Statement -> WhileStatement .)
    CHAR_LITERAL    reduce using rule 113 (Statement -> WhileStatement .)
    STRING_LITERAL  reduce using rule 113 (Statement -> WhileStatement .)
    NULL            reduce using rule 113 (Statement -> WhileStatement .)
    CASE            reduce using rule 113 (Statement -> WhileStatement .)
    DEFAULT         reduce using rule 113 (Statement -> WhileStatement .)


state 116

    (114) Statement -> ForStatement .

    RBRACE          reduce using rule 114 (Statement -> ForStatement .)
    IDENTIFIER      reduce using rule 114 (Statement -> ForStatement .)
    IF              reduce using rule 114 (Statement -> ForStatement .)
    WHILE           reduce using rule 114 (Statement -> ForStatement .)
    FOR             reduce using rule 114 (Statement -> ForStatement .)
    LBRACE          reduce using rule 114 (Statement -> ForStatement .)
    SEMI            reduce using rule 114 (Statement -> ForStatement .)
    SWITCH          reduce using rule 114 (Statement -> ForStatement .)
    DO              reduce using rule 114 (Statement -> ForStatement .)
    BREAK           reduce using rule 114 (Statement -> ForStatement .)
    CONTINUE        reduce using rule 114 (Statement -> ForStatement .)
    RETURN          reduce using rule 114 (Statement -> ForStatement .)
    BOOLEAN         reduce using rule 114 (Statement -> ForStatement .)
    INC             reduce using rule 114 (Statement -> ForStatement .)
    DEC             reduce using rule 114 (Statement -> ForStatement .)
    NEW             reduce using rule 114 (Statement -> ForStatement .)
    BYTE            reduce using rule 114 (Statement -> ForStatement .)
    SHORT           reduce using rule 114 (Statement -> ForStatement .)
    INT             reduce using rule 114 (Statement -> ForStatement .)
    LONG            reduce using rule 114 (Statement -> ForStatement .)
    CHAR            reduce using rule 114 (Statement -> ForStatement .)
    FLOAT           reduce using rule 114 (Statement -> ForStatement .)
    DOUBLE          reduce using rule 114 (Statement -> ForStatement .)
    THIS            reduce using rule 114 (Statement -> ForStatement .)
    LPAREN          reduce using rule 114 (Statement -> ForStatement .)
    DECIMAL_LITERAL reduce using rule 114 (Statement -> ForStatement .)
    HEX_LITERAL     reduce using rule 114 (Statement -> ForStatement .)
    BINARY_LITERAL  reduce using rule 114 (Statement -> ForStatement .)
    FLOAT_LITERAL   reduce using rule 114 (Statement -> ForStatement .)
    BOOL_LITERAL    reduce using rule 114 (Statement -> ForStatement .)
    CHAR_LITERAL    reduce using rule 114 (Statement -> ForStatement .)
    STRING_LITERAL  reduce using rule 114 (Statement -> ForStatement .)
    NULL            reduce using rule 114 (Statement -> ForStatement .)
    CASE            reduce using rule 114 (Statement -> ForStatement .)
    DEFAULT         reduce using rule 114 (Statement -> ForStatement .)


state 117

    (108) LocalVariableDeclaration -> Type . VariableDeclarators
    (71) VariableDeclarators -> . VariableDeclarator
    (72) VariableDeclarators -> . VariableDeclarators COMMA VariableDeclarator
    (73) VariableDeclarator -> . VariableDeclaratorId
    (74) VariableDeclarator -> . VariableDeclaratorId ASSIGN VariableInitializer
    (75) VariableDeclaratorId -> . IDENTIFIER
    (76) VariableDeclaratorId -> . IDENTIFIER Dims

    IDENTIFIER      shift and go to state 185

    VariableDeclarators            shift and go to state 184
    VariableDeclarator             shift and go to state 86
    VariableDeclaratorId           shift and go to state 88

state 118

    (120) StatementWithoutTrailingSubstatement -> Block .

    RBRACE          reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    IDENTIFIER      reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    IF              reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    WHILE           reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    FOR             reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    LBRACE          reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    SEMI            reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    SWITCH          reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    DO              reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    BREAK           reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    CONTINUE        reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    RETURN          reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    BOOLEAN         reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    INC             reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    DEC             reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    NEW             reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    BYTE            reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    SHORT           reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    INT             reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    LONG            reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    CHAR            reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    FLOAT           reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    DOUBLE          reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    THIS            reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    LPAREN          reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    DECIMAL_LITERAL reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    HEX_LITERAL     reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    BINARY_LITERAL  reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    FLOAT_LITERAL   reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    BOOL_LITERAL    reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    CHAR_LITERAL    reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    STRING_LITERAL  reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    NULL            reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    CASE            reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    DEFAULT         reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)
    ELSE            reduce using rule 120 (StatementWithoutTrailingSubstatement -> Block .)


state 119

    (121) StatementWithoutTrailingSubstatement -> EmptyStatement .

    RBRACE          reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    IDENTIFIER      reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    IF              reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    WHILE           reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    FOR             reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    LBRACE          reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    SEMI            reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    SWITCH          reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    DO              reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    BREAK           reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    CONTINUE        reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    RETURN          reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    BOOLEAN         reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    INC             reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    DEC             reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    NEW             reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    BYTE            reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    SHORT           reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    INT             reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    LONG            reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    CHAR            reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    FLOAT           reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    DOUBLE          reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    THIS            reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    LPAREN          reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    DECIMAL_LITERAL reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    HEX_LITERAL     reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    BINARY_LITERAL  reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    FLOAT_LITERAL   reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    BOOL_LITERAL    reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    CHAR_LITERAL    reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    STRING_LITERAL  reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    NULL            reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    CASE            reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    DEFAULT         reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    ELSE            reduce using rule 121 (StatementWithoutTrailingSubstatement -> EmptyStatement .)


state 120

    (122) StatementWithoutTrailingSubstatement -> ExpressionStatement .

    RBRACE          reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    IDENTIFIER      reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    IF              reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    WHILE           reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    FOR             reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    LBRACE          reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    SEMI            reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    SWITCH          reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    DO              reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    BREAK           reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    CONTINUE        reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    RETURN          reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    BOOLEAN         reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    INC             reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    DEC             reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    NEW             reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    BYTE            reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    SHORT           reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    INT             reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    LONG            reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    CHAR            reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    FLOAT           reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    DOUBLE          reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    THIS            reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    LPAREN          reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    DECIMAL_LITERAL reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    HEX_LITERAL     reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    BINARY_LITERAL  reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    FLOAT_LITERAL   reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    BOOL_LITERAL    reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    CHAR_LITERAL    reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    STRING_LITERAL  reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    NULL            reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    CASE            reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    DEFAULT         reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    ELSE            reduce using rule 122 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)


state 121

    (123) StatementWithoutTrailingSubstatement -> SwitchStatement .

    RBRACE          reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    IDENTIFIER      reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    IF              reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    WHILE           reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    FOR             reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    LBRACE          reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    SEMI            reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    SWITCH          reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    DO              reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    BREAK           reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    CONTINUE        reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    RETURN          reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    BOOLEAN         reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    INC             reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    DEC             reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    NEW             reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    BYTE            reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    SHORT           reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    INT             reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    LONG            reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    CHAR            reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    FLOAT           reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    DOUBLE          reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    THIS            reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    LPAREN          reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    DECIMAL_LITERAL reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    HEX_LITERAL     reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    BINARY_LITERAL  reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    FLOAT_LITERAL   reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    BOOL_LITERAL    reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    CHAR_LITERAL    reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    STRING_LITERAL  reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    NULL            reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    CASE            reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    DEFAULT         reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    ELSE            reduce using rule 123 (StatementWithoutTrailingSubstatement -> SwitchStatement .)


state 122

    (124) StatementWithoutTrailingSubstatement -> DoStatement .

    RBRACE          reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    IDENTIFIER      reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    IF              reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    WHILE           reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    FOR             reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    LBRACE          reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    SEMI            reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    SWITCH          reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    DO              reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    BREAK           reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    CONTINUE        reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    RETURN          reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    BOOLEAN         reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    INC             reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    DEC             reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    NEW             reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    BYTE            reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    SHORT           reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    INT             reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    LONG            reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    CHAR            reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    FLOAT           reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    DOUBLE          reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    THIS            reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    LPAREN          reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    DECIMAL_LITERAL reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    HEX_LITERAL     reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    BINARY_LITERAL  reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    FLOAT_LITERAL   reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    BOOL_LITERAL    reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    CHAR_LITERAL    reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    STRING_LITERAL  reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    NULL            reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    CASE            reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    DEFAULT         reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)
    ELSE            reduce using rule 124 (StatementWithoutTrailingSubstatement -> DoStatement .)


state 123

    (125) StatementWithoutTrailingSubstatement -> BreakStatement .

    RBRACE          reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    IDENTIFIER      reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    IF              reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    WHILE           reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    FOR             reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    LBRACE          reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    SEMI            reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    SWITCH          reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    DO              reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    BREAK           reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    CONTINUE        reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    RETURN          reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    BOOLEAN         reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    INC             reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    DEC             reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    NEW             reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    BYTE            reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    SHORT           reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    INT             reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    LONG            reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    CHAR            reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    FLOAT           reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    DOUBLE          reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    THIS            reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    LPAREN          reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    DECIMAL_LITERAL reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    HEX_LITERAL     reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    BINARY_LITERAL  reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    FLOAT_LITERAL   reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    BOOL_LITERAL    reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    CHAR_LITERAL    reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    STRING_LITERAL  reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    NULL            reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    CASE            reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    DEFAULT         reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    ELSE            reduce using rule 125 (StatementWithoutTrailingSubstatement -> BreakStatement .)


state 124

    (126) StatementWithoutTrailingSubstatement -> ContinueStatement .

    RBRACE          reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    IDENTIFIER      reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    IF              reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    WHILE           reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    FOR             reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    LBRACE          reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    SEMI            reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    SWITCH          reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    DO              reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    BREAK           reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    CONTINUE        reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    RETURN          reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    BOOLEAN         reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    INC             reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    DEC             reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    NEW             reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    BYTE            reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    SHORT           reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    INT             reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    LONG            reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    CHAR            reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    FLOAT           reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    DOUBLE          reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    THIS            reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    LPAREN          reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    DECIMAL_LITERAL reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    HEX_LITERAL     reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    BINARY_LITERAL  reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    FLOAT_LITERAL   reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    BOOL_LITERAL    reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    CHAR_LITERAL    reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    STRING_LITERAL  reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    NULL            reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    CASE            reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    DEFAULT         reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    ELSE            reduce using rule 126 (StatementWithoutTrailingSubstatement -> ContinueStatement .)


state 125

    (127) StatementWithoutTrailingSubstatement -> ReturnStatement .

    RBRACE          reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    IDENTIFIER      reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    IF              reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    WHILE           reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    FOR             reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    LBRACE          reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    SEMI            reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    SWITCH          reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    DO              reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    BREAK           reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    CONTINUE        reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    RETURN          reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    BOOLEAN         reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    INC             reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    DEC             reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    NEW             reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    BYTE            reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    SHORT           reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    INT             reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    LONG            reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    CHAR            reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    FLOAT           reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    DOUBLE          reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    THIS            reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    LPAREN          reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    DECIMAL_LITERAL reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    HEX_LITERAL     reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    BINARY_LITERAL  reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    FLOAT_LITERAL   reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    BOOL_LITERAL    reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    CHAR_LITERAL    reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    STRING_LITERAL  reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    NULL            reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    CASE            reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    DEFAULT         reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    ELSE            reduce using rule 127 (StatementWithoutTrailingSubstatement -> ReturnStatement .)


state 126

    (129) LabeledStatement -> IDENTIFIER . COLON Statement
    (30) SimpleName -> IDENTIFIER .

    COLON           shift and go to state 186
    LPAREN          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    DOT             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    LBRACK          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    ASSIGN          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 30 (SimpleName -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 30 (SimpleName -> IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 30 (SimpleName -> IDENTIFIER .)
    URSHIFT_ASSIGN  reduce using rule 30 (SimpleName -> IDENTIFIER .)
    INC             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    DEC             reduce using rule 30 (SimpleName -> IDENTIFIER .)


state 127

    (139) IfThenStatement -> IF . begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> IF . begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (299) begin_scope -> .

    LPAREN          reduce using rule 299 (begin_scope -> .)

    begin_scope                    shift and go to state 187

state 128

    (199) PrimaryNoNewArray -> LPAREN . Expression RPAREN
    (295) Expression -> . AssignmentExpression
    (277) AssignmentExpression -> . ConditionalExpression
    (278) AssignmentExpression -> . Assignment
    (275) ConditionalExpression -> . ConditionalOrExpression
    (276) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (272) ConditionalOrExpression -> . ConditionalAndExpression
    (273) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (270) ConditionalAndExpression -> . InclusiveOrExpression
    (271) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC

    IDENTIFIER      shift and go to state 61
    THIS            shift and go to state 157
    LPAREN          shift and go to state 188
    NEW             shift and go to state 203
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165
    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217

    Expression                     shift and go to state 189
    AssignmentExpression           shift and go to state 190
    ConditionalExpression          shift and go to state 191
    Assignment                     shift and go to state 192
    ConditionalOrExpression        shift and go to state 193
    LeftHandSide                   shift and go to state 145
    ConditionalAndExpression       shift and go to state 194
    Name                           shift and go to state 195
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    InclusiveOrExpression          shift and go to state 196
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Primary                        shift and go to state 197
    PrimaryNoNewArray              shift and go to state 198
    ExclusiveOrExpression          shift and go to state 199
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    MethodInvocation               shift and go to state 201
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220

state 129

    (157) WhileStatement -> WHILE . prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (159) prep_fw_stack -> .

    LPAREN          reduce using rule 159 (prep_fw_stack -> .)

    prep_fw_stack                  shift and go to state 221

state 130

    (165) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (159) prep_fw_stack -> .

    LPAREN          reduce using rule 159 (prep_fw_stack -> .)

    prep_fw_stack                  shift and go to state 222

state 131

    (131) ExpressionStatement -> StatementExpression . SEMI

    SEMI            shift and go to state 223


state 132

    (145) SwitchStatement -> SWITCH . LPAREN Expression RPAREN SwitchBlock

    LPAREN          shift and go to state 224


state 133

    (162) DoStatement -> DO . prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (159) prep_fw_stack -> .

    IDENTIFIER      reduce using rule 159 (prep_fw_stack -> .)
    IF              reduce using rule 159 (prep_fw_stack -> .)
    WHILE           reduce using rule 159 (prep_fw_stack -> .)
    FOR             reduce using rule 159 (prep_fw_stack -> .)
    LBRACE          reduce using rule 159 (prep_fw_stack -> .)
    SEMI            reduce using rule 159 (prep_fw_stack -> .)
    SWITCH          reduce using rule 159 (prep_fw_stack -> .)
    DO              reduce using rule 159 (prep_fw_stack -> .)
    BREAK           reduce using rule 159 (prep_fw_stack -> .)
    CONTINUE        reduce using rule 159 (prep_fw_stack -> .)
    RETURN          reduce using rule 159 (prep_fw_stack -> .)
    INC             reduce using rule 159 (prep_fw_stack -> .)
    DEC             reduce using rule 159 (prep_fw_stack -> .)
    NEW             reduce using rule 159 (prep_fw_stack -> .)
    THIS            reduce using rule 159 (prep_fw_stack -> .)
    LPAREN          reduce using rule 159 (prep_fw_stack -> .)
    DECIMAL_LITERAL reduce using rule 159 (prep_fw_stack -> .)
    HEX_LITERAL     reduce using rule 159 (prep_fw_stack -> .)
    BINARY_LITERAL  reduce using rule 159 (prep_fw_stack -> .)
    FLOAT_LITERAL   reduce using rule 159 (prep_fw_stack -> .)
    BOOL_LITERAL    reduce using rule 159 (prep_fw_stack -> .)
    CHAR_LITERAL    reduce using rule 159 (prep_fw_stack -> .)
    STRING_LITERAL  reduce using rule 159 (prep_fw_stack -> .)
    NULL            reduce using rule 159 (prep_fw_stack -> .)

    prep_fw_stack                  shift and go to state 225

state 134

    (189) BreakStatement -> BREAK . IDENTIFIER SEMI
    (190) BreakStatement -> BREAK . SEMI

    IDENTIFIER      shift and go to state 226
    SEMI            shift and go to state 227


state 135

    (191) ContinueStatement -> CONTINUE . IDENTIFIER SEMI
    (192) ContinueStatement -> CONTINUE . SEMI

    IDENTIFIER      shift and go to state 228
    SEMI            shift and go to state 229


state 136

    (193) ReturnStatement -> RETURN . Expression SEMI
    (194) ReturnStatement -> RETURN . SEMI
    (295) Expression -> . AssignmentExpression
    (277) AssignmentExpression -> . ConditionalExpression
    (278) AssignmentExpression -> . Assignment
    (275) ConditionalExpression -> . ConditionalOrExpression
    (276) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (272) ConditionalOrExpression -> . ConditionalAndExpression
    (273) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (270) ConditionalAndExpression -> . InclusiveOrExpression
    (271) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC

    SEMI            shift and go to state 231
    IDENTIFIER      shift and go to state 61
    THIS            shift and go to state 157
    LPAREN          shift and go to state 188
    NEW             shift and go to state 203
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165
    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217

    Expression                     shift and go to state 230
    AssignmentExpression           shift and go to state 190
    ConditionalExpression          shift and go to state 191
    Assignment                     shift and go to state 192
    ConditionalOrExpression        shift and go to state 193
    LeftHandSide                   shift and go to state 145
    ConditionalAndExpression       shift and go to state 194
    Name                           shift and go to state 195
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    InclusiveOrExpression          shift and go to state 196
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Primary                        shift and go to state 197
    PrimaryNoNewArray              shift and go to state 198
    ExclusiveOrExpression          shift and go to state 199
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    MethodInvocation               shift and go to state 201
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220

state 137

    (132) StatementExpression -> Assignment .

    SEMI            reduce using rule 132 (StatementExpression -> Assignment .)
    COMMA           reduce using rule 132 (StatementExpression -> Assignment .)
    RPAREN          reduce using rule 132 (StatementExpression -> Assignment .)


state 138

    (133) StatementExpression -> PreIncrementExpression .

    SEMI            reduce using rule 133 (StatementExpression -> PreIncrementExpression .)
    COMMA           reduce using rule 133 (StatementExpression -> PreIncrementExpression .)
    RPAREN          reduce using rule 133 (StatementExpression -> PreIncrementExpression .)


state 139

    (134) StatementExpression -> PreDecrementExpression .

    SEMI            reduce using rule 134 (StatementExpression -> PreDecrementExpression .)
    COMMA           reduce using rule 134 (StatementExpression -> PreDecrementExpression .)
    RPAREN          reduce using rule 134 (StatementExpression -> PreDecrementExpression .)


state 140

    (135) StatementExpression -> PostIncrementExpression .
    (226) PostfixExpression -> PostIncrementExpression .

    SEMI            reduce using rule 135 (StatementExpression -> PostIncrementExpression .)
    COMMA           reduce using rule 135 (StatementExpression -> PostIncrementExpression .)
    RPAREN          reduce using rule 135 (StatementExpression -> PostIncrementExpression .)
    INC             reduce using rule 226 (PostfixExpression -> PostIncrementExpression .)
    DEC             reduce using rule 226 (PostfixExpression -> PostIncrementExpression .)


state 141

    (136) StatementExpression -> PostDecrementExpression .
    (227) PostfixExpression -> PostDecrementExpression .

    SEMI            reduce using rule 136 (StatementExpression -> PostDecrementExpression .)
    COMMA           reduce using rule 136 (StatementExpression -> PostDecrementExpression .)
    RPAREN          reduce using rule 136 (StatementExpression -> PostDecrementExpression .)
    INC             reduce using rule 227 (PostfixExpression -> PostDecrementExpression .)
    DEC             reduce using rule 227 (PostfixExpression -> PostDecrementExpression .)


state 142

    (137) StatementExpression -> MethodInvocation .
    (202) PrimaryNoNewArray -> MethodInvocation .

    SEMI            reduce using rule 137 (StatementExpression -> MethodInvocation .)
    COMMA           reduce using rule 137 (StatementExpression -> MethodInvocation .)
    RPAREN          reduce using rule 137 (StatementExpression -> MethodInvocation .)
    LBRACK          reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    DOT             reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    INC             reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    DEC             reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)


state 143

    (138) StatementExpression -> ClassInstanceCreationExpression .
    (200) PrimaryNoNewArray -> ClassInstanceCreationExpression .

    SEMI            reduce using rule 138 (StatementExpression -> ClassInstanceCreationExpression .)
    COMMA           reduce using rule 138 (StatementExpression -> ClassInstanceCreationExpression .)
    RPAREN          reduce using rule 138 (StatementExpression -> ClassInstanceCreationExpression .)
    LBRACK          reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    DOT             reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    INC             reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    DEC             reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)


state 144

    (27) ArrayType -> Name . Dims
    (25) ClassType -> Name .
    (219) MethodInvocation -> Name . LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> Name . LPAREN RPAREN
    (280) LeftHandSide -> Name .
    (225) PostfixExpression -> Name .
    (31) QualifiedName -> Name . DOT IDENTIFIER
    (222) ArrayAccess -> Name . LBRACK Expression RBRACK
    (215) Dims -> . LBRACK RBRACK
    (216) Dims -> . Dims LBRACK RBRACK

    IDENTIFIER      reduce using rule 25 (ClassType -> Name .)
    LPAREN          shift and go to state 232
    ASSIGN          reduce using rule 280 (LeftHandSide -> Name .)
    ADD_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    SUB_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    MUL_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    DIV_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    AND_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    OR_ASSIGN       reduce using rule 280 (LeftHandSide -> Name .)
    XOR_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    MOD_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    LSHIFT_ASSIGN   reduce using rule 280 (LeftHandSide -> Name .)
    RSHIFT_ASSIGN   reduce using rule 280 (LeftHandSide -> Name .)
    URSHIFT_ASSIGN  reduce using rule 280 (LeftHandSide -> Name .)
    INC             reduce using rule 225 (PostfixExpression -> Name .)
    DEC             reduce using rule 225 (PostfixExpression -> Name .)
    DOT             shift and go to state 99
    LBRACK          shift and go to state 233

    Dims                           shift and go to state 98

state 145

    (279) Assignment -> LeftHandSide . AssignmentOperator AssignmentExpression
    (283) AssignmentOperator -> . ASSIGN
    (284) AssignmentOperator -> . ADD_ASSIGN
    (285) AssignmentOperator -> . SUB_ASSIGN
    (286) AssignmentOperator -> . MUL_ASSIGN
    (287) AssignmentOperator -> . DIV_ASSIGN
    (288) AssignmentOperator -> . AND_ASSIGN
    (289) AssignmentOperator -> . OR_ASSIGN
    (290) AssignmentOperator -> . XOR_ASSIGN
    (291) AssignmentOperator -> . MOD_ASSIGN
    (292) AssignmentOperator -> . LSHIFT_ASSIGN
    (293) AssignmentOperator -> . RSHIFT_ASSIGN
    (294) AssignmentOperator -> . URSHIFT_ASSIGN

    ASSIGN          shift and go to state 235
    ADD_ASSIGN      shift and go to state 236
    SUB_ASSIGN      shift and go to state 237
    MUL_ASSIGN      shift and go to state 238
    DIV_ASSIGN      shift and go to state 239
    AND_ASSIGN      shift and go to state 240
    OR_ASSIGN       shift and go to state 241
    XOR_ASSIGN      shift and go to state 242
    MOD_ASSIGN      shift and go to state 243
    LSHIFT_ASSIGN   shift and go to state 244
    RSHIFT_ASSIGN   shift and go to state 245
    URSHIFT_ASSIGN  shift and go to state 246

    AssignmentOperator             shift and go to state 234

state 146

    (235) PreIncrementExpression -> INC . UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    UnaryExpression                shift and go to state 247
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 147

    (236) PreDecrementExpression -> DEC . UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    UnaryExpression                shift and go to state 253
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 148

    (228) PostIncrementExpression -> PostfixExpression . INC
    (229) PostDecrementExpression -> PostfixExpression . DEC

    INC             shift and go to state 254
    DEC             shift and go to state 255


state 149

    (218) MethodInvocation -> Primary . DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> Primary . DOT IDENTIFIER LPAREN RPAREN
    (224) PostfixExpression -> Primary .
    (217) FieldAccess -> Primary . DOT Name

    DOT             shift and go to state 256
    INC             reduce using rule 224 (PostfixExpression -> Primary .)
    DEC             reduce using rule 224 (PostfixExpression -> Primary .)


state 150

    (204) ClassInstanceCreationExpression -> NEW . ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> NEW . ClassType LPAREN ArgumentList RPAREN
    (208) ArrayCreationExpression -> NEW . PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> NEW . PrimitiveType DimExprs
    (210) ArrayCreationExpression -> NEW . ClassType DimExprs Dims
    (211) ArrayCreationExpression -> NEW . ClassType DimExprs
    (25) ClassType -> . Name
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE

    BOOLEAN         shift and go to state 63
    IDENTIFIER      shift and go to state 61
    BYTE            shift and go to state 69
    SHORT           shift and go to state 70
    INT             shift and go to state 71
    LONG            shift and go to state 72
    CHAR            shift and go to state 73
    FLOAT           shift and go to state 74
    DOUBLE          shift and go to state 75

    ClassType                      shift and go to state 257
    PrimitiveType                  shift and go to state 258
    Name                           shift and go to state 259
    NumericType                    shift and go to state 62
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    IntegralType                   shift and go to state 66
    FloatingPointType              shift and go to state 67

state 151

    (28) Name -> SimpleName .

    LPAREN          reduce using rule 28 (Name -> SimpleName .)
    DOT             reduce using rule 28 (Name -> SimpleName .)
    LBRACK          reduce using rule 28 (Name -> SimpleName .)
    IDENTIFIER      reduce using rule 28 (Name -> SimpleName .)
    ASSIGN          reduce using rule 28 (Name -> SimpleName .)
    ADD_ASSIGN      reduce using rule 28 (Name -> SimpleName .)
    SUB_ASSIGN      reduce using rule 28 (Name -> SimpleName .)
    MUL_ASSIGN      reduce using rule 28 (Name -> SimpleName .)
    DIV_ASSIGN      reduce using rule 28 (Name -> SimpleName .)
    AND_ASSIGN      reduce using rule 28 (Name -> SimpleName .)
    OR_ASSIGN       reduce using rule 28 (Name -> SimpleName .)
    XOR_ASSIGN      reduce using rule 28 (Name -> SimpleName .)
    MOD_ASSIGN      reduce using rule 28 (Name -> SimpleName .)
    LSHIFT_ASSIGN   reduce using rule 28 (Name -> SimpleName .)
    RSHIFT_ASSIGN   reduce using rule 28 (Name -> SimpleName .)
    URSHIFT_ASSIGN  reduce using rule 28 (Name -> SimpleName .)
    INC             reduce using rule 28 (Name -> SimpleName .)
    DEC             reduce using rule 28 (Name -> SimpleName .)
    MUL             reduce using rule 28 (Name -> SimpleName .)
    DIV             reduce using rule 28 (Name -> SimpleName .)
    MOD             reduce using rule 28 (Name -> SimpleName .)
    ADD             reduce using rule 28 (Name -> SimpleName .)
    SUB             reduce using rule 28 (Name -> SimpleName .)
    LSHIFT          reduce using rule 28 (Name -> SimpleName .)
    RSHIFT          reduce using rule 28 (Name -> SimpleName .)
    URSHIFT         reduce using rule 28 (Name -> SimpleName .)
    LT              reduce using rule 28 (Name -> SimpleName .)
    GT              reduce using rule 28 (Name -> SimpleName .)
    LE              reduce using rule 28 (Name -> SimpleName .)
    GE              reduce using rule 28 (Name -> SimpleName .)
    EQUAL           reduce using rule 28 (Name -> SimpleName .)
    NOTEQUAL        reduce using rule 28 (Name -> SimpleName .)
    BITAND          reduce using rule 28 (Name -> SimpleName .)
    CARET           reduce using rule 28 (Name -> SimpleName .)
    BITOR           reduce using rule 28 (Name -> SimpleName .)
    AND             reduce using rule 28 (Name -> SimpleName .)
    QUESTION        reduce using rule 28 (Name -> SimpleName .)
    OR              reduce using rule 28 (Name -> SimpleName .)
    RPAREN          reduce using rule 28 (Name -> SimpleName .)
    SEMI            reduce using rule 28 (Name -> SimpleName .)
    COMMA           reduce using rule 28 (Name -> SimpleName .)
    RBRACK          reduce using rule 28 (Name -> SimpleName .)
    COLON           reduce using rule 28 (Name -> SimpleName .)


state 152

    (281) LeftHandSide -> FieldAccess .
    (201) PrimaryNoNewArray -> FieldAccess .

    ASSIGN          reduce using rule 281 (LeftHandSide -> FieldAccess .)
    ADD_ASSIGN      reduce using rule 281 (LeftHandSide -> FieldAccess .)
    SUB_ASSIGN      reduce using rule 281 (LeftHandSide -> FieldAccess .)
    MUL_ASSIGN      reduce using rule 281 (LeftHandSide -> FieldAccess .)
    DIV_ASSIGN      reduce using rule 281 (LeftHandSide -> FieldAccess .)
    AND_ASSIGN      reduce using rule 281 (LeftHandSide -> FieldAccess .)
    OR_ASSIGN       reduce using rule 281 (LeftHandSide -> FieldAccess .)
    XOR_ASSIGN      reduce using rule 281 (LeftHandSide -> FieldAccess .)
    MOD_ASSIGN      reduce using rule 281 (LeftHandSide -> FieldAccess .)
    LSHIFT_ASSIGN   reduce using rule 281 (LeftHandSide -> FieldAccess .)
    RSHIFT_ASSIGN   reduce using rule 281 (LeftHandSide -> FieldAccess .)
    URSHIFT_ASSIGN  reduce using rule 281 (LeftHandSide -> FieldAccess .)
    LBRACK          reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    DOT             reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    INC             reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    DEC             reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    MUL             reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    DIV             reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    MOD             reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    ADD             reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    SUB             reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    LSHIFT          reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    RSHIFT          reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    URSHIFT         reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    LT              reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    GT              reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    LE              reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    GE              reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    EQUAL           reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    NOTEQUAL        reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    BITAND          reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    CARET           reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    BITOR           reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    AND             reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    QUESTION        reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    OR              reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    RPAREN          reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    SEMI            reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    COMMA           reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    RBRACK          reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    COLON           reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)


state 153

    (282) LeftHandSide -> ArrayAccess .
    (203) PrimaryNoNewArray -> ArrayAccess .

    ASSIGN          reduce using rule 282 (LeftHandSide -> ArrayAccess .)
    ADD_ASSIGN      reduce using rule 282 (LeftHandSide -> ArrayAccess .)
    SUB_ASSIGN      reduce using rule 282 (LeftHandSide -> ArrayAccess .)
    MUL_ASSIGN      reduce using rule 282 (LeftHandSide -> ArrayAccess .)
    DIV_ASSIGN      reduce using rule 282 (LeftHandSide -> ArrayAccess .)
    AND_ASSIGN      reduce using rule 282 (LeftHandSide -> ArrayAccess .)
    OR_ASSIGN       reduce using rule 282 (LeftHandSide -> ArrayAccess .)
    XOR_ASSIGN      reduce using rule 282 (LeftHandSide -> ArrayAccess .)
    MOD_ASSIGN      reduce using rule 282 (LeftHandSide -> ArrayAccess .)
    LSHIFT_ASSIGN   reduce using rule 282 (LeftHandSide -> ArrayAccess .)
    RSHIFT_ASSIGN   reduce using rule 282 (LeftHandSide -> ArrayAccess .)
    URSHIFT_ASSIGN  reduce using rule 282 (LeftHandSide -> ArrayAccess .)
    LBRACK          reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    DOT             reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    INC             reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    DEC             reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    MUL             reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    DIV             reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    MOD             reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    ADD             reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    SUB             reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    LSHIFT          reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    RSHIFT          reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    URSHIFT         reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    LT              reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    GT              reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    LE              reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    GE              reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    EQUAL           reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    NOTEQUAL        reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    BITAND          reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    CARET           reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    BITOR           reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    AND             reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    QUESTION        reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    OR              reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    RPAREN          reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    SEMI            reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    COMMA           reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    RBRACK          reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    COLON           reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)


state 154

    (195) Primary -> PrimaryNoNewArray .
    (223) ArrayAccess -> PrimaryNoNewArray . LBRACK Expression RBRACK

    DOT             reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    INC             reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    DEC             reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    SEMI            reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    MUL             reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    DIV             reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    MOD             reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    ADD             reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    SUB             reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    LSHIFT          reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    RSHIFT          reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    URSHIFT         reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    LT              reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    GT              reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    LE              reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    GE              reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    EQUAL           reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    NOTEQUAL        reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    BITAND          reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    CARET           reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    BITOR           reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    AND             reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    QUESTION        reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    OR              reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    RPAREN          reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    COMMA           reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    RBRACK          reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    COLON           reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    LBRACK          shift and go to state 260


state 155

    (196) Primary -> ArrayCreationExpression .

    DOT             reduce using rule 196 (Primary -> ArrayCreationExpression .)
    INC             reduce using rule 196 (Primary -> ArrayCreationExpression .)
    DEC             reduce using rule 196 (Primary -> ArrayCreationExpression .)
    MUL             reduce using rule 196 (Primary -> ArrayCreationExpression .)
    DIV             reduce using rule 196 (Primary -> ArrayCreationExpression .)
    MOD             reduce using rule 196 (Primary -> ArrayCreationExpression .)
    ADD             reduce using rule 196 (Primary -> ArrayCreationExpression .)
    SUB             reduce using rule 196 (Primary -> ArrayCreationExpression .)
    LSHIFT          reduce using rule 196 (Primary -> ArrayCreationExpression .)
    RSHIFT          reduce using rule 196 (Primary -> ArrayCreationExpression .)
    URSHIFT         reduce using rule 196 (Primary -> ArrayCreationExpression .)
    LT              reduce using rule 196 (Primary -> ArrayCreationExpression .)
    GT              reduce using rule 196 (Primary -> ArrayCreationExpression .)
    LE              reduce using rule 196 (Primary -> ArrayCreationExpression .)
    GE              reduce using rule 196 (Primary -> ArrayCreationExpression .)
    EQUAL           reduce using rule 196 (Primary -> ArrayCreationExpression .)
    NOTEQUAL        reduce using rule 196 (Primary -> ArrayCreationExpression .)
    BITAND          reduce using rule 196 (Primary -> ArrayCreationExpression .)
    CARET           reduce using rule 196 (Primary -> ArrayCreationExpression .)
    BITOR           reduce using rule 196 (Primary -> ArrayCreationExpression .)
    AND             reduce using rule 196 (Primary -> ArrayCreationExpression .)
    QUESTION        reduce using rule 196 (Primary -> ArrayCreationExpression .)
    OR              reduce using rule 196 (Primary -> ArrayCreationExpression .)
    RPAREN          reduce using rule 196 (Primary -> ArrayCreationExpression .)
    SEMI            reduce using rule 196 (Primary -> ArrayCreationExpression .)
    COMMA           reduce using rule 196 (Primary -> ArrayCreationExpression .)
    RBRACK          reduce using rule 196 (Primary -> ArrayCreationExpression .)
    COLON           reduce using rule 196 (Primary -> ArrayCreationExpression .)


state 156

    (197) PrimaryNoNewArray -> Literal .

    LBRACK          reduce using rule 197 (PrimaryNoNewArray -> Literal .)
    DOT             reduce using rule 197 (PrimaryNoNewArray -> Literal .)
    INC             reduce using rule 197 (PrimaryNoNewArray -> Literal .)
    DEC             reduce using rule 197 (PrimaryNoNewArray -> Literal .)
    MUL             reduce using rule 197 (PrimaryNoNewArray -> Literal .)
    DIV             reduce using rule 197 (PrimaryNoNewArray -> Literal .)
    MOD             reduce using rule 197 (PrimaryNoNewArray -> Literal .)
    ADD             reduce using rule 197 (PrimaryNoNewArray -> Literal .)
    SUB             reduce using rule 197 (PrimaryNoNewArray -> Literal .)
    LSHIFT          reduce using rule 197 (PrimaryNoNewArray -> Literal .)
    RSHIFT          reduce using rule 197 (PrimaryNoNewArray -> Literal .)
    URSHIFT         reduce using rule 197 (PrimaryNoNewArray -> Literal .)
    LT              reduce using rule 197 (PrimaryNoNewArray -> Literal .)
    GT              reduce using rule 197 (PrimaryNoNewArray -> Literal .)
    LE              reduce using rule 197 (PrimaryNoNewArray -> Literal .)
    GE              reduce using rule 197 (PrimaryNoNewArray -> Literal .)
    EQUAL           reduce using rule 197 (PrimaryNoNewArray -> Literal .)
    NOTEQUAL        reduce using rule 197 (PrimaryNoNewArray -> Literal .)
    BITAND          reduce using rule 197 (PrimaryNoNewArray -> Literal .)
    CARET           reduce using rule 197 (PrimaryNoNewArray -> Literal .)
    BITOR           reduce using rule 197 (PrimaryNoNewArray -> Literal .)
    AND             reduce using rule 197 (PrimaryNoNewArray -> Literal .)
    QUESTION        reduce using rule 197 (PrimaryNoNewArray -> Literal .)
    OR              reduce using rule 197 (PrimaryNoNewArray -> Literal .)
    RPAREN          reduce using rule 197 (PrimaryNoNewArray -> Literal .)
    SEMI            reduce using rule 197 (PrimaryNoNewArray -> Literal .)
    COMMA           reduce using rule 197 (PrimaryNoNewArray -> Literal .)
    RBRACK          reduce using rule 197 (PrimaryNoNewArray -> Literal .)
    COLON           reduce using rule 197 (PrimaryNoNewArray -> Literal .)


state 157

    (198) PrimaryNoNewArray -> THIS .

    LBRACK          reduce using rule 198 (PrimaryNoNewArray -> THIS .)
    DOT             reduce using rule 198 (PrimaryNoNewArray -> THIS .)
    INC             reduce using rule 198 (PrimaryNoNewArray -> THIS .)
    DEC             reduce using rule 198 (PrimaryNoNewArray -> THIS .)
    MUL             reduce using rule 198 (PrimaryNoNewArray -> THIS .)
    DIV             reduce using rule 198 (PrimaryNoNewArray -> THIS .)
    MOD             reduce using rule 198 (PrimaryNoNewArray -> THIS .)
    ADD             reduce using rule 198 (PrimaryNoNewArray -> THIS .)
    SUB             reduce using rule 198 (PrimaryNoNewArray -> THIS .)
    LSHIFT          reduce using rule 198 (PrimaryNoNewArray -> THIS .)
    RSHIFT          reduce using rule 198 (PrimaryNoNewArray -> THIS .)
    URSHIFT         reduce using rule 198 (PrimaryNoNewArray -> THIS .)
    LT              reduce using rule 198 (PrimaryNoNewArray -> THIS .)
    GT              reduce using rule 198 (PrimaryNoNewArray -> THIS .)
    LE              reduce using rule 198 (PrimaryNoNewArray -> THIS .)
    GE              reduce using rule 198 (PrimaryNoNewArray -> THIS .)
    EQUAL           reduce using rule 198 (PrimaryNoNewArray -> THIS .)
    NOTEQUAL        reduce using rule 198 (PrimaryNoNewArray -> THIS .)
    BITAND          reduce using rule 198 (PrimaryNoNewArray -> THIS .)
    CARET           reduce using rule 198 (PrimaryNoNewArray -> THIS .)
    BITOR           reduce using rule 198 (PrimaryNoNewArray -> THIS .)
    AND             reduce using rule 198 (PrimaryNoNewArray -> THIS .)
    QUESTION        reduce using rule 198 (PrimaryNoNewArray -> THIS .)
    OR              reduce using rule 198 (PrimaryNoNewArray -> THIS .)
    RPAREN          reduce using rule 198 (PrimaryNoNewArray -> THIS .)
    SEMI            reduce using rule 198 (PrimaryNoNewArray -> THIS .)
    COMMA           reduce using rule 198 (PrimaryNoNewArray -> THIS .)
    RBRACK          reduce using rule 198 (PrimaryNoNewArray -> THIS .)
    COLON           reduce using rule 198 (PrimaryNoNewArray -> THIS .)


state 158

    (2) Literal -> DECIMAL_LITERAL .

    LBRACK          reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    DOT             reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    INC             reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    DEC             reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    MUL             reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    DIV             reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    MOD             reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    ADD             reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    SUB             reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    LSHIFT          reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    RSHIFT          reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    URSHIFT         reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    LT              reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    GT              reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    LE              reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    GE              reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    EQUAL           reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    NOTEQUAL        reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    BITAND          reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    CARET           reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    BITOR           reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    AND             reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    QUESTION        reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    OR              reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    RPAREN          reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    SEMI            reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    COMMA           reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    RBRACK          reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    COLON           reduce using rule 2 (Literal -> DECIMAL_LITERAL .)


state 159

    (3) Literal -> HEX_LITERAL .

    LBRACK          reduce using rule 3 (Literal -> HEX_LITERAL .)
    DOT             reduce using rule 3 (Literal -> HEX_LITERAL .)
    INC             reduce using rule 3 (Literal -> HEX_LITERAL .)
    DEC             reduce using rule 3 (Literal -> HEX_LITERAL .)
    MUL             reduce using rule 3 (Literal -> HEX_LITERAL .)
    DIV             reduce using rule 3 (Literal -> HEX_LITERAL .)
    MOD             reduce using rule 3 (Literal -> HEX_LITERAL .)
    ADD             reduce using rule 3 (Literal -> HEX_LITERAL .)
    SUB             reduce using rule 3 (Literal -> HEX_LITERAL .)
    LSHIFT          reduce using rule 3 (Literal -> HEX_LITERAL .)
    RSHIFT          reduce using rule 3 (Literal -> HEX_LITERAL .)
    URSHIFT         reduce using rule 3 (Literal -> HEX_LITERAL .)
    LT              reduce using rule 3 (Literal -> HEX_LITERAL .)
    GT              reduce using rule 3 (Literal -> HEX_LITERAL .)
    LE              reduce using rule 3 (Literal -> HEX_LITERAL .)
    GE              reduce using rule 3 (Literal -> HEX_LITERAL .)
    EQUAL           reduce using rule 3 (Literal -> HEX_LITERAL .)
    NOTEQUAL        reduce using rule 3 (Literal -> HEX_LITERAL .)
    BITAND          reduce using rule 3 (Literal -> HEX_LITERAL .)
    CARET           reduce using rule 3 (Literal -> HEX_LITERAL .)
    BITOR           reduce using rule 3 (Literal -> HEX_LITERAL .)
    AND             reduce using rule 3 (Literal -> HEX_LITERAL .)
    QUESTION        reduce using rule 3 (Literal -> HEX_LITERAL .)
    OR              reduce using rule 3 (Literal -> HEX_LITERAL .)
    RPAREN          reduce using rule 3 (Literal -> HEX_LITERAL .)
    SEMI            reduce using rule 3 (Literal -> HEX_LITERAL .)
    COMMA           reduce using rule 3 (Literal -> HEX_LITERAL .)
    RBRACK          reduce using rule 3 (Literal -> HEX_LITERAL .)
    COLON           reduce using rule 3 (Literal -> HEX_LITERAL .)


state 160

    (4) Literal -> BINARY_LITERAL .

    LBRACK          reduce using rule 4 (Literal -> BINARY_LITERAL .)
    DOT             reduce using rule 4 (Literal -> BINARY_LITERAL .)
    INC             reduce using rule 4 (Literal -> BINARY_LITERAL .)
    DEC             reduce using rule 4 (Literal -> BINARY_LITERAL .)
    MUL             reduce using rule 4 (Literal -> BINARY_LITERAL .)
    DIV             reduce using rule 4 (Literal -> BINARY_LITERAL .)
    MOD             reduce using rule 4 (Literal -> BINARY_LITERAL .)
    ADD             reduce using rule 4 (Literal -> BINARY_LITERAL .)
    SUB             reduce using rule 4 (Literal -> BINARY_LITERAL .)
    LSHIFT          reduce using rule 4 (Literal -> BINARY_LITERAL .)
    RSHIFT          reduce using rule 4 (Literal -> BINARY_LITERAL .)
    URSHIFT         reduce using rule 4 (Literal -> BINARY_LITERAL .)
    LT              reduce using rule 4 (Literal -> BINARY_LITERAL .)
    GT              reduce using rule 4 (Literal -> BINARY_LITERAL .)
    LE              reduce using rule 4 (Literal -> BINARY_LITERAL .)
    GE              reduce using rule 4 (Literal -> BINARY_LITERAL .)
    EQUAL           reduce using rule 4 (Literal -> BINARY_LITERAL .)
    NOTEQUAL        reduce using rule 4 (Literal -> BINARY_LITERAL .)
    BITAND          reduce using rule 4 (Literal -> BINARY_LITERAL .)
    CARET           reduce using rule 4 (Literal -> BINARY_LITERAL .)
    BITOR           reduce using rule 4 (Literal -> BINARY_LITERAL .)
    AND             reduce using rule 4 (Literal -> BINARY_LITERAL .)
    QUESTION        reduce using rule 4 (Literal -> BINARY_LITERAL .)
    OR              reduce using rule 4 (Literal -> BINARY_LITERAL .)
    RPAREN          reduce using rule 4 (Literal -> BINARY_LITERAL .)
    SEMI            reduce using rule 4 (Literal -> BINARY_LITERAL .)
    COMMA           reduce using rule 4 (Literal -> BINARY_LITERAL .)
    RBRACK          reduce using rule 4 (Literal -> BINARY_LITERAL .)
    COLON           reduce using rule 4 (Literal -> BINARY_LITERAL .)


state 161

    (5) Literal -> FLOAT_LITERAL .

    LBRACK          reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    DOT             reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    INC             reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    DEC             reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    MUL             reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    DIV             reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    MOD             reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    ADD             reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    SUB             reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    LSHIFT          reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    RSHIFT          reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    URSHIFT         reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    LT              reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    GT              reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    LE              reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    GE              reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    EQUAL           reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    NOTEQUAL        reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    BITAND          reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    CARET           reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    BITOR           reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    AND             reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    QUESTION        reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    OR              reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    RPAREN          reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    SEMI            reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    COMMA           reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    RBRACK          reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    COLON           reduce using rule 5 (Literal -> FLOAT_LITERAL .)


state 162

    (6) Literal -> BOOL_LITERAL .

    LBRACK          reduce using rule 6 (Literal -> BOOL_LITERAL .)
    DOT             reduce using rule 6 (Literal -> BOOL_LITERAL .)
    INC             reduce using rule 6 (Literal -> BOOL_LITERAL .)
    DEC             reduce using rule 6 (Literal -> BOOL_LITERAL .)
    MUL             reduce using rule 6 (Literal -> BOOL_LITERAL .)
    DIV             reduce using rule 6 (Literal -> BOOL_LITERAL .)
    MOD             reduce using rule 6 (Literal -> BOOL_LITERAL .)
    ADD             reduce using rule 6 (Literal -> BOOL_LITERAL .)
    SUB             reduce using rule 6 (Literal -> BOOL_LITERAL .)
    LSHIFT          reduce using rule 6 (Literal -> BOOL_LITERAL .)
    RSHIFT          reduce using rule 6 (Literal -> BOOL_LITERAL .)
    URSHIFT         reduce using rule 6 (Literal -> BOOL_LITERAL .)
    LT              reduce using rule 6 (Literal -> BOOL_LITERAL .)
    GT              reduce using rule 6 (Literal -> BOOL_LITERAL .)
    LE              reduce using rule 6 (Literal -> BOOL_LITERAL .)
    GE              reduce using rule 6 (Literal -> BOOL_LITERAL .)
    EQUAL           reduce using rule 6 (Literal -> BOOL_LITERAL .)
    NOTEQUAL        reduce using rule 6 (Literal -> BOOL_LITERAL .)
    BITAND          reduce using rule 6 (Literal -> BOOL_LITERAL .)
    CARET           reduce using rule 6 (Literal -> BOOL_LITERAL .)
    BITOR           reduce using rule 6 (Literal -> BOOL_LITERAL .)
    AND             reduce using rule 6 (Literal -> BOOL_LITERAL .)
    QUESTION        reduce using rule 6 (Literal -> BOOL_LITERAL .)
    OR              reduce using rule 6 (Literal -> BOOL_LITERAL .)
    RPAREN          reduce using rule 6 (Literal -> BOOL_LITERAL .)
    SEMI            reduce using rule 6 (Literal -> BOOL_LITERAL .)
    COMMA           reduce using rule 6 (Literal -> BOOL_LITERAL .)
    RBRACK          reduce using rule 6 (Literal -> BOOL_LITERAL .)
    COLON           reduce using rule 6 (Literal -> BOOL_LITERAL .)


state 163

    (7) Literal -> CHAR_LITERAL .

    LBRACK          reduce using rule 7 (Literal -> CHAR_LITERAL .)
    DOT             reduce using rule 7 (Literal -> CHAR_LITERAL .)
    INC             reduce using rule 7 (Literal -> CHAR_LITERAL .)
    DEC             reduce using rule 7 (Literal -> CHAR_LITERAL .)
    MUL             reduce using rule 7 (Literal -> CHAR_LITERAL .)
    DIV             reduce using rule 7 (Literal -> CHAR_LITERAL .)
    MOD             reduce using rule 7 (Literal -> CHAR_LITERAL .)
    ADD             reduce using rule 7 (Literal -> CHAR_LITERAL .)
    SUB             reduce using rule 7 (Literal -> CHAR_LITERAL .)
    LSHIFT          reduce using rule 7 (Literal -> CHAR_LITERAL .)
    RSHIFT          reduce using rule 7 (Literal -> CHAR_LITERAL .)
    URSHIFT         reduce using rule 7 (Literal -> CHAR_LITERAL .)
    LT              reduce using rule 7 (Literal -> CHAR_LITERAL .)
    GT              reduce using rule 7 (Literal -> CHAR_LITERAL .)
    LE              reduce using rule 7 (Literal -> CHAR_LITERAL .)
    GE              reduce using rule 7 (Literal -> CHAR_LITERAL .)
    EQUAL           reduce using rule 7 (Literal -> CHAR_LITERAL .)
    NOTEQUAL        reduce using rule 7 (Literal -> CHAR_LITERAL .)
    BITAND          reduce using rule 7 (Literal -> CHAR_LITERAL .)
    CARET           reduce using rule 7 (Literal -> CHAR_LITERAL .)
    BITOR           reduce using rule 7 (Literal -> CHAR_LITERAL .)
    AND             reduce using rule 7 (Literal -> CHAR_LITERAL .)
    QUESTION        reduce using rule 7 (Literal -> CHAR_LITERAL .)
    OR              reduce using rule 7 (Literal -> CHAR_LITERAL .)
    RPAREN          reduce using rule 7 (Literal -> CHAR_LITERAL .)
    SEMI            reduce using rule 7 (Literal -> CHAR_LITERAL .)
    COMMA           reduce using rule 7 (Literal -> CHAR_LITERAL .)
    RBRACK          reduce using rule 7 (Literal -> CHAR_LITERAL .)
    COLON           reduce using rule 7 (Literal -> CHAR_LITERAL .)


state 164

    (8) Literal -> STRING_LITERAL .

    LBRACK          reduce using rule 8 (Literal -> STRING_LITERAL .)
    DOT             reduce using rule 8 (Literal -> STRING_LITERAL .)
    INC             reduce using rule 8 (Literal -> STRING_LITERAL .)
    DEC             reduce using rule 8 (Literal -> STRING_LITERAL .)
    MUL             reduce using rule 8 (Literal -> STRING_LITERAL .)
    DIV             reduce using rule 8 (Literal -> STRING_LITERAL .)
    MOD             reduce using rule 8 (Literal -> STRING_LITERAL .)
    ADD             reduce using rule 8 (Literal -> STRING_LITERAL .)
    SUB             reduce using rule 8 (Literal -> STRING_LITERAL .)
    LSHIFT          reduce using rule 8 (Literal -> STRING_LITERAL .)
    RSHIFT          reduce using rule 8 (Literal -> STRING_LITERAL .)
    URSHIFT         reduce using rule 8 (Literal -> STRING_LITERAL .)
    LT              reduce using rule 8 (Literal -> STRING_LITERAL .)
    GT              reduce using rule 8 (Literal -> STRING_LITERAL .)
    LE              reduce using rule 8 (Literal -> STRING_LITERAL .)
    GE              reduce using rule 8 (Literal -> STRING_LITERAL .)
    EQUAL           reduce using rule 8 (Literal -> STRING_LITERAL .)
    NOTEQUAL        reduce using rule 8 (Literal -> STRING_LITERAL .)
    BITAND          reduce using rule 8 (Literal -> STRING_LITERAL .)
    CARET           reduce using rule 8 (Literal -> STRING_LITERAL .)
    BITOR           reduce using rule 8 (Literal -> STRING_LITERAL .)
    AND             reduce using rule 8 (Literal -> STRING_LITERAL .)
    QUESTION        reduce using rule 8 (Literal -> STRING_LITERAL .)
    OR              reduce using rule 8 (Literal -> STRING_LITERAL .)
    RPAREN          reduce using rule 8 (Literal -> STRING_LITERAL .)
    SEMI            reduce using rule 8 (Literal -> STRING_LITERAL .)
    COMMA           reduce using rule 8 (Literal -> STRING_LITERAL .)
    RBRACK          reduce using rule 8 (Literal -> STRING_LITERAL .)
    COLON           reduce using rule 8 (Literal -> STRING_LITERAL .)


state 165

    (9) Literal -> NULL .

    LBRACK          reduce using rule 9 (Literal -> NULL .)
    DOT             reduce using rule 9 (Literal -> NULL .)
    INC             reduce using rule 9 (Literal -> NULL .)
    DEC             reduce using rule 9 (Literal -> NULL .)
    MUL             reduce using rule 9 (Literal -> NULL .)
    DIV             reduce using rule 9 (Literal -> NULL .)
    MOD             reduce using rule 9 (Literal -> NULL .)
    ADD             reduce using rule 9 (Literal -> NULL .)
    SUB             reduce using rule 9 (Literal -> NULL .)
    LSHIFT          reduce using rule 9 (Literal -> NULL .)
    RSHIFT          reduce using rule 9 (Literal -> NULL .)
    URSHIFT         reduce using rule 9 (Literal -> NULL .)
    LT              reduce using rule 9 (Literal -> NULL .)
    GT              reduce using rule 9 (Literal -> NULL .)
    LE              reduce using rule 9 (Literal -> NULL .)
    GE              reduce using rule 9 (Literal -> NULL .)
    EQUAL           reduce using rule 9 (Literal -> NULL .)
    NOTEQUAL        reduce using rule 9 (Literal -> NULL .)
    BITAND          reduce using rule 9 (Literal -> NULL .)
    CARET           reduce using rule 9 (Literal -> NULL .)
    BITOR           reduce using rule 9 (Literal -> NULL .)
    AND             reduce using rule 9 (Literal -> NULL .)
    QUESTION        reduce using rule 9 (Literal -> NULL .)
    OR              reduce using rule 9 (Literal -> NULL .)
    RPAREN          reduce using rule 9 (Literal -> NULL .)
    SEMI            reduce using rule 9 (Literal -> NULL .)
    COMMA           reduce using rule 9 (Literal -> NULL .)
    RBRACK          reduce using rule 9 (Literal -> NULL .)
    COLON           reduce using rule 9 (Literal -> NULL .)


state 166

    (70) FieldDeclaration -> Type VariableDeclarators SEMI .

    RBRACE          reduce using rule 70 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    VOID            reduce using rule 70 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    STATIC          reduce using rule 70 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    FINAL           reduce using rule 70 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    PRIVATE         reduce using rule 70 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    PROTECTED       reduce using rule 70 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    PUBLIC          reduce using rule 70 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    IDENTIFIER      reduce using rule 70 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    BOOLEAN         reduce using rule 70 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    BYTE            reduce using rule 70 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    SHORT           reduce using rule 70 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    INT             reduce using rule 70 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    LONG            reduce using rule 70 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    CHAR            reduce using rule 70 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    FLOAT           reduce using rule 70 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    DOUBLE          reduce using rule 70 (FieldDeclaration -> Type VariableDeclarators SEMI .)


state 167

    (72) VariableDeclarators -> VariableDeclarators COMMA . VariableDeclarator
    (73) VariableDeclarator -> . VariableDeclaratorId
    (74) VariableDeclarator -> . VariableDeclaratorId ASSIGN VariableInitializer
    (75) VariableDeclaratorId -> . IDENTIFIER
    (76) VariableDeclaratorId -> . IDENTIFIER Dims

    IDENTIFIER      shift and go to state 185

    VariableDeclarator             shift and go to state 261
    VariableDeclaratorId           shift and go to state 88

state 168

    (83) MethodDeclarator -> IDENTIFIER LPAREN . RPAREN
    (84) MethodDeclarator -> IDENTIFIER LPAREN . FormalParameterList RPAREN
    (85) FormalParameterList -> . FormalParameter
    (86) FormalParameterList -> . FormalParameterList COMMA FormalParameter
    (87) FormalParameter -> . Type VariableDeclaratorId
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER

    RPAREN          shift and go to state 262
    BOOLEAN         shift and go to state 63
    BYTE            shift and go to state 69
    SHORT           shift and go to state 70
    INT             shift and go to state 71
    LONG            shift and go to state 72
    CHAR            shift and go to state 73
    FLOAT           shift and go to state 74
    DOUBLE          shift and go to state 75
    IDENTIFIER      shift and go to state 61

    FormalParameterList            shift and go to state 263
    FormalParameter                shift and go to state 175
    Type                           shift and go to state 176
    PrimitiveType                  shift and go to state 58
    ReferenceType                  shift and go to state 59
    NumericType                    shift and go to state 62
    ArrayType                      shift and go to state 64
    ClassType                      shift and go to state 65
    IntegralType                   shift and go to state 66
    FloatingPointType              shift and go to state 67
    Name                           shift and go to state 68
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76

state 169

    (76) VariableDeclaratorId -> IDENTIFIER Dims .
    (216) Dims -> Dims . LBRACK RBRACK

    ASSIGN          reduce using rule 76 (VariableDeclaratorId -> IDENTIFIER Dims .)
    SEMI            reduce using rule 76 (VariableDeclaratorId -> IDENTIFIER Dims .)
    COMMA           reduce using rule 76 (VariableDeclaratorId -> IDENTIFIER Dims .)
    RPAREN          reduce using rule 76 (VariableDeclaratorId -> IDENTIFIER Dims .)
    LBRACK          shift and go to state 177


state 170

    (74) VariableDeclarator -> VariableDeclaratorId ASSIGN . VariableInitializer
    (77) VariableInitializer -> . Expression
    (295) Expression -> . AssignmentExpression
    (277) AssignmentExpression -> . ConditionalExpression
    (278) AssignmentExpression -> . Assignment
    (275) ConditionalExpression -> . ConditionalOrExpression
    (276) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (272) ConditionalOrExpression -> . ConditionalAndExpression
    (273) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (270) ConditionalAndExpression -> . InclusiveOrExpression
    (271) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC

    IDENTIFIER      shift and go to state 61
    THIS            shift and go to state 157
    LPAREN          shift and go to state 188
    NEW             shift and go to state 203
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165
    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217

    VariableInitializer            shift and go to state 264
    Expression                     shift and go to state 265
    AssignmentExpression           shift and go to state 190
    ConditionalExpression          shift and go to state 191
    Assignment                     shift and go to state 192
    ConditionalOrExpression        shift and go to state 193
    LeftHandSide                   shift and go to state 145
    ConditionalAndExpression       shift and go to state 194
    Name                           shift and go to state 195
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    InclusiveOrExpression          shift and go to state 196
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Primary                        shift and go to state 197
    PrimaryNoNewArray              shift and go to state 198
    ExclusiveOrExpression          shift and go to state 199
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    MethodInvocation               shift and go to state 201
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220

state 171

    (101) Block -> LBRACE RBRACE .

    RBRACE          reduce using rule 101 (Block -> LBRACE RBRACE .)
    VOID            reduce using rule 101 (Block -> LBRACE RBRACE .)
    STATIC          reduce using rule 101 (Block -> LBRACE RBRACE .)
    FINAL           reduce using rule 101 (Block -> LBRACE RBRACE .)
    PRIVATE         reduce using rule 101 (Block -> LBRACE RBRACE .)
    PROTECTED       reduce using rule 101 (Block -> LBRACE RBRACE .)
    PUBLIC          reduce using rule 101 (Block -> LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 101 (Block -> LBRACE RBRACE .)
    BOOLEAN         reduce using rule 101 (Block -> LBRACE RBRACE .)
    BYTE            reduce using rule 101 (Block -> LBRACE RBRACE .)
    SHORT           reduce using rule 101 (Block -> LBRACE RBRACE .)
    INT             reduce using rule 101 (Block -> LBRACE RBRACE .)
    LONG            reduce using rule 101 (Block -> LBRACE RBRACE .)
    CHAR            reduce using rule 101 (Block -> LBRACE RBRACE .)
    FLOAT           reduce using rule 101 (Block -> LBRACE RBRACE .)
    DOUBLE          reduce using rule 101 (Block -> LBRACE RBRACE .)
    IF              reduce using rule 101 (Block -> LBRACE RBRACE .)
    WHILE           reduce using rule 101 (Block -> LBRACE RBRACE .)
    FOR             reduce using rule 101 (Block -> LBRACE RBRACE .)
    LBRACE          reduce using rule 101 (Block -> LBRACE RBRACE .)
    SEMI            reduce using rule 101 (Block -> LBRACE RBRACE .)
    SWITCH          reduce using rule 101 (Block -> LBRACE RBRACE .)
    DO              reduce using rule 101 (Block -> LBRACE RBRACE .)
    BREAK           reduce using rule 101 (Block -> LBRACE RBRACE .)
    CONTINUE        reduce using rule 101 (Block -> LBRACE RBRACE .)
    RETURN          reduce using rule 101 (Block -> LBRACE RBRACE .)
    INC             reduce using rule 101 (Block -> LBRACE RBRACE .)
    DEC             reduce using rule 101 (Block -> LBRACE RBRACE .)
    NEW             reduce using rule 101 (Block -> LBRACE RBRACE .)
    THIS            reduce using rule 101 (Block -> LBRACE RBRACE .)
    LPAREN          reduce using rule 101 (Block -> LBRACE RBRACE .)
    DECIMAL_LITERAL reduce using rule 101 (Block -> LBRACE RBRACE .)
    HEX_LITERAL     reduce using rule 101 (Block -> LBRACE RBRACE .)
    BINARY_LITERAL  reduce using rule 101 (Block -> LBRACE RBRACE .)
    FLOAT_LITERAL   reduce using rule 101 (Block -> LBRACE RBRACE .)
    BOOL_LITERAL    reduce using rule 101 (Block -> LBRACE RBRACE .)
    CHAR_LITERAL    reduce using rule 101 (Block -> LBRACE RBRACE .)
    STRING_LITERAL  reduce using rule 101 (Block -> LBRACE RBRACE .)
    NULL            reduce using rule 101 (Block -> LBRACE RBRACE .)
    CASE            reduce using rule 101 (Block -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 101 (Block -> LBRACE RBRACE .)
    ELSE            reduce using rule 101 (Block -> LBRACE RBRACE .)


state 172

    (102) Block -> LBRACE BlockStatements . RBRACE
    (104) BlockStatements -> BlockStatements . BlockStatement
    (105) BlockStatement -> . LocalVariableDeclarationStatement
    (106) BlockStatement -> . Statement
    (107) LocalVariableDeclarationStatement -> . LocalVariableDeclaration SEMI
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (108) LocalVariableDeclaration -> . Type VariableDeclarators
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RBRACE          shift and go to state 266
    IDENTIFIER      shift and go to state 126
    IF              shift and go to state 127
    WHILE           shift and go to state 129
    FOR             shift and go to state 130
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    BOOLEAN         shift and go to state 63
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    BYTE            shift and go to state 69
    SHORT           shift and go to state 70
    INT             shift and go to state 71
    LONG            shift and go to state 72
    CHAR            shift and go to state 73
    FLOAT           shift and go to state 74
    DOUBLE          shift and go to state 75
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    BlockStatement                 shift and go to state 182
    LocalVariableDeclarationStatement shift and go to state 107
    Statement                      shift and go to state 108
    LocalVariableDeclaration       shift and go to state 109
    StatementWithoutTrailingSubstatement shift and go to state 111
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    Type                           shift and go to state 117
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    PrimitiveType                  shift and go to state 58
    ReferenceType                  shift and go to state 59
    StatementExpression            shift and go to state 131
    NumericType                    shift and go to state 62
    ArrayType                      shift and go to state 64
    ClassType                      shift and go to state 65
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    IntegralType                   shift and go to state 66
    FloatingPointType              shift and go to state 67
    Name                           shift and go to state 144
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156

state 173

    (92) ConstructorDeclarator -> SimpleName LPAREN FormalParameterList . RPAREN
    (86) FormalParameterList -> FormalParameterList . COMMA FormalParameter

    RPAREN          shift and go to state 267
    COMMA           shift and go to state 268


state 174

    (93) ConstructorDeclarator -> SimpleName LPAREN RPAREN .

    LBRACE          reduce using rule 93 (ConstructorDeclarator -> SimpleName LPAREN RPAREN .)
    RBRACE          reduce using rule 93 (ConstructorDeclarator -> SimpleName LPAREN RPAREN .)
    VOID            reduce using rule 93 (ConstructorDeclarator -> SimpleName LPAREN RPAREN .)
    STATIC          reduce using rule 93 (ConstructorDeclarator -> SimpleName LPAREN RPAREN .)
    FINAL           reduce using rule 93 (ConstructorDeclarator -> SimpleName LPAREN RPAREN .)
    PRIVATE         reduce using rule 93 (ConstructorDeclarator -> SimpleName LPAREN RPAREN .)
    PROTECTED       reduce using rule 93 (ConstructorDeclarator -> SimpleName LPAREN RPAREN .)
    PUBLIC          reduce using rule 93 (ConstructorDeclarator -> SimpleName LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 93 (ConstructorDeclarator -> SimpleName LPAREN RPAREN .)
    BOOLEAN         reduce using rule 93 (ConstructorDeclarator -> SimpleName LPAREN RPAREN .)
    BYTE            reduce using rule 93 (ConstructorDeclarator -> SimpleName LPAREN RPAREN .)
    SHORT           reduce using rule 93 (ConstructorDeclarator -> SimpleName LPAREN RPAREN .)
    INT             reduce using rule 93 (ConstructorDeclarator -> SimpleName LPAREN RPAREN .)
    LONG            reduce using rule 93 (ConstructorDeclarator -> SimpleName LPAREN RPAREN .)
    CHAR            reduce using rule 93 (ConstructorDeclarator -> SimpleName LPAREN RPAREN .)
    FLOAT           reduce using rule 93 (ConstructorDeclarator -> SimpleName LPAREN RPAREN .)
    DOUBLE          reduce using rule 93 (ConstructorDeclarator -> SimpleName LPAREN RPAREN .)


state 175

    (85) FormalParameterList -> FormalParameter .

    RPAREN          reduce using rule 85 (FormalParameterList -> FormalParameter .)
    COMMA           reduce using rule 85 (FormalParameterList -> FormalParameter .)


state 176

    (87) FormalParameter -> Type . VariableDeclaratorId
    (75) VariableDeclaratorId -> . IDENTIFIER
    (76) VariableDeclaratorId -> . IDENTIFIER Dims

    IDENTIFIER      shift and go to state 185

    VariableDeclaratorId           shift and go to state 269

state 177

    (216) Dims -> Dims LBRACK . RBRACK

    RBRACK          shift and go to state 270


state 178

    (215) Dims -> LBRACK RBRACK .

    LBRACK          reduce using rule 215 (Dims -> LBRACK RBRACK .)
    IDENTIFIER      reduce using rule 215 (Dims -> LBRACK RBRACK .)
    ASSIGN          reduce using rule 215 (Dims -> LBRACK RBRACK .)
    SEMI            reduce using rule 215 (Dims -> LBRACK RBRACK .)
    COMMA           reduce using rule 215 (Dims -> LBRACK RBRACK .)
    RPAREN          reduce using rule 215 (Dims -> LBRACK RBRACK .)
    DOT             reduce using rule 215 (Dims -> LBRACK RBRACK .)
    INC             reduce using rule 215 (Dims -> LBRACK RBRACK .)
    DEC             reduce using rule 215 (Dims -> LBRACK RBRACK .)
    MUL             reduce using rule 215 (Dims -> LBRACK RBRACK .)
    DIV             reduce using rule 215 (Dims -> LBRACK RBRACK .)
    MOD             reduce using rule 215 (Dims -> LBRACK RBRACK .)
    ADD             reduce using rule 215 (Dims -> LBRACK RBRACK .)
    SUB             reduce using rule 215 (Dims -> LBRACK RBRACK .)
    LSHIFT          reduce using rule 215 (Dims -> LBRACK RBRACK .)
    RSHIFT          reduce using rule 215 (Dims -> LBRACK RBRACK .)
    URSHIFT         reduce using rule 215 (Dims -> LBRACK RBRACK .)
    LT              reduce using rule 215 (Dims -> LBRACK RBRACK .)
    GT              reduce using rule 215 (Dims -> LBRACK RBRACK .)
    LE              reduce using rule 215 (Dims -> LBRACK RBRACK .)
    GE              reduce using rule 215 (Dims -> LBRACK RBRACK .)
    EQUAL           reduce using rule 215 (Dims -> LBRACK RBRACK .)
    NOTEQUAL        reduce using rule 215 (Dims -> LBRACK RBRACK .)
    BITAND          reduce using rule 215 (Dims -> LBRACK RBRACK .)
    CARET           reduce using rule 215 (Dims -> LBRACK RBRACK .)
    BITOR           reduce using rule 215 (Dims -> LBRACK RBRACK .)
    AND             reduce using rule 215 (Dims -> LBRACK RBRACK .)
    QUESTION        reduce using rule 215 (Dims -> LBRACK RBRACK .)
    OR              reduce using rule 215 (Dims -> LBRACK RBRACK .)
    RBRACK          reduce using rule 215 (Dims -> LBRACK RBRACK .)
    COLON           reduce using rule 215 (Dims -> LBRACK RBRACK .)


state 179

    (31) QualifiedName -> Name DOT IDENTIFIER .

    DOT             reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    LBRACK          reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    LPAREN          reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    ASSIGN          reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    AND_ASSIGN      reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    OR_ASSIGN       reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    URSHIFT_ASSIGN  reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    INC             reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    DEC             reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    MUL             reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    DIV             reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    MOD             reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    ADD             reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    SUB             reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    LSHIFT          reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    RSHIFT          reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    URSHIFT         reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    LT              reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    GT              reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    LE              reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    GE              reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    EQUAL           reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    NOTEQUAL        reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    BITAND          reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    CARET           reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    BITOR           reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    AND             reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    QUESTION        reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    OR              reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    RPAREN          reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    SEMI            reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    COMMA           reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    RBRACK          reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    COLON           reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)


state 180

    (69) FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .

    RBRACE          reduce using rule 69 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    VOID            reduce using rule 69 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    STATIC          reduce using rule 69 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    FINAL           reduce using rule 69 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    PRIVATE         reduce using rule 69 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    PROTECTED       reduce using rule 69 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    PUBLIC          reduce using rule 69 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    IDENTIFIER      reduce using rule 69 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    BOOLEAN         reduce using rule 69 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    BYTE            reduce using rule 69 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    SHORT           reduce using rule 69 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    INT             reduce using rule 69 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    LONG            reduce using rule 69 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    CHAR            reduce using rule 69 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    FLOAT           reduce using rule 69 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    DOUBLE          reduce using rule 69 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)


state 181

    (95) ConstructorBody -> LBRACE BlockStatements RBRACE .

    RBRACE          reduce using rule 95 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    VOID            reduce using rule 95 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    STATIC          reduce using rule 95 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    FINAL           reduce using rule 95 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    PRIVATE         reduce using rule 95 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    PROTECTED       reduce using rule 95 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    PUBLIC          reduce using rule 95 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    IDENTIFIER      reduce using rule 95 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    BOOLEAN         reduce using rule 95 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    BYTE            reduce using rule 95 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    SHORT           reduce using rule 95 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    INT             reduce using rule 95 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    LONG            reduce using rule 95 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    CHAR            reduce using rule 95 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    FLOAT           reduce using rule 95 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    DOUBLE          reduce using rule 95 (ConstructorBody -> LBRACE BlockStatements RBRACE .)


state 182

    (104) BlockStatements -> BlockStatements BlockStatement .

    RBRACE          reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    IDENTIFIER      reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    IF              reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    WHILE           reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    FOR             reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    LBRACE          reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    SEMI            reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    SWITCH          reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    DO              reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    BREAK           reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    CONTINUE        reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    RETURN          reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    BOOLEAN         reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    INC             reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    DEC             reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    NEW             reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    BYTE            reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    SHORT           reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    INT             reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    LONG            reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    CHAR            reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    FLOAT           reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    DOUBLE          reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    THIS            reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    LPAREN          reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    DECIMAL_LITERAL reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    HEX_LITERAL     reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    BINARY_LITERAL  reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    FLOAT_LITERAL   reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    BOOL_LITERAL    reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    CHAR_LITERAL    reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    STRING_LITERAL  reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    NULL            reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    CASE            reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)
    DEFAULT         reduce using rule 104 (BlockStatements -> BlockStatements BlockStatement .)


state 183

    (107) LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .

    RBRACE          reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    IDENTIFIER      reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    IF              reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    WHILE           reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    FOR             reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    LBRACE          reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    SEMI            reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    SWITCH          reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    DO              reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    BREAK           reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    CONTINUE        reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    RETURN          reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    BOOLEAN         reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    INC             reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    DEC             reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    NEW             reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    BYTE            reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    SHORT           reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    INT             reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    LONG            reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    CHAR            reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    FLOAT           reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    DOUBLE          reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    THIS            reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    LPAREN          reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    DECIMAL_LITERAL reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    HEX_LITERAL     reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    BINARY_LITERAL  reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    FLOAT_LITERAL   reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    BOOL_LITERAL    reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    CHAR_LITERAL    reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    STRING_LITERAL  reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    NULL            reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    CASE            reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    DEFAULT         reduce using rule 107 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)


state 184

    (108) LocalVariableDeclaration -> Type VariableDeclarators .
    (72) VariableDeclarators -> VariableDeclarators . COMMA VariableDeclarator

    SEMI            reduce using rule 108 (LocalVariableDeclaration -> Type VariableDeclarators .)
    COMMA           shift and go to state 167


state 185

    (75) VariableDeclaratorId -> IDENTIFIER .
    (76) VariableDeclaratorId -> IDENTIFIER . Dims
    (215) Dims -> . LBRACK RBRACK
    (216) Dims -> . Dims LBRACK RBRACK

    ASSIGN          reduce using rule 75 (VariableDeclaratorId -> IDENTIFIER .)
    COMMA           reduce using rule 75 (VariableDeclaratorId -> IDENTIFIER .)
    SEMI            reduce using rule 75 (VariableDeclaratorId -> IDENTIFIER .)
    RPAREN          reduce using rule 75 (VariableDeclaratorId -> IDENTIFIER .)
    LBRACK          shift and go to state 95

    Dims                           shift and go to state 169

state 186

    (129) LabeledStatement -> IDENTIFIER COLON . Statement
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 126
    IF              shift and go to state 127
    WHILE           shift and go to state 129
    FOR             shift and go to state 130
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    Statement                      shift and go to state 271
    StatementWithoutTrailingSubstatement shift and go to state 111
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    StatementExpression            shift and go to state 131
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 187

    (139) IfThenStatement -> IF begin_scope . LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> IF begin_scope . LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2

    LPAREN          shift and go to state 273


state 188

    (199) PrimaryNoNewArray -> LPAREN . Expression RPAREN
    (241) CastExpression -> LPAREN . PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> LPAREN . PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> LPAREN . Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> LPAREN . Name Dims RPAREN UnaryExpressionNotAddSub
    (295) Expression -> . AssignmentExpression
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (277) AssignmentExpression -> . ConditionalExpression
    (278) AssignmentExpression -> . Assignment
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (275) ConditionalExpression -> . ConditionalOrExpression
    (276) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (272) ConditionalOrExpression -> . ConditionalAndExpression
    (273) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (270) ConditionalAndExpression -> . InclusiveOrExpression
    (271) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC

    BOOLEAN         shift and go to state 63
    IDENTIFIER      shift and go to state 61
    BYTE            shift and go to state 69
    SHORT           shift and go to state 70
    INT             shift and go to state 71
    LONG            shift and go to state 72
    CHAR            shift and go to state 73
    FLOAT           shift and go to state 74
    DOUBLE          shift and go to state 75
    THIS            shift and go to state 157
    LPAREN          shift and go to state 188
    NEW             shift and go to state 203
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165
    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217

    Expression                     shift and go to state 274
    PrimitiveType                  shift and go to state 275
    UnaryExpression                shift and go to state 211
    UnaryExpressionNotAddSub       shift and go to state 214
    Name                           shift and go to state 276
    AssignmentExpression           shift and go to state 190
    NumericType                    shift and go to state 62
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    ConditionalExpression          shift and go to state 191
    Assignment                     shift and go to state 192
    IntegralType                   shift and go to state 66
    FloatingPointType              shift and go to state 67
    ConditionalOrExpression        shift and go to state 193
    LeftHandSide                   shift and go to state 145
    ConditionalAndExpression       shift and go to state 194
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    InclusiveOrExpression          shift and go to state 196
    Primary                        shift and go to state 197
    PrimaryNoNewArray              shift and go to state 198
    ExclusiveOrExpression          shift and go to state 199
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    MethodInvocation               shift and go to state 201
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220

state 189

    (199) PrimaryNoNewArray -> LPAREN Expression . RPAREN

    RPAREN          shift and go to state 277


state 190

    (295) Expression -> AssignmentExpression .

    RPAREN          reduce using rule 295 (Expression -> AssignmentExpression .)
    SEMI            reduce using rule 295 (Expression -> AssignmentExpression .)
    COMMA           reduce using rule 295 (Expression -> AssignmentExpression .)
    RBRACK          reduce using rule 295 (Expression -> AssignmentExpression .)
    COLON           reduce using rule 295 (Expression -> AssignmentExpression .)


state 191

    (277) AssignmentExpression -> ConditionalExpression .

    RPAREN          reduce using rule 277 (AssignmentExpression -> ConditionalExpression .)
    SEMI            reduce using rule 277 (AssignmentExpression -> ConditionalExpression .)
    COMMA           reduce using rule 277 (AssignmentExpression -> ConditionalExpression .)
    RBRACK          reduce using rule 277 (AssignmentExpression -> ConditionalExpression .)
    COLON           reduce using rule 277 (AssignmentExpression -> ConditionalExpression .)


state 192

    (278) AssignmentExpression -> Assignment .

    RPAREN          reduce using rule 278 (AssignmentExpression -> Assignment .)
    SEMI            reduce using rule 278 (AssignmentExpression -> Assignment .)
    COMMA           reduce using rule 278 (AssignmentExpression -> Assignment .)
    RBRACK          reduce using rule 278 (AssignmentExpression -> Assignment .)
    COLON           reduce using rule 278 (AssignmentExpression -> Assignment .)


state 193

    (275) ConditionalExpression -> ConditionalOrExpression .
    (276) ConditionalExpression -> ConditionalOrExpression . QUESTION Expression COLON ConditionalExpression
    (273) ConditionalOrExpression -> ConditionalOrExpression . OR ConMarker ConditionalAndExpression

    RPAREN          reduce using rule 275 (ConditionalExpression -> ConditionalOrExpression .)
    SEMI            reduce using rule 275 (ConditionalExpression -> ConditionalOrExpression .)
    COMMA           reduce using rule 275 (ConditionalExpression -> ConditionalOrExpression .)
    RBRACK          reduce using rule 275 (ConditionalExpression -> ConditionalOrExpression .)
    COLON           reduce using rule 275 (ConditionalExpression -> ConditionalOrExpression .)
    QUESTION        shift and go to state 278
    OR              shift and go to state 279


state 194

    (272) ConditionalOrExpression -> ConditionalAndExpression .
    (271) ConditionalAndExpression -> ConditionalAndExpression . AND ConMarker InclusiveOrExpression

    QUESTION        reduce using rule 272 (ConditionalOrExpression -> ConditionalAndExpression .)
    OR              reduce using rule 272 (ConditionalOrExpression -> ConditionalAndExpression .)
    RPAREN          reduce using rule 272 (ConditionalOrExpression -> ConditionalAndExpression .)
    SEMI            reduce using rule 272 (ConditionalOrExpression -> ConditionalAndExpression .)
    COMMA           reduce using rule 272 (ConditionalOrExpression -> ConditionalAndExpression .)
    RBRACK          reduce using rule 272 (ConditionalOrExpression -> ConditionalAndExpression .)
    COLON           reduce using rule 272 (ConditionalOrExpression -> ConditionalAndExpression .)
    AND             shift and go to state 280


state 195

    (280) LeftHandSide -> Name .
    (222) ArrayAccess -> Name . LBRACK Expression RBRACK
    (31) QualifiedName -> Name . DOT IDENTIFIER
    (219) MethodInvocation -> Name . LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> Name . LPAREN RPAREN
    (225) PostfixExpression -> Name .

    ASSIGN          reduce using rule 280 (LeftHandSide -> Name .)
    ADD_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    SUB_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    MUL_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    DIV_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    AND_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    OR_ASSIGN       reduce using rule 280 (LeftHandSide -> Name .)
    XOR_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    MOD_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    LSHIFT_ASSIGN   reduce using rule 280 (LeftHandSide -> Name .)
    RSHIFT_ASSIGN   reduce using rule 280 (LeftHandSide -> Name .)
    URSHIFT_ASSIGN  reduce using rule 280 (LeftHandSide -> Name .)
    LBRACK          shift and go to state 281
    DOT             shift and go to state 99
    LPAREN          shift and go to state 232
    INC             reduce using rule 225 (PostfixExpression -> Name .)
    DEC             reduce using rule 225 (PostfixExpression -> Name .)
    MUL             reduce using rule 225 (PostfixExpression -> Name .)
    DIV             reduce using rule 225 (PostfixExpression -> Name .)
    MOD             reduce using rule 225 (PostfixExpression -> Name .)
    ADD             reduce using rule 225 (PostfixExpression -> Name .)
    SUB             reduce using rule 225 (PostfixExpression -> Name .)
    LSHIFT          reduce using rule 225 (PostfixExpression -> Name .)
    RSHIFT          reduce using rule 225 (PostfixExpression -> Name .)
    URSHIFT         reduce using rule 225 (PostfixExpression -> Name .)
    LT              reduce using rule 225 (PostfixExpression -> Name .)
    GT              reduce using rule 225 (PostfixExpression -> Name .)
    LE              reduce using rule 225 (PostfixExpression -> Name .)
    GE              reduce using rule 225 (PostfixExpression -> Name .)
    EQUAL           reduce using rule 225 (PostfixExpression -> Name .)
    NOTEQUAL        reduce using rule 225 (PostfixExpression -> Name .)
    BITAND          reduce using rule 225 (PostfixExpression -> Name .)
    CARET           reduce using rule 225 (PostfixExpression -> Name .)
    BITOR           reduce using rule 225 (PostfixExpression -> Name .)
    AND             reduce using rule 225 (PostfixExpression -> Name .)
    QUESTION        reduce using rule 225 (PostfixExpression -> Name .)
    OR              reduce using rule 225 (PostfixExpression -> Name .)
    RPAREN          reduce using rule 225 (PostfixExpression -> Name .)
    SEMI            reduce using rule 225 (PostfixExpression -> Name .)
    COMMA           reduce using rule 225 (PostfixExpression -> Name .)
    RBRACK          reduce using rule 225 (PostfixExpression -> Name .)
    COLON           reduce using rule 225 (PostfixExpression -> Name .)


state 196

    (270) ConditionalAndExpression -> InclusiveOrExpression .
    (269) InclusiveOrExpression -> InclusiveOrExpression . BITOR ExclusiveOrExpression

    AND             reduce using rule 270 (ConditionalAndExpression -> InclusiveOrExpression .)
    QUESTION        reduce using rule 270 (ConditionalAndExpression -> InclusiveOrExpression .)
    OR              reduce using rule 270 (ConditionalAndExpression -> InclusiveOrExpression .)
    RPAREN          reduce using rule 270 (ConditionalAndExpression -> InclusiveOrExpression .)
    SEMI            reduce using rule 270 (ConditionalAndExpression -> InclusiveOrExpression .)
    COMMA           reduce using rule 270 (ConditionalAndExpression -> InclusiveOrExpression .)
    RBRACK          reduce using rule 270 (ConditionalAndExpression -> InclusiveOrExpression .)
    COLON           reduce using rule 270 (ConditionalAndExpression -> InclusiveOrExpression .)
    BITOR           shift and go to state 282


state 197

    (217) FieldAccess -> Primary . DOT Name
    (218) MethodInvocation -> Primary . DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> Primary . DOT IDENTIFIER LPAREN RPAREN
    (224) PostfixExpression -> Primary .

    DOT             shift and go to state 283
    INC             reduce using rule 224 (PostfixExpression -> Primary .)
    DEC             reduce using rule 224 (PostfixExpression -> Primary .)
    MUL             reduce using rule 224 (PostfixExpression -> Primary .)
    DIV             reduce using rule 224 (PostfixExpression -> Primary .)
    MOD             reduce using rule 224 (PostfixExpression -> Primary .)
    ADD             reduce using rule 224 (PostfixExpression -> Primary .)
    SUB             reduce using rule 224 (PostfixExpression -> Primary .)
    LSHIFT          reduce using rule 224 (PostfixExpression -> Primary .)
    RSHIFT          reduce using rule 224 (PostfixExpression -> Primary .)
    URSHIFT         reduce using rule 224 (PostfixExpression -> Primary .)
    LT              reduce using rule 224 (PostfixExpression -> Primary .)
    GT              reduce using rule 224 (PostfixExpression -> Primary .)
    LE              reduce using rule 224 (PostfixExpression -> Primary .)
    GE              reduce using rule 224 (PostfixExpression -> Primary .)
    EQUAL           reduce using rule 224 (PostfixExpression -> Primary .)
    NOTEQUAL        reduce using rule 224 (PostfixExpression -> Primary .)
    BITAND          reduce using rule 224 (PostfixExpression -> Primary .)
    CARET           reduce using rule 224 (PostfixExpression -> Primary .)
    BITOR           reduce using rule 224 (PostfixExpression -> Primary .)
    AND             reduce using rule 224 (PostfixExpression -> Primary .)
    QUESTION        reduce using rule 224 (PostfixExpression -> Primary .)
    OR              reduce using rule 224 (PostfixExpression -> Primary .)
    RPAREN          reduce using rule 224 (PostfixExpression -> Primary .)
    SEMI            reduce using rule 224 (PostfixExpression -> Primary .)
    COMMA           reduce using rule 224 (PostfixExpression -> Primary .)
    RBRACK          reduce using rule 224 (PostfixExpression -> Primary .)
    COLON           reduce using rule 224 (PostfixExpression -> Primary .)


state 198

    (223) ArrayAccess -> PrimaryNoNewArray . LBRACK Expression RBRACK
    (195) Primary -> PrimaryNoNewArray .

    LBRACK          shift and go to state 260
    DOT             reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    INC             reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    DEC             reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    MUL             reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    DIV             reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    MOD             reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    ADD             reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    SUB             reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    LSHIFT          reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    RSHIFT          reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    URSHIFT         reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    LT              reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    GT              reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    LE              reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    GE              reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    EQUAL           reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    NOTEQUAL        reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    BITAND          reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    CARET           reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    BITOR           reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    AND             reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    QUESTION        reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    OR              reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    RPAREN          reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    SEMI            reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    COMMA           reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    RBRACK          reduce using rule 195 (Primary -> PrimaryNoNewArray .)
    COLON           reduce using rule 195 (Primary -> PrimaryNoNewArray .)


state 199

    (268) InclusiveOrExpression -> ExclusiveOrExpression .
    (267) ExclusiveOrExpression -> ExclusiveOrExpression . CARET AndExpression

    BITOR           reduce using rule 268 (InclusiveOrExpression -> ExclusiveOrExpression .)
    AND             reduce using rule 268 (InclusiveOrExpression -> ExclusiveOrExpression .)
    QUESTION        reduce using rule 268 (InclusiveOrExpression -> ExclusiveOrExpression .)
    OR              reduce using rule 268 (InclusiveOrExpression -> ExclusiveOrExpression .)
    RPAREN          reduce using rule 268 (InclusiveOrExpression -> ExclusiveOrExpression .)
    SEMI            reduce using rule 268 (InclusiveOrExpression -> ExclusiveOrExpression .)
    COMMA           reduce using rule 268 (InclusiveOrExpression -> ExclusiveOrExpression .)
    RBRACK          reduce using rule 268 (InclusiveOrExpression -> ExclusiveOrExpression .)
    COLON           reduce using rule 268 (InclusiveOrExpression -> ExclusiveOrExpression .)
    CARET           shift and go to state 284


state 200

    (200) PrimaryNoNewArray -> ClassInstanceCreationExpression .

    LBRACK          reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    DOT             reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    INC             reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    DEC             reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    MUL             reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    DIV             reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    MOD             reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    ADD             reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    SUB             reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    LSHIFT          reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    RSHIFT          reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    URSHIFT         reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    LT              reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    GT              reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    LE              reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    GE              reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    EQUAL           reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    NOTEQUAL        reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    BITAND          reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    CARET           reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    BITOR           reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    AND             reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    QUESTION        reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    OR              reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    RPAREN          reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    SEMI            reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    COMMA           reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    RBRACK          reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    COLON           reduce using rule 200 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)


state 201

    (202) PrimaryNoNewArray -> MethodInvocation .

    LBRACK          reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    DOT             reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    INC             reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    DEC             reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    MUL             reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    DIV             reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    MOD             reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    ADD             reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    SUB             reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    LSHIFT          reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    RSHIFT          reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    URSHIFT         reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    LT              reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    GT              reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    LE              reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    GE              reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    EQUAL           reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    NOTEQUAL        reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    BITAND          reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    CARET           reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    BITOR           reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    AND             reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    QUESTION        reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    OR              reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    RPAREN          reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    SEMI            reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    COMMA           reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    RBRACK          reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)
    COLON           reduce using rule 202 (PrimaryNoNewArray -> MethodInvocation .)


state 202

    (266) ExclusiveOrExpression -> AndExpression .
    (265) AndExpression -> AndExpression . BITAND EqualityExpression

    CARET           reduce using rule 266 (ExclusiveOrExpression -> AndExpression .)
    BITOR           reduce using rule 266 (ExclusiveOrExpression -> AndExpression .)
    AND             reduce using rule 266 (ExclusiveOrExpression -> AndExpression .)
    QUESTION        reduce using rule 266 (ExclusiveOrExpression -> AndExpression .)
    OR              reduce using rule 266 (ExclusiveOrExpression -> AndExpression .)
    RPAREN          reduce using rule 266 (ExclusiveOrExpression -> AndExpression .)
    SEMI            reduce using rule 266 (ExclusiveOrExpression -> AndExpression .)
    COMMA           reduce using rule 266 (ExclusiveOrExpression -> AndExpression .)
    RBRACK          reduce using rule 266 (ExclusiveOrExpression -> AndExpression .)
    COLON           reduce using rule 266 (ExclusiveOrExpression -> AndExpression .)
    BITAND          shift and go to state 285


state 203

    (208) ArrayCreationExpression -> NEW . PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> NEW . PrimitiveType DimExprs
    (210) ArrayCreationExpression -> NEW . ClassType DimExprs Dims
    (211) ArrayCreationExpression -> NEW . ClassType DimExprs
    (204) ClassInstanceCreationExpression -> NEW . ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> NEW . ClassType LPAREN ArgumentList RPAREN
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (25) ClassType -> . Name
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER

    BOOLEAN         shift and go to state 63
    BYTE            shift and go to state 69
    SHORT           shift and go to state 70
    INT             shift and go to state 71
    LONG            shift and go to state 72
    CHAR            shift and go to state 73
    FLOAT           shift and go to state 74
    DOUBLE          shift and go to state 75
    IDENTIFIER      shift and go to state 61

    PrimitiveType                  shift and go to state 258
    ClassType                      shift and go to state 286
    NumericType                    shift and go to state 62
    Name                           shift and go to state 259
    IntegralType                   shift and go to state 66
    FloatingPointType              shift and go to state 67
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76

state 204

    (264) AndExpression -> EqualityExpression .
    (262) EqualityExpression -> EqualityExpression . EQUAL RelationalExpression
    (263) EqualityExpression -> EqualityExpression . NOTEQUAL RelationalExpression

    BITAND          reduce using rule 264 (AndExpression -> EqualityExpression .)
    CARET           reduce using rule 264 (AndExpression -> EqualityExpression .)
    BITOR           reduce using rule 264 (AndExpression -> EqualityExpression .)
    AND             reduce using rule 264 (AndExpression -> EqualityExpression .)
    QUESTION        reduce using rule 264 (AndExpression -> EqualityExpression .)
    OR              reduce using rule 264 (AndExpression -> EqualityExpression .)
    RPAREN          reduce using rule 264 (AndExpression -> EqualityExpression .)
    SEMI            reduce using rule 264 (AndExpression -> EqualityExpression .)
    COMMA           reduce using rule 264 (AndExpression -> EqualityExpression .)
    RBRACK          reduce using rule 264 (AndExpression -> EqualityExpression .)
    COLON           reduce using rule 264 (AndExpression -> EqualityExpression .)
    EQUAL           shift and go to state 287
    NOTEQUAL        shift and go to state 288


state 205

    (261) EqualityExpression -> RelationalExpression .
    (257) RelationalExpression -> RelationalExpression . LT ShiftExpression
    (258) RelationalExpression -> RelationalExpression . GT ShiftExpression
    (259) RelationalExpression -> RelationalExpression . LE ShiftExpression
    (260) RelationalExpression -> RelationalExpression . GE ShiftExpression

    EQUAL           reduce using rule 261 (EqualityExpression -> RelationalExpression .)
    NOTEQUAL        reduce using rule 261 (EqualityExpression -> RelationalExpression .)
    BITAND          reduce using rule 261 (EqualityExpression -> RelationalExpression .)
    CARET           reduce using rule 261 (EqualityExpression -> RelationalExpression .)
    BITOR           reduce using rule 261 (EqualityExpression -> RelationalExpression .)
    AND             reduce using rule 261 (EqualityExpression -> RelationalExpression .)
    QUESTION        reduce using rule 261 (EqualityExpression -> RelationalExpression .)
    OR              reduce using rule 261 (EqualityExpression -> RelationalExpression .)
    RPAREN          reduce using rule 261 (EqualityExpression -> RelationalExpression .)
    SEMI            reduce using rule 261 (EqualityExpression -> RelationalExpression .)
    COMMA           reduce using rule 261 (EqualityExpression -> RelationalExpression .)
    RBRACK          reduce using rule 261 (EqualityExpression -> RelationalExpression .)
    COLON           reduce using rule 261 (EqualityExpression -> RelationalExpression .)
    LT              shift and go to state 289
    GT              shift and go to state 290
    LE              shift and go to state 291
    GE              shift and go to state 292


state 206

    (256) RelationalExpression -> ShiftExpression .
    (253) ShiftExpression -> ShiftExpression . LSHIFT AdditiveExpression
    (254) ShiftExpression -> ShiftExpression . RSHIFT AdditiveExpression
    (255) ShiftExpression -> ShiftExpression . URSHIFT AdditiveExpression

    LT              reduce using rule 256 (RelationalExpression -> ShiftExpression .)
    GT              reduce using rule 256 (RelationalExpression -> ShiftExpression .)
    LE              reduce using rule 256 (RelationalExpression -> ShiftExpression .)
    GE              reduce using rule 256 (RelationalExpression -> ShiftExpression .)
    EQUAL           reduce using rule 256 (RelationalExpression -> ShiftExpression .)
    NOTEQUAL        reduce using rule 256 (RelationalExpression -> ShiftExpression .)
    BITAND          reduce using rule 256 (RelationalExpression -> ShiftExpression .)
    CARET           reduce using rule 256 (RelationalExpression -> ShiftExpression .)
    BITOR           reduce using rule 256 (RelationalExpression -> ShiftExpression .)
    AND             reduce using rule 256 (RelationalExpression -> ShiftExpression .)
    QUESTION        reduce using rule 256 (RelationalExpression -> ShiftExpression .)
    OR              reduce using rule 256 (RelationalExpression -> ShiftExpression .)
    RPAREN          reduce using rule 256 (RelationalExpression -> ShiftExpression .)
    SEMI            reduce using rule 256 (RelationalExpression -> ShiftExpression .)
    COMMA           reduce using rule 256 (RelationalExpression -> ShiftExpression .)
    RBRACK          reduce using rule 256 (RelationalExpression -> ShiftExpression .)
    COLON           reduce using rule 256 (RelationalExpression -> ShiftExpression .)
    LSHIFT          shift and go to state 293
    RSHIFT          shift and go to state 294
    URSHIFT         shift and go to state 295


state 207

    (252) ShiftExpression -> AdditiveExpression .
    (250) AdditiveExpression -> AdditiveExpression . ADD MultiplicativeExpression
    (251) AdditiveExpression -> AdditiveExpression . SUB MultiplicativeExpression

    LSHIFT          reduce using rule 252 (ShiftExpression -> AdditiveExpression .)
    RSHIFT          reduce using rule 252 (ShiftExpression -> AdditiveExpression .)
    URSHIFT         reduce using rule 252 (ShiftExpression -> AdditiveExpression .)
    LT              reduce using rule 252 (ShiftExpression -> AdditiveExpression .)
    GT              reduce using rule 252 (ShiftExpression -> AdditiveExpression .)
    LE              reduce using rule 252 (ShiftExpression -> AdditiveExpression .)
    GE              reduce using rule 252 (ShiftExpression -> AdditiveExpression .)
    EQUAL           reduce using rule 252 (ShiftExpression -> AdditiveExpression .)
    NOTEQUAL        reduce using rule 252 (ShiftExpression -> AdditiveExpression .)
    BITAND          reduce using rule 252 (ShiftExpression -> AdditiveExpression .)
    CARET           reduce using rule 252 (ShiftExpression -> AdditiveExpression .)
    BITOR           reduce using rule 252 (ShiftExpression -> AdditiveExpression .)
    AND             reduce using rule 252 (ShiftExpression -> AdditiveExpression .)
    QUESTION        reduce using rule 252 (ShiftExpression -> AdditiveExpression .)
    OR              reduce using rule 252 (ShiftExpression -> AdditiveExpression .)
    RPAREN          reduce using rule 252 (ShiftExpression -> AdditiveExpression .)
    SEMI            reduce using rule 252 (ShiftExpression -> AdditiveExpression .)
    COMMA           reduce using rule 252 (ShiftExpression -> AdditiveExpression .)
    RBRACK          reduce using rule 252 (ShiftExpression -> AdditiveExpression .)
    COLON           reduce using rule 252 (ShiftExpression -> AdditiveExpression .)
    ADD             shift and go to state 296
    SUB             shift and go to state 297


state 208

    (249) AdditiveExpression -> MultiplicativeExpression .
    (246) MultiplicativeExpression -> MultiplicativeExpression . MUL UnaryExpression
    (247) MultiplicativeExpression -> MultiplicativeExpression . DIV UnaryExpression
    (248) MultiplicativeExpression -> MultiplicativeExpression . MOD UnaryExpression

    ADD             reduce using rule 249 (AdditiveExpression -> MultiplicativeExpression .)
    SUB             reduce using rule 249 (AdditiveExpression -> MultiplicativeExpression .)
    LSHIFT          reduce using rule 249 (AdditiveExpression -> MultiplicativeExpression .)
    RSHIFT          reduce using rule 249 (AdditiveExpression -> MultiplicativeExpression .)
    URSHIFT         reduce using rule 249 (AdditiveExpression -> MultiplicativeExpression .)
    LT              reduce using rule 249 (AdditiveExpression -> MultiplicativeExpression .)
    GT              reduce using rule 249 (AdditiveExpression -> MultiplicativeExpression .)
    LE              reduce using rule 249 (AdditiveExpression -> MultiplicativeExpression .)
    GE              reduce using rule 249 (AdditiveExpression -> MultiplicativeExpression .)
    EQUAL           reduce using rule 249 (AdditiveExpression -> MultiplicativeExpression .)
    NOTEQUAL        reduce using rule 249 (AdditiveExpression -> MultiplicativeExpression .)
    BITAND          reduce using rule 249 (AdditiveExpression -> MultiplicativeExpression .)
    CARET           reduce using rule 249 (AdditiveExpression -> MultiplicativeExpression .)
    BITOR           reduce using rule 249 (AdditiveExpression -> MultiplicativeExpression .)
    AND             reduce using rule 249 (AdditiveExpression -> MultiplicativeExpression .)
    QUESTION        reduce using rule 249 (AdditiveExpression -> MultiplicativeExpression .)
    OR              reduce using rule 249 (AdditiveExpression -> MultiplicativeExpression .)
    RPAREN          reduce using rule 249 (AdditiveExpression -> MultiplicativeExpression .)
    SEMI            reduce using rule 249 (AdditiveExpression -> MultiplicativeExpression .)
    COMMA           reduce using rule 249 (AdditiveExpression -> MultiplicativeExpression .)
    RBRACK          reduce using rule 249 (AdditiveExpression -> MultiplicativeExpression .)
    COLON           reduce using rule 249 (AdditiveExpression -> MultiplicativeExpression .)
    MUL             shift and go to state 298
    DIV             shift and go to state 299
    MOD             shift and go to state 300


state 209

    (232) UnaryExpression -> ADD . UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    UnaryExpression                shift and go to state 301
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 210

    (233) UnaryExpression -> SUB . UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    UnaryExpression                shift and go to state 302
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 211

    (245) MultiplicativeExpression -> UnaryExpression .

    MUL             reduce using rule 245 (MultiplicativeExpression -> UnaryExpression .)
    DIV             reduce using rule 245 (MultiplicativeExpression -> UnaryExpression .)
    MOD             reduce using rule 245 (MultiplicativeExpression -> UnaryExpression .)
    ADD             reduce using rule 245 (MultiplicativeExpression -> UnaryExpression .)
    SUB             reduce using rule 245 (MultiplicativeExpression -> UnaryExpression .)
    LSHIFT          reduce using rule 245 (MultiplicativeExpression -> UnaryExpression .)
    RSHIFT          reduce using rule 245 (MultiplicativeExpression -> UnaryExpression .)
    URSHIFT         reduce using rule 245 (MultiplicativeExpression -> UnaryExpression .)
    LT              reduce using rule 245 (MultiplicativeExpression -> UnaryExpression .)
    GT              reduce using rule 245 (MultiplicativeExpression -> UnaryExpression .)
    LE              reduce using rule 245 (MultiplicativeExpression -> UnaryExpression .)
    GE              reduce using rule 245 (MultiplicativeExpression -> UnaryExpression .)
    EQUAL           reduce using rule 245 (MultiplicativeExpression -> UnaryExpression .)
    NOTEQUAL        reduce using rule 245 (MultiplicativeExpression -> UnaryExpression .)
    BITAND          reduce using rule 245 (MultiplicativeExpression -> UnaryExpression .)
    CARET           reduce using rule 245 (MultiplicativeExpression -> UnaryExpression .)
    BITOR           reduce using rule 245 (MultiplicativeExpression -> UnaryExpression .)
    AND             reduce using rule 245 (MultiplicativeExpression -> UnaryExpression .)
    QUESTION        reduce using rule 245 (MultiplicativeExpression -> UnaryExpression .)
    OR              reduce using rule 245 (MultiplicativeExpression -> UnaryExpression .)
    RPAREN          reduce using rule 245 (MultiplicativeExpression -> UnaryExpression .)
    SEMI            reduce using rule 245 (MultiplicativeExpression -> UnaryExpression .)
    COMMA           reduce using rule 245 (MultiplicativeExpression -> UnaryExpression .)
    RBRACK          reduce using rule 245 (MultiplicativeExpression -> UnaryExpression .)
    COLON           reduce using rule 245 (MultiplicativeExpression -> UnaryExpression .)


state 212

    (230) UnaryExpression -> PreIncrementExpression .

    MUL             reduce using rule 230 (UnaryExpression -> PreIncrementExpression .)
    DIV             reduce using rule 230 (UnaryExpression -> PreIncrementExpression .)
    MOD             reduce using rule 230 (UnaryExpression -> PreIncrementExpression .)
    ADD             reduce using rule 230 (UnaryExpression -> PreIncrementExpression .)
    SUB             reduce using rule 230 (UnaryExpression -> PreIncrementExpression .)
    LSHIFT          reduce using rule 230 (UnaryExpression -> PreIncrementExpression .)
    RSHIFT          reduce using rule 230 (UnaryExpression -> PreIncrementExpression .)
    URSHIFT         reduce using rule 230 (UnaryExpression -> PreIncrementExpression .)
    LT              reduce using rule 230 (UnaryExpression -> PreIncrementExpression .)
    GT              reduce using rule 230 (UnaryExpression -> PreIncrementExpression .)
    LE              reduce using rule 230 (UnaryExpression -> PreIncrementExpression .)
    GE              reduce using rule 230 (UnaryExpression -> PreIncrementExpression .)
    EQUAL           reduce using rule 230 (UnaryExpression -> PreIncrementExpression .)
    NOTEQUAL        reduce using rule 230 (UnaryExpression -> PreIncrementExpression .)
    BITAND          reduce using rule 230 (UnaryExpression -> PreIncrementExpression .)
    CARET           reduce using rule 230 (UnaryExpression -> PreIncrementExpression .)
    BITOR           reduce using rule 230 (UnaryExpression -> PreIncrementExpression .)
    AND             reduce using rule 230 (UnaryExpression -> PreIncrementExpression .)
    QUESTION        reduce using rule 230 (UnaryExpression -> PreIncrementExpression .)
    OR              reduce using rule 230 (UnaryExpression -> PreIncrementExpression .)
    RPAREN          reduce using rule 230 (UnaryExpression -> PreIncrementExpression .)
    SEMI            reduce using rule 230 (UnaryExpression -> PreIncrementExpression .)
    COMMA           reduce using rule 230 (UnaryExpression -> PreIncrementExpression .)
    RBRACK          reduce using rule 230 (UnaryExpression -> PreIncrementExpression .)
    COLON           reduce using rule 230 (UnaryExpression -> PreIncrementExpression .)


state 213

    (231) UnaryExpression -> PreDecrementExpression .

    MUL             reduce using rule 231 (UnaryExpression -> PreDecrementExpression .)
    DIV             reduce using rule 231 (UnaryExpression -> PreDecrementExpression .)
    MOD             reduce using rule 231 (UnaryExpression -> PreDecrementExpression .)
    ADD             reduce using rule 231 (UnaryExpression -> PreDecrementExpression .)
    SUB             reduce using rule 231 (UnaryExpression -> PreDecrementExpression .)
    LSHIFT          reduce using rule 231 (UnaryExpression -> PreDecrementExpression .)
    RSHIFT          reduce using rule 231 (UnaryExpression -> PreDecrementExpression .)
    URSHIFT         reduce using rule 231 (UnaryExpression -> PreDecrementExpression .)
    LT              reduce using rule 231 (UnaryExpression -> PreDecrementExpression .)
    GT              reduce using rule 231 (UnaryExpression -> PreDecrementExpression .)
    LE              reduce using rule 231 (UnaryExpression -> PreDecrementExpression .)
    GE              reduce using rule 231 (UnaryExpression -> PreDecrementExpression .)
    EQUAL           reduce using rule 231 (UnaryExpression -> PreDecrementExpression .)
    NOTEQUAL        reduce using rule 231 (UnaryExpression -> PreDecrementExpression .)
    BITAND          reduce using rule 231 (UnaryExpression -> PreDecrementExpression .)
    CARET           reduce using rule 231 (UnaryExpression -> PreDecrementExpression .)
    BITOR           reduce using rule 231 (UnaryExpression -> PreDecrementExpression .)
    AND             reduce using rule 231 (UnaryExpression -> PreDecrementExpression .)
    QUESTION        reduce using rule 231 (UnaryExpression -> PreDecrementExpression .)
    OR              reduce using rule 231 (UnaryExpression -> PreDecrementExpression .)
    RPAREN          reduce using rule 231 (UnaryExpression -> PreDecrementExpression .)
    SEMI            reduce using rule 231 (UnaryExpression -> PreDecrementExpression .)
    COMMA           reduce using rule 231 (UnaryExpression -> PreDecrementExpression .)
    RBRACK          reduce using rule 231 (UnaryExpression -> PreDecrementExpression .)
    COLON           reduce using rule 231 (UnaryExpression -> PreDecrementExpression .)


state 214

    (234) UnaryExpression -> UnaryExpressionNotAddSub .

    MUL             reduce using rule 234 (UnaryExpression -> UnaryExpressionNotAddSub .)
    DIV             reduce using rule 234 (UnaryExpression -> UnaryExpressionNotAddSub .)
    MOD             reduce using rule 234 (UnaryExpression -> UnaryExpressionNotAddSub .)
    ADD             reduce using rule 234 (UnaryExpression -> UnaryExpressionNotAddSub .)
    SUB             reduce using rule 234 (UnaryExpression -> UnaryExpressionNotAddSub .)
    LSHIFT          reduce using rule 234 (UnaryExpression -> UnaryExpressionNotAddSub .)
    RSHIFT          reduce using rule 234 (UnaryExpression -> UnaryExpressionNotAddSub .)
    URSHIFT         reduce using rule 234 (UnaryExpression -> UnaryExpressionNotAddSub .)
    LT              reduce using rule 234 (UnaryExpression -> UnaryExpressionNotAddSub .)
    GT              reduce using rule 234 (UnaryExpression -> UnaryExpressionNotAddSub .)
    LE              reduce using rule 234 (UnaryExpression -> UnaryExpressionNotAddSub .)
    GE              reduce using rule 234 (UnaryExpression -> UnaryExpressionNotAddSub .)
    EQUAL           reduce using rule 234 (UnaryExpression -> UnaryExpressionNotAddSub .)
    NOTEQUAL        reduce using rule 234 (UnaryExpression -> UnaryExpressionNotAddSub .)
    BITAND          reduce using rule 234 (UnaryExpression -> UnaryExpressionNotAddSub .)
    CARET           reduce using rule 234 (UnaryExpression -> UnaryExpressionNotAddSub .)
    BITOR           reduce using rule 234 (UnaryExpression -> UnaryExpressionNotAddSub .)
    AND             reduce using rule 234 (UnaryExpression -> UnaryExpressionNotAddSub .)
    QUESTION        reduce using rule 234 (UnaryExpression -> UnaryExpressionNotAddSub .)
    OR              reduce using rule 234 (UnaryExpression -> UnaryExpressionNotAddSub .)
    RPAREN          reduce using rule 234 (UnaryExpression -> UnaryExpressionNotAddSub .)
    SEMI            reduce using rule 234 (UnaryExpression -> UnaryExpressionNotAddSub .)
    COMMA           reduce using rule 234 (UnaryExpression -> UnaryExpressionNotAddSub .)
    RBRACK          reduce using rule 234 (UnaryExpression -> UnaryExpressionNotAddSub .)
    COLON           reduce using rule 234 (UnaryExpression -> UnaryExpressionNotAddSub .)


state 215

    (237) UnaryExpressionNotAddSub -> PostfixExpression .
    (228) PostIncrementExpression -> PostfixExpression . INC
    (229) PostDecrementExpression -> PostfixExpression . DEC

    MUL             reduce using rule 237 (UnaryExpressionNotAddSub -> PostfixExpression .)
    DIV             reduce using rule 237 (UnaryExpressionNotAddSub -> PostfixExpression .)
    MOD             reduce using rule 237 (UnaryExpressionNotAddSub -> PostfixExpression .)
    ADD             reduce using rule 237 (UnaryExpressionNotAddSub -> PostfixExpression .)
    SUB             reduce using rule 237 (UnaryExpressionNotAddSub -> PostfixExpression .)
    LSHIFT          reduce using rule 237 (UnaryExpressionNotAddSub -> PostfixExpression .)
    RSHIFT          reduce using rule 237 (UnaryExpressionNotAddSub -> PostfixExpression .)
    URSHIFT         reduce using rule 237 (UnaryExpressionNotAddSub -> PostfixExpression .)
    LT              reduce using rule 237 (UnaryExpressionNotAddSub -> PostfixExpression .)
    GT              reduce using rule 237 (UnaryExpressionNotAddSub -> PostfixExpression .)
    LE              reduce using rule 237 (UnaryExpressionNotAddSub -> PostfixExpression .)
    GE              reduce using rule 237 (UnaryExpressionNotAddSub -> PostfixExpression .)
    EQUAL           reduce using rule 237 (UnaryExpressionNotAddSub -> PostfixExpression .)
    NOTEQUAL        reduce using rule 237 (UnaryExpressionNotAddSub -> PostfixExpression .)
    BITAND          reduce using rule 237 (UnaryExpressionNotAddSub -> PostfixExpression .)
    CARET           reduce using rule 237 (UnaryExpressionNotAddSub -> PostfixExpression .)
    BITOR           reduce using rule 237 (UnaryExpressionNotAddSub -> PostfixExpression .)
    AND             reduce using rule 237 (UnaryExpressionNotAddSub -> PostfixExpression .)
    QUESTION        reduce using rule 237 (UnaryExpressionNotAddSub -> PostfixExpression .)
    OR              reduce using rule 237 (UnaryExpressionNotAddSub -> PostfixExpression .)
    RPAREN          reduce using rule 237 (UnaryExpressionNotAddSub -> PostfixExpression .)
    SEMI            reduce using rule 237 (UnaryExpressionNotAddSub -> PostfixExpression .)
    COMMA           reduce using rule 237 (UnaryExpressionNotAddSub -> PostfixExpression .)
    RBRACK          reduce using rule 237 (UnaryExpressionNotAddSub -> PostfixExpression .)
    COLON           reduce using rule 237 (UnaryExpressionNotAddSub -> PostfixExpression .)
    INC             shift and go to state 254
    DEC             shift and go to state 255


state 216

    (238) UnaryExpressionNotAddSub -> BANG . UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    UnaryExpression                shift and go to state 303
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 217

    (239) UnaryExpressionNotAddSub -> TILDE . UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    UnaryExpression                shift and go to state 304
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 218

    (240) UnaryExpressionNotAddSub -> CastExpression .

    MUL             reduce using rule 240 (UnaryExpressionNotAddSub -> CastExpression .)
    DIV             reduce using rule 240 (UnaryExpressionNotAddSub -> CastExpression .)
    MOD             reduce using rule 240 (UnaryExpressionNotAddSub -> CastExpression .)
    ADD             reduce using rule 240 (UnaryExpressionNotAddSub -> CastExpression .)
    SUB             reduce using rule 240 (UnaryExpressionNotAddSub -> CastExpression .)
    LSHIFT          reduce using rule 240 (UnaryExpressionNotAddSub -> CastExpression .)
    RSHIFT          reduce using rule 240 (UnaryExpressionNotAddSub -> CastExpression .)
    URSHIFT         reduce using rule 240 (UnaryExpressionNotAddSub -> CastExpression .)
    LT              reduce using rule 240 (UnaryExpressionNotAddSub -> CastExpression .)
    GT              reduce using rule 240 (UnaryExpressionNotAddSub -> CastExpression .)
    LE              reduce using rule 240 (UnaryExpressionNotAddSub -> CastExpression .)
    GE              reduce using rule 240 (UnaryExpressionNotAddSub -> CastExpression .)
    EQUAL           reduce using rule 240 (UnaryExpressionNotAddSub -> CastExpression .)
    NOTEQUAL        reduce using rule 240 (UnaryExpressionNotAddSub -> CastExpression .)
    BITAND          reduce using rule 240 (UnaryExpressionNotAddSub -> CastExpression .)
    CARET           reduce using rule 240 (UnaryExpressionNotAddSub -> CastExpression .)
    BITOR           reduce using rule 240 (UnaryExpressionNotAddSub -> CastExpression .)
    AND             reduce using rule 240 (UnaryExpressionNotAddSub -> CastExpression .)
    QUESTION        reduce using rule 240 (UnaryExpressionNotAddSub -> CastExpression .)
    OR              reduce using rule 240 (UnaryExpressionNotAddSub -> CastExpression .)
    RPAREN          reduce using rule 240 (UnaryExpressionNotAddSub -> CastExpression .)
    SEMI            reduce using rule 240 (UnaryExpressionNotAddSub -> CastExpression .)
    COMMA           reduce using rule 240 (UnaryExpressionNotAddSub -> CastExpression .)
    RBRACK          reduce using rule 240 (UnaryExpressionNotAddSub -> CastExpression .)
    COLON           reduce using rule 240 (UnaryExpressionNotAddSub -> CastExpression .)


state 219

    (226) PostfixExpression -> PostIncrementExpression .

    INC             reduce using rule 226 (PostfixExpression -> PostIncrementExpression .)
    DEC             reduce using rule 226 (PostfixExpression -> PostIncrementExpression .)
    MUL             reduce using rule 226 (PostfixExpression -> PostIncrementExpression .)
    DIV             reduce using rule 226 (PostfixExpression -> PostIncrementExpression .)
    MOD             reduce using rule 226 (PostfixExpression -> PostIncrementExpression .)
    ADD             reduce using rule 226 (PostfixExpression -> PostIncrementExpression .)
    SUB             reduce using rule 226 (PostfixExpression -> PostIncrementExpression .)
    LSHIFT          reduce using rule 226 (PostfixExpression -> PostIncrementExpression .)
    RSHIFT          reduce using rule 226 (PostfixExpression -> PostIncrementExpression .)
    URSHIFT         reduce using rule 226 (PostfixExpression -> PostIncrementExpression .)
    LT              reduce using rule 226 (PostfixExpression -> PostIncrementExpression .)
    GT              reduce using rule 226 (PostfixExpression -> PostIncrementExpression .)
    LE              reduce using rule 226 (PostfixExpression -> PostIncrementExpression .)
    GE              reduce using rule 226 (PostfixExpression -> PostIncrementExpression .)
    EQUAL           reduce using rule 226 (PostfixExpression -> PostIncrementExpression .)
    NOTEQUAL        reduce using rule 226 (PostfixExpression -> PostIncrementExpression .)
    BITAND          reduce using rule 226 (PostfixExpression -> PostIncrementExpression .)
    CARET           reduce using rule 226 (PostfixExpression -> PostIncrementExpression .)
    BITOR           reduce using rule 226 (PostfixExpression -> PostIncrementExpression .)
    AND             reduce using rule 226 (PostfixExpression -> PostIncrementExpression .)
    QUESTION        reduce using rule 226 (PostfixExpression -> PostIncrementExpression .)
    OR              reduce using rule 226 (PostfixExpression -> PostIncrementExpression .)
    RPAREN          reduce using rule 226 (PostfixExpression -> PostIncrementExpression .)
    SEMI            reduce using rule 226 (PostfixExpression -> PostIncrementExpression .)
    COMMA           reduce using rule 226 (PostfixExpression -> PostIncrementExpression .)
    RBRACK          reduce using rule 226 (PostfixExpression -> PostIncrementExpression .)
    COLON           reduce using rule 226 (PostfixExpression -> PostIncrementExpression .)


state 220

    (227) PostfixExpression -> PostDecrementExpression .

    INC             reduce using rule 227 (PostfixExpression -> PostDecrementExpression .)
    DEC             reduce using rule 227 (PostfixExpression -> PostDecrementExpression .)
    MUL             reduce using rule 227 (PostfixExpression -> PostDecrementExpression .)
    DIV             reduce using rule 227 (PostfixExpression -> PostDecrementExpression .)
    MOD             reduce using rule 227 (PostfixExpression -> PostDecrementExpression .)
    ADD             reduce using rule 227 (PostfixExpression -> PostDecrementExpression .)
    SUB             reduce using rule 227 (PostfixExpression -> PostDecrementExpression .)
    LSHIFT          reduce using rule 227 (PostfixExpression -> PostDecrementExpression .)
    RSHIFT          reduce using rule 227 (PostfixExpression -> PostDecrementExpression .)
    URSHIFT         reduce using rule 227 (PostfixExpression -> PostDecrementExpression .)
    LT              reduce using rule 227 (PostfixExpression -> PostDecrementExpression .)
    GT              reduce using rule 227 (PostfixExpression -> PostDecrementExpression .)
    LE              reduce using rule 227 (PostfixExpression -> PostDecrementExpression .)
    GE              reduce using rule 227 (PostfixExpression -> PostDecrementExpression .)
    EQUAL           reduce using rule 227 (PostfixExpression -> PostDecrementExpression .)
    NOTEQUAL        reduce using rule 227 (PostfixExpression -> PostDecrementExpression .)
    BITAND          reduce using rule 227 (PostfixExpression -> PostDecrementExpression .)
    CARET           reduce using rule 227 (PostfixExpression -> PostDecrementExpression .)
    BITOR           reduce using rule 227 (PostfixExpression -> PostDecrementExpression .)
    AND             reduce using rule 227 (PostfixExpression -> PostDecrementExpression .)
    QUESTION        reduce using rule 227 (PostfixExpression -> PostDecrementExpression .)
    OR              reduce using rule 227 (PostfixExpression -> PostDecrementExpression .)
    RPAREN          reduce using rule 227 (PostfixExpression -> PostDecrementExpression .)
    SEMI            reduce using rule 227 (PostfixExpression -> PostDecrementExpression .)
    COMMA           reduce using rule 227 (PostfixExpression -> PostDecrementExpression .)
    RBRACK          reduce using rule 227 (PostfixExpression -> PostDecrementExpression .)
    COLON           reduce using rule 227 (PostfixExpression -> PostDecrementExpression .)


state 221

    (157) WhileStatement -> WHILE prep_fw_stack . LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2

    LPAREN          shift and go to state 305


state 222

    (165) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2

    LPAREN          shift and go to state 306


state 223

    (131) ExpressionStatement -> StatementExpression SEMI .

    RBRACE          reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    IDENTIFIER      reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    IF              reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    WHILE           reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    FOR             reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    LBRACE          reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    SEMI            reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    SWITCH          reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    DO              reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    BREAK           reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    CONTINUE        reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    RETURN          reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    BOOLEAN         reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    INC             reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    DEC             reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    NEW             reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    BYTE            reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    SHORT           reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    INT             reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    LONG            reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    CHAR            reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    FLOAT           reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    DOUBLE          reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    THIS            reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    LPAREN          reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    DECIMAL_LITERAL reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    HEX_LITERAL     reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    BINARY_LITERAL  reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    FLOAT_LITERAL   reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    BOOL_LITERAL    reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    CHAR_LITERAL    reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    STRING_LITERAL  reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    NULL            reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    CASE            reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    DEFAULT         reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)
    ELSE            reduce using rule 131 (ExpressionStatement -> StatementExpression SEMI .)


state 224

    (145) SwitchStatement -> SWITCH LPAREN . Expression RPAREN SwitchBlock
    (295) Expression -> . AssignmentExpression
    (277) AssignmentExpression -> . ConditionalExpression
    (278) AssignmentExpression -> . Assignment
    (275) ConditionalExpression -> . ConditionalOrExpression
    (276) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (272) ConditionalOrExpression -> . ConditionalAndExpression
    (273) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (270) ConditionalAndExpression -> . InclusiveOrExpression
    (271) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC

    IDENTIFIER      shift and go to state 61
    THIS            shift and go to state 157
    LPAREN          shift and go to state 188
    NEW             shift and go to state 203
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165
    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217

    Expression                     shift and go to state 307
    AssignmentExpression           shift and go to state 190
    ConditionalExpression          shift and go to state 191
    Assignment                     shift and go to state 192
    ConditionalOrExpression        shift and go to state 193
    LeftHandSide                   shift and go to state 145
    ConditionalAndExpression       shift and go to state 194
    Name                           shift and go to state 195
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    InclusiveOrExpression          shift and go to state 196
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Primary                        shift and go to state 197
    PrimaryNoNewArray              shift and go to state 198
    ExclusiveOrExpression          shift and go to state 199
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    MethodInvocation               shift and go to state 201
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220

state 225

    (162) DoStatement -> DO prep_fw_stack . begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (299) begin_scope -> .

    IDENTIFIER      reduce using rule 299 (begin_scope -> .)
    IF              reduce using rule 299 (begin_scope -> .)
    WHILE           reduce using rule 299 (begin_scope -> .)
    FOR             reduce using rule 299 (begin_scope -> .)
    LBRACE          reduce using rule 299 (begin_scope -> .)
    SEMI            reduce using rule 299 (begin_scope -> .)
    SWITCH          reduce using rule 299 (begin_scope -> .)
    DO              reduce using rule 299 (begin_scope -> .)
    BREAK           reduce using rule 299 (begin_scope -> .)
    CONTINUE        reduce using rule 299 (begin_scope -> .)
    RETURN          reduce using rule 299 (begin_scope -> .)
    INC             reduce using rule 299 (begin_scope -> .)
    DEC             reduce using rule 299 (begin_scope -> .)
    NEW             reduce using rule 299 (begin_scope -> .)
    THIS            reduce using rule 299 (begin_scope -> .)
    LPAREN          reduce using rule 299 (begin_scope -> .)
    DECIMAL_LITERAL reduce using rule 299 (begin_scope -> .)
    HEX_LITERAL     reduce using rule 299 (begin_scope -> .)
    BINARY_LITERAL  reduce using rule 299 (begin_scope -> .)
    FLOAT_LITERAL   reduce using rule 299 (begin_scope -> .)
    BOOL_LITERAL    reduce using rule 299 (begin_scope -> .)
    CHAR_LITERAL    reduce using rule 299 (begin_scope -> .)
    STRING_LITERAL  reduce using rule 299 (begin_scope -> .)
    NULL            reduce using rule 299 (begin_scope -> .)

    begin_scope                    shift and go to state 308

state 226

    (189) BreakStatement -> BREAK IDENTIFIER . SEMI

    SEMI            shift and go to state 309


state 227

    (190) BreakStatement -> BREAK SEMI .

    RBRACE          reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    IDENTIFIER      reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    IF              reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    WHILE           reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    FOR             reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    LBRACE          reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    SEMI            reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    SWITCH          reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    DO              reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    BREAK           reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    CONTINUE        reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    RETURN          reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    BOOLEAN         reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    INC             reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    DEC             reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    NEW             reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    BYTE            reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    SHORT           reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    INT             reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    LONG            reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    CHAR            reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    FLOAT           reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    DOUBLE          reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    THIS            reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    LPAREN          reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    DECIMAL_LITERAL reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    HEX_LITERAL     reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    BINARY_LITERAL  reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    FLOAT_LITERAL   reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    BOOL_LITERAL    reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    CHAR_LITERAL    reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    STRING_LITERAL  reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    NULL            reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    CASE            reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    DEFAULT         reduce using rule 190 (BreakStatement -> BREAK SEMI .)
    ELSE            reduce using rule 190 (BreakStatement -> BREAK SEMI .)


state 228

    (191) ContinueStatement -> CONTINUE IDENTIFIER . SEMI

    SEMI            shift and go to state 310


state 229

    (192) ContinueStatement -> CONTINUE SEMI .

    RBRACE          reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    IDENTIFIER      reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    IF              reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    WHILE           reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    FOR             reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    LBRACE          reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    SEMI            reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    SWITCH          reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    DO              reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    BREAK           reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    RETURN          reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    BOOLEAN         reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    INC             reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    DEC             reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    NEW             reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    BYTE            reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    SHORT           reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    INT             reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    LONG            reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    CHAR            reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    FLOAT           reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    DOUBLE          reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    THIS            reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    LPAREN          reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    DECIMAL_LITERAL reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    HEX_LITERAL     reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    BINARY_LITERAL  reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    FLOAT_LITERAL   reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    BOOL_LITERAL    reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    CHAR_LITERAL    reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    STRING_LITERAL  reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    NULL            reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    CASE            reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    DEFAULT         reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)
    ELSE            reduce using rule 192 (ContinueStatement -> CONTINUE SEMI .)


state 230

    (193) ReturnStatement -> RETURN Expression . SEMI

    SEMI            shift and go to state 311


state 231

    (194) ReturnStatement -> RETURN SEMI .

    RBRACE          reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    IDENTIFIER      reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    IF              reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    WHILE           reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    FOR             reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    LBRACE          reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    SEMI            reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    SWITCH          reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    DO              reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    BREAK           reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    CONTINUE        reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    RETURN          reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    BOOLEAN         reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    INC             reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    DEC             reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    NEW             reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    BYTE            reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    SHORT           reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    INT             reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    LONG            reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    CHAR            reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    FLOAT           reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    DOUBLE          reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    THIS            reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    LPAREN          reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    DECIMAL_LITERAL reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    HEX_LITERAL     reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    BINARY_LITERAL  reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    FLOAT_LITERAL   reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    BOOL_LITERAL    reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    CHAR_LITERAL    reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    STRING_LITERAL  reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    NULL            reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    CASE            reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    DEFAULT         reduce using rule 194 (ReturnStatement -> RETURN SEMI .)
    ELSE            reduce using rule 194 (ReturnStatement -> RETURN SEMI .)


state 232

    (219) MethodInvocation -> Name LPAREN . ArgumentList RPAREN
    (221) MethodInvocation -> Name LPAREN . RPAREN
    (206) ArgumentList -> . Expression
    (207) ArgumentList -> . ArgumentList COMMA Expression
    (295) Expression -> . AssignmentExpression
    (277) AssignmentExpression -> . ConditionalExpression
    (278) AssignmentExpression -> . Assignment
    (275) ConditionalExpression -> . ConditionalOrExpression
    (276) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (272) ConditionalOrExpression -> . ConditionalAndExpression
    (273) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (270) ConditionalAndExpression -> . InclusiveOrExpression
    (271) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC

    RPAREN          shift and go to state 313
    IDENTIFIER      shift and go to state 61
    THIS            shift and go to state 157
    LPAREN          shift and go to state 188
    NEW             shift and go to state 203
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165
    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217

    Name                           shift and go to state 195
    ArgumentList                   shift and go to state 312
    Expression                     shift and go to state 314
    AssignmentExpression           shift and go to state 190
    ConditionalExpression          shift and go to state 191
    Assignment                     shift and go to state 192
    ConditionalOrExpression        shift and go to state 193
    LeftHandSide                   shift and go to state 145
    ConditionalAndExpression       shift and go to state 194
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    InclusiveOrExpression          shift and go to state 196
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Primary                        shift and go to state 197
    PrimaryNoNewArray              shift and go to state 198
    ExclusiveOrExpression          shift and go to state 199
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    MethodInvocation               shift and go to state 201
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220

state 233

    (222) ArrayAccess -> Name LBRACK . Expression RBRACK
    (215) Dims -> LBRACK . RBRACK
    (295) Expression -> . AssignmentExpression
    (277) AssignmentExpression -> . ConditionalExpression
    (278) AssignmentExpression -> . Assignment
    (275) ConditionalExpression -> . ConditionalOrExpression
    (276) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (272) ConditionalOrExpression -> . ConditionalAndExpression
    (273) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (270) ConditionalAndExpression -> . InclusiveOrExpression
    (271) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC

    RBRACK          shift and go to state 178
    IDENTIFIER      shift and go to state 61
    THIS            shift and go to state 157
    LPAREN          shift and go to state 188
    NEW             shift and go to state 203
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165
    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217

    Name                           shift and go to state 195
    Expression                     shift and go to state 315
    AssignmentExpression           shift and go to state 190
    ConditionalExpression          shift and go to state 191
    Assignment                     shift and go to state 192
    ConditionalOrExpression        shift and go to state 193
    LeftHandSide                   shift and go to state 145
    ConditionalAndExpression       shift and go to state 194
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    InclusiveOrExpression          shift and go to state 196
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Primary                        shift and go to state 197
    PrimaryNoNewArray              shift and go to state 198
    ExclusiveOrExpression          shift and go to state 199
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    MethodInvocation               shift and go to state 201
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220

state 234

    (279) Assignment -> LeftHandSide AssignmentOperator . AssignmentExpression
    (277) AssignmentExpression -> . ConditionalExpression
    (278) AssignmentExpression -> . Assignment
    (275) ConditionalExpression -> . ConditionalOrExpression
    (276) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (272) ConditionalOrExpression -> . ConditionalAndExpression
    (273) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (270) ConditionalAndExpression -> . InclusiveOrExpression
    (271) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC

    IDENTIFIER      shift and go to state 61
    THIS            shift and go to state 157
    LPAREN          shift and go to state 188
    NEW             shift and go to state 203
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165
    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217

    LeftHandSide                   shift and go to state 145
    AssignmentExpression           shift and go to state 316
    ConditionalExpression          shift and go to state 191
    Assignment                     shift and go to state 192
    ConditionalOrExpression        shift and go to state 193
    ConditionalAndExpression       shift and go to state 194
    Name                           shift and go to state 195
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    InclusiveOrExpression          shift and go to state 196
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Primary                        shift and go to state 197
    PrimaryNoNewArray              shift and go to state 198
    ExclusiveOrExpression          shift and go to state 199
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    MethodInvocation               shift and go to state 201
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220

state 235

    (283) AssignmentOperator -> ASSIGN .

    IDENTIFIER      reduce using rule 283 (AssignmentOperator -> ASSIGN .)
    THIS            reduce using rule 283 (AssignmentOperator -> ASSIGN .)
    LPAREN          reduce using rule 283 (AssignmentOperator -> ASSIGN .)
    NEW             reduce using rule 283 (AssignmentOperator -> ASSIGN .)
    DECIMAL_LITERAL reduce using rule 283 (AssignmentOperator -> ASSIGN .)
    HEX_LITERAL     reduce using rule 283 (AssignmentOperator -> ASSIGN .)
    BINARY_LITERAL  reduce using rule 283 (AssignmentOperator -> ASSIGN .)
    FLOAT_LITERAL   reduce using rule 283 (AssignmentOperator -> ASSIGN .)
    BOOL_LITERAL    reduce using rule 283 (AssignmentOperator -> ASSIGN .)
    CHAR_LITERAL    reduce using rule 283 (AssignmentOperator -> ASSIGN .)
    STRING_LITERAL  reduce using rule 283 (AssignmentOperator -> ASSIGN .)
    NULL            reduce using rule 283 (AssignmentOperator -> ASSIGN .)
    ADD             reduce using rule 283 (AssignmentOperator -> ASSIGN .)
    SUB             reduce using rule 283 (AssignmentOperator -> ASSIGN .)
    INC             reduce using rule 283 (AssignmentOperator -> ASSIGN .)
    DEC             reduce using rule 283 (AssignmentOperator -> ASSIGN .)
    BANG            reduce using rule 283 (AssignmentOperator -> ASSIGN .)
    TILDE           reduce using rule 283 (AssignmentOperator -> ASSIGN .)


state 236

    (284) AssignmentOperator -> ADD_ASSIGN .

    IDENTIFIER      reduce using rule 284 (AssignmentOperator -> ADD_ASSIGN .)
    THIS            reduce using rule 284 (AssignmentOperator -> ADD_ASSIGN .)
    LPAREN          reduce using rule 284 (AssignmentOperator -> ADD_ASSIGN .)
    NEW             reduce using rule 284 (AssignmentOperator -> ADD_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 284 (AssignmentOperator -> ADD_ASSIGN .)
    HEX_LITERAL     reduce using rule 284 (AssignmentOperator -> ADD_ASSIGN .)
    BINARY_LITERAL  reduce using rule 284 (AssignmentOperator -> ADD_ASSIGN .)
    FLOAT_LITERAL   reduce using rule 284 (AssignmentOperator -> ADD_ASSIGN .)
    BOOL_LITERAL    reduce using rule 284 (AssignmentOperator -> ADD_ASSIGN .)
    CHAR_LITERAL    reduce using rule 284 (AssignmentOperator -> ADD_ASSIGN .)
    STRING_LITERAL  reduce using rule 284 (AssignmentOperator -> ADD_ASSIGN .)
    NULL            reduce using rule 284 (AssignmentOperator -> ADD_ASSIGN .)
    ADD             reduce using rule 284 (AssignmentOperator -> ADD_ASSIGN .)
    SUB             reduce using rule 284 (AssignmentOperator -> ADD_ASSIGN .)
    INC             reduce using rule 284 (AssignmentOperator -> ADD_ASSIGN .)
    DEC             reduce using rule 284 (AssignmentOperator -> ADD_ASSIGN .)
    BANG            reduce using rule 284 (AssignmentOperator -> ADD_ASSIGN .)
    TILDE           reduce using rule 284 (AssignmentOperator -> ADD_ASSIGN .)


state 237

    (285) AssignmentOperator -> SUB_ASSIGN .

    IDENTIFIER      reduce using rule 285 (AssignmentOperator -> SUB_ASSIGN .)
    THIS            reduce using rule 285 (AssignmentOperator -> SUB_ASSIGN .)
    LPAREN          reduce using rule 285 (AssignmentOperator -> SUB_ASSIGN .)
    NEW             reduce using rule 285 (AssignmentOperator -> SUB_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 285 (AssignmentOperator -> SUB_ASSIGN .)
    HEX_LITERAL     reduce using rule 285 (AssignmentOperator -> SUB_ASSIGN .)
    BINARY_LITERAL  reduce using rule 285 (AssignmentOperator -> SUB_ASSIGN .)
    FLOAT_LITERAL   reduce using rule 285 (AssignmentOperator -> SUB_ASSIGN .)
    BOOL_LITERAL    reduce using rule 285 (AssignmentOperator -> SUB_ASSIGN .)
    CHAR_LITERAL    reduce using rule 285 (AssignmentOperator -> SUB_ASSIGN .)
    STRING_LITERAL  reduce using rule 285 (AssignmentOperator -> SUB_ASSIGN .)
    NULL            reduce using rule 285 (AssignmentOperator -> SUB_ASSIGN .)
    ADD             reduce using rule 285 (AssignmentOperator -> SUB_ASSIGN .)
    SUB             reduce using rule 285 (AssignmentOperator -> SUB_ASSIGN .)
    INC             reduce using rule 285 (AssignmentOperator -> SUB_ASSIGN .)
    DEC             reduce using rule 285 (AssignmentOperator -> SUB_ASSIGN .)
    BANG            reduce using rule 285 (AssignmentOperator -> SUB_ASSIGN .)
    TILDE           reduce using rule 285 (AssignmentOperator -> SUB_ASSIGN .)


state 238

    (286) AssignmentOperator -> MUL_ASSIGN .

    IDENTIFIER      reduce using rule 286 (AssignmentOperator -> MUL_ASSIGN .)
    THIS            reduce using rule 286 (AssignmentOperator -> MUL_ASSIGN .)
    LPAREN          reduce using rule 286 (AssignmentOperator -> MUL_ASSIGN .)
    NEW             reduce using rule 286 (AssignmentOperator -> MUL_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 286 (AssignmentOperator -> MUL_ASSIGN .)
    HEX_LITERAL     reduce using rule 286 (AssignmentOperator -> MUL_ASSIGN .)
    BINARY_LITERAL  reduce using rule 286 (AssignmentOperator -> MUL_ASSIGN .)
    FLOAT_LITERAL   reduce using rule 286 (AssignmentOperator -> MUL_ASSIGN .)
    BOOL_LITERAL    reduce using rule 286 (AssignmentOperator -> MUL_ASSIGN .)
    CHAR_LITERAL    reduce using rule 286 (AssignmentOperator -> MUL_ASSIGN .)
    STRING_LITERAL  reduce using rule 286 (AssignmentOperator -> MUL_ASSIGN .)
    NULL            reduce using rule 286 (AssignmentOperator -> MUL_ASSIGN .)
    ADD             reduce using rule 286 (AssignmentOperator -> MUL_ASSIGN .)
    SUB             reduce using rule 286 (AssignmentOperator -> MUL_ASSIGN .)
    INC             reduce using rule 286 (AssignmentOperator -> MUL_ASSIGN .)
    DEC             reduce using rule 286 (AssignmentOperator -> MUL_ASSIGN .)
    BANG            reduce using rule 286 (AssignmentOperator -> MUL_ASSIGN .)
    TILDE           reduce using rule 286 (AssignmentOperator -> MUL_ASSIGN .)


state 239

    (287) AssignmentOperator -> DIV_ASSIGN .

    IDENTIFIER      reduce using rule 287 (AssignmentOperator -> DIV_ASSIGN .)
    THIS            reduce using rule 287 (AssignmentOperator -> DIV_ASSIGN .)
    LPAREN          reduce using rule 287 (AssignmentOperator -> DIV_ASSIGN .)
    NEW             reduce using rule 287 (AssignmentOperator -> DIV_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 287 (AssignmentOperator -> DIV_ASSIGN .)
    HEX_LITERAL     reduce using rule 287 (AssignmentOperator -> DIV_ASSIGN .)
    BINARY_LITERAL  reduce using rule 287 (AssignmentOperator -> DIV_ASSIGN .)
    FLOAT_LITERAL   reduce using rule 287 (AssignmentOperator -> DIV_ASSIGN .)
    BOOL_LITERAL    reduce using rule 287 (AssignmentOperator -> DIV_ASSIGN .)
    CHAR_LITERAL    reduce using rule 287 (AssignmentOperator -> DIV_ASSIGN .)
    STRING_LITERAL  reduce using rule 287 (AssignmentOperator -> DIV_ASSIGN .)
    NULL            reduce using rule 287 (AssignmentOperator -> DIV_ASSIGN .)
    ADD             reduce using rule 287 (AssignmentOperator -> DIV_ASSIGN .)
    SUB             reduce using rule 287 (AssignmentOperator -> DIV_ASSIGN .)
    INC             reduce using rule 287 (AssignmentOperator -> DIV_ASSIGN .)
    DEC             reduce using rule 287 (AssignmentOperator -> DIV_ASSIGN .)
    BANG            reduce using rule 287 (AssignmentOperator -> DIV_ASSIGN .)
    TILDE           reduce using rule 287 (AssignmentOperator -> DIV_ASSIGN .)


state 240

    (288) AssignmentOperator -> AND_ASSIGN .

    IDENTIFIER      reduce using rule 288 (AssignmentOperator -> AND_ASSIGN .)
    THIS            reduce using rule 288 (AssignmentOperator -> AND_ASSIGN .)
    LPAREN          reduce using rule 288 (AssignmentOperator -> AND_ASSIGN .)
    NEW             reduce using rule 288 (AssignmentOperator -> AND_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 288 (AssignmentOperator -> AND_ASSIGN .)
    HEX_LITERAL     reduce using rule 288 (AssignmentOperator -> AND_ASSIGN .)
    BINARY_LITERAL  reduce using rule 288 (AssignmentOperator -> AND_ASSIGN .)
    FLOAT_LITERAL   reduce using rule 288 (AssignmentOperator -> AND_ASSIGN .)
    BOOL_LITERAL    reduce using rule 288 (AssignmentOperator -> AND_ASSIGN .)
    CHAR_LITERAL    reduce using rule 288 (AssignmentOperator -> AND_ASSIGN .)
    STRING_LITERAL  reduce using rule 288 (AssignmentOperator -> AND_ASSIGN .)
    NULL            reduce using rule 288 (AssignmentOperator -> AND_ASSIGN .)
    ADD             reduce using rule 288 (AssignmentOperator -> AND_ASSIGN .)
    SUB             reduce using rule 288 (AssignmentOperator -> AND_ASSIGN .)
    INC             reduce using rule 288 (AssignmentOperator -> AND_ASSIGN .)
    DEC             reduce using rule 288 (AssignmentOperator -> AND_ASSIGN .)
    BANG            reduce using rule 288 (AssignmentOperator -> AND_ASSIGN .)
    TILDE           reduce using rule 288 (AssignmentOperator -> AND_ASSIGN .)


state 241

    (289) AssignmentOperator -> OR_ASSIGN .

    IDENTIFIER      reduce using rule 289 (AssignmentOperator -> OR_ASSIGN .)
    THIS            reduce using rule 289 (AssignmentOperator -> OR_ASSIGN .)
    LPAREN          reduce using rule 289 (AssignmentOperator -> OR_ASSIGN .)
    NEW             reduce using rule 289 (AssignmentOperator -> OR_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 289 (AssignmentOperator -> OR_ASSIGN .)
    HEX_LITERAL     reduce using rule 289 (AssignmentOperator -> OR_ASSIGN .)
    BINARY_LITERAL  reduce using rule 289 (AssignmentOperator -> OR_ASSIGN .)
    FLOAT_LITERAL   reduce using rule 289 (AssignmentOperator -> OR_ASSIGN .)
    BOOL_LITERAL    reduce using rule 289 (AssignmentOperator -> OR_ASSIGN .)
    CHAR_LITERAL    reduce using rule 289 (AssignmentOperator -> OR_ASSIGN .)
    STRING_LITERAL  reduce using rule 289 (AssignmentOperator -> OR_ASSIGN .)
    NULL            reduce using rule 289 (AssignmentOperator -> OR_ASSIGN .)
    ADD             reduce using rule 289 (AssignmentOperator -> OR_ASSIGN .)
    SUB             reduce using rule 289 (AssignmentOperator -> OR_ASSIGN .)
    INC             reduce using rule 289 (AssignmentOperator -> OR_ASSIGN .)
    DEC             reduce using rule 289 (AssignmentOperator -> OR_ASSIGN .)
    BANG            reduce using rule 289 (AssignmentOperator -> OR_ASSIGN .)
    TILDE           reduce using rule 289 (AssignmentOperator -> OR_ASSIGN .)


state 242

    (290) AssignmentOperator -> XOR_ASSIGN .

    IDENTIFIER      reduce using rule 290 (AssignmentOperator -> XOR_ASSIGN .)
    THIS            reduce using rule 290 (AssignmentOperator -> XOR_ASSIGN .)
    LPAREN          reduce using rule 290 (AssignmentOperator -> XOR_ASSIGN .)
    NEW             reduce using rule 290 (AssignmentOperator -> XOR_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 290 (AssignmentOperator -> XOR_ASSIGN .)
    HEX_LITERAL     reduce using rule 290 (AssignmentOperator -> XOR_ASSIGN .)
    BINARY_LITERAL  reduce using rule 290 (AssignmentOperator -> XOR_ASSIGN .)
    FLOAT_LITERAL   reduce using rule 290 (AssignmentOperator -> XOR_ASSIGN .)
    BOOL_LITERAL    reduce using rule 290 (AssignmentOperator -> XOR_ASSIGN .)
    CHAR_LITERAL    reduce using rule 290 (AssignmentOperator -> XOR_ASSIGN .)
    STRING_LITERAL  reduce using rule 290 (AssignmentOperator -> XOR_ASSIGN .)
    NULL            reduce using rule 290 (AssignmentOperator -> XOR_ASSIGN .)
    ADD             reduce using rule 290 (AssignmentOperator -> XOR_ASSIGN .)
    SUB             reduce using rule 290 (AssignmentOperator -> XOR_ASSIGN .)
    INC             reduce using rule 290 (AssignmentOperator -> XOR_ASSIGN .)
    DEC             reduce using rule 290 (AssignmentOperator -> XOR_ASSIGN .)
    BANG            reduce using rule 290 (AssignmentOperator -> XOR_ASSIGN .)
    TILDE           reduce using rule 290 (AssignmentOperator -> XOR_ASSIGN .)


state 243

    (291) AssignmentOperator -> MOD_ASSIGN .

    IDENTIFIER      reduce using rule 291 (AssignmentOperator -> MOD_ASSIGN .)
    THIS            reduce using rule 291 (AssignmentOperator -> MOD_ASSIGN .)
    LPAREN          reduce using rule 291 (AssignmentOperator -> MOD_ASSIGN .)
    NEW             reduce using rule 291 (AssignmentOperator -> MOD_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 291 (AssignmentOperator -> MOD_ASSIGN .)
    HEX_LITERAL     reduce using rule 291 (AssignmentOperator -> MOD_ASSIGN .)
    BINARY_LITERAL  reduce using rule 291 (AssignmentOperator -> MOD_ASSIGN .)
    FLOAT_LITERAL   reduce using rule 291 (AssignmentOperator -> MOD_ASSIGN .)
    BOOL_LITERAL    reduce using rule 291 (AssignmentOperator -> MOD_ASSIGN .)
    CHAR_LITERAL    reduce using rule 291 (AssignmentOperator -> MOD_ASSIGN .)
    STRING_LITERAL  reduce using rule 291 (AssignmentOperator -> MOD_ASSIGN .)
    NULL            reduce using rule 291 (AssignmentOperator -> MOD_ASSIGN .)
    ADD             reduce using rule 291 (AssignmentOperator -> MOD_ASSIGN .)
    SUB             reduce using rule 291 (AssignmentOperator -> MOD_ASSIGN .)
    INC             reduce using rule 291 (AssignmentOperator -> MOD_ASSIGN .)
    DEC             reduce using rule 291 (AssignmentOperator -> MOD_ASSIGN .)
    BANG            reduce using rule 291 (AssignmentOperator -> MOD_ASSIGN .)
    TILDE           reduce using rule 291 (AssignmentOperator -> MOD_ASSIGN .)


state 244

    (292) AssignmentOperator -> LSHIFT_ASSIGN .

    IDENTIFIER      reduce using rule 292 (AssignmentOperator -> LSHIFT_ASSIGN .)
    THIS            reduce using rule 292 (AssignmentOperator -> LSHIFT_ASSIGN .)
    LPAREN          reduce using rule 292 (AssignmentOperator -> LSHIFT_ASSIGN .)
    NEW             reduce using rule 292 (AssignmentOperator -> LSHIFT_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 292 (AssignmentOperator -> LSHIFT_ASSIGN .)
    HEX_LITERAL     reduce using rule 292 (AssignmentOperator -> LSHIFT_ASSIGN .)
    BINARY_LITERAL  reduce using rule 292 (AssignmentOperator -> LSHIFT_ASSIGN .)
    FLOAT_LITERAL   reduce using rule 292 (AssignmentOperator -> LSHIFT_ASSIGN .)
    BOOL_LITERAL    reduce using rule 292 (AssignmentOperator -> LSHIFT_ASSIGN .)
    CHAR_LITERAL    reduce using rule 292 (AssignmentOperator -> LSHIFT_ASSIGN .)
    STRING_LITERAL  reduce using rule 292 (AssignmentOperator -> LSHIFT_ASSIGN .)
    NULL            reduce using rule 292 (AssignmentOperator -> LSHIFT_ASSIGN .)
    ADD             reduce using rule 292 (AssignmentOperator -> LSHIFT_ASSIGN .)
    SUB             reduce using rule 292 (AssignmentOperator -> LSHIFT_ASSIGN .)
    INC             reduce using rule 292 (AssignmentOperator -> LSHIFT_ASSIGN .)
    DEC             reduce using rule 292 (AssignmentOperator -> LSHIFT_ASSIGN .)
    BANG            reduce using rule 292 (AssignmentOperator -> LSHIFT_ASSIGN .)
    TILDE           reduce using rule 292 (AssignmentOperator -> LSHIFT_ASSIGN .)


state 245

    (293) AssignmentOperator -> RSHIFT_ASSIGN .

    IDENTIFIER      reduce using rule 293 (AssignmentOperator -> RSHIFT_ASSIGN .)
    THIS            reduce using rule 293 (AssignmentOperator -> RSHIFT_ASSIGN .)
    LPAREN          reduce using rule 293 (AssignmentOperator -> RSHIFT_ASSIGN .)
    NEW             reduce using rule 293 (AssignmentOperator -> RSHIFT_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 293 (AssignmentOperator -> RSHIFT_ASSIGN .)
    HEX_LITERAL     reduce using rule 293 (AssignmentOperator -> RSHIFT_ASSIGN .)
    BINARY_LITERAL  reduce using rule 293 (AssignmentOperator -> RSHIFT_ASSIGN .)
    FLOAT_LITERAL   reduce using rule 293 (AssignmentOperator -> RSHIFT_ASSIGN .)
    BOOL_LITERAL    reduce using rule 293 (AssignmentOperator -> RSHIFT_ASSIGN .)
    CHAR_LITERAL    reduce using rule 293 (AssignmentOperator -> RSHIFT_ASSIGN .)
    STRING_LITERAL  reduce using rule 293 (AssignmentOperator -> RSHIFT_ASSIGN .)
    NULL            reduce using rule 293 (AssignmentOperator -> RSHIFT_ASSIGN .)
    ADD             reduce using rule 293 (AssignmentOperator -> RSHIFT_ASSIGN .)
    SUB             reduce using rule 293 (AssignmentOperator -> RSHIFT_ASSIGN .)
    INC             reduce using rule 293 (AssignmentOperator -> RSHIFT_ASSIGN .)
    DEC             reduce using rule 293 (AssignmentOperator -> RSHIFT_ASSIGN .)
    BANG            reduce using rule 293 (AssignmentOperator -> RSHIFT_ASSIGN .)
    TILDE           reduce using rule 293 (AssignmentOperator -> RSHIFT_ASSIGN .)


state 246

    (294) AssignmentOperator -> URSHIFT_ASSIGN .

    IDENTIFIER      reduce using rule 294 (AssignmentOperator -> URSHIFT_ASSIGN .)
    THIS            reduce using rule 294 (AssignmentOperator -> URSHIFT_ASSIGN .)
    LPAREN          reduce using rule 294 (AssignmentOperator -> URSHIFT_ASSIGN .)
    NEW             reduce using rule 294 (AssignmentOperator -> URSHIFT_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 294 (AssignmentOperator -> URSHIFT_ASSIGN .)
    HEX_LITERAL     reduce using rule 294 (AssignmentOperator -> URSHIFT_ASSIGN .)
    BINARY_LITERAL  reduce using rule 294 (AssignmentOperator -> URSHIFT_ASSIGN .)
    FLOAT_LITERAL   reduce using rule 294 (AssignmentOperator -> URSHIFT_ASSIGN .)
    BOOL_LITERAL    reduce using rule 294 (AssignmentOperator -> URSHIFT_ASSIGN .)
    CHAR_LITERAL    reduce using rule 294 (AssignmentOperator -> URSHIFT_ASSIGN .)
    STRING_LITERAL  reduce using rule 294 (AssignmentOperator -> URSHIFT_ASSIGN .)
    NULL            reduce using rule 294 (AssignmentOperator -> URSHIFT_ASSIGN .)
    ADD             reduce using rule 294 (AssignmentOperator -> URSHIFT_ASSIGN .)
    SUB             reduce using rule 294 (AssignmentOperator -> URSHIFT_ASSIGN .)
    INC             reduce using rule 294 (AssignmentOperator -> URSHIFT_ASSIGN .)
    DEC             reduce using rule 294 (AssignmentOperator -> URSHIFT_ASSIGN .)
    BANG            reduce using rule 294 (AssignmentOperator -> URSHIFT_ASSIGN .)
    TILDE           reduce using rule 294 (AssignmentOperator -> URSHIFT_ASSIGN .)


state 247

    (235) PreIncrementExpression -> INC UnaryExpression .

    SEMI            reduce using rule 235 (PreIncrementExpression -> INC UnaryExpression .)
    MUL             reduce using rule 235 (PreIncrementExpression -> INC UnaryExpression .)
    DIV             reduce using rule 235 (PreIncrementExpression -> INC UnaryExpression .)
    MOD             reduce using rule 235 (PreIncrementExpression -> INC UnaryExpression .)
    ADD             reduce using rule 235 (PreIncrementExpression -> INC UnaryExpression .)
    SUB             reduce using rule 235 (PreIncrementExpression -> INC UnaryExpression .)
    LSHIFT          reduce using rule 235 (PreIncrementExpression -> INC UnaryExpression .)
    RSHIFT          reduce using rule 235 (PreIncrementExpression -> INC UnaryExpression .)
    URSHIFT         reduce using rule 235 (PreIncrementExpression -> INC UnaryExpression .)
    LT              reduce using rule 235 (PreIncrementExpression -> INC UnaryExpression .)
    GT              reduce using rule 235 (PreIncrementExpression -> INC UnaryExpression .)
    LE              reduce using rule 235 (PreIncrementExpression -> INC UnaryExpression .)
    GE              reduce using rule 235 (PreIncrementExpression -> INC UnaryExpression .)
    EQUAL           reduce using rule 235 (PreIncrementExpression -> INC UnaryExpression .)
    NOTEQUAL        reduce using rule 235 (PreIncrementExpression -> INC UnaryExpression .)
    BITAND          reduce using rule 235 (PreIncrementExpression -> INC UnaryExpression .)
    CARET           reduce using rule 235 (PreIncrementExpression -> INC UnaryExpression .)
    BITOR           reduce using rule 235 (PreIncrementExpression -> INC UnaryExpression .)
    AND             reduce using rule 235 (PreIncrementExpression -> INC UnaryExpression .)
    QUESTION        reduce using rule 235 (PreIncrementExpression -> INC UnaryExpression .)
    OR              reduce using rule 235 (PreIncrementExpression -> INC UnaryExpression .)
    RPAREN          reduce using rule 235 (PreIncrementExpression -> INC UnaryExpression .)
    COMMA           reduce using rule 235 (PreIncrementExpression -> INC UnaryExpression .)
    RBRACK          reduce using rule 235 (PreIncrementExpression -> INC UnaryExpression .)
    COLON           reduce using rule 235 (PreIncrementExpression -> INC UnaryExpression .)


state 248

    (224) PostfixExpression -> Primary .
    (217) FieldAccess -> Primary . DOT Name
    (218) MethodInvocation -> Primary . DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> Primary . DOT IDENTIFIER LPAREN RPAREN

    INC             reduce using rule 224 (PostfixExpression -> Primary .)
    DEC             reduce using rule 224 (PostfixExpression -> Primary .)
    SEMI            reduce using rule 224 (PostfixExpression -> Primary .)
    MUL             reduce using rule 224 (PostfixExpression -> Primary .)
    DIV             reduce using rule 224 (PostfixExpression -> Primary .)
    MOD             reduce using rule 224 (PostfixExpression -> Primary .)
    ADD             reduce using rule 224 (PostfixExpression -> Primary .)
    SUB             reduce using rule 224 (PostfixExpression -> Primary .)
    LSHIFT          reduce using rule 224 (PostfixExpression -> Primary .)
    RSHIFT          reduce using rule 224 (PostfixExpression -> Primary .)
    URSHIFT         reduce using rule 224 (PostfixExpression -> Primary .)
    LT              reduce using rule 224 (PostfixExpression -> Primary .)
    GT              reduce using rule 224 (PostfixExpression -> Primary .)
    LE              reduce using rule 224 (PostfixExpression -> Primary .)
    GE              reduce using rule 224 (PostfixExpression -> Primary .)
    EQUAL           reduce using rule 224 (PostfixExpression -> Primary .)
    NOTEQUAL        reduce using rule 224 (PostfixExpression -> Primary .)
    BITAND          reduce using rule 224 (PostfixExpression -> Primary .)
    CARET           reduce using rule 224 (PostfixExpression -> Primary .)
    BITOR           reduce using rule 224 (PostfixExpression -> Primary .)
    AND             reduce using rule 224 (PostfixExpression -> Primary .)
    QUESTION        reduce using rule 224 (PostfixExpression -> Primary .)
    OR              reduce using rule 224 (PostfixExpression -> Primary .)
    RPAREN          reduce using rule 224 (PostfixExpression -> Primary .)
    COMMA           reduce using rule 224 (PostfixExpression -> Primary .)
    RBRACK          reduce using rule 224 (PostfixExpression -> Primary .)
    COLON           reduce using rule 224 (PostfixExpression -> Primary .)
    DOT             shift and go to state 283


state 249

    (225) PostfixExpression -> Name .
    (31) QualifiedName -> Name . DOT IDENTIFIER
    (219) MethodInvocation -> Name . LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> Name . LPAREN RPAREN
    (222) ArrayAccess -> Name . LBRACK Expression RBRACK

    INC             reduce using rule 225 (PostfixExpression -> Name .)
    DEC             reduce using rule 225 (PostfixExpression -> Name .)
    SEMI            reduce using rule 225 (PostfixExpression -> Name .)
    MUL             reduce using rule 225 (PostfixExpression -> Name .)
    DIV             reduce using rule 225 (PostfixExpression -> Name .)
    MOD             reduce using rule 225 (PostfixExpression -> Name .)
    ADD             reduce using rule 225 (PostfixExpression -> Name .)
    SUB             reduce using rule 225 (PostfixExpression -> Name .)
    LSHIFT          reduce using rule 225 (PostfixExpression -> Name .)
    RSHIFT          reduce using rule 225 (PostfixExpression -> Name .)
    URSHIFT         reduce using rule 225 (PostfixExpression -> Name .)
    LT              reduce using rule 225 (PostfixExpression -> Name .)
    GT              reduce using rule 225 (PostfixExpression -> Name .)
    LE              reduce using rule 225 (PostfixExpression -> Name .)
    GE              reduce using rule 225 (PostfixExpression -> Name .)
    EQUAL           reduce using rule 225 (PostfixExpression -> Name .)
    NOTEQUAL        reduce using rule 225 (PostfixExpression -> Name .)
    BITAND          reduce using rule 225 (PostfixExpression -> Name .)
    CARET           reduce using rule 225 (PostfixExpression -> Name .)
    BITOR           reduce using rule 225 (PostfixExpression -> Name .)
    AND             reduce using rule 225 (PostfixExpression -> Name .)
    QUESTION        reduce using rule 225 (PostfixExpression -> Name .)
    OR              reduce using rule 225 (PostfixExpression -> Name .)
    RPAREN          reduce using rule 225 (PostfixExpression -> Name .)
    COMMA           reduce using rule 225 (PostfixExpression -> Name .)
    RBRACK          reduce using rule 225 (PostfixExpression -> Name .)
    COLON           reduce using rule 225 (PostfixExpression -> Name .)
    DOT             shift and go to state 99
    LPAREN          shift and go to state 232
    LBRACK          shift and go to state 281


state 250

    (241) CastExpression -> LPAREN . PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> LPAREN . PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> LPAREN . Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> LPAREN . Name Dims RPAREN UnaryExpressionNotAddSub
    (199) PrimaryNoNewArray -> LPAREN . Expression RPAREN
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (295) Expression -> . AssignmentExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (277) AssignmentExpression -> . ConditionalExpression
    (278) AssignmentExpression -> . Assignment
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (275) ConditionalExpression -> . ConditionalOrExpression
    (276) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (272) ConditionalOrExpression -> . ConditionalAndExpression
    (273) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (270) ConditionalAndExpression -> . InclusiveOrExpression
    (271) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC

    BOOLEAN         shift and go to state 63
    IDENTIFIER      shift and go to state 61
    BYTE            shift and go to state 69
    SHORT           shift and go to state 70
    INT             shift and go to state 71
    LONG            shift and go to state 72
    CHAR            shift and go to state 73
    FLOAT           shift and go to state 74
    DOUBLE          shift and go to state 75
    THIS            shift and go to state 157
    LPAREN          shift and go to state 188
    NEW             shift and go to state 203
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165
    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217

    PrimitiveType                  shift and go to state 275
    UnaryExpression                shift and go to state 211
    Expression                     shift and go to state 317
    UnaryExpressionNotAddSub       shift and go to state 214
    Name                           shift and go to state 276
    NumericType                    shift and go to state 62
    AssignmentExpression           shift and go to state 190
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    IntegralType                   shift and go to state 66
    FloatingPointType              shift and go to state 67
    ConditionalExpression          shift and go to state 191
    Assignment                     shift and go to state 192
    ConditionalOrExpression        shift and go to state 193
    LeftHandSide                   shift and go to state 145
    ConditionalAndExpression       shift and go to state 194
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    InclusiveOrExpression          shift and go to state 196
    Primary                        shift and go to state 197
    PrimaryNoNewArray              shift and go to state 198
    ExclusiveOrExpression          shift and go to state 199
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    MethodInvocation               shift and go to state 201
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220

state 251

    (201) PrimaryNoNewArray -> FieldAccess .

    LBRACK          reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    DOT             reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    INC             reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    DEC             reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    SEMI            reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    MUL             reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    DIV             reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    MOD             reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    ADD             reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    SUB             reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    LSHIFT          reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    RSHIFT          reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    URSHIFT         reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    LT              reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    GT              reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    LE              reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    GE              reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    EQUAL           reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    NOTEQUAL        reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    BITAND          reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    CARET           reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    BITOR           reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    AND             reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    QUESTION        reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    OR              reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    RPAREN          reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    COMMA           reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    RBRACK          reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)
    COLON           reduce using rule 201 (PrimaryNoNewArray -> FieldAccess .)


state 252

    (203) PrimaryNoNewArray -> ArrayAccess .

    LBRACK          reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    DOT             reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    INC             reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    DEC             reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    SEMI            reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    MUL             reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    DIV             reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    MOD             reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    ADD             reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    SUB             reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    LSHIFT          reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    RSHIFT          reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    URSHIFT         reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    LT              reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    GT              reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    LE              reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    GE              reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    EQUAL           reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    NOTEQUAL        reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    BITAND          reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    CARET           reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    BITOR           reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    AND             reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    QUESTION        reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    OR              reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    RPAREN          reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    COMMA           reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    RBRACK          reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)
    COLON           reduce using rule 203 (PrimaryNoNewArray -> ArrayAccess .)


state 253

    (236) PreDecrementExpression -> DEC UnaryExpression .

    SEMI            reduce using rule 236 (PreDecrementExpression -> DEC UnaryExpression .)
    MUL             reduce using rule 236 (PreDecrementExpression -> DEC UnaryExpression .)
    DIV             reduce using rule 236 (PreDecrementExpression -> DEC UnaryExpression .)
    MOD             reduce using rule 236 (PreDecrementExpression -> DEC UnaryExpression .)
    ADD             reduce using rule 236 (PreDecrementExpression -> DEC UnaryExpression .)
    SUB             reduce using rule 236 (PreDecrementExpression -> DEC UnaryExpression .)
    LSHIFT          reduce using rule 236 (PreDecrementExpression -> DEC UnaryExpression .)
    RSHIFT          reduce using rule 236 (PreDecrementExpression -> DEC UnaryExpression .)
    URSHIFT         reduce using rule 236 (PreDecrementExpression -> DEC UnaryExpression .)
    LT              reduce using rule 236 (PreDecrementExpression -> DEC UnaryExpression .)
    GT              reduce using rule 236 (PreDecrementExpression -> DEC UnaryExpression .)
    LE              reduce using rule 236 (PreDecrementExpression -> DEC UnaryExpression .)
    GE              reduce using rule 236 (PreDecrementExpression -> DEC UnaryExpression .)
    EQUAL           reduce using rule 236 (PreDecrementExpression -> DEC UnaryExpression .)
    NOTEQUAL        reduce using rule 236 (PreDecrementExpression -> DEC UnaryExpression .)
    BITAND          reduce using rule 236 (PreDecrementExpression -> DEC UnaryExpression .)
    CARET           reduce using rule 236 (PreDecrementExpression -> DEC UnaryExpression .)
    BITOR           reduce using rule 236 (PreDecrementExpression -> DEC UnaryExpression .)
    AND             reduce using rule 236 (PreDecrementExpression -> DEC UnaryExpression .)
    QUESTION        reduce using rule 236 (PreDecrementExpression -> DEC UnaryExpression .)
    OR              reduce using rule 236 (PreDecrementExpression -> DEC UnaryExpression .)
    RPAREN          reduce using rule 236 (PreDecrementExpression -> DEC UnaryExpression .)
    COMMA           reduce using rule 236 (PreDecrementExpression -> DEC UnaryExpression .)
    RBRACK          reduce using rule 236 (PreDecrementExpression -> DEC UnaryExpression .)
    COLON           reduce using rule 236 (PreDecrementExpression -> DEC UnaryExpression .)


state 254

    (228) PostIncrementExpression -> PostfixExpression INC .

    SEMI            reduce using rule 228 (PostIncrementExpression -> PostfixExpression INC .)
    INC             reduce using rule 228 (PostIncrementExpression -> PostfixExpression INC .)
    DEC             reduce using rule 228 (PostIncrementExpression -> PostfixExpression INC .)
    MUL             reduce using rule 228 (PostIncrementExpression -> PostfixExpression INC .)
    DIV             reduce using rule 228 (PostIncrementExpression -> PostfixExpression INC .)
    MOD             reduce using rule 228 (PostIncrementExpression -> PostfixExpression INC .)
    ADD             reduce using rule 228 (PostIncrementExpression -> PostfixExpression INC .)
    SUB             reduce using rule 228 (PostIncrementExpression -> PostfixExpression INC .)
    LSHIFT          reduce using rule 228 (PostIncrementExpression -> PostfixExpression INC .)
    RSHIFT          reduce using rule 228 (PostIncrementExpression -> PostfixExpression INC .)
    URSHIFT         reduce using rule 228 (PostIncrementExpression -> PostfixExpression INC .)
    LT              reduce using rule 228 (PostIncrementExpression -> PostfixExpression INC .)
    GT              reduce using rule 228 (PostIncrementExpression -> PostfixExpression INC .)
    LE              reduce using rule 228 (PostIncrementExpression -> PostfixExpression INC .)
    GE              reduce using rule 228 (PostIncrementExpression -> PostfixExpression INC .)
    EQUAL           reduce using rule 228 (PostIncrementExpression -> PostfixExpression INC .)
    NOTEQUAL        reduce using rule 228 (PostIncrementExpression -> PostfixExpression INC .)
    BITAND          reduce using rule 228 (PostIncrementExpression -> PostfixExpression INC .)
    CARET           reduce using rule 228 (PostIncrementExpression -> PostfixExpression INC .)
    BITOR           reduce using rule 228 (PostIncrementExpression -> PostfixExpression INC .)
    AND             reduce using rule 228 (PostIncrementExpression -> PostfixExpression INC .)
    QUESTION        reduce using rule 228 (PostIncrementExpression -> PostfixExpression INC .)
    OR              reduce using rule 228 (PostIncrementExpression -> PostfixExpression INC .)
    RPAREN          reduce using rule 228 (PostIncrementExpression -> PostfixExpression INC .)
    COMMA           reduce using rule 228 (PostIncrementExpression -> PostfixExpression INC .)
    RBRACK          reduce using rule 228 (PostIncrementExpression -> PostfixExpression INC .)
    COLON           reduce using rule 228 (PostIncrementExpression -> PostfixExpression INC .)


state 255

    (229) PostDecrementExpression -> PostfixExpression DEC .

    SEMI            reduce using rule 229 (PostDecrementExpression -> PostfixExpression DEC .)
    INC             reduce using rule 229 (PostDecrementExpression -> PostfixExpression DEC .)
    DEC             reduce using rule 229 (PostDecrementExpression -> PostfixExpression DEC .)
    MUL             reduce using rule 229 (PostDecrementExpression -> PostfixExpression DEC .)
    DIV             reduce using rule 229 (PostDecrementExpression -> PostfixExpression DEC .)
    MOD             reduce using rule 229 (PostDecrementExpression -> PostfixExpression DEC .)
    ADD             reduce using rule 229 (PostDecrementExpression -> PostfixExpression DEC .)
    SUB             reduce using rule 229 (PostDecrementExpression -> PostfixExpression DEC .)
    LSHIFT          reduce using rule 229 (PostDecrementExpression -> PostfixExpression DEC .)
    RSHIFT          reduce using rule 229 (PostDecrementExpression -> PostfixExpression DEC .)
    URSHIFT         reduce using rule 229 (PostDecrementExpression -> PostfixExpression DEC .)
    LT              reduce using rule 229 (PostDecrementExpression -> PostfixExpression DEC .)
    GT              reduce using rule 229 (PostDecrementExpression -> PostfixExpression DEC .)
    LE              reduce using rule 229 (PostDecrementExpression -> PostfixExpression DEC .)
    GE              reduce using rule 229 (PostDecrementExpression -> PostfixExpression DEC .)
    EQUAL           reduce using rule 229 (PostDecrementExpression -> PostfixExpression DEC .)
    NOTEQUAL        reduce using rule 229 (PostDecrementExpression -> PostfixExpression DEC .)
    BITAND          reduce using rule 229 (PostDecrementExpression -> PostfixExpression DEC .)
    CARET           reduce using rule 229 (PostDecrementExpression -> PostfixExpression DEC .)
    BITOR           reduce using rule 229 (PostDecrementExpression -> PostfixExpression DEC .)
    AND             reduce using rule 229 (PostDecrementExpression -> PostfixExpression DEC .)
    QUESTION        reduce using rule 229 (PostDecrementExpression -> PostfixExpression DEC .)
    OR              reduce using rule 229 (PostDecrementExpression -> PostfixExpression DEC .)
    RPAREN          reduce using rule 229 (PostDecrementExpression -> PostfixExpression DEC .)
    COMMA           reduce using rule 229 (PostDecrementExpression -> PostfixExpression DEC .)
    RBRACK          reduce using rule 229 (PostDecrementExpression -> PostfixExpression DEC .)
    COLON           reduce using rule 229 (PostDecrementExpression -> PostfixExpression DEC .)


state 256

    (218) MethodInvocation -> Primary DOT . IDENTIFIER LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> Primary DOT . IDENTIFIER LPAREN RPAREN
    (217) FieldAccess -> Primary DOT . Name
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER

    IDENTIFIER      shift and go to state 318

    Name                           shift and go to state 319
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76

state 257

    (204) ClassInstanceCreationExpression -> NEW ClassType . LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> NEW ClassType . LPAREN ArgumentList RPAREN
    (210) ArrayCreationExpression -> NEW ClassType . DimExprs Dims
    (211) ArrayCreationExpression -> NEW ClassType . DimExprs
    (212) DimExprs -> . DimExpr
    (213) DimExprs -> . DimExprs DimExpr
    (214) DimExpr -> . LBRACK Expression RBRACK

    LPAREN          shift and go to state 320
    LBRACK          shift and go to state 323

    DimExprs                       shift and go to state 321
    DimExpr                        shift and go to state 322

state 258

    (208) ArrayCreationExpression -> NEW PrimitiveType . DimExprs Dims
    (209) ArrayCreationExpression -> NEW PrimitiveType . DimExprs
    (212) DimExprs -> . DimExpr
    (213) DimExprs -> . DimExprs DimExpr
    (214) DimExpr -> . LBRACK Expression RBRACK

    LBRACK          shift and go to state 323

    DimExprs                       shift and go to state 324
    DimExpr                        shift and go to state 322

state 259

    (25) ClassType -> Name .
    (31) QualifiedName -> Name . DOT IDENTIFIER

    LPAREN          reduce using rule 25 (ClassType -> Name .)
    LBRACK          reduce using rule 25 (ClassType -> Name .)
    DOT             shift and go to state 99


state 260

    (223) ArrayAccess -> PrimaryNoNewArray LBRACK . Expression RBRACK
    (295) Expression -> . AssignmentExpression
    (277) AssignmentExpression -> . ConditionalExpression
    (278) AssignmentExpression -> . Assignment
    (275) ConditionalExpression -> . ConditionalOrExpression
    (276) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (272) ConditionalOrExpression -> . ConditionalAndExpression
    (273) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (270) ConditionalAndExpression -> . InclusiveOrExpression
    (271) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC

    IDENTIFIER      shift and go to state 61
    THIS            shift and go to state 157
    LPAREN          shift and go to state 188
    NEW             shift and go to state 203
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165
    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217

    PrimaryNoNewArray              shift and go to state 198
    Expression                     shift and go to state 325
    AssignmentExpression           shift and go to state 190
    ConditionalExpression          shift and go to state 191
    Assignment                     shift and go to state 192
    ConditionalOrExpression        shift and go to state 193
    LeftHandSide                   shift and go to state 145
    ConditionalAndExpression       shift and go to state 194
    Name                           shift and go to state 195
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    InclusiveOrExpression          shift and go to state 196
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Primary                        shift and go to state 197
    ExclusiveOrExpression          shift and go to state 199
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    MethodInvocation               shift and go to state 201
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220

state 261

    (72) VariableDeclarators -> VariableDeclarators COMMA VariableDeclarator .

    SEMI            reduce using rule 72 (VariableDeclarators -> VariableDeclarators COMMA VariableDeclarator .)
    COMMA           reduce using rule 72 (VariableDeclarators -> VariableDeclarators COMMA VariableDeclarator .)


state 262

    (83) MethodDeclarator -> IDENTIFIER LPAREN RPAREN .

    SEMI            reduce using rule 83 (MethodDeclarator -> IDENTIFIER LPAREN RPAREN .)
    LBRACE          reduce using rule 83 (MethodDeclarator -> IDENTIFIER LPAREN RPAREN .)


state 263

    (84) MethodDeclarator -> IDENTIFIER LPAREN FormalParameterList . RPAREN
    (86) FormalParameterList -> FormalParameterList . COMMA FormalParameter

    RPAREN          shift and go to state 326
    COMMA           shift and go to state 268


state 264

    (74) VariableDeclarator -> VariableDeclaratorId ASSIGN VariableInitializer .

    SEMI            reduce using rule 74 (VariableDeclarator -> VariableDeclaratorId ASSIGN VariableInitializer .)
    COMMA           reduce using rule 74 (VariableDeclarator -> VariableDeclaratorId ASSIGN VariableInitializer .)


state 265

    (77) VariableInitializer -> Expression .

    SEMI            reduce using rule 77 (VariableInitializer -> Expression .)
    COMMA           reduce using rule 77 (VariableInitializer -> Expression .)


state 266

    (102) Block -> LBRACE BlockStatements RBRACE .

    RBRACE          reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    VOID            reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    STATIC          reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    FINAL           reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    PRIVATE         reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    PROTECTED       reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    PUBLIC          reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    IDENTIFIER      reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    BOOLEAN         reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    BYTE            reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    SHORT           reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    INT             reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    LONG            reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    CHAR            reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    FLOAT           reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    DOUBLE          reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    IF              reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    WHILE           reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    FOR             reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    LBRACE          reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    SEMI            reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    SWITCH          reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    DO              reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    BREAK           reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    CONTINUE        reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    RETURN          reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    INC             reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    DEC             reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    NEW             reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    THIS            reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    LPAREN          reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    DECIMAL_LITERAL reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    HEX_LITERAL     reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    BINARY_LITERAL  reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    FLOAT_LITERAL   reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    BOOL_LITERAL    reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    CHAR_LITERAL    reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    STRING_LITERAL  reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    NULL            reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    CASE            reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    DEFAULT         reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)
    ELSE            reduce using rule 102 (Block -> LBRACE BlockStatements RBRACE .)


state 267

    (92) ConstructorDeclarator -> SimpleName LPAREN FormalParameterList RPAREN .

    LBRACE          reduce using rule 92 (ConstructorDeclarator -> SimpleName LPAREN FormalParameterList RPAREN .)
    RBRACE          reduce using rule 92 (ConstructorDeclarator -> SimpleName LPAREN FormalParameterList RPAREN .)
    VOID            reduce using rule 92 (ConstructorDeclarator -> SimpleName LPAREN FormalParameterList RPAREN .)
    STATIC          reduce using rule 92 (ConstructorDeclarator -> SimpleName LPAREN FormalParameterList RPAREN .)
    FINAL           reduce using rule 92 (ConstructorDeclarator -> SimpleName LPAREN FormalParameterList RPAREN .)
    PRIVATE         reduce using rule 92 (ConstructorDeclarator -> SimpleName LPAREN FormalParameterList RPAREN .)
    PROTECTED       reduce using rule 92 (ConstructorDeclarator -> SimpleName LPAREN FormalParameterList RPAREN .)
    PUBLIC          reduce using rule 92 (ConstructorDeclarator -> SimpleName LPAREN FormalParameterList RPAREN .)
    IDENTIFIER      reduce using rule 92 (ConstructorDeclarator -> SimpleName LPAREN FormalParameterList RPAREN .)
    BOOLEAN         reduce using rule 92 (ConstructorDeclarator -> SimpleName LPAREN FormalParameterList RPAREN .)
    BYTE            reduce using rule 92 (ConstructorDeclarator -> SimpleName LPAREN FormalParameterList RPAREN .)
    SHORT           reduce using rule 92 (ConstructorDeclarator -> SimpleName LPAREN FormalParameterList RPAREN .)
    INT             reduce using rule 92 (ConstructorDeclarator -> SimpleName LPAREN FormalParameterList RPAREN .)
    LONG            reduce using rule 92 (ConstructorDeclarator -> SimpleName LPAREN FormalParameterList RPAREN .)
    CHAR            reduce using rule 92 (ConstructorDeclarator -> SimpleName LPAREN FormalParameterList RPAREN .)
    FLOAT           reduce using rule 92 (ConstructorDeclarator -> SimpleName LPAREN FormalParameterList RPAREN .)
    DOUBLE          reduce using rule 92 (ConstructorDeclarator -> SimpleName LPAREN FormalParameterList RPAREN .)


state 268

    (86) FormalParameterList -> FormalParameterList COMMA . FormalParameter
    (87) FormalParameter -> . Type VariableDeclaratorId
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER

    BOOLEAN         shift and go to state 63
    BYTE            shift and go to state 69
    SHORT           shift and go to state 70
    INT             shift and go to state 71
    LONG            shift and go to state 72
    CHAR            shift and go to state 73
    FLOAT           shift and go to state 74
    DOUBLE          shift and go to state 75
    IDENTIFIER      shift and go to state 61

    FormalParameter                shift and go to state 327
    Type                           shift and go to state 176
    PrimitiveType                  shift and go to state 58
    ReferenceType                  shift and go to state 59
    NumericType                    shift and go to state 62
    ArrayType                      shift and go to state 64
    ClassType                      shift and go to state 65
    IntegralType                   shift and go to state 66
    FloatingPointType              shift and go to state 67
    Name                           shift and go to state 68
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76

state 269

    (87) FormalParameter -> Type VariableDeclaratorId .

    RPAREN          reduce using rule 87 (FormalParameter -> Type VariableDeclaratorId .)
    COMMA           reduce using rule 87 (FormalParameter -> Type VariableDeclaratorId .)


state 270

    (216) Dims -> Dims LBRACK RBRACK .

    LBRACK          reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    IDENTIFIER      reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    ASSIGN          reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    SEMI            reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    COMMA           reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    RPAREN          reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    DOT             reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    INC             reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    DEC             reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    MUL             reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    DIV             reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    MOD             reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    ADD             reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    SUB             reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    LSHIFT          reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    RSHIFT          reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    URSHIFT         reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    LT              reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    GT              reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    LE              reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    GE              reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    EQUAL           reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    NOTEQUAL        reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    BITAND          reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    CARET           reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    BITOR           reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    AND             reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    QUESTION        reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    OR              reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    RBRACK          reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)
    COLON           reduce using rule 216 (Dims -> Dims LBRACK RBRACK .)


state 271

    (129) LabeledStatement -> IDENTIFIER COLON Statement .

    RBRACE          reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    IDENTIFIER      reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    IF              reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    WHILE           reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    FOR             reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    LBRACE          reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    SEMI            reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    SWITCH          reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    DO              reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    BREAK           reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    CONTINUE        reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    RETURN          reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    BOOLEAN         reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    INC             reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    DEC             reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    NEW             reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    BYTE            reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    SHORT           reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    INT             reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    LONG            reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    CHAR            reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    FLOAT           reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    DOUBLE          reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    THIS            reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    LPAREN          reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    DECIMAL_LITERAL reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    HEX_LITERAL     reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    BINARY_LITERAL  reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    FLOAT_LITERAL   reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    BOOL_LITERAL    reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    CHAR_LITERAL    reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    STRING_LITERAL  reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    NULL            reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    CASE            reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)
    DEFAULT         reduce using rule 129 (LabeledStatement -> IDENTIFIER COLON Statement .)


state 272

    (219) MethodInvocation -> Name . LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> Name . LPAREN RPAREN
    (280) LeftHandSide -> Name .
    (225) PostfixExpression -> Name .
    (222) ArrayAccess -> Name . LBRACK Expression RBRACK
    (31) QualifiedName -> Name . DOT IDENTIFIER

    LPAREN          shift and go to state 232
    ASSIGN          reduce using rule 280 (LeftHandSide -> Name .)
    ADD_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    SUB_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    MUL_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    DIV_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    AND_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    OR_ASSIGN       reduce using rule 280 (LeftHandSide -> Name .)
    XOR_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    MOD_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    LSHIFT_ASSIGN   reduce using rule 280 (LeftHandSide -> Name .)
    RSHIFT_ASSIGN   reduce using rule 280 (LeftHandSide -> Name .)
    URSHIFT_ASSIGN  reduce using rule 280 (LeftHandSide -> Name .)
    INC             reduce using rule 225 (PostfixExpression -> Name .)
    DEC             reduce using rule 225 (PostfixExpression -> Name .)
    LBRACK          shift and go to state 281
    DOT             shift and go to state 99


state 273

    (139) IfThenStatement -> IF begin_scope LPAREN . Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> IF begin_scope LPAREN . Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (295) Expression -> . AssignmentExpression
    (277) AssignmentExpression -> . ConditionalExpression
    (278) AssignmentExpression -> . Assignment
    (275) ConditionalExpression -> . ConditionalOrExpression
    (276) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (272) ConditionalOrExpression -> . ConditionalAndExpression
    (273) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (270) ConditionalAndExpression -> . InclusiveOrExpression
    (271) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC

    IDENTIFIER      shift and go to state 61
    THIS            shift and go to state 157
    LPAREN          shift and go to state 188
    NEW             shift and go to state 203
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165
    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217

    Expression                     shift and go to state 328
    AssignmentExpression           shift and go to state 190
    ConditionalExpression          shift and go to state 191
    Assignment                     shift and go to state 192
    ConditionalOrExpression        shift and go to state 193
    LeftHandSide                   shift and go to state 145
    ConditionalAndExpression       shift and go to state 194
    Name                           shift and go to state 195
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    InclusiveOrExpression          shift and go to state 196
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Primary                        shift and go to state 197
    PrimaryNoNewArray              shift and go to state 198
    ExclusiveOrExpression          shift and go to state 199
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    MethodInvocation               shift and go to state 201
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220

state 274

    (199) PrimaryNoNewArray -> LPAREN Expression . RPAREN
    (243) CastExpression -> LPAREN Expression . RPAREN UnaryExpressionNotAddSub

    RPAREN          shift and go to state 329


state 275

    (241) CastExpression -> LPAREN PrimitiveType . Dims RPAREN UnaryExpression
    (242) CastExpression -> LPAREN PrimitiveType . RPAREN UnaryExpression
    (215) Dims -> . LBRACK RBRACK
    (216) Dims -> . Dims LBRACK RBRACK

    RPAREN          shift and go to state 331
    LBRACK          shift and go to state 95

    Dims                           shift and go to state 330

state 276

    (244) CastExpression -> LPAREN Name . Dims RPAREN UnaryExpressionNotAddSub
    (31) QualifiedName -> Name . DOT IDENTIFIER
    (280) LeftHandSide -> Name .
    (222) ArrayAccess -> Name . LBRACK Expression RBRACK
    (219) MethodInvocation -> Name . LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> Name . LPAREN RPAREN
    (225) PostfixExpression -> Name .
    (215) Dims -> . LBRACK RBRACK
    (216) Dims -> . Dims LBRACK RBRACK

    DOT             shift and go to state 99
    ASSIGN          reduce using rule 280 (LeftHandSide -> Name .)
    ADD_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    SUB_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    MUL_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    DIV_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    AND_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    OR_ASSIGN       reduce using rule 280 (LeftHandSide -> Name .)
    XOR_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    MOD_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    LSHIFT_ASSIGN   reduce using rule 280 (LeftHandSide -> Name .)
    RSHIFT_ASSIGN   reduce using rule 280 (LeftHandSide -> Name .)
    URSHIFT_ASSIGN  reduce using rule 280 (LeftHandSide -> Name .)
    LBRACK          shift and go to state 233
    LPAREN          shift and go to state 232
    INC             reduce using rule 225 (PostfixExpression -> Name .)
    DEC             reduce using rule 225 (PostfixExpression -> Name .)
    MUL             reduce using rule 225 (PostfixExpression -> Name .)
    DIV             reduce using rule 225 (PostfixExpression -> Name .)
    MOD             reduce using rule 225 (PostfixExpression -> Name .)
    ADD             reduce using rule 225 (PostfixExpression -> Name .)
    SUB             reduce using rule 225 (PostfixExpression -> Name .)
    LSHIFT          reduce using rule 225 (PostfixExpression -> Name .)
    RSHIFT          reduce using rule 225 (PostfixExpression -> Name .)
    URSHIFT         reduce using rule 225 (PostfixExpression -> Name .)
    LT              reduce using rule 225 (PostfixExpression -> Name .)
    GT              reduce using rule 225 (PostfixExpression -> Name .)
    LE              reduce using rule 225 (PostfixExpression -> Name .)
    GE              reduce using rule 225 (PostfixExpression -> Name .)
    EQUAL           reduce using rule 225 (PostfixExpression -> Name .)
    NOTEQUAL        reduce using rule 225 (PostfixExpression -> Name .)
    BITAND          reduce using rule 225 (PostfixExpression -> Name .)
    CARET           reduce using rule 225 (PostfixExpression -> Name .)
    BITOR           reduce using rule 225 (PostfixExpression -> Name .)
    AND             reduce using rule 225 (PostfixExpression -> Name .)
    QUESTION        reduce using rule 225 (PostfixExpression -> Name .)
    OR              reduce using rule 225 (PostfixExpression -> Name .)
    RPAREN          reduce using rule 225 (PostfixExpression -> Name .)

    Dims                           shift and go to state 332

state 277

    (199) PrimaryNoNewArray -> LPAREN Expression RPAREN .

    LBRACK          reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    DOT             reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    INC             reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    DEC             reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)


state 278

    (276) ConditionalExpression -> ConditionalOrExpression QUESTION . Expression COLON ConditionalExpression
    (295) Expression -> . AssignmentExpression
    (277) AssignmentExpression -> . ConditionalExpression
    (278) AssignmentExpression -> . Assignment
    (275) ConditionalExpression -> . ConditionalOrExpression
    (276) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (272) ConditionalOrExpression -> . ConditionalAndExpression
    (273) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (270) ConditionalAndExpression -> . InclusiveOrExpression
    (271) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC

    IDENTIFIER      shift and go to state 61
    THIS            shift and go to state 157
    LPAREN          shift and go to state 188
    NEW             shift and go to state 203
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165
    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217

    ConditionalOrExpression        shift and go to state 193
    Expression                     shift and go to state 333
    ConditionalExpression          shift and go to state 191
    AssignmentExpression           shift and go to state 190
    Assignment                     shift and go to state 192
    LeftHandSide                   shift and go to state 145
    ConditionalAndExpression       shift and go to state 194
    Name                           shift and go to state 195
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    InclusiveOrExpression          shift and go to state 196
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Primary                        shift and go to state 197
    PrimaryNoNewArray              shift and go to state 198
    ExclusiveOrExpression          shift and go to state 199
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    MethodInvocation               shift and go to state 201
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220

state 279

    (273) ConditionalOrExpression -> ConditionalOrExpression OR . ConMarker ConditionalAndExpression
    (274) ConMarker -> .

    ADD             reduce using rule 274 (ConMarker -> .)
    SUB             reduce using rule 274 (ConMarker -> .)
    INC             reduce using rule 274 (ConMarker -> .)
    DEC             reduce using rule 274 (ConMarker -> .)
    BANG            reduce using rule 274 (ConMarker -> .)
    TILDE           reduce using rule 274 (ConMarker -> .)
    LPAREN          reduce using rule 274 (ConMarker -> .)
    THIS            reduce using rule 274 (ConMarker -> .)
    NEW             reduce using rule 274 (ConMarker -> .)
    IDENTIFIER      reduce using rule 274 (ConMarker -> .)
    DECIMAL_LITERAL reduce using rule 274 (ConMarker -> .)
    HEX_LITERAL     reduce using rule 274 (ConMarker -> .)
    BINARY_LITERAL  reduce using rule 274 (ConMarker -> .)
    FLOAT_LITERAL   reduce using rule 274 (ConMarker -> .)
    BOOL_LITERAL    reduce using rule 274 (ConMarker -> .)
    CHAR_LITERAL    reduce using rule 274 (ConMarker -> .)
    STRING_LITERAL  reduce using rule 274 (ConMarker -> .)
    NULL            reduce using rule 274 (ConMarker -> .)

    ConMarker                      shift and go to state 334

state 280

    (271) ConditionalAndExpression -> ConditionalAndExpression AND . ConMarker InclusiveOrExpression
    (274) ConMarker -> .

    ADD             reduce using rule 274 (ConMarker -> .)
    SUB             reduce using rule 274 (ConMarker -> .)
    INC             reduce using rule 274 (ConMarker -> .)
    DEC             reduce using rule 274 (ConMarker -> .)
    BANG            reduce using rule 274 (ConMarker -> .)
    TILDE           reduce using rule 274 (ConMarker -> .)
    LPAREN          reduce using rule 274 (ConMarker -> .)
    THIS            reduce using rule 274 (ConMarker -> .)
    NEW             reduce using rule 274 (ConMarker -> .)
    IDENTIFIER      reduce using rule 274 (ConMarker -> .)
    DECIMAL_LITERAL reduce using rule 274 (ConMarker -> .)
    HEX_LITERAL     reduce using rule 274 (ConMarker -> .)
    BINARY_LITERAL  reduce using rule 274 (ConMarker -> .)
    FLOAT_LITERAL   reduce using rule 274 (ConMarker -> .)
    BOOL_LITERAL    reduce using rule 274 (ConMarker -> .)
    CHAR_LITERAL    reduce using rule 274 (ConMarker -> .)
    STRING_LITERAL  reduce using rule 274 (ConMarker -> .)
    NULL            reduce using rule 274 (ConMarker -> .)

    ConMarker                      shift and go to state 335

state 281

    (222) ArrayAccess -> Name LBRACK . Expression RBRACK
    (295) Expression -> . AssignmentExpression
    (277) AssignmentExpression -> . ConditionalExpression
    (278) AssignmentExpression -> . Assignment
    (275) ConditionalExpression -> . ConditionalOrExpression
    (276) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (272) ConditionalOrExpression -> . ConditionalAndExpression
    (273) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (270) ConditionalAndExpression -> . InclusiveOrExpression
    (271) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC

    IDENTIFIER      shift and go to state 61
    THIS            shift and go to state 157
    LPAREN          shift and go to state 188
    NEW             shift and go to state 203
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165
    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217

    Name                           shift and go to state 195
    Expression                     shift and go to state 315
    AssignmentExpression           shift and go to state 190
    ConditionalExpression          shift and go to state 191
    Assignment                     shift and go to state 192
    ConditionalOrExpression        shift and go to state 193
    LeftHandSide                   shift and go to state 145
    ConditionalAndExpression       shift and go to state 194
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    InclusiveOrExpression          shift and go to state 196
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Primary                        shift and go to state 197
    PrimaryNoNewArray              shift and go to state 198
    ExclusiveOrExpression          shift and go to state 199
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    MethodInvocation               shift and go to state 201
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220

state 282

    (269) InclusiveOrExpression -> InclusiveOrExpression BITOR . ExclusiveOrExpression
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    ExclusiveOrExpression          shift and go to state 336
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 283

    (217) FieldAccess -> Primary DOT . Name
    (218) MethodInvocation -> Primary DOT . IDENTIFIER LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> Primary DOT . IDENTIFIER LPAREN RPAREN
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER

    IDENTIFIER      shift and go to state 318

    Name                           shift and go to state 319
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76

state 284

    (267) ExclusiveOrExpression -> ExclusiveOrExpression CARET . AndExpression
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    AndExpression                  shift and go to state 337
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 285

    (265) AndExpression -> AndExpression BITAND . EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    EqualityExpression             shift and go to state 338
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 286

    (210) ArrayCreationExpression -> NEW ClassType . DimExprs Dims
    (211) ArrayCreationExpression -> NEW ClassType . DimExprs
    (204) ClassInstanceCreationExpression -> NEW ClassType . LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> NEW ClassType . LPAREN ArgumentList RPAREN
    (212) DimExprs -> . DimExpr
    (213) DimExprs -> . DimExprs DimExpr
    (214) DimExpr -> . LBRACK Expression RBRACK

    LPAREN          shift and go to state 320
    LBRACK          shift and go to state 323

    DimExprs                       shift and go to state 321
    DimExpr                        shift and go to state 322

state 287

    (262) EqualityExpression -> EqualityExpression EQUAL . RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    RelationalExpression           shift and go to state 339
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 288

    (263) EqualityExpression -> EqualityExpression NOTEQUAL . RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    RelationalExpression           shift and go to state 340
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 289

    (257) RelationalExpression -> RelationalExpression LT . ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    ShiftExpression                shift and go to state 341
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 290

    (258) RelationalExpression -> RelationalExpression GT . ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    ShiftExpression                shift and go to state 342
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 291

    (259) RelationalExpression -> RelationalExpression LE . ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    ShiftExpression                shift and go to state 343
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 292

    (260) RelationalExpression -> RelationalExpression GE . ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    ShiftExpression                shift and go to state 344
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 293

    (253) ShiftExpression -> ShiftExpression LSHIFT . AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    AdditiveExpression             shift and go to state 345
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 294

    (254) ShiftExpression -> ShiftExpression RSHIFT . AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    AdditiveExpression             shift and go to state 346
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 295

    (255) ShiftExpression -> ShiftExpression URSHIFT . AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    AdditiveExpression             shift and go to state 347
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 296

    (250) AdditiveExpression -> AdditiveExpression ADD . MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    MultiplicativeExpression       shift and go to state 348
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 297

    (251) AdditiveExpression -> AdditiveExpression SUB . MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    MultiplicativeExpression       shift and go to state 349
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 298

    (246) MultiplicativeExpression -> MultiplicativeExpression MUL . UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    UnaryExpression                shift and go to state 350
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 299

    (247) MultiplicativeExpression -> MultiplicativeExpression DIV . UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    UnaryExpression                shift and go to state 351
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 300

    (248) MultiplicativeExpression -> MultiplicativeExpression MOD . UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    UnaryExpression                shift and go to state 352
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 301

    (232) UnaryExpression -> ADD UnaryExpression .

    MUL             reduce using rule 232 (UnaryExpression -> ADD UnaryExpression .)
    DIV             reduce using rule 232 (UnaryExpression -> ADD UnaryExpression .)
    MOD             reduce using rule 232 (UnaryExpression -> ADD UnaryExpression .)
    ADD             reduce using rule 232 (UnaryExpression -> ADD UnaryExpression .)
    SUB             reduce using rule 232 (UnaryExpression -> ADD UnaryExpression .)
    LSHIFT          reduce using rule 232 (UnaryExpression -> ADD UnaryExpression .)
    RSHIFT          reduce using rule 232 (UnaryExpression -> ADD UnaryExpression .)
    URSHIFT         reduce using rule 232 (UnaryExpression -> ADD UnaryExpression .)
    LT              reduce using rule 232 (UnaryExpression -> ADD UnaryExpression .)
    GT              reduce using rule 232 (UnaryExpression -> ADD UnaryExpression .)
    LE              reduce using rule 232 (UnaryExpression -> ADD UnaryExpression .)
    GE              reduce using rule 232 (UnaryExpression -> ADD UnaryExpression .)
    EQUAL           reduce using rule 232 (UnaryExpression -> ADD UnaryExpression .)
    NOTEQUAL        reduce using rule 232 (UnaryExpression -> ADD UnaryExpression .)
    BITAND          reduce using rule 232 (UnaryExpression -> ADD UnaryExpression .)
    CARET           reduce using rule 232 (UnaryExpression -> ADD UnaryExpression .)
    BITOR           reduce using rule 232 (UnaryExpression -> ADD UnaryExpression .)
    AND             reduce using rule 232 (UnaryExpression -> ADD UnaryExpression .)
    QUESTION        reduce using rule 232 (UnaryExpression -> ADD UnaryExpression .)
    OR              reduce using rule 232 (UnaryExpression -> ADD UnaryExpression .)
    RPAREN          reduce using rule 232 (UnaryExpression -> ADD UnaryExpression .)
    SEMI            reduce using rule 232 (UnaryExpression -> ADD UnaryExpression .)
    COMMA           reduce using rule 232 (UnaryExpression -> ADD UnaryExpression .)
    RBRACK          reduce using rule 232 (UnaryExpression -> ADD UnaryExpression .)
    COLON           reduce using rule 232 (UnaryExpression -> ADD UnaryExpression .)


state 302

    (233) UnaryExpression -> SUB UnaryExpression .

    MUL             reduce using rule 233 (UnaryExpression -> SUB UnaryExpression .)
    DIV             reduce using rule 233 (UnaryExpression -> SUB UnaryExpression .)
    MOD             reduce using rule 233 (UnaryExpression -> SUB UnaryExpression .)
    ADD             reduce using rule 233 (UnaryExpression -> SUB UnaryExpression .)
    SUB             reduce using rule 233 (UnaryExpression -> SUB UnaryExpression .)
    LSHIFT          reduce using rule 233 (UnaryExpression -> SUB UnaryExpression .)
    RSHIFT          reduce using rule 233 (UnaryExpression -> SUB UnaryExpression .)
    URSHIFT         reduce using rule 233 (UnaryExpression -> SUB UnaryExpression .)
    LT              reduce using rule 233 (UnaryExpression -> SUB UnaryExpression .)
    GT              reduce using rule 233 (UnaryExpression -> SUB UnaryExpression .)
    LE              reduce using rule 233 (UnaryExpression -> SUB UnaryExpression .)
    GE              reduce using rule 233 (UnaryExpression -> SUB UnaryExpression .)
    EQUAL           reduce using rule 233 (UnaryExpression -> SUB UnaryExpression .)
    NOTEQUAL        reduce using rule 233 (UnaryExpression -> SUB UnaryExpression .)
    BITAND          reduce using rule 233 (UnaryExpression -> SUB UnaryExpression .)
    CARET           reduce using rule 233 (UnaryExpression -> SUB UnaryExpression .)
    BITOR           reduce using rule 233 (UnaryExpression -> SUB UnaryExpression .)
    AND             reduce using rule 233 (UnaryExpression -> SUB UnaryExpression .)
    QUESTION        reduce using rule 233 (UnaryExpression -> SUB UnaryExpression .)
    OR              reduce using rule 233 (UnaryExpression -> SUB UnaryExpression .)
    RPAREN          reduce using rule 233 (UnaryExpression -> SUB UnaryExpression .)
    SEMI            reduce using rule 233 (UnaryExpression -> SUB UnaryExpression .)
    COMMA           reduce using rule 233 (UnaryExpression -> SUB UnaryExpression .)
    RBRACK          reduce using rule 233 (UnaryExpression -> SUB UnaryExpression .)
    COLON           reduce using rule 233 (UnaryExpression -> SUB UnaryExpression .)


state 303

    (238) UnaryExpressionNotAddSub -> BANG UnaryExpression .

    MUL             reduce using rule 238 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    DIV             reduce using rule 238 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    MOD             reduce using rule 238 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    ADD             reduce using rule 238 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    SUB             reduce using rule 238 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    LSHIFT          reduce using rule 238 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    RSHIFT          reduce using rule 238 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    URSHIFT         reduce using rule 238 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    LT              reduce using rule 238 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    GT              reduce using rule 238 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    LE              reduce using rule 238 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    GE              reduce using rule 238 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    EQUAL           reduce using rule 238 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    NOTEQUAL        reduce using rule 238 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    BITAND          reduce using rule 238 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    CARET           reduce using rule 238 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    BITOR           reduce using rule 238 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    AND             reduce using rule 238 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    QUESTION        reduce using rule 238 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    OR              reduce using rule 238 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    RPAREN          reduce using rule 238 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    SEMI            reduce using rule 238 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    COMMA           reduce using rule 238 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    RBRACK          reduce using rule 238 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    COLON           reduce using rule 238 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)


state 304

    (239) UnaryExpressionNotAddSub -> TILDE UnaryExpression .

    MUL             reduce using rule 239 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    DIV             reduce using rule 239 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    MOD             reduce using rule 239 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    ADD             reduce using rule 239 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    SUB             reduce using rule 239 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    LSHIFT          reduce using rule 239 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    RSHIFT          reduce using rule 239 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    URSHIFT         reduce using rule 239 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    LT              reduce using rule 239 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    GT              reduce using rule 239 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    LE              reduce using rule 239 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    GE              reduce using rule 239 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    EQUAL           reduce using rule 239 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    NOTEQUAL        reduce using rule 239 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    BITAND          reduce using rule 239 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    CARET           reduce using rule 239 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    BITOR           reduce using rule 239 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    AND             reduce using rule 239 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    QUESTION        reduce using rule 239 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    OR              reduce using rule 239 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    RPAREN          reduce using rule 239 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    SEMI            reduce using rule 239 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    COMMA           reduce using rule 239 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    RBRACK          reduce using rule 239 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    COLON           reduce using rule 239 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)


state 305

    (157) WhileStatement -> WHILE prep_fw_stack LPAREN . begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (299) begin_scope -> .

    IDENTIFIER      reduce using rule 299 (begin_scope -> .)
    THIS            reduce using rule 299 (begin_scope -> .)
    LPAREN          reduce using rule 299 (begin_scope -> .)
    NEW             reduce using rule 299 (begin_scope -> .)
    DECIMAL_LITERAL reduce using rule 299 (begin_scope -> .)
    HEX_LITERAL     reduce using rule 299 (begin_scope -> .)
    BINARY_LITERAL  reduce using rule 299 (begin_scope -> .)
    FLOAT_LITERAL   reduce using rule 299 (begin_scope -> .)
    BOOL_LITERAL    reduce using rule 299 (begin_scope -> .)
    CHAR_LITERAL    reduce using rule 299 (begin_scope -> .)
    STRING_LITERAL  reduce using rule 299 (begin_scope -> .)
    NULL            reduce using rule 299 (begin_scope -> .)
    ADD             reduce using rule 299 (begin_scope -> .)
    SUB             reduce using rule 299 (begin_scope -> .)
    INC             reduce using rule 299 (begin_scope -> .)
    DEC             reduce using rule 299 (begin_scope -> .)
    BANG            reduce using rule 299 (begin_scope -> .)
    TILDE           reduce using rule 299 (begin_scope -> .)

    begin_scope                    shift and go to state 353

state 306

    (165) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (299) begin_scope -> .

    SEMI            reduce using rule 299 (begin_scope -> .)
    INC             reduce using rule 299 (begin_scope -> .)
    DEC             reduce using rule 299 (begin_scope -> .)
    NEW             reduce using rule 299 (begin_scope -> .)
    BOOLEAN         reduce using rule 299 (begin_scope -> .)
    THIS            reduce using rule 299 (begin_scope -> .)
    LPAREN          reduce using rule 299 (begin_scope -> .)
    IDENTIFIER      reduce using rule 299 (begin_scope -> .)
    BYTE            reduce using rule 299 (begin_scope -> .)
    SHORT           reduce using rule 299 (begin_scope -> .)
    INT             reduce using rule 299 (begin_scope -> .)
    LONG            reduce using rule 299 (begin_scope -> .)
    CHAR            reduce using rule 299 (begin_scope -> .)
    FLOAT           reduce using rule 299 (begin_scope -> .)
    DOUBLE          reduce using rule 299 (begin_scope -> .)
    DECIMAL_LITERAL reduce using rule 299 (begin_scope -> .)
    HEX_LITERAL     reduce using rule 299 (begin_scope -> .)
    BINARY_LITERAL  reduce using rule 299 (begin_scope -> .)
    FLOAT_LITERAL   reduce using rule 299 (begin_scope -> .)
    BOOL_LITERAL    reduce using rule 299 (begin_scope -> .)
    CHAR_LITERAL    reduce using rule 299 (begin_scope -> .)
    STRING_LITERAL  reduce using rule 299 (begin_scope -> .)
    NULL            reduce using rule 299 (begin_scope -> .)

    begin_scope                    shift and go to state 354

state 307

    (145) SwitchStatement -> SWITCH LPAREN Expression . RPAREN SwitchBlock

    RPAREN          shift and go to state 355


state 308

    (162) DoStatement -> DO prep_fw_stack begin_scope . dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (163) dwhile_l1 -> .

    IDENTIFIER      reduce using rule 163 (dwhile_l1 -> .)
    IF              reduce using rule 163 (dwhile_l1 -> .)
    WHILE           reduce using rule 163 (dwhile_l1 -> .)
    FOR             reduce using rule 163 (dwhile_l1 -> .)
    LBRACE          reduce using rule 163 (dwhile_l1 -> .)
    SEMI            reduce using rule 163 (dwhile_l1 -> .)
    SWITCH          reduce using rule 163 (dwhile_l1 -> .)
    DO              reduce using rule 163 (dwhile_l1 -> .)
    BREAK           reduce using rule 163 (dwhile_l1 -> .)
    CONTINUE        reduce using rule 163 (dwhile_l1 -> .)
    RETURN          reduce using rule 163 (dwhile_l1 -> .)
    INC             reduce using rule 163 (dwhile_l1 -> .)
    DEC             reduce using rule 163 (dwhile_l1 -> .)
    NEW             reduce using rule 163 (dwhile_l1 -> .)
    THIS            reduce using rule 163 (dwhile_l1 -> .)
    LPAREN          reduce using rule 163 (dwhile_l1 -> .)
    DECIMAL_LITERAL reduce using rule 163 (dwhile_l1 -> .)
    HEX_LITERAL     reduce using rule 163 (dwhile_l1 -> .)
    BINARY_LITERAL  reduce using rule 163 (dwhile_l1 -> .)
    FLOAT_LITERAL   reduce using rule 163 (dwhile_l1 -> .)
    BOOL_LITERAL    reduce using rule 163 (dwhile_l1 -> .)
    CHAR_LITERAL    reduce using rule 163 (dwhile_l1 -> .)
    STRING_LITERAL  reduce using rule 163 (dwhile_l1 -> .)
    NULL            reduce using rule 163 (dwhile_l1 -> .)

    dwhile_l1                      shift and go to state 356

state 309

    (189) BreakStatement -> BREAK IDENTIFIER SEMI .

    RBRACE          reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    IDENTIFIER      reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    IF              reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    WHILE           reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    FOR             reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    LBRACE          reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    SEMI            reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    SWITCH          reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    DO              reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    BREAK           reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    CONTINUE        reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    RETURN          reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    BOOLEAN         reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    INC             reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    DEC             reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    NEW             reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    BYTE            reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    SHORT           reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    INT             reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    LONG            reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    CHAR            reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    FLOAT           reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    DOUBLE          reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    THIS            reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    LPAREN          reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    DECIMAL_LITERAL reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    HEX_LITERAL     reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    BINARY_LITERAL  reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    FLOAT_LITERAL   reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    BOOL_LITERAL    reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    CHAR_LITERAL    reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    STRING_LITERAL  reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    NULL            reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    CASE            reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    DEFAULT         reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    ELSE            reduce using rule 189 (BreakStatement -> BREAK IDENTIFIER SEMI .)


state 310

    (191) ContinueStatement -> CONTINUE IDENTIFIER SEMI .

    RBRACE          reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    IDENTIFIER      reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    IF              reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    WHILE           reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    FOR             reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    LBRACE          reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    SEMI            reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    SWITCH          reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    DO              reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    BREAK           reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    CONTINUE        reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    RETURN          reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    BOOLEAN         reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    INC             reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    DEC             reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    NEW             reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    BYTE            reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    SHORT           reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    INT             reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    LONG            reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    CHAR            reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    FLOAT           reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    DOUBLE          reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    THIS            reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    LPAREN          reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    DECIMAL_LITERAL reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    HEX_LITERAL     reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    BINARY_LITERAL  reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    FLOAT_LITERAL   reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    BOOL_LITERAL    reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    CHAR_LITERAL    reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    STRING_LITERAL  reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    NULL            reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    CASE            reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    DEFAULT         reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    ELSE            reduce using rule 191 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)


state 311

    (193) ReturnStatement -> RETURN Expression SEMI .

    RBRACE          reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    IDENTIFIER      reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    IF              reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    WHILE           reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    FOR             reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    LBRACE          reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    SEMI            reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    SWITCH          reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    DO              reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    BREAK           reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    CONTINUE        reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    RETURN          reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    BOOLEAN         reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    INC             reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    DEC             reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    NEW             reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    BYTE            reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    SHORT           reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    INT             reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    LONG            reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    CHAR            reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    FLOAT           reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    DOUBLE          reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    THIS            reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    LPAREN          reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    DECIMAL_LITERAL reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    HEX_LITERAL     reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    BINARY_LITERAL  reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    FLOAT_LITERAL   reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    BOOL_LITERAL    reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    CHAR_LITERAL    reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    STRING_LITERAL  reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    NULL            reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    CASE            reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    DEFAULT         reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)
    ELSE            reduce using rule 193 (ReturnStatement -> RETURN Expression SEMI .)


state 312

    (219) MethodInvocation -> Name LPAREN ArgumentList . RPAREN
    (207) ArgumentList -> ArgumentList . COMMA Expression

    RPAREN          shift and go to state 357
    COMMA           shift and go to state 358


state 313

    (221) MethodInvocation -> Name LPAREN RPAREN .

    SEMI            reduce using rule 221 (MethodInvocation -> Name LPAREN RPAREN .)
    LBRACK          reduce using rule 221 (MethodInvocation -> Name LPAREN RPAREN .)
    DOT             reduce using rule 221 (MethodInvocation -> Name LPAREN RPAREN .)
    INC             reduce using rule 221 (MethodInvocation -> Name LPAREN RPAREN .)
    DEC             reduce using rule 221 (MethodInvocation -> Name LPAREN RPAREN .)
    MUL             reduce using rule 221 (MethodInvocation -> Name LPAREN RPAREN .)
    DIV             reduce using rule 221 (MethodInvocation -> Name LPAREN RPAREN .)
    MOD             reduce using rule 221 (MethodInvocation -> Name LPAREN RPAREN .)
    ADD             reduce using rule 221 (MethodInvocation -> Name LPAREN RPAREN .)
    SUB             reduce using rule 221 (MethodInvocation -> Name LPAREN RPAREN .)
    LSHIFT          reduce using rule 221 (MethodInvocation -> Name LPAREN RPAREN .)
    RSHIFT          reduce using rule 221 (MethodInvocation -> Name LPAREN RPAREN .)
    URSHIFT         reduce using rule 221 (MethodInvocation -> Name LPAREN RPAREN .)
    LT              reduce using rule 221 (MethodInvocation -> Name LPAREN RPAREN .)
    GT              reduce using rule 221 (MethodInvocation -> Name LPAREN RPAREN .)
    LE              reduce using rule 221 (MethodInvocation -> Name LPAREN RPAREN .)
    GE              reduce using rule 221 (MethodInvocation -> Name LPAREN RPAREN .)
    EQUAL           reduce using rule 221 (MethodInvocation -> Name LPAREN RPAREN .)
    NOTEQUAL        reduce using rule 221 (MethodInvocation -> Name LPAREN RPAREN .)
    BITAND          reduce using rule 221 (MethodInvocation -> Name LPAREN RPAREN .)
    CARET           reduce using rule 221 (MethodInvocation -> Name LPAREN RPAREN .)
    BITOR           reduce using rule 221 (MethodInvocation -> Name LPAREN RPAREN .)
    AND             reduce using rule 221 (MethodInvocation -> Name LPAREN RPAREN .)
    QUESTION        reduce using rule 221 (MethodInvocation -> Name LPAREN RPAREN .)
    OR              reduce using rule 221 (MethodInvocation -> Name LPAREN RPAREN .)
    RPAREN          reduce using rule 221 (MethodInvocation -> Name LPAREN RPAREN .)
    COMMA           reduce using rule 221 (MethodInvocation -> Name LPAREN RPAREN .)
    RBRACK          reduce using rule 221 (MethodInvocation -> Name LPAREN RPAREN .)
    COLON           reduce using rule 221 (MethodInvocation -> Name LPAREN RPAREN .)


state 314

    (206) ArgumentList -> Expression .

    RPAREN          reduce using rule 206 (ArgumentList -> Expression .)
    COMMA           reduce using rule 206 (ArgumentList -> Expression .)


state 315

    (222) ArrayAccess -> Name LBRACK Expression . RBRACK

    RBRACK          shift and go to state 359


state 316

    (279) Assignment -> LeftHandSide AssignmentOperator AssignmentExpression .

    SEMI            reduce using rule 279 (Assignment -> LeftHandSide AssignmentOperator AssignmentExpression .)
    RPAREN          reduce using rule 279 (Assignment -> LeftHandSide AssignmentOperator AssignmentExpression .)
    COMMA           reduce using rule 279 (Assignment -> LeftHandSide AssignmentOperator AssignmentExpression .)
    RBRACK          reduce using rule 279 (Assignment -> LeftHandSide AssignmentOperator AssignmentExpression .)
    COLON           reduce using rule 279 (Assignment -> LeftHandSide AssignmentOperator AssignmentExpression .)


state 317

    (243) CastExpression -> LPAREN Expression . RPAREN UnaryExpressionNotAddSub
    (199) PrimaryNoNewArray -> LPAREN Expression . RPAREN

    RPAREN          shift and go to state 360


state 318

    (218) MethodInvocation -> Primary DOT IDENTIFIER . LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> Primary DOT IDENTIFIER . LPAREN RPAREN
    (30) SimpleName -> IDENTIFIER .

    LPAREN          shift and go to state 361
    DOT             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    ASSIGN          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 30 (SimpleName -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 30 (SimpleName -> IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 30 (SimpleName -> IDENTIFIER .)
    URSHIFT_ASSIGN  reduce using rule 30 (SimpleName -> IDENTIFIER .)
    LBRACK          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    INC             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    DEC             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    MUL             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    DIV             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    MOD             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    ADD             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    SUB             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    LSHIFT          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    RSHIFT          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    URSHIFT         reduce using rule 30 (SimpleName -> IDENTIFIER .)
    LT              reduce using rule 30 (SimpleName -> IDENTIFIER .)
    GT              reduce using rule 30 (SimpleName -> IDENTIFIER .)
    LE              reduce using rule 30 (SimpleName -> IDENTIFIER .)
    GE              reduce using rule 30 (SimpleName -> IDENTIFIER .)
    EQUAL           reduce using rule 30 (SimpleName -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 30 (SimpleName -> IDENTIFIER .)
    BITAND          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    CARET           reduce using rule 30 (SimpleName -> IDENTIFIER .)
    BITOR           reduce using rule 30 (SimpleName -> IDENTIFIER .)
    AND             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    QUESTION        reduce using rule 30 (SimpleName -> IDENTIFIER .)
    OR              reduce using rule 30 (SimpleName -> IDENTIFIER .)
    RPAREN          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    SEMI            reduce using rule 30 (SimpleName -> IDENTIFIER .)
    COMMA           reduce using rule 30 (SimpleName -> IDENTIFIER .)
    RBRACK          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    COLON           reduce using rule 30 (SimpleName -> IDENTIFIER .)


state 319

    (217) FieldAccess -> Primary DOT Name .
    (31) QualifiedName -> Name . DOT IDENTIFIER

  ! shift/reduce conflict for DOT resolved as shift
    ASSIGN          reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    ADD_ASSIGN      reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    SUB_ASSIGN      reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    MUL_ASSIGN      reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    DIV_ASSIGN      reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    AND_ASSIGN      reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    OR_ASSIGN       reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    XOR_ASSIGN      reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    MOD_ASSIGN      reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    LSHIFT_ASSIGN   reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    RSHIFT_ASSIGN   reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    URSHIFT_ASSIGN  reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    LBRACK          reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    INC             reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    DEC             reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    MUL             reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    DIV             reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    MOD             reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    ADD             reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    SUB             reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    LSHIFT          reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    RSHIFT          reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    URSHIFT         reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    LT              reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    GT              reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    LE              reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    GE              reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    EQUAL           reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    NOTEQUAL        reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    BITAND          reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    CARET           reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    BITOR           reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    AND             reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    QUESTION        reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    OR              reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    RPAREN          reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    SEMI            reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    COMMA           reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    RBRACK          reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    COLON           reduce using rule 217 (FieldAccess -> Primary DOT Name .)
    DOT             shift and go to state 99

  ! DOT             [ reduce using rule 217 (FieldAccess -> Primary DOT Name .) ]


state 320

    (204) ClassInstanceCreationExpression -> NEW ClassType LPAREN . RPAREN
    (205) ClassInstanceCreationExpression -> NEW ClassType LPAREN . ArgumentList RPAREN
    (206) ArgumentList -> . Expression
    (207) ArgumentList -> . ArgumentList COMMA Expression
    (295) Expression -> . AssignmentExpression
    (277) AssignmentExpression -> . ConditionalExpression
    (278) AssignmentExpression -> . Assignment
    (275) ConditionalExpression -> . ConditionalOrExpression
    (276) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (272) ConditionalOrExpression -> . ConditionalAndExpression
    (273) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (270) ConditionalAndExpression -> . InclusiveOrExpression
    (271) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC

    RPAREN          shift and go to state 362
    IDENTIFIER      shift and go to state 61
    THIS            shift and go to state 157
    LPAREN          shift and go to state 188
    NEW             shift and go to state 203
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165
    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217

    ArgumentList                   shift and go to state 363
    Expression                     shift and go to state 314
    AssignmentExpression           shift and go to state 190
    ConditionalExpression          shift and go to state 191
    Assignment                     shift and go to state 192
    ConditionalOrExpression        shift and go to state 193
    LeftHandSide                   shift and go to state 145
    ConditionalAndExpression       shift and go to state 194
    Name                           shift and go to state 195
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    InclusiveOrExpression          shift and go to state 196
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Primary                        shift and go to state 197
    PrimaryNoNewArray              shift and go to state 198
    ExclusiveOrExpression          shift and go to state 199
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    MethodInvocation               shift and go to state 201
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220

state 321

    (210) ArrayCreationExpression -> NEW ClassType DimExprs . Dims
    (211) ArrayCreationExpression -> NEW ClassType DimExprs .
    (213) DimExprs -> DimExprs . DimExpr
    (215) Dims -> . LBRACK RBRACK
    (216) Dims -> . Dims LBRACK RBRACK
    (214) DimExpr -> . LBRACK Expression RBRACK

    DOT             reduce using rule 211 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    INC             reduce using rule 211 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    DEC             reduce using rule 211 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    MUL             reduce using rule 211 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    DIV             reduce using rule 211 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    MOD             reduce using rule 211 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    ADD             reduce using rule 211 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    SUB             reduce using rule 211 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    LSHIFT          reduce using rule 211 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    RSHIFT          reduce using rule 211 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    URSHIFT         reduce using rule 211 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    LT              reduce using rule 211 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    GT              reduce using rule 211 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    LE              reduce using rule 211 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    GE              reduce using rule 211 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    EQUAL           reduce using rule 211 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    NOTEQUAL        reduce using rule 211 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    BITAND          reduce using rule 211 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    CARET           reduce using rule 211 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    BITOR           reduce using rule 211 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    AND             reduce using rule 211 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    QUESTION        reduce using rule 211 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    OR              reduce using rule 211 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    RPAREN          reduce using rule 211 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    SEMI            reduce using rule 211 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    COMMA           reduce using rule 211 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    RBRACK          reduce using rule 211 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    COLON           reduce using rule 211 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    LBRACK          shift and go to state 366

    Dims                           shift and go to state 364
    DimExpr                        shift and go to state 365

state 322

    (212) DimExprs -> DimExpr .

    LBRACK          reduce using rule 212 (DimExprs -> DimExpr .)
    DOT             reduce using rule 212 (DimExprs -> DimExpr .)
    INC             reduce using rule 212 (DimExprs -> DimExpr .)
    DEC             reduce using rule 212 (DimExprs -> DimExpr .)
    MUL             reduce using rule 212 (DimExprs -> DimExpr .)
    DIV             reduce using rule 212 (DimExprs -> DimExpr .)
    MOD             reduce using rule 212 (DimExprs -> DimExpr .)
    ADD             reduce using rule 212 (DimExprs -> DimExpr .)
    SUB             reduce using rule 212 (DimExprs -> DimExpr .)
    LSHIFT          reduce using rule 212 (DimExprs -> DimExpr .)
    RSHIFT          reduce using rule 212 (DimExprs -> DimExpr .)
    URSHIFT         reduce using rule 212 (DimExprs -> DimExpr .)
    LT              reduce using rule 212 (DimExprs -> DimExpr .)
    GT              reduce using rule 212 (DimExprs -> DimExpr .)
    LE              reduce using rule 212 (DimExprs -> DimExpr .)
    GE              reduce using rule 212 (DimExprs -> DimExpr .)
    EQUAL           reduce using rule 212 (DimExprs -> DimExpr .)
    NOTEQUAL        reduce using rule 212 (DimExprs -> DimExpr .)
    BITAND          reduce using rule 212 (DimExprs -> DimExpr .)
    CARET           reduce using rule 212 (DimExprs -> DimExpr .)
    BITOR           reduce using rule 212 (DimExprs -> DimExpr .)
    AND             reduce using rule 212 (DimExprs -> DimExpr .)
    QUESTION        reduce using rule 212 (DimExprs -> DimExpr .)
    OR              reduce using rule 212 (DimExprs -> DimExpr .)
    RPAREN          reduce using rule 212 (DimExprs -> DimExpr .)
    SEMI            reduce using rule 212 (DimExprs -> DimExpr .)
    COMMA           reduce using rule 212 (DimExprs -> DimExpr .)
    RBRACK          reduce using rule 212 (DimExprs -> DimExpr .)
    COLON           reduce using rule 212 (DimExprs -> DimExpr .)


state 323

    (214) DimExpr -> LBRACK . Expression RBRACK
    (295) Expression -> . AssignmentExpression
    (277) AssignmentExpression -> . ConditionalExpression
    (278) AssignmentExpression -> . Assignment
    (275) ConditionalExpression -> . ConditionalOrExpression
    (276) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (272) ConditionalOrExpression -> . ConditionalAndExpression
    (273) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (270) ConditionalAndExpression -> . InclusiveOrExpression
    (271) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC

    IDENTIFIER      shift and go to state 61
    THIS            shift and go to state 157
    LPAREN          shift and go to state 188
    NEW             shift and go to state 203
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165
    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217

    Expression                     shift and go to state 367
    AssignmentExpression           shift and go to state 190
    ConditionalExpression          shift and go to state 191
    Assignment                     shift and go to state 192
    ConditionalOrExpression        shift and go to state 193
    LeftHandSide                   shift and go to state 145
    ConditionalAndExpression       shift and go to state 194
    Name                           shift and go to state 195
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    InclusiveOrExpression          shift and go to state 196
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Primary                        shift and go to state 197
    PrimaryNoNewArray              shift and go to state 198
    ExclusiveOrExpression          shift and go to state 199
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    MethodInvocation               shift and go to state 201
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220

state 324

    (208) ArrayCreationExpression -> NEW PrimitiveType DimExprs . Dims
    (209) ArrayCreationExpression -> NEW PrimitiveType DimExprs .
    (213) DimExprs -> DimExprs . DimExpr
    (215) Dims -> . LBRACK RBRACK
    (216) Dims -> . Dims LBRACK RBRACK
    (214) DimExpr -> . LBRACK Expression RBRACK

    DOT             reduce using rule 209 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    INC             reduce using rule 209 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    DEC             reduce using rule 209 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    MUL             reduce using rule 209 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    DIV             reduce using rule 209 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    MOD             reduce using rule 209 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    ADD             reduce using rule 209 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    SUB             reduce using rule 209 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    LSHIFT          reduce using rule 209 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    RSHIFT          reduce using rule 209 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    URSHIFT         reduce using rule 209 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    LT              reduce using rule 209 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    GT              reduce using rule 209 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    LE              reduce using rule 209 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    GE              reduce using rule 209 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    EQUAL           reduce using rule 209 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    NOTEQUAL        reduce using rule 209 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    BITAND          reduce using rule 209 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    CARET           reduce using rule 209 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    BITOR           reduce using rule 209 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    AND             reduce using rule 209 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    QUESTION        reduce using rule 209 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    OR              reduce using rule 209 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    RPAREN          reduce using rule 209 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    SEMI            reduce using rule 209 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    COMMA           reduce using rule 209 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    RBRACK          reduce using rule 209 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    COLON           reduce using rule 209 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    LBRACK          shift and go to state 366

    Dims                           shift and go to state 368
    DimExpr                        shift and go to state 365

state 325

    (223) ArrayAccess -> PrimaryNoNewArray LBRACK Expression . RBRACK

    RBRACK          shift and go to state 369


state 326

    (84) MethodDeclarator -> IDENTIFIER LPAREN FormalParameterList RPAREN .

    SEMI            reduce using rule 84 (MethodDeclarator -> IDENTIFIER LPAREN FormalParameterList RPAREN .)
    LBRACE          reduce using rule 84 (MethodDeclarator -> IDENTIFIER LPAREN FormalParameterList RPAREN .)


state 327

    (86) FormalParameterList -> FormalParameterList COMMA FormalParameter .

    RPAREN          reduce using rule 86 (FormalParameterList -> FormalParameterList COMMA FormalParameter .)
    COMMA           reduce using rule 86 (FormalParameterList -> FormalParameterList COMMA FormalParameter .)


state 328

    (139) IfThenStatement -> IF begin_scope LPAREN Expression . RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> IF begin_scope LPAREN Expression . RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2

    RPAREN          shift and go to state 370


state 329

    (199) PrimaryNoNewArray -> LPAREN Expression RPAREN .
    (243) CastExpression -> LPAREN Expression RPAREN . UnaryExpressionNotAddSub
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    LBRACK          reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    DOT             reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    INC             reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    DEC             reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    MUL             reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    DIV             reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    MOD             reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    ADD             reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    SUB             reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    LSHIFT          reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    RSHIFT          reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    URSHIFT         reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    LT              reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    GT              reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    LE              reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    GE              reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    EQUAL           reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    NOTEQUAL        reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    BITAND          reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    CARET           reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    BITOR           reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    AND             reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    QUESTION        reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    OR              reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    RPAREN          reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    SEMI            reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    COMMA           reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    RBRACK          reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    COLON           reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    UnaryExpressionNotAddSub       shift and go to state 371
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 330

    (241) CastExpression -> LPAREN PrimitiveType Dims . RPAREN UnaryExpression
    (216) Dims -> Dims . LBRACK RBRACK

    RPAREN          shift and go to state 372
    LBRACK          shift and go to state 177


state 331

    (242) CastExpression -> LPAREN PrimitiveType RPAREN . UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    UnaryExpression                shift and go to state 373
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 332

    (244) CastExpression -> LPAREN Name Dims . RPAREN UnaryExpressionNotAddSub
    (216) Dims -> Dims . LBRACK RBRACK

    RPAREN          shift and go to state 374
    LBRACK          shift and go to state 177


state 333

    (276) ConditionalExpression -> ConditionalOrExpression QUESTION Expression . COLON ConditionalExpression

    COLON           shift and go to state 375


state 334

    (273) ConditionalOrExpression -> ConditionalOrExpression OR ConMarker . ConditionalAndExpression
    (270) ConditionalAndExpression -> . InclusiveOrExpression
    (271) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    ConditionalAndExpression       shift and go to state 376
    InclusiveOrExpression          shift and go to state 196
    ExclusiveOrExpression          shift and go to state 199
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 335

    (271) ConditionalAndExpression -> ConditionalAndExpression AND ConMarker . InclusiveOrExpression
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    InclusiveOrExpression          shift and go to state 377
    ExclusiveOrExpression          shift and go to state 199
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 336

    (269) InclusiveOrExpression -> InclusiveOrExpression BITOR ExclusiveOrExpression .
    (267) ExclusiveOrExpression -> ExclusiveOrExpression . CARET AndExpression

    BITOR           reduce using rule 269 (InclusiveOrExpression -> InclusiveOrExpression BITOR ExclusiveOrExpression .)
    AND             reduce using rule 269 (InclusiveOrExpression -> InclusiveOrExpression BITOR ExclusiveOrExpression .)
    QUESTION        reduce using rule 269 (InclusiveOrExpression -> InclusiveOrExpression BITOR ExclusiveOrExpression .)
    OR              reduce using rule 269 (InclusiveOrExpression -> InclusiveOrExpression BITOR ExclusiveOrExpression .)
    RPAREN          reduce using rule 269 (InclusiveOrExpression -> InclusiveOrExpression BITOR ExclusiveOrExpression .)
    SEMI            reduce using rule 269 (InclusiveOrExpression -> InclusiveOrExpression BITOR ExclusiveOrExpression .)
    COMMA           reduce using rule 269 (InclusiveOrExpression -> InclusiveOrExpression BITOR ExclusiveOrExpression .)
    RBRACK          reduce using rule 269 (InclusiveOrExpression -> InclusiveOrExpression BITOR ExclusiveOrExpression .)
    COLON           reduce using rule 269 (InclusiveOrExpression -> InclusiveOrExpression BITOR ExclusiveOrExpression .)
    CARET           shift and go to state 284


state 337

    (267) ExclusiveOrExpression -> ExclusiveOrExpression CARET AndExpression .
    (265) AndExpression -> AndExpression . BITAND EqualityExpression

    CARET           reduce using rule 267 (ExclusiveOrExpression -> ExclusiveOrExpression CARET AndExpression .)
    BITOR           reduce using rule 267 (ExclusiveOrExpression -> ExclusiveOrExpression CARET AndExpression .)
    AND             reduce using rule 267 (ExclusiveOrExpression -> ExclusiveOrExpression CARET AndExpression .)
    QUESTION        reduce using rule 267 (ExclusiveOrExpression -> ExclusiveOrExpression CARET AndExpression .)
    OR              reduce using rule 267 (ExclusiveOrExpression -> ExclusiveOrExpression CARET AndExpression .)
    RPAREN          reduce using rule 267 (ExclusiveOrExpression -> ExclusiveOrExpression CARET AndExpression .)
    SEMI            reduce using rule 267 (ExclusiveOrExpression -> ExclusiveOrExpression CARET AndExpression .)
    COMMA           reduce using rule 267 (ExclusiveOrExpression -> ExclusiveOrExpression CARET AndExpression .)
    RBRACK          reduce using rule 267 (ExclusiveOrExpression -> ExclusiveOrExpression CARET AndExpression .)
    COLON           reduce using rule 267 (ExclusiveOrExpression -> ExclusiveOrExpression CARET AndExpression .)
    BITAND          shift and go to state 285


state 338

    (265) AndExpression -> AndExpression BITAND EqualityExpression .
    (262) EqualityExpression -> EqualityExpression . EQUAL RelationalExpression
    (263) EqualityExpression -> EqualityExpression . NOTEQUAL RelationalExpression

    BITAND          reduce using rule 265 (AndExpression -> AndExpression BITAND EqualityExpression .)
    CARET           reduce using rule 265 (AndExpression -> AndExpression BITAND EqualityExpression .)
    BITOR           reduce using rule 265 (AndExpression -> AndExpression BITAND EqualityExpression .)
    AND             reduce using rule 265 (AndExpression -> AndExpression BITAND EqualityExpression .)
    QUESTION        reduce using rule 265 (AndExpression -> AndExpression BITAND EqualityExpression .)
    OR              reduce using rule 265 (AndExpression -> AndExpression BITAND EqualityExpression .)
    RPAREN          reduce using rule 265 (AndExpression -> AndExpression BITAND EqualityExpression .)
    SEMI            reduce using rule 265 (AndExpression -> AndExpression BITAND EqualityExpression .)
    COMMA           reduce using rule 265 (AndExpression -> AndExpression BITAND EqualityExpression .)
    RBRACK          reduce using rule 265 (AndExpression -> AndExpression BITAND EqualityExpression .)
    COLON           reduce using rule 265 (AndExpression -> AndExpression BITAND EqualityExpression .)
    EQUAL           shift and go to state 287
    NOTEQUAL        shift and go to state 288


state 339

    (262) EqualityExpression -> EqualityExpression EQUAL RelationalExpression .
    (257) RelationalExpression -> RelationalExpression . LT ShiftExpression
    (258) RelationalExpression -> RelationalExpression . GT ShiftExpression
    (259) RelationalExpression -> RelationalExpression . LE ShiftExpression
    (260) RelationalExpression -> RelationalExpression . GE ShiftExpression

    EQUAL           reduce using rule 262 (EqualityExpression -> EqualityExpression EQUAL RelationalExpression .)
    NOTEQUAL        reduce using rule 262 (EqualityExpression -> EqualityExpression EQUAL RelationalExpression .)
    BITAND          reduce using rule 262 (EqualityExpression -> EqualityExpression EQUAL RelationalExpression .)
    CARET           reduce using rule 262 (EqualityExpression -> EqualityExpression EQUAL RelationalExpression .)
    BITOR           reduce using rule 262 (EqualityExpression -> EqualityExpression EQUAL RelationalExpression .)
    AND             reduce using rule 262 (EqualityExpression -> EqualityExpression EQUAL RelationalExpression .)
    QUESTION        reduce using rule 262 (EqualityExpression -> EqualityExpression EQUAL RelationalExpression .)
    OR              reduce using rule 262 (EqualityExpression -> EqualityExpression EQUAL RelationalExpression .)
    RPAREN          reduce using rule 262 (EqualityExpression -> EqualityExpression EQUAL RelationalExpression .)
    SEMI            reduce using rule 262 (EqualityExpression -> EqualityExpression EQUAL RelationalExpression .)
    COMMA           reduce using rule 262 (EqualityExpression -> EqualityExpression EQUAL RelationalExpression .)
    RBRACK          reduce using rule 262 (EqualityExpression -> EqualityExpression EQUAL RelationalExpression .)
    COLON           reduce using rule 262 (EqualityExpression -> EqualityExpression EQUAL RelationalExpression .)
    LT              shift and go to state 289
    GT              shift and go to state 290
    LE              shift and go to state 291
    GE              shift and go to state 292


state 340

    (263) EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression .
    (257) RelationalExpression -> RelationalExpression . LT ShiftExpression
    (258) RelationalExpression -> RelationalExpression . GT ShiftExpression
    (259) RelationalExpression -> RelationalExpression . LE ShiftExpression
    (260) RelationalExpression -> RelationalExpression . GE ShiftExpression

    EQUAL           reduce using rule 263 (EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression .)
    NOTEQUAL        reduce using rule 263 (EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression .)
    BITAND          reduce using rule 263 (EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression .)
    CARET           reduce using rule 263 (EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression .)
    BITOR           reduce using rule 263 (EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression .)
    AND             reduce using rule 263 (EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression .)
    QUESTION        reduce using rule 263 (EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression .)
    OR              reduce using rule 263 (EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression .)
    RPAREN          reduce using rule 263 (EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression .)
    SEMI            reduce using rule 263 (EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression .)
    COMMA           reduce using rule 263 (EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression .)
    RBRACK          reduce using rule 263 (EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression .)
    COLON           reduce using rule 263 (EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression .)
    LT              shift and go to state 289
    GT              shift and go to state 290
    LE              shift and go to state 291
    GE              shift and go to state 292


state 341

    (257) RelationalExpression -> RelationalExpression LT ShiftExpression .
    (253) ShiftExpression -> ShiftExpression . LSHIFT AdditiveExpression
    (254) ShiftExpression -> ShiftExpression . RSHIFT AdditiveExpression
    (255) ShiftExpression -> ShiftExpression . URSHIFT AdditiveExpression

    LT              reduce using rule 257 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    GT              reduce using rule 257 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    LE              reduce using rule 257 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    GE              reduce using rule 257 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    EQUAL           reduce using rule 257 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    NOTEQUAL        reduce using rule 257 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    BITAND          reduce using rule 257 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    CARET           reduce using rule 257 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    BITOR           reduce using rule 257 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    AND             reduce using rule 257 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    QUESTION        reduce using rule 257 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    OR              reduce using rule 257 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    RPAREN          reduce using rule 257 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    SEMI            reduce using rule 257 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    COMMA           reduce using rule 257 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    RBRACK          reduce using rule 257 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    COLON           reduce using rule 257 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    LSHIFT          shift and go to state 293
    RSHIFT          shift and go to state 294
    URSHIFT         shift and go to state 295


state 342

    (258) RelationalExpression -> RelationalExpression GT ShiftExpression .
    (253) ShiftExpression -> ShiftExpression . LSHIFT AdditiveExpression
    (254) ShiftExpression -> ShiftExpression . RSHIFT AdditiveExpression
    (255) ShiftExpression -> ShiftExpression . URSHIFT AdditiveExpression

    LT              reduce using rule 258 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    GT              reduce using rule 258 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    LE              reduce using rule 258 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    GE              reduce using rule 258 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    EQUAL           reduce using rule 258 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    NOTEQUAL        reduce using rule 258 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    BITAND          reduce using rule 258 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    CARET           reduce using rule 258 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    BITOR           reduce using rule 258 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    AND             reduce using rule 258 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    QUESTION        reduce using rule 258 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    OR              reduce using rule 258 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    RPAREN          reduce using rule 258 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    SEMI            reduce using rule 258 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    COMMA           reduce using rule 258 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    RBRACK          reduce using rule 258 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    COLON           reduce using rule 258 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    LSHIFT          shift and go to state 293
    RSHIFT          shift and go to state 294
    URSHIFT         shift and go to state 295


state 343

    (259) RelationalExpression -> RelationalExpression LE ShiftExpression .
    (253) ShiftExpression -> ShiftExpression . LSHIFT AdditiveExpression
    (254) ShiftExpression -> ShiftExpression . RSHIFT AdditiveExpression
    (255) ShiftExpression -> ShiftExpression . URSHIFT AdditiveExpression

    LT              reduce using rule 259 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    GT              reduce using rule 259 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    LE              reduce using rule 259 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    GE              reduce using rule 259 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    EQUAL           reduce using rule 259 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    NOTEQUAL        reduce using rule 259 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    BITAND          reduce using rule 259 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    CARET           reduce using rule 259 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    BITOR           reduce using rule 259 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    AND             reduce using rule 259 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    QUESTION        reduce using rule 259 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    OR              reduce using rule 259 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    RPAREN          reduce using rule 259 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    SEMI            reduce using rule 259 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    COMMA           reduce using rule 259 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    RBRACK          reduce using rule 259 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    COLON           reduce using rule 259 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    LSHIFT          shift and go to state 293
    RSHIFT          shift and go to state 294
    URSHIFT         shift and go to state 295


state 344

    (260) RelationalExpression -> RelationalExpression GE ShiftExpression .
    (253) ShiftExpression -> ShiftExpression . LSHIFT AdditiveExpression
    (254) ShiftExpression -> ShiftExpression . RSHIFT AdditiveExpression
    (255) ShiftExpression -> ShiftExpression . URSHIFT AdditiveExpression

    LT              reduce using rule 260 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    GT              reduce using rule 260 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    LE              reduce using rule 260 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    GE              reduce using rule 260 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    EQUAL           reduce using rule 260 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    NOTEQUAL        reduce using rule 260 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    BITAND          reduce using rule 260 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    CARET           reduce using rule 260 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    BITOR           reduce using rule 260 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    AND             reduce using rule 260 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    QUESTION        reduce using rule 260 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    OR              reduce using rule 260 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    RPAREN          reduce using rule 260 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    SEMI            reduce using rule 260 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    COMMA           reduce using rule 260 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    RBRACK          reduce using rule 260 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    COLON           reduce using rule 260 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    LSHIFT          shift and go to state 293
    RSHIFT          shift and go to state 294
    URSHIFT         shift and go to state 295


state 345

    (253) ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .
    (250) AdditiveExpression -> AdditiveExpression . ADD MultiplicativeExpression
    (251) AdditiveExpression -> AdditiveExpression . SUB MultiplicativeExpression

    LSHIFT          reduce using rule 253 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    RSHIFT          reduce using rule 253 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    URSHIFT         reduce using rule 253 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    LT              reduce using rule 253 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    GT              reduce using rule 253 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    LE              reduce using rule 253 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    GE              reduce using rule 253 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    EQUAL           reduce using rule 253 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    NOTEQUAL        reduce using rule 253 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    BITAND          reduce using rule 253 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    CARET           reduce using rule 253 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    BITOR           reduce using rule 253 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    AND             reduce using rule 253 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    QUESTION        reduce using rule 253 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    OR              reduce using rule 253 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    RPAREN          reduce using rule 253 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    SEMI            reduce using rule 253 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    COMMA           reduce using rule 253 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    RBRACK          reduce using rule 253 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    COLON           reduce using rule 253 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    ADD             shift and go to state 296
    SUB             shift and go to state 297


state 346

    (254) ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .
    (250) AdditiveExpression -> AdditiveExpression . ADD MultiplicativeExpression
    (251) AdditiveExpression -> AdditiveExpression . SUB MultiplicativeExpression

    LSHIFT          reduce using rule 254 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    RSHIFT          reduce using rule 254 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    URSHIFT         reduce using rule 254 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    LT              reduce using rule 254 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    GT              reduce using rule 254 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    LE              reduce using rule 254 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    GE              reduce using rule 254 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    EQUAL           reduce using rule 254 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    NOTEQUAL        reduce using rule 254 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    BITAND          reduce using rule 254 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    CARET           reduce using rule 254 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    BITOR           reduce using rule 254 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    AND             reduce using rule 254 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    QUESTION        reduce using rule 254 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    OR              reduce using rule 254 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    RPAREN          reduce using rule 254 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    SEMI            reduce using rule 254 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    COMMA           reduce using rule 254 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    RBRACK          reduce using rule 254 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    COLON           reduce using rule 254 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    ADD             shift and go to state 296
    SUB             shift and go to state 297


state 347

    (255) ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .
    (250) AdditiveExpression -> AdditiveExpression . ADD MultiplicativeExpression
    (251) AdditiveExpression -> AdditiveExpression . SUB MultiplicativeExpression

    LSHIFT          reduce using rule 255 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    RSHIFT          reduce using rule 255 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    URSHIFT         reduce using rule 255 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    LT              reduce using rule 255 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    GT              reduce using rule 255 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    LE              reduce using rule 255 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    GE              reduce using rule 255 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    EQUAL           reduce using rule 255 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    NOTEQUAL        reduce using rule 255 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    BITAND          reduce using rule 255 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    CARET           reduce using rule 255 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    BITOR           reduce using rule 255 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    AND             reduce using rule 255 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    QUESTION        reduce using rule 255 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    OR              reduce using rule 255 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    RPAREN          reduce using rule 255 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    SEMI            reduce using rule 255 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    COMMA           reduce using rule 255 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    RBRACK          reduce using rule 255 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    COLON           reduce using rule 255 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    ADD             shift and go to state 296
    SUB             shift and go to state 297


state 348

    (250) AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .
    (246) MultiplicativeExpression -> MultiplicativeExpression . MUL UnaryExpression
    (247) MultiplicativeExpression -> MultiplicativeExpression . DIV UnaryExpression
    (248) MultiplicativeExpression -> MultiplicativeExpression . MOD UnaryExpression

    ADD             reduce using rule 250 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    SUB             reduce using rule 250 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    LSHIFT          reduce using rule 250 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    RSHIFT          reduce using rule 250 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    URSHIFT         reduce using rule 250 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    LT              reduce using rule 250 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    GT              reduce using rule 250 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    LE              reduce using rule 250 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    GE              reduce using rule 250 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    EQUAL           reduce using rule 250 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    NOTEQUAL        reduce using rule 250 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    BITAND          reduce using rule 250 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    CARET           reduce using rule 250 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    BITOR           reduce using rule 250 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    AND             reduce using rule 250 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    QUESTION        reduce using rule 250 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    OR              reduce using rule 250 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    RPAREN          reduce using rule 250 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    SEMI            reduce using rule 250 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    COMMA           reduce using rule 250 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    RBRACK          reduce using rule 250 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    COLON           reduce using rule 250 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    MUL             shift and go to state 298
    DIV             shift and go to state 299
    MOD             shift and go to state 300


state 349

    (251) AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .
    (246) MultiplicativeExpression -> MultiplicativeExpression . MUL UnaryExpression
    (247) MultiplicativeExpression -> MultiplicativeExpression . DIV UnaryExpression
    (248) MultiplicativeExpression -> MultiplicativeExpression . MOD UnaryExpression

    ADD             reduce using rule 251 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    SUB             reduce using rule 251 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    LSHIFT          reduce using rule 251 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    RSHIFT          reduce using rule 251 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    URSHIFT         reduce using rule 251 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    LT              reduce using rule 251 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    GT              reduce using rule 251 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    LE              reduce using rule 251 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    GE              reduce using rule 251 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    EQUAL           reduce using rule 251 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    NOTEQUAL        reduce using rule 251 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    BITAND          reduce using rule 251 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    CARET           reduce using rule 251 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    BITOR           reduce using rule 251 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    AND             reduce using rule 251 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    QUESTION        reduce using rule 251 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    OR              reduce using rule 251 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    RPAREN          reduce using rule 251 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    SEMI            reduce using rule 251 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    COMMA           reduce using rule 251 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    RBRACK          reduce using rule 251 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    COLON           reduce using rule 251 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    MUL             shift and go to state 298
    DIV             shift and go to state 299
    MOD             shift and go to state 300


state 350

    (246) MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .

    MUL             reduce using rule 246 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    DIV             reduce using rule 246 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    MOD             reduce using rule 246 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    ADD             reduce using rule 246 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    SUB             reduce using rule 246 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    LSHIFT          reduce using rule 246 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    RSHIFT          reduce using rule 246 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    URSHIFT         reduce using rule 246 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    LT              reduce using rule 246 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    GT              reduce using rule 246 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    LE              reduce using rule 246 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    GE              reduce using rule 246 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    EQUAL           reduce using rule 246 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    NOTEQUAL        reduce using rule 246 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    BITAND          reduce using rule 246 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    CARET           reduce using rule 246 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    BITOR           reduce using rule 246 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    AND             reduce using rule 246 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    QUESTION        reduce using rule 246 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    OR              reduce using rule 246 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    RPAREN          reduce using rule 246 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    SEMI            reduce using rule 246 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    COMMA           reduce using rule 246 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    RBRACK          reduce using rule 246 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    COLON           reduce using rule 246 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)


state 351

    (247) MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .

    MUL             reduce using rule 247 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    DIV             reduce using rule 247 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    MOD             reduce using rule 247 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    ADD             reduce using rule 247 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    SUB             reduce using rule 247 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    LSHIFT          reduce using rule 247 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    RSHIFT          reduce using rule 247 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    URSHIFT         reduce using rule 247 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    LT              reduce using rule 247 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    GT              reduce using rule 247 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    LE              reduce using rule 247 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    GE              reduce using rule 247 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    EQUAL           reduce using rule 247 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    NOTEQUAL        reduce using rule 247 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    BITAND          reduce using rule 247 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    CARET           reduce using rule 247 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    BITOR           reduce using rule 247 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    AND             reduce using rule 247 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    QUESTION        reduce using rule 247 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    OR              reduce using rule 247 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    RPAREN          reduce using rule 247 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    SEMI            reduce using rule 247 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    COMMA           reduce using rule 247 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    RBRACK          reduce using rule 247 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    COLON           reduce using rule 247 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)


state 352

    (248) MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .

    MUL             reduce using rule 248 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    DIV             reduce using rule 248 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    MOD             reduce using rule 248 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    ADD             reduce using rule 248 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    SUB             reduce using rule 248 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    LSHIFT          reduce using rule 248 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    RSHIFT          reduce using rule 248 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    URSHIFT         reduce using rule 248 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    LT              reduce using rule 248 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    GT              reduce using rule 248 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    LE              reduce using rule 248 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    GE              reduce using rule 248 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    EQUAL           reduce using rule 248 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    NOTEQUAL        reduce using rule 248 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    BITAND          reduce using rule 248 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    CARET           reduce using rule 248 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    BITOR           reduce using rule 248 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    AND             reduce using rule 248 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    QUESTION        reduce using rule 248 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    OR              reduce using rule 248 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    RPAREN          reduce using rule 248 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    SEMI            reduce using rule 248 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    COMMA           reduce using rule 248 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    RBRACK          reduce using rule 248 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    COLON           reduce using rule 248 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)


state 353

    (157) WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope . while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (160) while_l1 -> .

    IDENTIFIER      reduce using rule 160 (while_l1 -> .)
    THIS            reduce using rule 160 (while_l1 -> .)
    LPAREN          reduce using rule 160 (while_l1 -> .)
    NEW             reduce using rule 160 (while_l1 -> .)
    DECIMAL_LITERAL reduce using rule 160 (while_l1 -> .)
    HEX_LITERAL     reduce using rule 160 (while_l1 -> .)
    BINARY_LITERAL  reduce using rule 160 (while_l1 -> .)
    FLOAT_LITERAL   reduce using rule 160 (while_l1 -> .)
    BOOL_LITERAL    reduce using rule 160 (while_l1 -> .)
    CHAR_LITERAL    reduce using rule 160 (while_l1 -> .)
    STRING_LITERAL  reduce using rule 160 (while_l1 -> .)
    NULL            reduce using rule 160 (while_l1 -> .)
    ADD             reduce using rule 160 (while_l1 -> .)
    SUB             reduce using rule 160 (while_l1 -> .)
    INC             reduce using rule 160 (while_l1 -> .)
    DEC             reduce using rule 160 (while_l1 -> .)
    BANG            reduce using rule 160 (while_l1 -> .)
    TILDE           reduce using rule 160 (while_l1 -> .)

    while_l1                       shift and go to state 378

state 354

    (165) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (184) ForInit -> . StatementExpressionList
    (185) ForInit -> . LocalVariableDeclaration
    (187) StatementExpressionList -> . StatementExpression
    (188) StatementExpressionList -> . StatementExpressionList COMMA StatementExpression
    (108) LocalVariableDeclaration -> . Type VariableDeclarators
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    SEMI            shift and go to state 380
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    BOOLEAN         shift and go to state 63
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    IDENTIFIER      shift and go to state 61
    BYTE            shift and go to state 69
    SHORT           shift and go to state 70
    INT             shift and go to state 71
    LONG            shift and go to state 72
    CHAR            shift and go to state 73
    FLOAT           shift and go to state 74
    DOUBLE          shift and go to state 75
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    ForInit                        shift and go to state 379
    StatementExpressionList        shift and go to state 381
    LocalVariableDeclaration       shift and go to state 382
    StatementExpression            shift and go to state 383
    Type                           shift and go to state 117
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    PrimitiveType                  shift and go to state 58
    ReferenceType                  shift and go to state 59
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 384
    ClassType                      shift and go to state 65
    NumericType                    shift and go to state 62
    ArrayType                      shift and go to state 64
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    IntegralType                   shift and go to state 66
    FloatingPointType              shift and go to state 67
    Literal                        shift and go to state 156

state 355

    (145) SwitchStatement -> SWITCH LPAREN Expression RPAREN . SwitchBlock
    (146) SwitchBlock -> . LBRACE RBRACE
    (147) SwitchBlock -> . LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE
    (148) SwitchBlock -> . LBRACE SwitchBlockStatementGroups RBRACE
    (149) SwitchBlock -> . LBRACE begin_scope SwitchLabels end_scope RBRACE

    LBRACE          shift and go to state 386

    SwitchBlock                    shift and go to state 385

state 356

    (162) DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 . Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 126
    IF              shift and go to state 127
    WHILE           shift and go to state 129
    FOR             shift and go to state 130
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    Statement                      shift and go to state 387
    StatementWithoutTrailingSubstatement shift and go to state 111
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    StatementExpression            shift and go to state 131
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 357

    (219) MethodInvocation -> Name LPAREN ArgumentList RPAREN .

    SEMI            reduce using rule 219 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    LBRACK          reduce using rule 219 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    DOT             reduce using rule 219 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    INC             reduce using rule 219 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    DEC             reduce using rule 219 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    MUL             reduce using rule 219 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    DIV             reduce using rule 219 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    MOD             reduce using rule 219 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    ADD             reduce using rule 219 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    SUB             reduce using rule 219 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    LSHIFT          reduce using rule 219 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    RSHIFT          reduce using rule 219 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    URSHIFT         reduce using rule 219 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    LT              reduce using rule 219 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    GT              reduce using rule 219 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    LE              reduce using rule 219 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    GE              reduce using rule 219 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    EQUAL           reduce using rule 219 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    NOTEQUAL        reduce using rule 219 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    BITAND          reduce using rule 219 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    CARET           reduce using rule 219 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    BITOR           reduce using rule 219 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    AND             reduce using rule 219 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    QUESTION        reduce using rule 219 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    OR              reduce using rule 219 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    RPAREN          reduce using rule 219 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    COMMA           reduce using rule 219 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    RBRACK          reduce using rule 219 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    COLON           reduce using rule 219 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)


state 358

    (207) ArgumentList -> ArgumentList COMMA . Expression
    (295) Expression -> . AssignmentExpression
    (277) AssignmentExpression -> . ConditionalExpression
    (278) AssignmentExpression -> . Assignment
    (275) ConditionalExpression -> . ConditionalOrExpression
    (276) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (272) ConditionalOrExpression -> . ConditionalAndExpression
    (273) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (270) ConditionalAndExpression -> . InclusiveOrExpression
    (271) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC

    IDENTIFIER      shift and go to state 61
    THIS            shift and go to state 157
    LPAREN          shift and go to state 188
    NEW             shift and go to state 203
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165
    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217

    Expression                     shift and go to state 388
    AssignmentExpression           shift and go to state 190
    ConditionalExpression          shift and go to state 191
    Assignment                     shift and go to state 192
    ConditionalOrExpression        shift and go to state 193
    LeftHandSide                   shift and go to state 145
    ConditionalAndExpression       shift and go to state 194
    Name                           shift and go to state 195
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    InclusiveOrExpression          shift and go to state 196
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Primary                        shift and go to state 197
    PrimaryNoNewArray              shift and go to state 198
    ExclusiveOrExpression          shift and go to state 199
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    MethodInvocation               shift and go to state 201
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220

state 359

    (222) ArrayAccess -> Name LBRACK Expression RBRACK .

    ASSIGN          reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    ADD_ASSIGN      reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    SUB_ASSIGN      reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    MUL_ASSIGN      reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    DIV_ASSIGN      reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    AND_ASSIGN      reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    OR_ASSIGN       reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    XOR_ASSIGN      reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    MOD_ASSIGN      reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    LSHIFT_ASSIGN   reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    RSHIFT_ASSIGN   reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    URSHIFT_ASSIGN  reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    LBRACK          reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    DOT             reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    INC             reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    DEC             reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    MUL             reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    DIV             reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    MOD             reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    ADD             reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    SUB             reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    LSHIFT          reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    RSHIFT          reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    URSHIFT         reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    LT              reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    GT              reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    LE              reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    GE              reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    EQUAL           reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    NOTEQUAL        reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    BITAND          reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    CARET           reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    BITOR           reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    AND             reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    QUESTION        reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    OR              reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    RPAREN          reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    SEMI            reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    COMMA           reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    RBRACK          reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    COLON           reduce using rule 222 (ArrayAccess -> Name LBRACK Expression RBRACK .)


state 360

    (243) CastExpression -> LPAREN Expression RPAREN . UnaryExpressionNotAddSub
    (199) PrimaryNoNewArray -> LPAREN Expression RPAREN .
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    LBRACK          reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    DOT             reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    INC             reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    DEC             reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    SEMI            reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    MUL             reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    DIV             reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    MOD             reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    ADD             reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    SUB             reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    LSHIFT          reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    RSHIFT          reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    URSHIFT         reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    LT              reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    GT              reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    LE              reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    GE              reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    EQUAL           reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    NOTEQUAL        reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    BITAND          reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    CARET           reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    BITOR           reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    AND             reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    QUESTION        reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    OR              reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    RPAREN          reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    COMMA           reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    RBRACK          reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    COLON           reduce using rule 199 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    UnaryExpressionNotAddSub       shift and go to state 371
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 361

    (218) MethodInvocation -> Primary DOT IDENTIFIER LPAREN . ArgumentList RPAREN
    (220) MethodInvocation -> Primary DOT IDENTIFIER LPAREN . RPAREN
    (206) ArgumentList -> . Expression
    (207) ArgumentList -> . ArgumentList COMMA Expression
    (295) Expression -> . AssignmentExpression
    (277) AssignmentExpression -> . ConditionalExpression
    (278) AssignmentExpression -> . Assignment
    (275) ConditionalExpression -> . ConditionalOrExpression
    (276) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (272) ConditionalOrExpression -> . ConditionalAndExpression
    (273) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (270) ConditionalAndExpression -> . InclusiveOrExpression
    (271) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC

    RPAREN          shift and go to state 390
    IDENTIFIER      shift and go to state 61
    THIS            shift and go to state 157
    LPAREN          shift and go to state 188
    NEW             shift and go to state 203
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165
    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217

    Primary                        shift and go to state 197
    ArgumentList                   shift and go to state 389
    Expression                     shift and go to state 314
    AssignmentExpression           shift and go to state 190
    ConditionalExpression          shift and go to state 191
    Assignment                     shift and go to state 192
    ConditionalOrExpression        shift and go to state 193
    LeftHandSide                   shift and go to state 145
    ConditionalAndExpression       shift and go to state 194
    Name                           shift and go to state 195
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    InclusiveOrExpression          shift and go to state 196
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    PrimaryNoNewArray              shift and go to state 198
    ExclusiveOrExpression          shift and go to state 199
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    MethodInvocation               shift and go to state 201
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220

state 362

    (204) ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .

    SEMI            reduce using rule 204 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    LBRACK          reduce using rule 204 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    DOT             reduce using rule 204 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    INC             reduce using rule 204 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    DEC             reduce using rule 204 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    MUL             reduce using rule 204 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    DIV             reduce using rule 204 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    MOD             reduce using rule 204 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    ADD             reduce using rule 204 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    SUB             reduce using rule 204 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    LSHIFT          reduce using rule 204 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    RSHIFT          reduce using rule 204 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    URSHIFT         reduce using rule 204 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    LT              reduce using rule 204 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    GT              reduce using rule 204 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    LE              reduce using rule 204 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    GE              reduce using rule 204 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    EQUAL           reduce using rule 204 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    NOTEQUAL        reduce using rule 204 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    BITAND          reduce using rule 204 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    CARET           reduce using rule 204 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    BITOR           reduce using rule 204 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    AND             reduce using rule 204 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    QUESTION        reduce using rule 204 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    OR              reduce using rule 204 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    RPAREN          reduce using rule 204 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    COMMA           reduce using rule 204 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    RBRACK          reduce using rule 204 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    COLON           reduce using rule 204 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)


state 363

    (205) ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList . RPAREN
    (207) ArgumentList -> ArgumentList . COMMA Expression

    RPAREN          shift and go to state 391
    COMMA           shift and go to state 358


state 364

    (210) ArrayCreationExpression -> NEW ClassType DimExprs Dims .
    (216) Dims -> Dims . LBRACK RBRACK

    DOT             reduce using rule 210 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    INC             reduce using rule 210 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    DEC             reduce using rule 210 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    MUL             reduce using rule 210 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    DIV             reduce using rule 210 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    MOD             reduce using rule 210 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    ADD             reduce using rule 210 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    SUB             reduce using rule 210 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    LSHIFT          reduce using rule 210 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    RSHIFT          reduce using rule 210 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    URSHIFT         reduce using rule 210 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    LT              reduce using rule 210 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    GT              reduce using rule 210 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    LE              reduce using rule 210 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    GE              reduce using rule 210 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    EQUAL           reduce using rule 210 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    NOTEQUAL        reduce using rule 210 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    BITAND          reduce using rule 210 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    CARET           reduce using rule 210 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    BITOR           reduce using rule 210 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    AND             reduce using rule 210 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    QUESTION        reduce using rule 210 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    OR              reduce using rule 210 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    RPAREN          reduce using rule 210 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    SEMI            reduce using rule 210 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    COMMA           reduce using rule 210 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    RBRACK          reduce using rule 210 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    COLON           reduce using rule 210 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    LBRACK          shift and go to state 177


state 365

    (213) DimExprs -> DimExprs DimExpr .

    LBRACK          reduce using rule 213 (DimExprs -> DimExprs DimExpr .)
    DOT             reduce using rule 213 (DimExprs -> DimExprs DimExpr .)
    INC             reduce using rule 213 (DimExprs -> DimExprs DimExpr .)
    DEC             reduce using rule 213 (DimExprs -> DimExprs DimExpr .)
    MUL             reduce using rule 213 (DimExprs -> DimExprs DimExpr .)
    DIV             reduce using rule 213 (DimExprs -> DimExprs DimExpr .)
    MOD             reduce using rule 213 (DimExprs -> DimExprs DimExpr .)
    ADD             reduce using rule 213 (DimExprs -> DimExprs DimExpr .)
    SUB             reduce using rule 213 (DimExprs -> DimExprs DimExpr .)
    LSHIFT          reduce using rule 213 (DimExprs -> DimExprs DimExpr .)
    RSHIFT          reduce using rule 213 (DimExprs -> DimExprs DimExpr .)
    URSHIFT         reduce using rule 213 (DimExprs -> DimExprs DimExpr .)
    LT              reduce using rule 213 (DimExprs -> DimExprs DimExpr .)
    GT              reduce using rule 213 (DimExprs -> DimExprs DimExpr .)
    LE              reduce using rule 213 (DimExprs -> DimExprs DimExpr .)
    GE              reduce using rule 213 (DimExprs -> DimExprs DimExpr .)
    EQUAL           reduce using rule 213 (DimExprs -> DimExprs DimExpr .)
    NOTEQUAL        reduce using rule 213 (DimExprs -> DimExprs DimExpr .)
    BITAND          reduce using rule 213 (DimExprs -> DimExprs DimExpr .)
    CARET           reduce using rule 213 (DimExprs -> DimExprs DimExpr .)
    BITOR           reduce using rule 213 (DimExprs -> DimExprs DimExpr .)
    AND             reduce using rule 213 (DimExprs -> DimExprs DimExpr .)
    QUESTION        reduce using rule 213 (DimExprs -> DimExprs DimExpr .)
    OR              reduce using rule 213 (DimExprs -> DimExprs DimExpr .)
    RPAREN          reduce using rule 213 (DimExprs -> DimExprs DimExpr .)
    SEMI            reduce using rule 213 (DimExprs -> DimExprs DimExpr .)
    COMMA           reduce using rule 213 (DimExprs -> DimExprs DimExpr .)
    RBRACK          reduce using rule 213 (DimExprs -> DimExprs DimExpr .)
    COLON           reduce using rule 213 (DimExprs -> DimExprs DimExpr .)


state 366

    (215) Dims -> LBRACK . RBRACK
    (214) DimExpr -> LBRACK . Expression RBRACK
    (295) Expression -> . AssignmentExpression
    (277) AssignmentExpression -> . ConditionalExpression
    (278) AssignmentExpression -> . Assignment
    (275) ConditionalExpression -> . ConditionalOrExpression
    (276) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (272) ConditionalOrExpression -> . ConditionalAndExpression
    (273) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (270) ConditionalAndExpression -> . InclusiveOrExpression
    (271) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC

    RBRACK          shift and go to state 178
    IDENTIFIER      shift and go to state 61
    THIS            shift and go to state 157
    LPAREN          shift and go to state 188
    NEW             shift and go to state 203
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165
    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217

    Expression                     shift and go to state 367
    AssignmentExpression           shift and go to state 190
    ConditionalExpression          shift and go to state 191
    Assignment                     shift and go to state 192
    ConditionalOrExpression        shift and go to state 193
    LeftHandSide                   shift and go to state 145
    ConditionalAndExpression       shift and go to state 194
    Name                           shift and go to state 195
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    InclusiveOrExpression          shift and go to state 196
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Primary                        shift and go to state 197
    PrimaryNoNewArray              shift and go to state 198
    ExclusiveOrExpression          shift and go to state 199
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    MethodInvocation               shift and go to state 201
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220

state 367

    (214) DimExpr -> LBRACK Expression . RBRACK

    RBRACK          shift and go to state 392


state 368

    (208) ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .
    (216) Dims -> Dims . LBRACK RBRACK

    DOT             reduce using rule 208 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    INC             reduce using rule 208 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    DEC             reduce using rule 208 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    MUL             reduce using rule 208 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    DIV             reduce using rule 208 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    MOD             reduce using rule 208 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    ADD             reduce using rule 208 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    SUB             reduce using rule 208 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    LSHIFT          reduce using rule 208 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    RSHIFT          reduce using rule 208 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    URSHIFT         reduce using rule 208 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    LT              reduce using rule 208 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    GT              reduce using rule 208 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    LE              reduce using rule 208 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    GE              reduce using rule 208 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    EQUAL           reduce using rule 208 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    NOTEQUAL        reduce using rule 208 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    BITAND          reduce using rule 208 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    CARET           reduce using rule 208 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    BITOR           reduce using rule 208 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    AND             reduce using rule 208 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    QUESTION        reduce using rule 208 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    OR              reduce using rule 208 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    RPAREN          reduce using rule 208 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    SEMI            reduce using rule 208 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    COMMA           reduce using rule 208 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    RBRACK          reduce using rule 208 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    COLON           reduce using rule 208 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    LBRACK          shift and go to state 177


state 369

    (223) ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .

    ASSIGN          reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    ADD_ASSIGN      reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    SUB_ASSIGN      reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    MUL_ASSIGN      reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    DIV_ASSIGN      reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    AND_ASSIGN      reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    OR_ASSIGN       reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    XOR_ASSIGN      reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    MOD_ASSIGN      reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    LSHIFT_ASSIGN   reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    RSHIFT_ASSIGN   reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    URSHIFT_ASSIGN  reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    LBRACK          reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    DOT             reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    INC             reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    DEC             reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    MUL             reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    DIV             reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    MOD             reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    ADD             reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    SUB             reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    LSHIFT          reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    RSHIFT          reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    URSHIFT         reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    LT              reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    GT              reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    LE              reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    GE              reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    EQUAL           reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    NOTEQUAL        reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    BITAND          reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    CARET           reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    BITOR           reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    AND             reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    QUESTION        reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    OR              reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    RPAREN          reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    SEMI            reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    COMMA           reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    RBRACK          reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    COLON           reduce using rule 223 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)


state 370

    (139) IfThenStatement -> IF begin_scope LPAREN Expression RPAREN . ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN . ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (140) ifMark1 -> .

    IDENTIFIER      reduce using rule 140 (ifMark1 -> .)
    IF              reduce using rule 140 (ifMark1 -> .)
    WHILE           reduce using rule 140 (ifMark1 -> .)
    FOR             reduce using rule 140 (ifMark1 -> .)
    LBRACE          reduce using rule 140 (ifMark1 -> .)
    SEMI            reduce using rule 140 (ifMark1 -> .)
    SWITCH          reduce using rule 140 (ifMark1 -> .)
    DO              reduce using rule 140 (ifMark1 -> .)
    BREAK           reduce using rule 140 (ifMark1 -> .)
    CONTINUE        reduce using rule 140 (ifMark1 -> .)
    RETURN          reduce using rule 140 (ifMark1 -> .)
    INC             reduce using rule 140 (ifMark1 -> .)
    DEC             reduce using rule 140 (ifMark1 -> .)
    NEW             reduce using rule 140 (ifMark1 -> .)
    THIS            reduce using rule 140 (ifMark1 -> .)
    LPAREN          reduce using rule 140 (ifMark1 -> .)
    DECIMAL_LITERAL reduce using rule 140 (ifMark1 -> .)
    HEX_LITERAL     reduce using rule 140 (ifMark1 -> .)
    BINARY_LITERAL  reduce using rule 140 (ifMark1 -> .)
    FLOAT_LITERAL   reduce using rule 140 (ifMark1 -> .)
    BOOL_LITERAL    reduce using rule 140 (ifMark1 -> .)
    CHAR_LITERAL    reduce using rule 140 (ifMark1 -> .)
    STRING_LITERAL  reduce using rule 140 (ifMark1 -> .)
    NULL            reduce using rule 140 (ifMark1 -> .)

    ifMark1                        shift and go to state 393

state 371

    (243) CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .

    MUL             reduce using rule 243 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    DIV             reduce using rule 243 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    MOD             reduce using rule 243 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    ADD             reduce using rule 243 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    SUB             reduce using rule 243 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    LSHIFT          reduce using rule 243 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    RSHIFT          reduce using rule 243 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    URSHIFT         reduce using rule 243 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    LT              reduce using rule 243 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    GT              reduce using rule 243 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    LE              reduce using rule 243 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    GE              reduce using rule 243 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    EQUAL           reduce using rule 243 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    NOTEQUAL        reduce using rule 243 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    BITAND          reduce using rule 243 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    CARET           reduce using rule 243 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    BITOR           reduce using rule 243 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    AND             reduce using rule 243 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    QUESTION        reduce using rule 243 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    OR              reduce using rule 243 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    RPAREN          reduce using rule 243 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    SEMI            reduce using rule 243 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    COMMA           reduce using rule 243 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    RBRACK          reduce using rule 243 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    COLON           reduce using rule 243 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)


state 372

    (241) CastExpression -> LPAREN PrimitiveType Dims RPAREN . UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    UnaryExpression                shift and go to state 394
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 373

    (242) CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .

    MUL             reduce using rule 242 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    DIV             reduce using rule 242 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    MOD             reduce using rule 242 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    ADD             reduce using rule 242 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    SUB             reduce using rule 242 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    LSHIFT          reduce using rule 242 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    RSHIFT          reduce using rule 242 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    URSHIFT         reduce using rule 242 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    LT              reduce using rule 242 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    GT              reduce using rule 242 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    LE              reduce using rule 242 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    GE              reduce using rule 242 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    EQUAL           reduce using rule 242 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    NOTEQUAL        reduce using rule 242 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    BITAND          reduce using rule 242 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    CARET           reduce using rule 242 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    BITOR           reduce using rule 242 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    AND             reduce using rule 242 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    QUESTION        reduce using rule 242 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    OR              reduce using rule 242 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    RPAREN          reduce using rule 242 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    SEMI            reduce using rule 242 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    COMMA           reduce using rule 242 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    RBRACK          reduce using rule 242 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    COLON           reduce using rule 242 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)


state 374

    (244) CastExpression -> LPAREN Name Dims RPAREN . UnaryExpressionNotAddSub
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    Name                           shift and go to state 249
    UnaryExpressionNotAddSub       shift and go to state 395
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 375

    (276) ConditionalExpression -> ConditionalOrExpression QUESTION Expression COLON . ConditionalExpression
    (275) ConditionalExpression -> . ConditionalOrExpression
    (276) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (272) ConditionalOrExpression -> . ConditionalAndExpression
    (273) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (270) ConditionalAndExpression -> . InclusiveOrExpression
    (271) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (217) FieldAccess -> . Primary DOT Name
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217
    LPAREN          shift and go to state 250
    THIS            shift and go to state 157
    NEW             shift and go to state 203
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    ConditionalOrExpression        shift and go to state 193
    ConditionalExpression          shift and go to state 396
    ConditionalAndExpression       shift and go to state 194
    InclusiveOrExpression          shift and go to state 196
    ExclusiveOrExpression          shift and go to state 199
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    Primary                        shift and go to state 248
    Name                           shift and go to state 249
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    FieldAccess                    shift and go to state 251
    MethodInvocation               shift and go to state 201
    ArrayAccess                    shift and go to state 252

state 376

    (273) ConditionalOrExpression -> ConditionalOrExpression OR ConMarker ConditionalAndExpression .
    (271) ConditionalAndExpression -> ConditionalAndExpression . AND ConMarker InclusiveOrExpression

    QUESTION        reduce using rule 273 (ConditionalOrExpression -> ConditionalOrExpression OR ConMarker ConditionalAndExpression .)
    OR              reduce using rule 273 (ConditionalOrExpression -> ConditionalOrExpression OR ConMarker ConditionalAndExpression .)
    RPAREN          reduce using rule 273 (ConditionalOrExpression -> ConditionalOrExpression OR ConMarker ConditionalAndExpression .)
    SEMI            reduce using rule 273 (ConditionalOrExpression -> ConditionalOrExpression OR ConMarker ConditionalAndExpression .)
    COMMA           reduce using rule 273 (ConditionalOrExpression -> ConditionalOrExpression OR ConMarker ConditionalAndExpression .)
    RBRACK          reduce using rule 273 (ConditionalOrExpression -> ConditionalOrExpression OR ConMarker ConditionalAndExpression .)
    COLON           reduce using rule 273 (ConditionalOrExpression -> ConditionalOrExpression OR ConMarker ConditionalAndExpression .)
    AND             shift and go to state 280


state 377

    (271) ConditionalAndExpression -> ConditionalAndExpression AND ConMarker InclusiveOrExpression .
    (269) InclusiveOrExpression -> InclusiveOrExpression . BITOR ExclusiveOrExpression

    AND             reduce using rule 271 (ConditionalAndExpression -> ConditionalAndExpression AND ConMarker InclusiveOrExpression .)
    QUESTION        reduce using rule 271 (ConditionalAndExpression -> ConditionalAndExpression AND ConMarker InclusiveOrExpression .)
    OR              reduce using rule 271 (ConditionalAndExpression -> ConditionalAndExpression AND ConMarker InclusiveOrExpression .)
    RPAREN          reduce using rule 271 (ConditionalAndExpression -> ConditionalAndExpression AND ConMarker InclusiveOrExpression .)
    SEMI            reduce using rule 271 (ConditionalAndExpression -> ConditionalAndExpression AND ConMarker InclusiveOrExpression .)
    COMMA           reduce using rule 271 (ConditionalAndExpression -> ConditionalAndExpression AND ConMarker InclusiveOrExpression .)
    RBRACK          reduce using rule 271 (ConditionalAndExpression -> ConditionalAndExpression AND ConMarker InclusiveOrExpression .)
    COLON           reduce using rule 271 (ConditionalAndExpression -> ConditionalAndExpression AND ConMarker InclusiveOrExpression .)
    BITOR           shift and go to state 282


state 378

    (157) WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 . Expression RPAREN while_l1 Statement end_scope while_l2
    (295) Expression -> . AssignmentExpression
    (277) AssignmentExpression -> . ConditionalExpression
    (278) AssignmentExpression -> . Assignment
    (275) ConditionalExpression -> . ConditionalOrExpression
    (276) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (272) ConditionalOrExpression -> . ConditionalAndExpression
    (273) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (270) ConditionalAndExpression -> . InclusiveOrExpression
    (271) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC

    IDENTIFIER      shift and go to state 61
    THIS            shift and go to state 157
    LPAREN          shift and go to state 188
    NEW             shift and go to state 203
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165
    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217

    Expression                     shift and go to state 397
    AssignmentExpression           shift and go to state 190
    ConditionalExpression          shift and go to state 191
    Assignment                     shift and go to state 192
    ConditionalOrExpression        shift and go to state 193
    LeftHandSide                   shift and go to state 145
    ConditionalAndExpression       shift and go to state 194
    Name                           shift and go to state 195
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    InclusiveOrExpression          shift and go to state 196
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Primary                        shift and go to state 197
    PrimaryNoNewArray              shift and go to state 198
    ExclusiveOrExpression          shift and go to state 199
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    MethodInvocation               shift and go to state 201
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220

state 379

    (165) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit . SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit . SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit . SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit . SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2

    SEMI            shift and go to state 398


state 380

    (166) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI . for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI . for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI . for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI . for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (181) for_l1 -> .

    SEMI            reduce using rule 181 (for_l1 -> .)
    IDENTIFIER      reduce using rule 181 (for_l1 -> .)
    THIS            reduce using rule 181 (for_l1 -> .)
    LPAREN          reduce using rule 181 (for_l1 -> .)
    NEW             reduce using rule 181 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 181 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 181 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 181 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 181 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 181 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 181 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 181 (for_l1 -> .)
    NULL            reduce using rule 181 (for_l1 -> .)
    ADD             reduce using rule 181 (for_l1 -> .)
    SUB             reduce using rule 181 (for_l1 -> .)
    INC             reduce using rule 181 (for_l1 -> .)
    DEC             reduce using rule 181 (for_l1 -> .)
    BANG            reduce using rule 181 (for_l1 -> .)
    TILDE           reduce using rule 181 (for_l1 -> .)

    for_l1                         shift and go to state 399

state 381

    (184) ForInit -> StatementExpressionList .
    (188) StatementExpressionList -> StatementExpressionList . COMMA StatementExpression

    SEMI            reduce using rule 184 (ForInit -> StatementExpressionList .)
    COMMA           shift and go to state 400


state 382

    (185) ForInit -> LocalVariableDeclaration .

    SEMI            reduce using rule 185 (ForInit -> LocalVariableDeclaration .)


state 383

    (187) StatementExpressionList -> StatementExpression .

    COMMA           reduce using rule 187 (StatementExpressionList -> StatementExpression .)
    SEMI            reduce using rule 187 (StatementExpressionList -> StatementExpression .)
    RPAREN          reduce using rule 187 (StatementExpressionList -> StatementExpression .)


state 384

    (219) MethodInvocation -> Name . LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> Name . LPAREN RPAREN
    (280) LeftHandSide -> Name .
    (225) PostfixExpression -> Name .
    (27) ArrayType -> Name . Dims
    (25) ClassType -> Name .
    (222) ArrayAccess -> Name . LBRACK Expression RBRACK
    (31) QualifiedName -> Name . DOT IDENTIFIER
    (215) Dims -> . LBRACK RBRACK
    (216) Dims -> . Dims LBRACK RBRACK

    LPAREN          shift and go to state 232
    ASSIGN          reduce using rule 280 (LeftHandSide -> Name .)
    ADD_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    SUB_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    MUL_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    DIV_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    AND_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    OR_ASSIGN       reduce using rule 280 (LeftHandSide -> Name .)
    XOR_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    MOD_ASSIGN      reduce using rule 280 (LeftHandSide -> Name .)
    LSHIFT_ASSIGN   reduce using rule 280 (LeftHandSide -> Name .)
    RSHIFT_ASSIGN   reduce using rule 280 (LeftHandSide -> Name .)
    URSHIFT_ASSIGN  reduce using rule 280 (LeftHandSide -> Name .)
    INC             reduce using rule 225 (PostfixExpression -> Name .)
    DEC             reduce using rule 225 (PostfixExpression -> Name .)
    IDENTIFIER      reduce using rule 25 (ClassType -> Name .)
    LBRACK          shift and go to state 233
    DOT             shift and go to state 99

    Dims                           shift and go to state 98

state 385

    (145) SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .

    RBRACE          reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    IDENTIFIER      reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    IF              reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    WHILE           reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    FOR             reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    LBRACE          reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    SEMI            reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    SWITCH          reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    DO              reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    BREAK           reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    CONTINUE        reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    RETURN          reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    BOOLEAN         reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    INC             reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    DEC             reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    NEW             reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    BYTE            reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    SHORT           reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    INT             reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    LONG            reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    CHAR            reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    FLOAT           reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    DOUBLE          reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    THIS            reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    LPAREN          reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    DECIMAL_LITERAL reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    HEX_LITERAL     reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    BINARY_LITERAL  reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    FLOAT_LITERAL   reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    BOOL_LITERAL    reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    CHAR_LITERAL    reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    STRING_LITERAL  reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    NULL            reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    CASE            reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    DEFAULT         reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    ELSE            reduce using rule 145 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)


state 386

    (146) SwitchBlock -> LBRACE . RBRACE
    (147) SwitchBlock -> LBRACE . SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE
    (148) SwitchBlock -> LBRACE . SwitchBlockStatementGroups RBRACE
    (149) SwitchBlock -> LBRACE . begin_scope SwitchLabels end_scope RBRACE
    (150) SwitchBlockStatementGroups -> . SwitchBlockStatementGroup
    (151) SwitchBlockStatementGroups -> . SwitchBlockStatementGroups SwitchBlockStatementGroup
    (299) begin_scope -> .
    (152) SwitchBlockStatementGroup -> . begin_scope SwitchLabels BlockStatements end_scope

    RBRACE          shift and go to state 401
    CASE            reduce using rule 299 (begin_scope -> .)
    DEFAULT         reduce using rule 299 (begin_scope -> .)

    SwitchBlockStatementGroups     shift and go to state 402
    begin_scope                    shift and go to state 403
    SwitchBlockStatementGroup      shift and go to state 404

state 387

    (162) DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement . WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2

    WHILE           shift and go to state 405


state 388

    (207) ArgumentList -> ArgumentList COMMA Expression .

    RPAREN          reduce using rule 207 (ArgumentList -> ArgumentList COMMA Expression .)
    COMMA           reduce using rule 207 (ArgumentList -> ArgumentList COMMA Expression .)


state 389

    (218) MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList . RPAREN
    (207) ArgumentList -> ArgumentList . COMMA Expression

    RPAREN          shift and go to state 406
    COMMA           shift and go to state 358


state 390

    (220) MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .

    SEMI            reduce using rule 220 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    LBRACK          reduce using rule 220 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    DOT             reduce using rule 220 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    INC             reduce using rule 220 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    DEC             reduce using rule 220 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    MUL             reduce using rule 220 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    DIV             reduce using rule 220 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    MOD             reduce using rule 220 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    ADD             reduce using rule 220 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    SUB             reduce using rule 220 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    LSHIFT          reduce using rule 220 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    RSHIFT          reduce using rule 220 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    URSHIFT         reduce using rule 220 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    LT              reduce using rule 220 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    GT              reduce using rule 220 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    LE              reduce using rule 220 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    GE              reduce using rule 220 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    EQUAL           reduce using rule 220 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    NOTEQUAL        reduce using rule 220 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    BITAND          reduce using rule 220 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    CARET           reduce using rule 220 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    BITOR           reduce using rule 220 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    AND             reduce using rule 220 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    QUESTION        reduce using rule 220 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    OR              reduce using rule 220 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    RPAREN          reduce using rule 220 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    COMMA           reduce using rule 220 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    RBRACK          reduce using rule 220 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    COLON           reduce using rule 220 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)


state 391

    (205) ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .

    SEMI            reduce using rule 205 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    LBRACK          reduce using rule 205 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    DOT             reduce using rule 205 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    INC             reduce using rule 205 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    DEC             reduce using rule 205 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    MUL             reduce using rule 205 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    DIV             reduce using rule 205 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    MOD             reduce using rule 205 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    ADD             reduce using rule 205 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    SUB             reduce using rule 205 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    LSHIFT          reduce using rule 205 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    RSHIFT          reduce using rule 205 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    URSHIFT         reduce using rule 205 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    LT              reduce using rule 205 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    GT              reduce using rule 205 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    LE              reduce using rule 205 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    GE              reduce using rule 205 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    EQUAL           reduce using rule 205 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    NOTEQUAL        reduce using rule 205 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    BITAND          reduce using rule 205 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    CARET           reduce using rule 205 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    BITOR           reduce using rule 205 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    AND             reduce using rule 205 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    QUESTION        reduce using rule 205 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    OR              reduce using rule 205 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    RPAREN          reduce using rule 205 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    COMMA           reduce using rule 205 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    RBRACK          reduce using rule 205 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    COLON           reduce using rule 205 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)


state 392

    (214) DimExpr -> LBRACK Expression RBRACK .

    LBRACK          reduce using rule 214 (DimExpr -> LBRACK Expression RBRACK .)
    DOT             reduce using rule 214 (DimExpr -> LBRACK Expression RBRACK .)
    INC             reduce using rule 214 (DimExpr -> LBRACK Expression RBRACK .)
    DEC             reduce using rule 214 (DimExpr -> LBRACK Expression RBRACK .)
    MUL             reduce using rule 214 (DimExpr -> LBRACK Expression RBRACK .)
    DIV             reduce using rule 214 (DimExpr -> LBRACK Expression RBRACK .)
    MOD             reduce using rule 214 (DimExpr -> LBRACK Expression RBRACK .)
    ADD             reduce using rule 214 (DimExpr -> LBRACK Expression RBRACK .)
    SUB             reduce using rule 214 (DimExpr -> LBRACK Expression RBRACK .)
    LSHIFT          reduce using rule 214 (DimExpr -> LBRACK Expression RBRACK .)
    RSHIFT          reduce using rule 214 (DimExpr -> LBRACK Expression RBRACK .)
    URSHIFT         reduce using rule 214 (DimExpr -> LBRACK Expression RBRACK .)
    LT              reduce using rule 214 (DimExpr -> LBRACK Expression RBRACK .)
    GT              reduce using rule 214 (DimExpr -> LBRACK Expression RBRACK .)
    LE              reduce using rule 214 (DimExpr -> LBRACK Expression RBRACK .)
    GE              reduce using rule 214 (DimExpr -> LBRACK Expression RBRACK .)
    EQUAL           reduce using rule 214 (DimExpr -> LBRACK Expression RBRACK .)
    NOTEQUAL        reduce using rule 214 (DimExpr -> LBRACK Expression RBRACK .)
    BITAND          reduce using rule 214 (DimExpr -> LBRACK Expression RBRACK .)
    CARET           reduce using rule 214 (DimExpr -> LBRACK Expression RBRACK .)
    BITOR           reduce using rule 214 (DimExpr -> LBRACK Expression RBRACK .)
    AND             reduce using rule 214 (DimExpr -> LBRACK Expression RBRACK .)
    QUESTION        reduce using rule 214 (DimExpr -> LBRACK Expression RBRACK .)
    OR              reduce using rule 214 (DimExpr -> LBRACK Expression RBRACK .)
    RPAREN          reduce using rule 214 (DimExpr -> LBRACK Expression RBRACK .)
    SEMI            reduce using rule 214 (DimExpr -> LBRACK Expression RBRACK .)
    COMMA           reduce using rule 214 (DimExpr -> LBRACK Expression RBRACK .)
    RBRACK          reduce using rule 214 (DimExpr -> LBRACK Expression RBRACK .)
    COLON           reduce using rule 214 (DimExpr -> LBRACK Expression RBRACK .)


state 393

    (139) IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 . Statement ifMark1 end_scope
    (143) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 . StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (115) StatementNoShortIf -> . StatementWithoutTrailingSubstatement
    (116) StatementNoShortIf -> . LabeledStatementNoShortIf
    (117) StatementNoShortIf -> . IfThenElseStatementNoShortIf
    (118) StatementNoShortIf -> . WhileStatementNoShortIf
    (119) StatementNoShortIf -> . ForStatementNoShortIf
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (130) LabeledStatementNoShortIf -> . IDENTIFIER COLON StatementNoShortIf
    (144) IfThenElseStatementNoShortIf -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (158) WhileStatementNoShortIf -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (173) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (174) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (175) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 415
    IF              shift and go to state 407
    WHILE           shift and go to state 416
    FOR             shift and go to state 417
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    Statement                      shift and go to state 408
    StatementNoShortIf             shift and go to state 409
    StatementWithoutTrailingSubstatement shift and go to state 410
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    LabeledStatementNoShortIf      shift and go to state 411
    IfThenElseStatementNoShortIf   shift and go to state 412
    WhileStatementNoShortIf        shift and go to state 413
    ForStatementNoShortIf          shift and go to state 414
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    StatementExpression            shift and go to state 131
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 394

    (241) CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .

    MUL             reduce using rule 241 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    DIV             reduce using rule 241 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    MOD             reduce using rule 241 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    ADD             reduce using rule 241 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    SUB             reduce using rule 241 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    LSHIFT          reduce using rule 241 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    RSHIFT          reduce using rule 241 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    URSHIFT         reduce using rule 241 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    LT              reduce using rule 241 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    GT              reduce using rule 241 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    LE              reduce using rule 241 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    GE              reduce using rule 241 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    EQUAL           reduce using rule 241 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    NOTEQUAL        reduce using rule 241 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    BITAND          reduce using rule 241 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    CARET           reduce using rule 241 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    BITOR           reduce using rule 241 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    AND             reduce using rule 241 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    QUESTION        reduce using rule 241 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    OR              reduce using rule 241 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    RPAREN          reduce using rule 241 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    SEMI            reduce using rule 241 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    COMMA           reduce using rule 241 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    RBRACK          reduce using rule 241 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    COLON           reduce using rule 241 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)


state 395

    (244) CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .

    MUL             reduce using rule 244 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    DIV             reduce using rule 244 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    MOD             reduce using rule 244 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    ADD             reduce using rule 244 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    SUB             reduce using rule 244 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    LSHIFT          reduce using rule 244 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    RSHIFT          reduce using rule 244 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    URSHIFT         reduce using rule 244 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    LT              reduce using rule 244 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    GT              reduce using rule 244 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    LE              reduce using rule 244 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    GE              reduce using rule 244 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    EQUAL           reduce using rule 244 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    NOTEQUAL        reduce using rule 244 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    BITAND          reduce using rule 244 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    CARET           reduce using rule 244 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    BITOR           reduce using rule 244 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    AND             reduce using rule 244 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    QUESTION        reduce using rule 244 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    OR              reduce using rule 244 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    RPAREN          reduce using rule 244 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    SEMI            reduce using rule 244 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    COMMA           reduce using rule 244 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    RBRACK          reduce using rule 244 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    COLON           reduce using rule 244 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)


state 396

    (276) ConditionalExpression -> ConditionalOrExpression QUESTION Expression COLON ConditionalExpression .

    RPAREN          reduce using rule 276 (ConditionalExpression -> ConditionalOrExpression QUESTION Expression COLON ConditionalExpression .)
    SEMI            reduce using rule 276 (ConditionalExpression -> ConditionalOrExpression QUESTION Expression COLON ConditionalExpression .)
    COMMA           reduce using rule 276 (ConditionalExpression -> ConditionalOrExpression QUESTION Expression COLON ConditionalExpression .)
    RBRACK          reduce using rule 276 (ConditionalExpression -> ConditionalOrExpression QUESTION Expression COLON ConditionalExpression .)
    COLON           reduce using rule 276 (ConditionalExpression -> ConditionalOrExpression QUESTION Expression COLON ConditionalExpression .)


state 397

    (157) WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression . RPAREN while_l1 Statement end_scope while_l2

    RPAREN          shift and go to state 418


state 398

    (165) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI . for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI . for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI . for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI . for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (181) for_l1 -> .

    SEMI            reduce using rule 181 (for_l1 -> .)
    IDENTIFIER      reduce using rule 181 (for_l1 -> .)
    THIS            reduce using rule 181 (for_l1 -> .)
    LPAREN          reduce using rule 181 (for_l1 -> .)
    NEW             reduce using rule 181 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 181 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 181 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 181 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 181 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 181 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 181 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 181 (for_l1 -> .)
    NULL            reduce using rule 181 (for_l1 -> .)
    ADD             reduce using rule 181 (for_l1 -> .)
    SUB             reduce using rule 181 (for_l1 -> .)
    INC             reduce using rule 181 (for_l1 -> .)
    DEC             reduce using rule 181 (for_l1 -> .)
    BANG            reduce using rule 181 (for_l1 -> .)
    TILDE           reduce using rule 181 (for_l1 -> .)

    for_l1                         shift and go to state 419

state 399

    (166) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 . Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 . Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 . SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 . SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (295) Expression -> . AssignmentExpression
    (277) AssignmentExpression -> . ConditionalExpression
    (278) AssignmentExpression -> . Assignment
    (275) ConditionalExpression -> . ConditionalOrExpression
    (276) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (272) ConditionalOrExpression -> . ConditionalAndExpression
    (273) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (270) ConditionalAndExpression -> . InclusiveOrExpression
    (271) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC

    SEMI            shift and go to state 420
    IDENTIFIER      shift and go to state 61
    THIS            shift and go to state 157
    LPAREN          shift and go to state 188
    NEW             shift and go to state 203
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165
    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217

    Expression                     shift and go to state 421
    AssignmentExpression           shift and go to state 190
    ConditionalExpression          shift and go to state 191
    Assignment                     shift and go to state 192
    ConditionalOrExpression        shift and go to state 193
    LeftHandSide                   shift and go to state 145
    ConditionalAndExpression       shift and go to state 194
    Name                           shift and go to state 195
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    InclusiveOrExpression          shift and go to state 196
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Primary                        shift and go to state 197
    PrimaryNoNewArray              shift and go to state 198
    ExclusiveOrExpression          shift and go to state 199
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    MethodInvocation               shift and go to state 201
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220

state 400

    (188) StatementExpressionList -> StatementExpressionList COMMA . StatementExpression
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    StatementExpression            shift and go to state 422
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 401

    (146) SwitchBlock -> LBRACE RBRACE .

    RBRACE          reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    IF              reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    WHILE           reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    FOR             reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    LBRACE          reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    SEMI            reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    SWITCH          reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    DO              reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    BREAK           reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    CONTINUE        reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    RETURN          reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    BOOLEAN         reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    INC             reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    DEC             reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    NEW             reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    BYTE            reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    SHORT           reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    INT             reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    LONG            reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    CHAR            reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    FLOAT           reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    DOUBLE          reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    THIS            reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    LPAREN          reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    DECIMAL_LITERAL reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    HEX_LITERAL     reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    BINARY_LITERAL  reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    FLOAT_LITERAL   reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    BOOL_LITERAL    reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    CHAR_LITERAL    reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    STRING_LITERAL  reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    NULL            reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    CASE            reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)
    ELSE            reduce using rule 146 (SwitchBlock -> LBRACE RBRACE .)


state 402

    (147) SwitchBlock -> LBRACE SwitchBlockStatementGroups . begin_scope SwitchLabels end_scope RBRACE
    (148) SwitchBlock -> LBRACE SwitchBlockStatementGroups . RBRACE
    (151) SwitchBlockStatementGroups -> SwitchBlockStatementGroups . SwitchBlockStatementGroup
    (299) begin_scope -> .
    (152) SwitchBlockStatementGroup -> . begin_scope SwitchLabels BlockStatements end_scope

    RBRACE          shift and go to state 424
    CASE            reduce using rule 299 (begin_scope -> .)
    DEFAULT         reduce using rule 299 (begin_scope -> .)

    begin_scope                    shift and go to state 423
    SwitchBlockStatementGroup      shift and go to state 425

state 403

    (149) SwitchBlock -> LBRACE begin_scope . SwitchLabels end_scope RBRACE
    (152) SwitchBlockStatementGroup -> begin_scope . SwitchLabels BlockStatements end_scope
    (153) SwitchLabels -> . SwitchLabel
    (154) SwitchLabels -> . SwitchLabels SwitchLabel
    (155) SwitchLabel -> . CASE ConstantExpression COLON
    (156) SwitchLabel -> . DEFAULT COLON

    CASE            shift and go to state 428
    DEFAULT         shift and go to state 429

    SwitchLabels                   shift and go to state 426
    SwitchLabel                    shift and go to state 427

state 404

    (150) SwitchBlockStatementGroups -> SwitchBlockStatementGroup .

    RBRACE          reduce using rule 150 (SwitchBlockStatementGroups -> SwitchBlockStatementGroup .)
    CASE            reduce using rule 150 (SwitchBlockStatementGroups -> SwitchBlockStatementGroup .)
    DEFAULT         reduce using rule 150 (SwitchBlockStatementGroups -> SwitchBlockStatementGroup .)


state 405

    (162) DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE . LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2

    LPAREN          shift and go to state 430


state 406

    (218) MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .

    SEMI            reduce using rule 218 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    LBRACK          reduce using rule 218 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    DOT             reduce using rule 218 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    INC             reduce using rule 218 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    DEC             reduce using rule 218 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    MUL             reduce using rule 218 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    DIV             reduce using rule 218 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    MOD             reduce using rule 218 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    ADD             reduce using rule 218 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    SUB             reduce using rule 218 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    LSHIFT          reduce using rule 218 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    RSHIFT          reduce using rule 218 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    URSHIFT         reduce using rule 218 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    LT              reduce using rule 218 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    GT              reduce using rule 218 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    LE              reduce using rule 218 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    GE              reduce using rule 218 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    EQUAL           reduce using rule 218 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    NOTEQUAL        reduce using rule 218 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    BITAND          reduce using rule 218 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    CARET           reduce using rule 218 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    BITOR           reduce using rule 218 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    AND             reduce using rule 218 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    QUESTION        reduce using rule 218 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    OR              reduce using rule 218 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    RPAREN          reduce using rule 218 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    COMMA           reduce using rule 218 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    RBRACK          reduce using rule 218 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    COLON           reduce using rule 218 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)


state 407

    (139) IfThenStatement -> IF . begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> IF . begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (144) IfThenElseStatementNoShortIf -> IF . begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (299) begin_scope -> .

    LPAREN          reduce using rule 299 (begin_scope -> .)

    begin_scope                    shift and go to state 431

state 408

    (139) IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement . ifMark1 end_scope
    (140) ifMark1 -> .

    RBRACE          reduce using rule 140 (ifMark1 -> .)
    IDENTIFIER      reduce using rule 140 (ifMark1 -> .)
    IF              reduce using rule 140 (ifMark1 -> .)
    WHILE           reduce using rule 140 (ifMark1 -> .)
    FOR             reduce using rule 140 (ifMark1 -> .)
    LBRACE          reduce using rule 140 (ifMark1 -> .)
    SEMI            reduce using rule 140 (ifMark1 -> .)
    SWITCH          reduce using rule 140 (ifMark1 -> .)
    DO              reduce using rule 140 (ifMark1 -> .)
    BREAK           reduce using rule 140 (ifMark1 -> .)
    CONTINUE        reduce using rule 140 (ifMark1 -> .)
    RETURN          reduce using rule 140 (ifMark1 -> .)
    BOOLEAN         reduce using rule 140 (ifMark1 -> .)
    INC             reduce using rule 140 (ifMark1 -> .)
    DEC             reduce using rule 140 (ifMark1 -> .)
    NEW             reduce using rule 140 (ifMark1 -> .)
    BYTE            reduce using rule 140 (ifMark1 -> .)
    SHORT           reduce using rule 140 (ifMark1 -> .)
    INT             reduce using rule 140 (ifMark1 -> .)
    LONG            reduce using rule 140 (ifMark1 -> .)
    CHAR            reduce using rule 140 (ifMark1 -> .)
    FLOAT           reduce using rule 140 (ifMark1 -> .)
    DOUBLE          reduce using rule 140 (ifMark1 -> .)
    THIS            reduce using rule 140 (ifMark1 -> .)
    LPAREN          reduce using rule 140 (ifMark1 -> .)
    DECIMAL_LITERAL reduce using rule 140 (ifMark1 -> .)
    HEX_LITERAL     reduce using rule 140 (ifMark1 -> .)
    BINARY_LITERAL  reduce using rule 140 (ifMark1 -> .)
    FLOAT_LITERAL   reduce using rule 140 (ifMark1 -> .)
    BOOL_LITERAL    reduce using rule 140 (ifMark1 -> .)
    CHAR_LITERAL    reduce using rule 140 (ifMark1 -> .)
    STRING_LITERAL  reduce using rule 140 (ifMark1 -> .)
    NULL            reduce using rule 140 (ifMark1 -> .)
    CASE            reduce using rule 140 (ifMark1 -> .)
    DEFAULT         reduce using rule 140 (ifMark1 -> .)

    ifMark1                        shift and go to state 432

state 409

    (143) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf . end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (300) end_scope -> .

    ELSE            reduce using rule 300 (end_scope -> .)

    end_scope                      shift and go to state 433

state 410

    (109) Statement -> StatementWithoutTrailingSubstatement .
    (115) StatementNoShortIf -> StatementWithoutTrailingSubstatement .

    RBRACE          reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    IDENTIFIER      reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    IF              reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    WHILE           reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    FOR             reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    LBRACE          reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    SEMI            reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    SWITCH          reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    DO              reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    BREAK           reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    CONTINUE        reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    RETURN          reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    BOOLEAN         reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    INC             reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    DEC             reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    NEW             reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    BYTE            reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    SHORT           reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    INT             reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    LONG            reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    CHAR            reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    FLOAT           reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    DOUBLE          reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    THIS            reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    LPAREN          reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    DECIMAL_LITERAL reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    HEX_LITERAL     reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    BINARY_LITERAL  reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    FLOAT_LITERAL   reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    BOOL_LITERAL    reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    CHAR_LITERAL    reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    STRING_LITERAL  reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    NULL            reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    CASE            reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    DEFAULT         reduce using rule 109 (Statement -> StatementWithoutTrailingSubstatement .)
    ELSE            reduce using rule 115 (StatementNoShortIf -> StatementWithoutTrailingSubstatement .)


state 411

    (116) StatementNoShortIf -> LabeledStatementNoShortIf .

    ELSE            reduce using rule 116 (StatementNoShortIf -> LabeledStatementNoShortIf .)


state 412

    (117) StatementNoShortIf -> IfThenElseStatementNoShortIf .

    ELSE            reduce using rule 117 (StatementNoShortIf -> IfThenElseStatementNoShortIf .)


state 413

    (118) StatementNoShortIf -> WhileStatementNoShortIf .

    ELSE            reduce using rule 118 (StatementNoShortIf -> WhileStatementNoShortIf .)


state 414

    (119) StatementNoShortIf -> ForStatementNoShortIf .

    ELSE            reduce using rule 119 (StatementNoShortIf -> ForStatementNoShortIf .)


state 415

    (129) LabeledStatement -> IDENTIFIER . COLON Statement
    (130) LabeledStatementNoShortIf -> IDENTIFIER . COLON StatementNoShortIf
    (30) SimpleName -> IDENTIFIER .

    COLON           shift and go to state 434
    LPAREN          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    LBRACK          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    DOT             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    ASSIGN          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 30 (SimpleName -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 30 (SimpleName -> IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 30 (SimpleName -> IDENTIFIER .)
    URSHIFT_ASSIGN  reduce using rule 30 (SimpleName -> IDENTIFIER .)
    INC             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    DEC             reduce using rule 30 (SimpleName -> IDENTIFIER .)


state 416

    (157) WhileStatement -> WHILE . prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (158) WhileStatementNoShortIf -> WHILE . prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (159) prep_fw_stack -> .

    LPAREN          reduce using rule 159 (prep_fw_stack -> .)

    prep_fw_stack                  shift and go to state 435

state 417

    (165) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatementNoShortIf -> FOR . prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (174) ForStatementNoShortIf -> FOR . prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (175) ForStatementNoShortIf -> FOR . prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> FOR . prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> FOR . prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> FOR . prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> FOR . prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> FOR . prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (159) prep_fw_stack -> .

    LPAREN          reduce using rule 159 (prep_fw_stack -> .)

    prep_fw_stack                  shift and go to state 436

state 418

    (157) WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN . while_l1 Statement end_scope while_l2
    (160) while_l1 -> .

    IDENTIFIER      reduce using rule 160 (while_l1 -> .)
    IF              reduce using rule 160 (while_l1 -> .)
    WHILE           reduce using rule 160 (while_l1 -> .)
    FOR             reduce using rule 160 (while_l1 -> .)
    LBRACE          reduce using rule 160 (while_l1 -> .)
    SEMI            reduce using rule 160 (while_l1 -> .)
    SWITCH          reduce using rule 160 (while_l1 -> .)
    DO              reduce using rule 160 (while_l1 -> .)
    BREAK           reduce using rule 160 (while_l1 -> .)
    CONTINUE        reduce using rule 160 (while_l1 -> .)
    RETURN          reduce using rule 160 (while_l1 -> .)
    INC             reduce using rule 160 (while_l1 -> .)
    DEC             reduce using rule 160 (while_l1 -> .)
    NEW             reduce using rule 160 (while_l1 -> .)
    THIS            reduce using rule 160 (while_l1 -> .)
    LPAREN          reduce using rule 160 (while_l1 -> .)
    DECIMAL_LITERAL reduce using rule 160 (while_l1 -> .)
    HEX_LITERAL     reduce using rule 160 (while_l1 -> .)
    BINARY_LITERAL  reduce using rule 160 (while_l1 -> .)
    FLOAT_LITERAL   reduce using rule 160 (while_l1 -> .)
    BOOL_LITERAL    reduce using rule 160 (while_l1 -> .)
    CHAR_LITERAL    reduce using rule 160 (while_l1 -> .)
    STRING_LITERAL  reduce using rule 160 (while_l1 -> .)
    NULL            reduce using rule 160 (while_l1 -> .)

    while_l1                       shift and go to state 437

state 419

    (165) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 . Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 . SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 . Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 . SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (295) Expression -> . AssignmentExpression
    (277) AssignmentExpression -> . ConditionalExpression
    (278) AssignmentExpression -> . Assignment
    (275) ConditionalExpression -> . ConditionalOrExpression
    (276) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (272) ConditionalOrExpression -> . ConditionalAndExpression
    (273) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (270) ConditionalAndExpression -> . InclusiveOrExpression
    (271) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC

    SEMI            shift and go to state 438
    IDENTIFIER      shift and go to state 61
    THIS            shift and go to state 157
    LPAREN          shift and go to state 188
    NEW             shift and go to state 203
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165
    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217

    Expression                     shift and go to state 439
    AssignmentExpression           shift and go to state 190
    ConditionalExpression          shift and go to state 191
    Assignment                     shift and go to state 192
    ConditionalOrExpression        shift and go to state 193
    LeftHandSide                   shift and go to state 145
    ConditionalAndExpression       shift and go to state 194
    Name                           shift and go to state 195
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    InclusiveOrExpression          shift and go to state 196
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Primary                        shift and go to state 197
    PrimaryNoNewArray              shift and go to state 198
    ExclusiveOrExpression          shift and go to state 199
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    MethodInvocation               shift and go to state 201
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220

state 420

    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI . for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI . for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (181) for_l1 -> .

    INC             reduce using rule 181 (for_l1 -> .)
    DEC             reduce using rule 181 (for_l1 -> .)
    NEW             reduce using rule 181 (for_l1 -> .)
    THIS            reduce using rule 181 (for_l1 -> .)
    LPAREN          reduce using rule 181 (for_l1 -> .)
    IDENTIFIER      reduce using rule 181 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 181 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 181 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 181 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 181 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 181 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 181 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 181 (for_l1 -> .)
    NULL            reduce using rule 181 (for_l1 -> .)
    RPAREN          reduce using rule 181 (for_l1 -> .)

    for_l1                         shift and go to state 440

state 421

    (166) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression . SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression . SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2

    SEMI            shift and go to state 441


state 422

    (188) StatementExpressionList -> StatementExpressionList COMMA StatementExpression .

    COMMA           reduce using rule 188 (StatementExpressionList -> StatementExpressionList COMMA StatementExpression .)
    SEMI            reduce using rule 188 (StatementExpressionList -> StatementExpressionList COMMA StatementExpression .)
    RPAREN          reduce using rule 188 (StatementExpressionList -> StatementExpressionList COMMA StatementExpression .)


state 423

    (147) SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope . SwitchLabels end_scope RBRACE
    (152) SwitchBlockStatementGroup -> begin_scope . SwitchLabels BlockStatements end_scope
    (153) SwitchLabels -> . SwitchLabel
    (154) SwitchLabels -> . SwitchLabels SwitchLabel
    (155) SwitchLabel -> . CASE ConstantExpression COLON
    (156) SwitchLabel -> . DEFAULT COLON

    CASE            shift and go to state 428
    DEFAULT         shift and go to state 429

    SwitchLabels                   shift and go to state 442
    SwitchLabel                    shift and go to state 427

state 424

    (148) SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .

    RBRACE          reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    IDENTIFIER      reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    IF              reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    WHILE           reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    FOR             reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    LBRACE          reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    SEMI            reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    SWITCH          reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    DO              reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    BREAK           reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    CONTINUE        reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    RETURN          reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    BOOLEAN         reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    INC             reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    DEC             reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    NEW             reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    BYTE            reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    SHORT           reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    INT             reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    LONG            reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    CHAR            reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    FLOAT           reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    DOUBLE          reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    THIS            reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    LPAREN          reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    DECIMAL_LITERAL reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    HEX_LITERAL     reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    BINARY_LITERAL  reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    FLOAT_LITERAL   reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    BOOL_LITERAL    reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    CHAR_LITERAL    reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    STRING_LITERAL  reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    NULL            reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    CASE            reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    DEFAULT         reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    ELSE            reduce using rule 148 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)


state 425

    (151) SwitchBlockStatementGroups -> SwitchBlockStatementGroups SwitchBlockStatementGroup .

    RBRACE          reduce using rule 151 (SwitchBlockStatementGroups -> SwitchBlockStatementGroups SwitchBlockStatementGroup .)
    CASE            reduce using rule 151 (SwitchBlockStatementGroups -> SwitchBlockStatementGroups SwitchBlockStatementGroup .)
    DEFAULT         reduce using rule 151 (SwitchBlockStatementGroups -> SwitchBlockStatementGroups SwitchBlockStatementGroup .)


state 426

    (149) SwitchBlock -> LBRACE begin_scope SwitchLabels . end_scope RBRACE
    (152) SwitchBlockStatementGroup -> begin_scope SwitchLabels . BlockStatements end_scope
    (154) SwitchLabels -> SwitchLabels . SwitchLabel
    (300) end_scope -> .
    (103) BlockStatements -> . BlockStatement
    (104) BlockStatements -> . BlockStatements BlockStatement
    (155) SwitchLabel -> . CASE ConstantExpression COLON
    (156) SwitchLabel -> . DEFAULT COLON
    (105) BlockStatement -> . LocalVariableDeclarationStatement
    (106) BlockStatement -> . Statement
    (107) LocalVariableDeclarationStatement -> . LocalVariableDeclaration SEMI
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (108) LocalVariableDeclaration -> . Type VariableDeclarators
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RBRACE          reduce using rule 300 (end_scope -> .)
    CASE            shift and go to state 428
    DEFAULT         shift and go to state 429
    IDENTIFIER      shift and go to state 126
    IF              shift and go to state 127
    WHILE           shift and go to state 129
    FOR             shift and go to state 130
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    BOOLEAN         shift and go to state 63
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    BYTE            shift and go to state 69
    SHORT           shift and go to state 70
    INT             shift and go to state 71
    LONG            shift and go to state 72
    CHAR            shift and go to state 73
    FLOAT           shift and go to state 74
    DOUBLE          shift and go to state 75
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    end_scope                      shift and go to state 443
    BlockStatements                shift and go to state 444
    SwitchLabel                    shift and go to state 445
    BlockStatement                 shift and go to state 106
    LocalVariableDeclarationStatement shift and go to state 107
    Statement                      shift and go to state 108
    LocalVariableDeclaration       shift and go to state 109
    StatementWithoutTrailingSubstatement shift and go to state 111
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    Type                           shift and go to state 117
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    PrimitiveType                  shift and go to state 58
    ReferenceType                  shift and go to state 59
    StatementExpression            shift and go to state 131
    NumericType                    shift and go to state 62
    ArrayType                      shift and go to state 64
    ClassType                      shift and go to state 65
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    IntegralType                   shift and go to state 66
    FloatingPointType              shift and go to state 67
    Name                           shift and go to state 144
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156

state 427

    (153) SwitchLabels -> SwitchLabel .

    CASE            reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    DEFAULT         reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    IDENTIFIER      reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    IF              reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    WHILE           reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    FOR             reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    LBRACE          reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    SEMI            reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    SWITCH          reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    DO              reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    BREAK           reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    CONTINUE        reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    RETURN          reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    BOOLEAN         reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    INC             reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    DEC             reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    NEW             reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    BYTE            reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    SHORT           reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    INT             reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    LONG            reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    CHAR            reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    FLOAT           reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    DOUBLE          reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    THIS            reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    LPAREN          reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    DECIMAL_LITERAL reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    HEX_LITERAL     reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    BINARY_LITERAL  reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    FLOAT_LITERAL   reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    BOOL_LITERAL    reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    CHAR_LITERAL    reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    STRING_LITERAL  reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    NULL            reduce using rule 153 (SwitchLabels -> SwitchLabel .)
    RBRACE          reduce using rule 153 (SwitchLabels -> SwitchLabel .)


state 428

    (155) SwitchLabel -> CASE . ConstantExpression COLON
    (296) ConstantExpression -> . Expression
    (295) Expression -> . AssignmentExpression
    (277) AssignmentExpression -> . ConditionalExpression
    (278) AssignmentExpression -> . Assignment
    (275) ConditionalExpression -> . ConditionalOrExpression
    (276) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (272) ConditionalOrExpression -> . ConditionalAndExpression
    (273) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (270) ConditionalAndExpression -> . InclusiveOrExpression
    (271) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC

    IDENTIFIER      shift and go to state 61
    THIS            shift and go to state 157
    LPAREN          shift and go to state 188
    NEW             shift and go to state 203
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165
    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217

    ConstantExpression             shift and go to state 446
    Expression                     shift and go to state 447
    AssignmentExpression           shift and go to state 190
    ConditionalExpression          shift and go to state 191
    Assignment                     shift and go to state 192
    ConditionalOrExpression        shift and go to state 193
    LeftHandSide                   shift and go to state 145
    ConditionalAndExpression       shift and go to state 194
    Name                           shift and go to state 195
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    InclusiveOrExpression          shift and go to state 196
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Primary                        shift and go to state 197
    PrimaryNoNewArray              shift and go to state 198
    ExclusiveOrExpression          shift and go to state 199
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    MethodInvocation               shift and go to state 201
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220

state 429

    (156) SwitchLabel -> DEFAULT . COLON

    COLON           shift and go to state 448


state 430

    (162) DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN . dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (163) dwhile_l1 -> .

    IDENTIFIER      reduce using rule 163 (dwhile_l1 -> .)
    THIS            reduce using rule 163 (dwhile_l1 -> .)
    LPAREN          reduce using rule 163 (dwhile_l1 -> .)
    NEW             reduce using rule 163 (dwhile_l1 -> .)
    DECIMAL_LITERAL reduce using rule 163 (dwhile_l1 -> .)
    HEX_LITERAL     reduce using rule 163 (dwhile_l1 -> .)
    BINARY_LITERAL  reduce using rule 163 (dwhile_l1 -> .)
    FLOAT_LITERAL   reduce using rule 163 (dwhile_l1 -> .)
    BOOL_LITERAL    reduce using rule 163 (dwhile_l1 -> .)
    CHAR_LITERAL    reduce using rule 163 (dwhile_l1 -> .)
    STRING_LITERAL  reduce using rule 163 (dwhile_l1 -> .)
    NULL            reduce using rule 163 (dwhile_l1 -> .)
    ADD             reduce using rule 163 (dwhile_l1 -> .)
    SUB             reduce using rule 163 (dwhile_l1 -> .)
    INC             reduce using rule 163 (dwhile_l1 -> .)
    DEC             reduce using rule 163 (dwhile_l1 -> .)
    BANG            reduce using rule 163 (dwhile_l1 -> .)
    TILDE           reduce using rule 163 (dwhile_l1 -> .)

    dwhile_l1                      shift and go to state 449

state 431

    (139) IfThenStatement -> IF begin_scope . LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> IF begin_scope . LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (144) IfThenElseStatementNoShortIf -> IF begin_scope . LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2

    LPAREN          shift and go to state 450


state 432

    (139) IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 . end_scope
    (300) end_scope -> .

    RBRACE          reduce using rule 300 (end_scope -> .)
    IDENTIFIER      reduce using rule 300 (end_scope -> .)
    IF              reduce using rule 300 (end_scope -> .)
    WHILE           reduce using rule 300 (end_scope -> .)
    FOR             reduce using rule 300 (end_scope -> .)
    LBRACE          reduce using rule 300 (end_scope -> .)
    SEMI            reduce using rule 300 (end_scope -> .)
    SWITCH          reduce using rule 300 (end_scope -> .)
    DO              reduce using rule 300 (end_scope -> .)
    BREAK           reduce using rule 300 (end_scope -> .)
    CONTINUE        reduce using rule 300 (end_scope -> .)
    RETURN          reduce using rule 300 (end_scope -> .)
    BOOLEAN         reduce using rule 300 (end_scope -> .)
    INC             reduce using rule 300 (end_scope -> .)
    DEC             reduce using rule 300 (end_scope -> .)
    NEW             reduce using rule 300 (end_scope -> .)
    BYTE            reduce using rule 300 (end_scope -> .)
    SHORT           reduce using rule 300 (end_scope -> .)
    INT             reduce using rule 300 (end_scope -> .)
    LONG            reduce using rule 300 (end_scope -> .)
    CHAR            reduce using rule 300 (end_scope -> .)
    FLOAT           reduce using rule 300 (end_scope -> .)
    DOUBLE          reduce using rule 300 (end_scope -> .)
    THIS            reduce using rule 300 (end_scope -> .)
    LPAREN          reduce using rule 300 (end_scope -> .)
    DECIMAL_LITERAL reduce using rule 300 (end_scope -> .)
    HEX_LITERAL     reduce using rule 300 (end_scope -> .)
    BINARY_LITERAL  reduce using rule 300 (end_scope -> .)
    FLOAT_LITERAL   reduce using rule 300 (end_scope -> .)
    BOOL_LITERAL    reduce using rule 300 (end_scope -> .)
    CHAR_LITERAL    reduce using rule 300 (end_scope -> .)
    STRING_LITERAL  reduce using rule 300 (end_scope -> .)
    NULL            reduce using rule 300 (end_scope -> .)
    CASE            reduce using rule 300 (end_scope -> .)
    DEFAULT         reduce using rule 300 (end_scope -> .)

    end_scope                      shift and go to state 451

state 433

    (143) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope . ELSE ifMark3 begin_scope Statement end_scope ifMark2

    ELSE            shift and go to state 452


state 434

    (129) LabeledStatement -> IDENTIFIER COLON . Statement
    (130) LabeledStatementNoShortIf -> IDENTIFIER COLON . StatementNoShortIf
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (115) StatementNoShortIf -> . StatementWithoutTrailingSubstatement
    (116) StatementNoShortIf -> . LabeledStatementNoShortIf
    (117) StatementNoShortIf -> . IfThenElseStatementNoShortIf
    (118) StatementNoShortIf -> . WhileStatementNoShortIf
    (119) StatementNoShortIf -> . ForStatementNoShortIf
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (130) LabeledStatementNoShortIf -> . IDENTIFIER COLON StatementNoShortIf
    (144) IfThenElseStatementNoShortIf -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (158) WhileStatementNoShortIf -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (173) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (174) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (175) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 415
    IF              shift and go to state 407
    WHILE           shift and go to state 416
    FOR             shift and go to state 417
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    Statement                      shift and go to state 271
    StatementNoShortIf             shift and go to state 453
    StatementWithoutTrailingSubstatement shift and go to state 410
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    LabeledStatementNoShortIf      shift and go to state 411
    IfThenElseStatementNoShortIf   shift and go to state 412
    WhileStatementNoShortIf        shift and go to state 413
    ForStatementNoShortIf          shift and go to state 414
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    StatementExpression            shift and go to state 131
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 435

    (157) WhileStatement -> WHILE prep_fw_stack . LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (158) WhileStatementNoShortIf -> WHILE prep_fw_stack . LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2

    LPAREN          shift and go to state 454


state 436

    (165) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatementNoShortIf -> FOR prep_fw_stack . LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (174) ForStatementNoShortIf -> FOR prep_fw_stack . LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (175) ForStatementNoShortIf -> FOR prep_fw_stack . LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> FOR prep_fw_stack . LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> FOR prep_fw_stack . LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> FOR prep_fw_stack . LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> FOR prep_fw_stack . LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> FOR prep_fw_stack . LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2

    LPAREN          shift and go to state 455


state 437

    (157) WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 . Statement end_scope while_l2
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 126
    IF              shift and go to state 127
    WHILE           shift and go to state 129
    FOR             shift and go to state 130
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    Statement                      shift and go to state 456
    StatementWithoutTrailingSubstatement shift and go to state 111
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    StatementExpression            shift and go to state 131
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 438

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI . for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI . for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (181) for_l1 -> .

    INC             reduce using rule 181 (for_l1 -> .)
    DEC             reduce using rule 181 (for_l1 -> .)
    NEW             reduce using rule 181 (for_l1 -> .)
    THIS            reduce using rule 181 (for_l1 -> .)
    LPAREN          reduce using rule 181 (for_l1 -> .)
    IDENTIFIER      reduce using rule 181 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 181 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 181 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 181 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 181 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 181 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 181 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 181 (for_l1 -> .)
    NULL            reduce using rule 181 (for_l1 -> .)
    RPAREN          reduce using rule 181 (for_l1 -> .)

    for_l1                         shift and go to state 457

state 439

    (165) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression . SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression . SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2

    SEMI            shift and go to state 458


state 440

    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 . ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (186) ForUpdate -> . StatementExpressionList
    (183) for_l3 -> .
    (187) StatementExpressionList -> . StatementExpression
    (188) StatementExpressionList -> . StatementExpressionList COMMA StatementExpression
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RPAREN          reduce using rule 183 (for_l3 -> .)
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    ForUpdate                      shift and go to state 459
    for_l3                         shift and go to state 460
    StatementExpressionList        shift and go to state 461
    StatementExpression            shift and go to state 383
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 441

    (166) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI . for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI . for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (181) for_l1 -> .

    INC             reduce using rule 181 (for_l1 -> .)
    DEC             reduce using rule 181 (for_l1 -> .)
    NEW             reduce using rule 181 (for_l1 -> .)
    THIS            reduce using rule 181 (for_l1 -> .)
    LPAREN          reduce using rule 181 (for_l1 -> .)
    IDENTIFIER      reduce using rule 181 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 181 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 181 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 181 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 181 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 181 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 181 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 181 (for_l1 -> .)
    NULL            reduce using rule 181 (for_l1 -> .)
    RPAREN          reduce using rule 181 (for_l1 -> .)

    for_l1                         shift and go to state 462

state 442

    (147) SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels . end_scope RBRACE
    (152) SwitchBlockStatementGroup -> begin_scope SwitchLabels . BlockStatements end_scope
    (154) SwitchLabels -> SwitchLabels . SwitchLabel
    (300) end_scope -> .
    (103) BlockStatements -> . BlockStatement
    (104) BlockStatements -> . BlockStatements BlockStatement
    (155) SwitchLabel -> . CASE ConstantExpression COLON
    (156) SwitchLabel -> . DEFAULT COLON
    (105) BlockStatement -> . LocalVariableDeclarationStatement
    (106) BlockStatement -> . Statement
    (107) LocalVariableDeclarationStatement -> . LocalVariableDeclaration SEMI
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (108) LocalVariableDeclaration -> . Type VariableDeclarators
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RBRACE          reduce using rule 300 (end_scope -> .)
    CASE            shift and go to state 428
    DEFAULT         shift and go to state 429
    IDENTIFIER      shift and go to state 126
    IF              shift and go to state 127
    WHILE           shift and go to state 129
    FOR             shift and go to state 130
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    BOOLEAN         shift and go to state 63
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    BYTE            shift and go to state 69
    SHORT           shift and go to state 70
    INT             shift and go to state 71
    LONG            shift and go to state 72
    CHAR            shift and go to state 73
    FLOAT           shift and go to state 74
    DOUBLE          shift and go to state 75
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    end_scope                      shift and go to state 463
    BlockStatements                shift and go to state 444
    SwitchLabel                    shift and go to state 445
    BlockStatement                 shift and go to state 106
    LocalVariableDeclarationStatement shift and go to state 107
    Statement                      shift and go to state 108
    LocalVariableDeclaration       shift and go to state 109
    StatementWithoutTrailingSubstatement shift and go to state 111
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    Type                           shift and go to state 117
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    PrimitiveType                  shift and go to state 58
    ReferenceType                  shift and go to state 59
    StatementExpression            shift and go to state 131
    NumericType                    shift and go to state 62
    ArrayType                      shift and go to state 64
    ClassType                      shift and go to state 65
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    IntegralType                   shift and go to state 66
    FloatingPointType              shift and go to state 67
    Name                           shift and go to state 144
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156

state 443

    (149) SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope . RBRACE

    RBRACE          shift and go to state 464


state 444

    (152) SwitchBlockStatementGroup -> begin_scope SwitchLabels BlockStatements . end_scope
    (104) BlockStatements -> BlockStatements . BlockStatement
    (300) end_scope -> .
    (105) BlockStatement -> . LocalVariableDeclarationStatement
    (106) BlockStatement -> . Statement
    (107) LocalVariableDeclarationStatement -> . LocalVariableDeclaration SEMI
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (108) LocalVariableDeclaration -> . Type VariableDeclarators
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RBRACE          reduce using rule 300 (end_scope -> .)
    CASE            reduce using rule 300 (end_scope -> .)
    DEFAULT         reduce using rule 300 (end_scope -> .)
    IDENTIFIER      shift and go to state 126
    IF              shift and go to state 127
    WHILE           shift and go to state 129
    FOR             shift and go to state 130
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    BOOLEAN         shift and go to state 63
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    BYTE            shift and go to state 69
    SHORT           shift and go to state 70
    INT             shift and go to state 71
    LONG            shift and go to state 72
    CHAR            shift and go to state 73
    FLOAT           shift and go to state 74
    DOUBLE          shift and go to state 75
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    end_scope                      shift and go to state 465
    BlockStatement                 shift and go to state 182
    LocalVariableDeclarationStatement shift and go to state 107
    Statement                      shift and go to state 108
    LocalVariableDeclaration       shift and go to state 109
    StatementWithoutTrailingSubstatement shift and go to state 111
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    Type                           shift and go to state 117
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    PrimitiveType                  shift and go to state 58
    ReferenceType                  shift and go to state 59
    StatementExpression            shift and go to state 131
    NumericType                    shift and go to state 62
    ArrayType                      shift and go to state 64
    ClassType                      shift and go to state 65
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    IntegralType                   shift and go to state 66
    FloatingPointType              shift and go to state 67
    Name                           shift and go to state 144
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156

state 445

    (154) SwitchLabels -> SwitchLabels SwitchLabel .

    CASE            reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    DEFAULT         reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    IDENTIFIER      reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    IF              reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    WHILE           reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    FOR             reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    LBRACE          reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    SEMI            reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    SWITCH          reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    DO              reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    BREAK           reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    CONTINUE        reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    RETURN          reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    BOOLEAN         reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    INC             reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    DEC             reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    NEW             reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    BYTE            reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    SHORT           reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    INT             reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    LONG            reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    CHAR            reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    FLOAT           reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    DOUBLE          reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    THIS            reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    LPAREN          reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    DECIMAL_LITERAL reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    HEX_LITERAL     reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    BINARY_LITERAL  reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    FLOAT_LITERAL   reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    BOOL_LITERAL    reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    CHAR_LITERAL    reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    STRING_LITERAL  reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    NULL            reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)
    RBRACE          reduce using rule 154 (SwitchLabels -> SwitchLabels SwitchLabel .)


state 446

    (155) SwitchLabel -> CASE ConstantExpression . COLON

    COLON           shift and go to state 466


state 447

    (296) ConstantExpression -> Expression .

    COLON           reduce using rule 296 (ConstantExpression -> Expression .)


state 448

    (156) SwitchLabel -> DEFAULT COLON .

    CASE            reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    DEFAULT         reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    IDENTIFIER      reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    IF              reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    WHILE           reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    FOR             reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    LBRACE          reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    SEMI            reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    SWITCH          reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    DO              reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    BREAK           reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    CONTINUE        reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    RETURN          reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    BOOLEAN         reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    INC             reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    DEC             reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    NEW             reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    BYTE            reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    SHORT           reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    INT             reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    LONG            reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    CHAR            reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    FLOAT           reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    DOUBLE          reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    THIS            reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    LPAREN          reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    DECIMAL_LITERAL reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    HEX_LITERAL     reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    BINARY_LITERAL  reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    FLOAT_LITERAL   reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    BOOL_LITERAL    reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    CHAR_LITERAL    reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    STRING_LITERAL  reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    NULL            reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)
    RBRACE          reduce using rule 156 (SwitchLabel -> DEFAULT COLON .)


state 449

    (162) DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 . Expression RPAREN SEMI end_scope dwhile_l2
    (295) Expression -> . AssignmentExpression
    (277) AssignmentExpression -> . ConditionalExpression
    (278) AssignmentExpression -> . Assignment
    (275) ConditionalExpression -> . ConditionalOrExpression
    (276) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (272) ConditionalOrExpression -> . ConditionalAndExpression
    (273) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (270) ConditionalAndExpression -> . InclusiveOrExpression
    (271) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC

    IDENTIFIER      shift and go to state 61
    THIS            shift and go to state 157
    LPAREN          shift and go to state 188
    NEW             shift and go to state 203
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165
    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217

    Expression                     shift and go to state 467
    AssignmentExpression           shift and go to state 190
    ConditionalExpression          shift and go to state 191
    Assignment                     shift and go to state 192
    ConditionalOrExpression        shift and go to state 193
    LeftHandSide                   shift and go to state 145
    ConditionalAndExpression       shift and go to state 194
    Name                           shift and go to state 195
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    InclusiveOrExpression          shift and go to state 196
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Primary                        shift and go to state 197
    PrimaryNoNewArray              shift and go to state 198
    ExclusiveOrExpression          shift and go to state 199
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    MethodInvocation               shift and go to state 201
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220

state 450

    (139) IfThenStatement -> IF begin_scope LPAREN . Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> IF begin_scope LPAREN . Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (144) IfThenElseStatementNoShortIf -> IF begin_scope LPAREN . Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (295) Expression -> . AssignmentExpression
    (277) AssignmentExpression -> . ConditionalExpression
    (278) AssignmentExpression -> . Assignment
    (275) ConditionalExpression -> . ConditionalOrExpression
    (276) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (272) ConditionalOrExpression -> . ConditionalAndExpression
    (273) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (270) ConditionalAndExpression -> . InclusiveOrExpression
    (271) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC

    IDENTIFIER      shift and go to state 61
    THIS            shift and go to state 157
    LPAREN          shift and go to state 188
    NEW             shift and go to state 203
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165
    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217

    Expression                     shift and go to state 468
    AssignmentExpression           shift and go to state 190
    ConditionalExpression          shift and go to state 191
    Assignment                     shift and go to state 192
    ConditionalOrExpression        shift and go to state 193
    LeftHandSide                   shift and go to state 145
    ConditionalAndExpression       shift and go to state 194
    Name                           shift and go to state 195
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    InclusiveOrExpression          shift and go to state 196
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Primary                        shift and go to state 197
    PrimaryNoNewArray              shift and go to state 198
    ExclusiveOrExpression          shift and go to state 199
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    MethodInvocation               shift and go to state 201
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220

state 451

    (139) IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .

    RBRACE          reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    IDENTIFIER      reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    IF              reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    WHILE           reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    FOR             reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    LBRACE          reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    SEMI            reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    SWITCH          reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    DO              reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    BREAK           reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    CONTINUE        reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    RETURN          reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    BOOLEAN         reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    INC             reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    DEC             reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    NEW             reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    BYTE            reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    SHORT           reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    INT             reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    LONG            reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    CHAR            reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    FLOAT           reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    DOUBLE          reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    THIS            reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    LPAREN          reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    DECIMAL_LITERAL reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    HEX_LITERAL     reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    BINARY_LITERAL  reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    FLOAT_LITERAL   reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    BOOL_LITERAL    reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    CHAR_LITERAL    reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    STRING_LITERAL  reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    NULL            reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    CASE            reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    DEFAULT         reduce using rule 139 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)


state 452

    (143) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE . ifMark3 begin_scope Statement end_scope ifMark2
    (142) ifMark3 -> .

    IDENTIFIER      reduce using rule 142 (ifMark3 -> .)
    IF              reduce using rule 142 (ifMark3 -> .)
    WHILE           reduce using rule 142 (ifMark3 -> .)
    FOR             reduce using rule 142 (ifMark3 -> .)
    LBRACE          reduce using rule 142 (ifMark3 -> .)
    SEMI            reduce using rule 142 (ifMark3 -> .)
    SWITCH          reduce using rule 142 (ifMark3 -> .)
    DO              reduce using rule 142 (ifMark3 -> .)
    BREAK           reduce using rule 142 (ifMark3 -> .)
    CONTINUE        reduce using rule 142 (ifMark3 -> .)
    RETURN          reduce using rule 142 (ifMark3 -> .)
    INC             reduce using rule 142 (ifMark3 -> .)
    DEC             reduce using rule 142 (ifMark3 -> .)
    NEW             reduce using rule 142 (ifMark3 -> .)
    THIS            reduce using rule 142 (ifMark3 -> .)
    LPAREN          reduce using rule 142 (ifMark3 -> .)
    DECIMAL_LITERAL reduce using rule 142 (ifMark3 -> .)
    HEX_LITERAL     reduce using rule 142 (ifMark3 -> .)
    BINARY_LITERAL  reduce using rule 142 (ifMark3 -> .)
    FLOAT_LITERAL   reduce using rule 142 (ifMark3 -> .)
    BOOL_LITERAL    reduce using rule 142 (ifMark3 -> .)
    CHAR_LITERAL    reduce using rule 142 (ifMark3 -> .)
    STRING_LITERAL  reduce using rule 142 (ifMark3 -> .)
    NULL            reduce using rule 142 (ifMark3 -> .)

    ifMark3                        shift and go to state 469

state 453

    (130) LabeledStatementNoShortIf -> IDENTIFIER COLON StatementNoShortIf .

    ELSE            reduce using rule 130 (LabeledStatementNoShortIf -> IDENTIFIER COLON StatementNoShortIf .)


state 454

    (157) WhileStatement -> WHILE prep_fw_stack LPAREN . begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (158) WhileStatementNoShortIf -> WHILE prep_fw_stack LPAREN . begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (299) begin_scope -> .

    IDENTIFIER      reduce using rule 299 (begin_scope -> .)
    THIS            reduce using rule 299 (begin_scope -> .)
    LPAREN          reduce using rule 299 (begin_scope -> .)
    NEW             reduce using rule 299 (begin_scope -> .)
    DECIMAL_LITERAL reduce using rule 299 (begin_scope -> .)
    HEX_LITERAL     reduce using rule 299 (begin_scope -> .)
    BINARY_LITERAL  reduce using rule 299 (begin_scope -> .)
    FLOAT_LITERAL   reduce using rule 299 (begin_scope -> .)
    BOOL_LITERAL    reduce using rule 299 (begin_scope -> .)
    CHAR_LITERAL    reduce using rule 299 (begin_scope -> .)
    STRING_LITERAL  reduce using rule 299 (begin_scope -> .)
    NULL            reduce using rule 299 (begin_scope -> .)
    ADD             reduce using rule 299 (begin_scope -> .)
    SUB             reduce using rule 299 (begin_scope -> .)
    INC             reduce using rule 299 (begin_scope -> .)
    DEC             reduce using rule 299 (begin_scope -> .)
    BANG            reduce using rule 299 (begin_scope -> .)
    TILDE           reduce using rule 299 (begin_scope -> .)

    begin_scope                    shift and go to state 470

state 455

    (165) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN . begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (174) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN . begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (175) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN . begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN . begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN . begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN . begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN . begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN . begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (299) begin_scope -> .

    SEMI            reduce using rule 299 (begin_scope -> .)
    INC             reduce using rule 299 (begin_scope -> .)
    DEC             reduce using rule 299 (begin_scope -> .)
    NEW             reduce using rule 299 (begin_scope -> .)
    BOOLEAN         reduce using rule 299 (begin_scope -> .)
    THIS            reduce using rule 299 (begin_scope -> .)
    LPAREN          reduce using rule 299 (begin_scope -> .)
    IDENTIFIER      reduce using rule 299 (begin_scope -> .)
    BYTE            reduce using rule 299 (begin_scope -> .)
    SHORT           reduce using rule 299 (begin_scope -> .)
    INT             reduce using rule 299 (begin_scope -> .)
    LONG            reduce using rule 299 (begin_scope -> .)
    CHAR            reduce using rule 299 (begin_scope -> .)
    FLOAT           reduce using rule 299 (begin_scope -> .)
    DOUBLE          reduce using rule 299 (begin_scope -> .)
    DECIMAL_LITERAL reduce using rule 299 (begin_scope -> .)
    HEX_LITERAL     reduce using rule 299 (begin_scope -> .)
    BINARY_LITERAL  reduce using rule 299 (begin_scope -> .)
    FLOAT_LITERAL   reduce using rule 299 (begin_scope -> .)
    BOOL_LITERAL    reduce using rule 299 (begin_scope -> .)
    CHAR_LITERAL    reduce using rule 299 (begin_scope -> .)
    STRING_LITERAL  reduce using rule 299 (begin_scope -> .)
    NULL            reduce using rule 299 (begin_scope -> .)

    begin_scope                    shift and go to state 471

state 456

    (157) WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement . end_scope while_l2
    (300) end_scope -> .

    RBRACE          reduce using rule 300 (end_scope -> .)
    IDENTIFIER      reduce using rule 300 (end_scope -> .)
    IF              reduce using rule 300 (end_scope -> .)
    WHILE           reduce using rule 300 (end_scope -> .)
    FOR             reduce using rule 300 (end_scope -> .)
    LBRACE          reduce using rule 300 (end_scope -> .)
    SEMI            reduce using rule 300 (end_scope -> .)
    SWITCH          reduce using rule 300 (end_scope -> .)
    DO              reduce using rule 300 (end_scope -> .)
    BREAK           reduce using rule 300 (end_scope -> .)
    CONTINUE        reduce using rule 300 (end_scope -> .)
    RETURN          reduce using rule 300 (end_scope -> .)
    BOOLEAN         reduce using rule 300 (end_scope -> .)
    INC             reduce using rule 300 (end_scope -> .)
    DEC             reduce using rule 300 (end_scope -> .)
    NEW             reduce using rule 300 (end_scope -> .)
    BYTE            reduce using rule 300 (end_scope -> .)
    SHORT           reduce using rule 300 (end_scope -> .)
    INT             reduce using rule 300 (end_scope -> .)
    LONG            reduce using rule 300 (end_scope -> .)
    CHAR            reduce using rule 300 (end_scope -> .)
    FLOAT           reduce using rule 300 (end_scope -> .)
    DOUBLE          reduce using rule 300 (end_scope -> .)
    THIS            reduce using rule 300 (end_scope -> .)
    LPAREN          reduce using rule 300 (end_scope -> .)
    DECIMAL_LITERAL reduce using rule 300 (end_scope -> .)
    HEX_LITERAL     reduce using rule 300 (end_scope -> .)
    BINARY_LITERAL  reduce using rule 300 (end_scope -> .)
    FLOAT_LITERAL   reduce using rule 300 (end_scope -> .)
    BOOL_LITERAL    reduce using rule 300 (end_scope -> .)
    CHAR_LITERAL    reduce using rule 300 (end_scope -> .)
    STRING_LITERAL  reduce using rule 300 (end_scope -> .)
    NULL            reduce using rule 300 (end_scope -> .)
    CASE            reduce using rule 300 (end_scope -> .)
    DEFAULT         reduce using rule 300 (end_scope -> .)

    end_scope                      shift and go to state 472

state 457

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 . ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (186) ForUpdate -> . StatementExpressionList
    (183) for_l3 -> .
    (187) StatementExpressionList -> . StatementExpression
    (188) StatementExpressionList -> . StatementExpressionList COMMA StatementExpression
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RPAREN          reduce using rule 183 (for_l3 -> .)
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    ForUpdate                      shift and go to state 473
    for_l3                         shift and go to state 474
    StatementExpressionList        shift and go to state 461
    StatementExpression            shift and go to state 383
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 458

    (165) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI . for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI . for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (181) for_l1 -> .

    INC             reduce using rule 181 (for_l1 -> .)
    DEC             reduce using rule 181 (for_l1 -> .)
    NEW             reduce using rule 181 (for_l1 -> .)
    THIS            reduce using rule 181 (for_l1 -> .)
    LPAREN          reduce using rule 181 (for_l1 -> .)
    IDENTIFIER      reduce using rule 181 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 181 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 181 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 181 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 181 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 181 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 181 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 181 (for_l1 -> .)
    NULL            reduce using rule 181 (for_l1 -> .)
    RPAREN          reduce using rule 181 (for_l1 -> .)

    for_l1                         shift and go to state 475

state 459

    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (183) for_l3 -> .

    RPAREN          reduce using rule 183 (for_l3 -> .)

    for_l3                         shift and go to state 476

state 460

    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 . RPAREN for_l1 Statement end_scope for_l2

    RPAREN          shift and go to state 477


state 461

    (186) ForUpdate -> StatementExpressionList .
    (188) StatementExpressionList -> StatementExpressionList . COMMA StatementExpression

    RPAREN          reduce using rule 186 (ForUpdate -> StatementExpressionList .)
    COMMA           shift and go to state 400


state 462

    (166) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 . ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (186) ForUpdate -> . StatementExpressionList
    (183) for_l3 -> .
    (187) StatementExpressionList -> . StatementExpression
    (188) StatementExpressionList -> . StatementExpressionList COMMA StatementExpression
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RPAREN          reduce using rule 183 (for_l3 -> .)
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    ForUpdate                      shift and go to state 478
    for_l3                         shift and go to state 479
    StatementExpressionList        shift and go to state 461
    StatementExpression            shift and go to state 383
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 463

    (147) SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope . RBRACE

    RBRACE          shift and go to state 480


state 464

    (149) SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .

    RBRACE          reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    IDENTIFIER      reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    IF              reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    WHILE           reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    FOR             reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    LBRACE          reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    SEMI            reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    SWITCH          reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    DO              reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    BREAK           reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    CONTINUE        reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    RETURN          reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    BOOLEAN         reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    INC             reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    DEC             reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    NEW             reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    BYTE            reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    SHORT           reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    INT             reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    LONG            reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    CHAR            reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    FLOAT           reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    DOUBLE          reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    THIS            reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    LPAREN          reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    DECIMAL_LITERAL reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    HEX_LITERAL     reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    BINARY_LITERAL  reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    FLOAT_LITERAL   reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    BOOL_LITERAL    reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    CHAR_LITERAL    reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    STRING_LITERAL  reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    NULL            reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    CASE            reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    DEFAULT         reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    ELSE            reduce using rule 149 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)


state 465

    (152) SwitchBlockStatementGroup -> begin_scope SwitchLabels BlockStatements end_scope .

    RBRACE          reduce using rule 152 (SwitchBlockStatementGroup -> begin_scope SwitchLabels BlockStatements end_scope .)
    CASE            reduce using rule 152 (SwitchBlockStatementGroup -> begin_scope SwitchLabels BlockStatements end_scope .)
    DEFAULT         reduce using rule 152 (SwitchBlockStatementGroup -> begin_scope SwitchLabels BlockStatements end_scope .)


state 466

    (155) SwitchLabel -> CASE ConstantExpression COLON .

    CASE            reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    DEFAULT         reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    IDENTIFIER      reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    IF              reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    WHILE           reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    FOR             reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    LBRACE          reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    SEMI            reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    SWITCH          reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    DO              reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    BREAK           reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    CONTINUE        reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    RETURN          reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    BOOLEAN         reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    INC             reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    DEC             reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    NEW             reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    BYTE            reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    SHORT           reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    INT             reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    LONG            reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    CHAR            reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    FLOAT           reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    DOUBLE          reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    THIS            reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    LPAREN          reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    DECIMAL_LITERAL reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    HEX_LITERAL     reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    BINARY_LITERAL  reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    FLOAT_LITERAL   reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    BOOL_LITERAL    reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    CHAR_LITERAL    reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    STRING_LITERAL  reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    NULL            reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)
    RBRACE          reduce using rule 155 (SwitchLabel -> CASE ConstantExpression COLON .)


state 467

    (162) DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression . RPAREN SEMI end_scope dwhile_l2

    RPAREN          shift and go to state 481


state 468

    (139) IfThenStatement -> IF begin_scope LPAREN Expression . RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> IF begin_scope LPAREN Expression . RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (144) IfThenElseStatementNoShortIf -> IF begin_scope LPAREN Expression . RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2

    RPAREN          shift and go to state 482


state 469

    (143) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 . begin_scope Statement end_scope ifMark2
    (299) begin_scope -> .

    IDENTIFIER      reduce using rule 299 (begin_scope -> .)
    IF              reduce using rule 299 (begin_scope -> .)
    WHILE           reduce using rule 299 (begin_scope -> .)
    FOR             reduce using rule 299 (begin_scope -> .)
    LBRACE          reduce using rule 299 (begin_scope -> .)
    SEMI            reduce using rule 299 (begin_scope -> .)
    SWITCH          reduce using rule 299 (begin_scope -> .)
    DO              reduce using rule 299 (begin_scope -> .)
    BREAK           reduce using rule 299 (begin_scope -> .)
    CONTINUE        reduce using rule 299 (begin_scope -> .)
    RETURN          reduce using rule 299 (begin_scope -> .)
    INC             reduce using rule 299 (begin_scope -> .)
    DEC             reduce using rule 299 (begin_scope -> .)
    NEW             reduce using rule 299 (begin_scope -> .)
    THIS            reduce using rule 299 (begin_scope -> .)
    LPAREN          reduce using rule 299 (begin_scope -> .)
    DECIMAL_LITERAL reduce using rule 299 (begin_scope -> .)
    HEX_LITERAL     reduce using rule 299 (begin_scope -> .)
    BINARY_LITERAL  reduce using rule 299 (begin_scope -> .)
    FLOAT_LITERAL   reduce using rule 299 (begin_scope -> .)
    BOOL_LITERAL    reduce using rule 299 (begin_scope -> .)
    CHAR_LITERAL    reduce using rule 299 (begin_scope -> .)
    STRING_LITERAL  reduce using rule 299 (begin_scope -> .)
    NULL            reduce using rule 299 (begin_scope -> .)

    begin_scope                    shift and go to state 483

state 470

    (157) WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope . while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (158) WhileStatementNoShortIf -> WHILE prep_fw_stack LPAREN begin_scope . while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (160) while_l1 -> .

    IDENTIFIER      reduce using rule 160 (while_l1 -> .)
    THIS            reduce using rule 160 (while_l1 -> .)
    LPAREN          reduce using rule 160 (while_l1 -> .)
    NEW             reduce using rule 160 (while_l1 -> .)
    DECIMAL_LITERAL reduce using rule 160 (while_l1 -> .)
    HEX_LITERAL     reduce using rule 160 (while_l1 -> .)
    BINARY_LITERAL  reduce using rule 160 (while_l1 -> .)
    FLOAT_LITERAL   reduce using rule 160 (while_l1 -> .)
    BOOL_LITERAL    reduce using rule 160 (while_l1 -> .)
    CHAR_LITERAL    reduce using rule 160 (while_l1 -> .)
    STRING_LITERAL  reduce using rule 160 (while_l1 -> .)
    NULL            reduce using rule 160 (while_l1 -> .)
    ADD             reduce using rule 160 (while_l1 -> .)
    SUB             reduce using rule 160 (while_l1 -> .)
    INC             reduce using rule 160 (while_l1 -> .)
    DEC             reduce using rule 160 (while_l1 -> .)
    BANG            reduce using rule 160 (while_l1 -> .)
    TILDE           reduce using rule 160 (while_l1 -> .)

    while_l1                       shift and go to state 484

state 471

    (165) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope . ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (174) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope . SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (175) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope . ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope . ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope . ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope . SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope . SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope . SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (184) ForInit -> . StatementExpressionList
    (185) ForInit -> . LocalVariableDeclaration
    (187) StatementExpressionList -> . StatementExpression
    (188) StatementExpressionList -> . StatementExpressionList COMMA StatementExpression
    (108) LocalVariableDeclaration -> . Type VariableDeclarators
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    SEMI            shift and go to state 486
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    BOOLEAN         shift and go to state 63
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    IDENTIFIER      shift and go to state 61
    BYTE            shift and go to state 69
    SHORT           shift and go to state 70
    INT             shift and go to state 71
    LONG            shift and go to state 72
    CHAR            shift and go to state 73
    FLOAT           shift and go to state 74
    DOUBLE          shift and go to state 75
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    ForInit                        shift and go to state 485
    StatementExpressionList        shift and go to state 381
    LocalVariableDeclaration       shift and go to state 382
    StatementExpression            shift and go to state 383
    Type                           shift and go to state 117
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    PrimitiveType                  shift and go to state 58
    ReferenceType                  shift and go to state 59
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 384
    ClassType                      shift and go to state 65
    NumericType                    shift and go to state 62
    ArrayType                      shift and go to state 64
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    IntegralType                   shift and go to state 66
    FloatingPointType              shift and go to state 67
    Literal                        shift and go to state 156

state 472

    (157) WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope . while_l2
    (161) while_l2 -> .

    RBRACE          reduce using rule 161 (while_l2 -> .)
    IDENTIFIER      reduce using rule 161 (while_l2 -> .)
    IF              reduce using rule 161 (while_l2 -> .)
    WHILE           reduce using rule 161 (while_l2 -> .)
    FOR             reduce using rule 161 (while_l2 -> .)
    LBRACE          reduce using rule 161 (while_l2 -> .)
    SEMI            reduce using rule 161 (while_l2 -> .)
    SWITCH          reduce using rule 161 (while_l2 -> .)
    DO              reduce using rule 161 (while_l2 -> .)
    BREAK           reduce using rule 161 (while_l2 -> .)
    CONTINUE        reduce using rule 161 (while_l2 -> .)
    RETURN          reduce using rule 161 (while_l2 -> .)
    BOOLEAN         reduce using rule 161 (while_l2 -> .)
    INC             reduce using rule 161 (while_l2 -> .)
    DEC             reduce using rule 161 (while_l2 -> .)
    NEW             reduce using rule 161 (while_l2 -> .)
    BYTE            reduce using rule 161 (while_l2 -> .)
    SHORT           reduce using rule 161 (while_l2 -> .)
    INT             reduce using rule 161 (while_l2 -> .)
    LONG            reduce using rule 161 (while_l2 -> .)
    CHAR            reduce using rule 161 (while_l2 -> .)
    FLOAT           reduce using rule 161 (while_l2 -> .)
    DOUBLE          reduce using rule 161 (while_l2 -> .)
    THIS            reduce using rule 161 (while_l2 -> .)
    LPAREN          reduce using rule 161 (while_l2 -> .)
    DECIMAL_LITERAL reduce using rule 161 (while_l2 -> .)
    HEX_LITERAL     reduce using rule 161 (while_l2 -> .)
    BINARY_LITERAL  reduce using rule 161 (while_l2 -> .)
    FLOAT_LITERAL   reduce using rule 161 (while_l2 -> .)
    BOOL_LITERAL    reduce using rule 161 (while_l2 -> .)
    CHAR_LITERAL    reduce using rule 161 (while_l2 -> .)
    STRING_LITERAL  reduce using rule 161 (while_l2 -> .)
    NULL            reduce using rule 161 (while_l2 -> .)
    CASE            reduce using rule 161 (while_l2 -> .)
    DEFAULT         reduce using rule 161 (while_l2 -> .)

    while_l2                       shift and go to state 487

state 473

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (183) for_l3 -> .

    RPAREN          reduce using rule 183 (for_l3 -> .)

    for_l3                         shift and go to state 488

state 474

    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 . RPAREN for_l1 Statement end_scope for_l2

    RPAREN          shift and go to state 489


state 475

    (165) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 . ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (186) ForUpdate -> . StatementExpressionList
    (183) for_l3 -> .
    (187) StatementExpressionList -> . StatementExpression
    (188) StatementExpressionList -> . StatementExpressionList COMMA StatementExpression
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RPAREN          reduce using rule 183 (for_l3 -> .)
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    ForUpdate                      shift and go to state 490
    for_l3                         shift and go to state 491
    StatementExpressionList        shift and go to state 461
    StatementExpression            shift and go to state 383
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 476

    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 . RPAREN for_l1 Statement end_scope for_l2

    RPAREN          shift and go to state 492


state 477

    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (181) for_l1 -> .

    IDENTIFIER      reduce using rule 181 (for_l1 -> .)
    IF              reduce using rule 181 (for_l1 -> .)
    WHILE           reduce using rule 181 (for_l1 -> .)
    FOR             reduce using rule 181 (for_l1 -> .)
    LBRACE          reduce using rule 181 (for_l1 -> .)
    SEMI            reduce using rule 181 (for_l1 -> .)
    SWITCH          reduce using rule 181 (for_l1 -> .)
    DO              reduce using rule 181 (for_l1 -> .)
    BREAK           reduce using rule 181 (for_l1 -> .)
    CONTINUE        reduce using rule 181 (for_l1 -> .)
    RETURN          reduce using rule 181 (for_l1 -> .)
    INC             reduce using rule 181 (for_l1 -> .)
    DEC             reduce using rule 181 (for_l1 -> .)
    NEW             reduce using rule 181 (for_l1 -> .)
    THIS            reduce using rule 181 (for_l1 -> .)
    LPAREN          reduce using rule 181 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 181 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 181 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 181 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 181 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 181 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 181 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 181 (for_l1 -> .)
    NULL            reduce using rule 181 (for_l1 -> .)

    for_l1                         shift and go to state 493

state 478

    (166) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (183) for_l3 -> .

    RPAREN          reduce using rule 183 (for_l3 -> .)

    for_l3                         shift and go to state 494

state 479

    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 . RPAREN for_l1 Statement end_scope for_l2

    RPAREN          shift and go to state 495


state 480

    (147) SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .

    RBRACE          reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    IDENTIFIER      reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    IF              reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    WHILE           reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    FOR             reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    LBRACE          reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    SEMI            reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    SWITCH          reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    DO              reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    BREAK           reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    CONTINUE        reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    RETURN          reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    BOOLEAN         reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    INC             reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    DEC             reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    NEW             reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    BYTE            reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    SHORT           reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    INT             reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    LONG            reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    CHAR            reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    FLOAT           reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    DOUBLE          reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    THIS            reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    LPAREN          reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    DECIMAL_LITERAL reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    HEX_LITERAL     reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    BINARY_LITERAL  reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    FLOAT_LITERAL   reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    BOOL_LITERAL    reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    CHAR_LITERAL    reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    STRING_LITERAL  reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    NULL            reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    CASE            reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    DEFAULT         reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    ELSE            reduce using rule 147 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)


state 481

    (162) DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN . SEMI end_scope dwhile_l2

    SEMI            shift and go to state 496


state 482

    (139) IfThenStatement -> IF begin_scope LPAREN Expression RPAREN . ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN . ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (144) IfThenElseStatementNoShortIf -> IF begin_scope LPAREN Expression RPAREN . ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (140) ifMark1 -> .

    IDENTIFIER      reduce using rule 140 (ifMark1 -> .)
    IF              reduce using rule 140 (ifMark1 -> .)
    WHILE           reduce using rule 140 (ifMark1 -> .)
    FOR             reduce using rule 140 (ifMark1 -> .)
    LBRACE          reduce using rule 140 (ifMark1 -> .)
    SEMI            reduce using rule 140 (ifMark1 -> .)
    SWITCH          reduce using rule 140 (ifMark1 -> .)
    DO              reduce using rule 140 (ifMark1 -> .)
    BREAK           reduce using rule 140 (ifMark1 -> .)
    CONTINUE        reduce using rule 140 (ifMark1 -> .)
    RETURN          reduce using rule 140 (ifMark1 -> .)
    INC             reduce using rule 140 (ifMark1 -> .)
    DEC             reduce using rule 140 (ifMark1 -> .)
    NEW             reduce using rule 140 (ifMark1 -> .)
    THIS            reduce using rule 140 (ifMark1 -> .)
    LPAREN          reduce using rule 140 (ifMark1 -> .)
    DECIMAL_LITERAL reduce using rule 140 (ifMark1 -> .)
    HEX_LITERAL     reduce using rule 140 (ifMark1 -> .)
    BINARY_LITERAL  reduce using rule 140 (ifMark1 -> .)
    FLOAT_LITERAL   reduce using rule 140 (ifMark1 -> .)
    BOOL_LITERAL    reduce using rule 140 (ifMark1 -> .)
    CHAR_LITERAL    reduce using rule 140 (ifMark1 -> .)
    STRING_LITERAL  reduce using rule 140 (ifMark1 -> .)
    NULL            reduce using rule 140 (ifMark1 -> .)

    ifMark1                        shift and go to state 497

state 483

    (143) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope . Statement end_scope ifMark2
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 126
    IF              shift and go to state 127
    WHILE           shift and go to state 129
    FOR             shift and go to state 130
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    Statement                      shift and go to state 498
    StatementWithoutTrailingSubstatement shift and go to state 111
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    StatementExpression            shift and go to state 131
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 484

    (157) WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 . Expression RPAREN while_l1 Statement end_scope while_l2
    (158) WhileStatementNoShortIf -> WHILE prep_fw_stack LPAREN begin_scope while_l1 . Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (295) Expression -> . AssignmentExpression
    (277) AssignmentExpression -> . ConditionalExpression
    (278) AssignmentExpression -> . Assignment
    (275) ConditionalExpression -> . ConditionalOrExpression
    (276) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (272) ConditionalOrExpression -> . ConditionalAndExpression
    (273) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (270) ConditionalAndExpression -> . InclusiveOrExpression
    (271) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC

    IDENTIFIER      shift and go to state 61
    THIS            shift and go to state 157
    LPAREN          shift and go to state 188
    NEW             shift and go to state 203
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165
    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217

    Expression                     shift and go to state 499
    AssignmentExpression           shift and go to state 190
    ConditionalExpression          shift and go to state 191
    Assignment                     shift and go to state 192
    ConditionalOrExpression        shift and go to state 193
    LeftHandSide                   shift and go to state 145
    ConditionalAndExpression       shift and go to state 194
    Name                           shift and go to state 195
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    InclusiveOrExpression          shift and go to state 196
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Primary                        shift and go to state 197
    PrimaryNoNewArray              shift and go to state 198
    ExclusiveOrExpression          shift and go to state 199
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    MethodInvocation               shift and go to state 201
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220

state 485

    (165) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit . SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit . SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit . SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit . SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit . SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (175) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit . SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit . SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit . SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2

    SEMI            shift and go to state 500


state 486

    (166) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI . for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI . for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI . for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI . for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI . for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI . for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI . for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI . for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (181) for_l1 -> .

    SEMI            reduce using rule 181 (for_l1 -> .)
    IDENTIFIER      reduce using rule 181 (for_l1 -> .)
    THIS            reduce using rule 181 (for_l1 -> .)
    LPAREN          reduce using rule 181 (for_l1 -> .)
    NEW             reduce using rule 181 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 181 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 181 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 181 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 181 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 181 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 181 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 181 (for_l1 -> .)
    NULL            reduce using rule 181 (for_l1 -> .)
    ADD             reduce using rule 181 (for_l1 -> .)
    SUB             reduce using rule 181 (for_l1 -> .)
    INC             reduce using rule 181 (for_l1 -> .)
    DEC             reduce using rule 181 (for_l1 -> .)
    BANG            reduce using rule 181 (for_l1 -> .)
    TILDE           reduce using rule 181 (for_l1 -> .)

    for_l1                         shift and go to state 501

state 487

    (157) WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .

    RBRACE          reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    IDENTIFIER      reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    IF              reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    WHILE           reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    FOR             reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    LBRACE          reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    SEMI            reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    SWITCH          reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    DO              reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    BREAK           reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    CONTINUE        reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    RETURN          reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    BOOLEAN         reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    INC             reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    DEC             reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    NEW             reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    BYTE            reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    SHORT           reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    INT             reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    LONG            reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    CHAR            reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    FLOAT           reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    DOUBLE          reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    THIS            reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    LPAREN          reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    DECIMAL_LITERAL reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    HEX_LITERAL     reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    BINARY_LITERAL  reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    FLOAT_LITERAL   reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    BOOL_LITERAL    reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    CHAR_LITERAL    reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    STRING_LITERAL  reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    NULL            reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    CASE            reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    DEFAULT         reduce using rule 157 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)


state 488

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 . RPAREN for_l1 Statement end_scope for_l2

    RPAREN          shift and go to state 502


state 489

    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (181) for_l1 -> .

    IDENTIFIER      reduce using rule 181 (for_l1 -> .)
    IF              reduce using rule 181 (for_l1 -> .)
    WHILE           reduce using rule 181 (for_l1 -> .)
    FOR             reduce using rule 181 (for_l1 -> .)
    LBRACE          reduce using rule 181 (for_l1 -> .)
    SEMI            reduce using rule 181 (for_l1 -> .)
    SWITCH          reduce using rule 181 (for_l1 -> .)
    DO              reduce using rule 181 (for_l1 -> .)
    BREAK           reduce using rule 181 (for_l1 -> .)
    CONTINUE        reduce using rule 181 (for_l1 -> .)
    RETURN          reduce using rule 181 (for_l1 -> .)
    INC             reduce using rule 181 (for_l1 -> .)
    DEC             reduce using rule 181 (for_l1 -> .)
    NEW             reduce using rule 181 (for_l1 -> .)
    THIS            reduce using rule 181 (for_l1 -> .)
    LPAREN          reduce using rule 181 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 181 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 181 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 181 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 181 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 181 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 181 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 181 (for_l1 -> .)
    NULL            reduce using rule 181 (for_l1 -> .)

    for_l1                         shift and go to state 503

state 490

    (165) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (183) for_l3 -> .

    RPAREN          reduce using rule 183 (for_l3 -> .)

    for_l3                         shift and go to state 504

state 491

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 . RPAREN for_l1 Statement end_scope for_l2

    RPAREN          shift and go to state 505


state 492

    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (181) for_l1 -> .

    IDENTIFIER      reduce using rule 181 (for_l1 -> .)
    IF              reduce using rule 181 (for_l1 -> .)
    WHILE           reduce using rule 181 (for_l1 -> .)
    FOR             reduce using rule 181 (for_l1 -> .)
    LBRACE          reduce using rule 181 (for_l1 -> .)
    SEMI            reduce using rule 181 (for_l1 -> .)
    SWITCH          reduce using rule 181 (for_l1 -> .)
    DO              reduce using rule 181 (for_l1 -> .)
    BREAK           reduce using rule 181 (for_l1 -> .)
    CONTINUE        reduce using rule 181 (for_l1 -> .)
    RETURN          reduce using rule 181 (for_l1 -> .)
    INC             reduce using rule 181 (for_l1 -> .)
    DEC             reduce using rule 181 (for_l1 -> .)
    NEW             reduce using rule 181 (for_l1 -> .)
    THIS            reduce using rule 181 (for_l1 -> .)
    LPAREN          reduce using rule 181 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 181 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 181 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 181 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 181 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 181 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 181 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 181 (for_l1 -> .)
    NULL            reduce using rule 181 (for_l1 -> .)

    for_l1                         shift and go to state 506

state 493

    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 126
    IF              shift and go to state 127
    WHILE           shift and go to state 129
    FOR             shift and go to state 130
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    Statement                      shift and go to state 507
    StatementWithoutTrailingSubstatement shift and go to state 111
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    StatementExpression            shift and go to state 131
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 494

    (166) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 . RPAREN for_l1 Statement end_scope for_l2

    RPAREN          shift and go to state 508


state 495

    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (181) for_l1 -> .

    IDENTIFIER      reduce using rule 181 (for_l1 -> .)
    IF              reduce using rule 181 (for_l1 -> .)
    WHILE           reduce using rule 181 (for_l1 -> .)
    FOR             reduce using rule 181 (for_l1 -> .)
    LBRACE          reduce using rule 181 (for_l1 -> .)
    SEMI            reduce using rule 181 (for_l1 -> .)
    SWITCH          reduce using rule 181 (for_l1 -> .)
    DO              reduce using rule 181 (for_l1 -> .)
    BREAK           reduce using rule 181 (for_l1 -> .)
    CONTINUE        reduce using rule 181 (for_l1 -> .)
    RETURN          reduce using rule 181 (for_l1 -> .)
    INC             reduce using rule 181 (for_l1 -> .)
    DEC             reduce using rule 181 (for_l1 -> .)
    NEW             reduce using rule 181 (for_l1 -> .)
    THIS            reduce using rule 181 (for_l1 -> .)
    LPAREN          reduce using rule 181 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 181 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 181 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 181 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 181 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 181 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 181 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 181 (for_l1 -> .)
    NULL            reduce using rule 181 (for_l1 -> .)

    for_l1                         shift and go to state 509

state 496

    (162) DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI . end_scope dwhile_l2
    (300) end_scope -> .

    RBRACE          reduce using rule 300 (end_scope -> .)
    IDENTIFIER      reduce using rule 300 (end_scope -> .)
    IF              reduce using rule 300 (end_scope -> .)
    WHILE           reduce using rule 300 (end_scope -> .)
    FOR             reduce using rule 300 (end_scope -> .)
    LBRACE          reduce using rule 300 (end_scope -> .)
    SEMI            reduce using rule 300 (end_scope -> .)
    SWITCH          reduce using rule 300 (end_scope -> .)
    DO              reduce using rule 300 (end_scope -> .)
    BREAK           reduce using rule 300 (end_scope -> .)
    CONTINUE        reduce using rule 300 (end_scope -> .)
    RETURN          reduce using rule 300 (end_scope -> .)
    BOOLEAN         reduce using rule 300 (end_scope -> .)
    INC             reduce using rule 300 (end_scope -> .)
    DEC             reduce using rule 300 (end_scope -> .)
    NEW             reduce using rule 300 (end_scope -> .)
    BYTE            reduce using rule 300 (end_scope -> .)
    SHORT           reduce using rule 300 (end_scope -> .)
    INT             reduce using rule 300 (end_scope -> .)
    LONG            reduce using rule 300 (end_scope -> .)
    CHAR            reduce using rule 300 (end_scope -> .)
    FLOAT           reduce using rule 300 (end_scope -> .)
    DOUBLE          reduce using rule 300 (end_scope -> .)
    THIS            reduce using rule 300 (end_scope -> .)
    LPAREN          reduce using rule 300 (end_scope -> .)
    DECIMAL_LITERAL reduce using rule 300 (end_scope -> .)
    HEX_LITERAL     reduce using rule 300 (end_scope -> .)
    BINARY_LITERAL  reduce using rule 300 (end_scope -> .)
    FLOAT_LITERAL   reduce using rule 300 (end_scope -> .)
    BOOL_LITERAL    reduce using rule 300 (end_scope -> .)
    CHAR_LITERAL    reduce using rule 300 (end_scope -> .)
    STRING_LITERAL  reduce using rule 300 (end_scope -> .)
    NULL            reduce using rule 300 (end_scope -> .)
    CASE            reduce using rule 300 (end_scope -> .)
    DEFAULT         reduce using rule 300 (end_scope -> .)
    ELSE            reduce using rule 300 (end_scope -> .)

    end_scope                      shift and go to state 510

state 497

    (139) IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 . Statement ifMark1 end_scope
    (143) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 . StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (144) IfThenElseStatementNoShortIf -> IF begin_scope LPAREN Expression RPAREN ifMark1 . StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (115) StatementNoShortIf -> . StatementWithoutTrailingSubstatement
    (116) StatementNoShortIf -> . LabeledStatementNoShortIf
    (117) StatementNoShortIf -> . IfThenElseStatementNoShortIf
    (118) StatementNoShortIf -> . WhileStatementNoShortIf
    (119) StatementNoShortIf -> . ForStatementNoShortIf
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (130) LabeledStatementNoShortIf -> . IDENTIFIER COLON StatementNoShortIf
    (144) IfThenElseStatementNoShortIf -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (158) WhileStatementNoShortIf -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (173) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (174) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (175) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 415
    IF              shift and go to state 407
    WHILE           shift and go to state 416
    FOR             shift and go to state 417
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    Statement                      shift and go to state 408
    StatementNoShortIf             shift and go to state 511
    StatementWithoutTrailingSubstatement shift and go to state 410
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    LabeledStatementNoShortIf      shift and go to state 411
    IfThenElseStatementNoShortIf   shift and go to state 412
    WhileStatementNoShortIf        shift and go to state 413
    ForStatementNoShortIf          shift and go to state 414
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    StatementExpression            shift and go to state 131
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 498

    (143) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement . end_scope ifMark2
    (300) end_scope -> .

    RBRACE          reduce using rule 300 (end_scope -> .)
    IDENTIFIER      reduce using rule 300 (end_scope -> .)
    IF              reduce using rule 300 (end_scope -> .)
    WHILE           reduce using rule 300 (end_scope -> .)
    FOR             reduce using rule 300 (end_scope -> .)
    LBRACE          reduce using rule 300 (end_scope -> .)
    SEMI            reduce using rule 300 (end_scope -> .)
    SWITCH          reduce using rule 300 (end_scope -> .)
    DO              reduce using rule 300 (end_scope -> .)
    BREAK           reduce using rule 300 (end_scope -> .)
    CONTINUE        reduce using rule 300 (end_scope -> .)
    RETURN          reduce using rule 300 (end_scope -> .)
    BOOLEAN         reduce using rule 300 (end_scope -> .)
    INC             reduce using rule 300 (end_scope -> .)
    DEC             reduce using rule 300 (end_scope -> .)
    NEW             reduce using rule 300 (end_scope -> .)
    BYTE            reduce using rule 300 (end_scope -> .)
    SHORT           reduce using rule 300 (end_scope -> .)
    INT             reduce using rule 300 (end_scope -> .)
    LONG            reduce using rule 300 (end_scope -> .)
    CHAR            reduce using rule 300 (end_scope -> .)
    FLOAT           reduce using rule 300 (end_scope -> .)
    DOUBLE          reduce using rule 300 (end_scope -> .)
    THIS            reduce using rule 300 (end_scope -> .)
    LPAREN          reduce using rule 300 (end_scope -> .)
    DECIMAL_LITERAL reduce using rule 300 (end_scope -> .)
    HEX_LITERAL     reduce using rule 300 (end_scope -> .)
    BINARY_LITERAL  reduce using rule 300 (end_scope -> .)
    FLOAT_LITERAL   reduce using rule 300 (end_scope -> .)
    BOOL_LITERAL    reduce using rule 300 (end_scope -> .)
    CHAR_LITERAL    reduce using rule 300 (end_scope -> .)
    STRING_LITERAL  reduce using rule 300 (end_scope -> .)
    NULL            reduce using rule 300 (end_scope -> .)
    CASE            reduce using rule 300 (end_scope -> .)
    DEFAULT         reduce using rule 300 (end_scope -> .)

    end_scope                      shift and go to state 512

state 499

    (157) WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression . RPAREN while_l1 Statement end_scope while_l2
    (158) WhileStatementNoShortIf -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression . RPAREN while_l1 StatementNoShortIf end_scope while_l2

    RPAREN          shift and go to state 513


state 500

    (165) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI . for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI . for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI . for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI . for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI . for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (175) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI . for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI . for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI . for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (181) for_l1 -> .

    SEMI            reduce using rule 181 (for_l1 -> .)
    IDENTIFIER      reduce using rule 181 (for_l1 -> .)
    THIS            reduce using rule 181 (for_l1 -> .)
    LPAREN          reduce using rule 181 (for_l1 -> .)
    NEW             reduce using rule 181 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 181 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 181 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 181 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 181 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 181 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 181 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 181 (for_l1 -> .)
    NULL            reduce using rule 181 (for_l1 -> .)
    ADD             reduce using rule 181 (for_l1 -> .)
    SUB             reduce using rule 181 (for_l1 -> .)
    INC             reduce using rule 181 (for_l1 -> .)
    DEC             reduce using rule 181 (for_l1 -> .)
    BANG            reduce using rule 181 (for_l1 -> .)
    TILDE           reduce using rule 181 (for_l1 -> .)

    for_l1                         shift and go to state 514

state 501

    (166) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 . Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 . Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 . SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 . SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 . Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 . Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 . SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 . SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (295) Expression -> . AssignmentExpression
    (277) AssignmentExpression -> . ConditionalExpression
    (278) AssignmentExpression -> . Assignment
    (275) ConditionalExpression -> . ConditionalOrExpression
    (276) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (272) ConditionalOrExpression -> . ConditionalAndExpression
    (273) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (270) ConditionalAndExpression -> . InclusiveOrExpression
    (271) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC

    SEMI            shift and go to state 515
    IDENTIFIER      shift and go to state 61
    THIS            shift and go to state 157
    LPAREN          shift and go to state 188
    NEW             shift and go to state 203
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165
    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217

    Expression                     shift and go to state 516
    AssignmentExpression           shift and go to state 190
    ConditionalExpression          shift and go to state 191
    Assignment                     shift and go to state 192
    ConditionalOrExpression        shift and go to state 193
    LeftHandSide                   shift and go to state 145
    ConditionalAndExpression       shift and go to state 194
    Name                           shift and go to state 195
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    InclusiveOrExpression          shift and go to state 196
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Primary                        shift and go to state 197
    PrimaryNoNewArray              shift and go to state 198
    ExclusiveOrExpression          shift and go to state 199
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    MethodInvocation               shift and go to state 201
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220

state 502

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (181) for_l1 -> .

    IDENTIFIER      reduce using rule 181 (for_l1 -> .)
    IF              reduce using rule 181 (for_l1 -> .)
    WHILE           reduce using rule 181 (for_l1 -> .)
    FOR             reduce using rule 181 (for_l1 -> .)
    LBRACE          reduce using rule 181 (for_l1 -> .)
    SEMI            reduce using rule 181 (for_l1 -> .)
    SWITCH          reduce using rule 181 (for_l1 -> .)
    DO              reduce using rule 181 (for_l1 -> .)
    BREAK           reduce using rule 181 (for_l1 -> .)
    CONTINUE        reduce using rule 181 (for_l1 -> .)
    RETURN          reduce using rule 181 (for_l1 -> .)
    INC             reduce using rule 181 (for_l1 -> .)
    DEC             reduce using rule 181 (for_l1 -> .)
    NEW             reduce using rule 181 (for_l1 -> .)
    THIS            reduce using rule 181 (for_l1 -> .)
    LPAREN          reduce using rule 181 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 181 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 181 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 181 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 181 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 181 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 181 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 181 (for_l1 -> .)
    NULL            reduce using rule 181 (for_l1 -> .)

    for_l1                         shift and go to state 517

state 503

    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 126
    IF              shift and go to state 127
    WHILE           shift and go to state 129
    FOR             shift and go to state 130
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    Statement                      shift and go to state 518
    StatementWithoutTrailingSubstatement shift and go to state 111
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    StatementExpression            shift and go to state 131
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 504

    (165) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 . RPAREN for_l1 Statement end_scope for_l2

    RPAREN          shift and go to state 519


state 505

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (181) for_l1 -> .

    IDENTIFIER      reduce using rule 181 (for_l1 -> .)
    IF              reduce using rule 181 (for_l1 -> .)
    WHILE           reduce using rule 181 (for_l1 -> .)
    FOR             reduce using rule 181 (for_l1 -> .)
    LBRACE          reduce using rule 181 (for_l1 -> .)
    SEMI            reduce using rule 181 (for_l1 -> .)
    SWITCH          reduce using rule 181 (for_l1 -> .)
    DO              reduce using rule 181 (for_l1 -> .)
    BREAK           reduce using rule 181 (for_l1 -> .)
    CONTINUE        reduce using rule 181 (for_l1 -> .)
    RETURN          reduce using rule 181 (for_l1 -> .)
    INC             reduce using rule 181 (for_l1 -> .)
    DEC             reduce using rule 181 (for_l1 -> .)
    NEW             reduce using rule 181 (for_l1 -> .)
    THIS            reduce using rule 181 (for_l1 -> .)
    LPAREN          reduce using rule 181 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 181 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 181 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 181 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 181 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 181 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 181 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 181 (for_l1 -> .)
    NULL            reduce using rule 181 (for_l1 -> .)

    for_l1                         shift and go to state 520

state 506

    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 126
    IF              shift and go to state 127
    WHILE           shift and go to state 129
    FOR             shift and go to state 130
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    Statement                      shift and go to state 521
    StatementWithoutTrailingSubstatement shift and go to state 111
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    StatementExpression            shift and go to state 131
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 507

    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement . end_scope for_l2
    (300) end_scope -> .

    RBRACE          reduce using rule 300 (end_scope -> .)
    IDENTIFIER      reduce using rule 300 (end_scope -> .)
    IF              reduce using rule 300 (end_scope -> .)
    WHILE           reduce using rule 300 (end_scope -> .)
    FOR             reduce using rule 300 (end_scope -> .)
    LBRACE          reduce using rule 300 (end_scope -> .)
    SEMI            reduce using rule 300 (end_scope -> .)
    SWITCH          reduce using rule 300 (end_scope -> .)
    DO              reduce using rule 300 (end_scope -> .)
    BREAK           reduce using rule 300 (end_scope -> .)
    CONTINUE        reduce using rule 300 (end_scope -> .)
    RETURN          reduce using rule 300 (end_scope -> .)
    BOOLEAN         reduce using rule 300 (end_scope -> .)
    INC             reduce using rule 300 (end_scope -> .)
    DEC             reduce using rule 300 (end_scope -> .)
    NEW             reduce using rule 300 (end_scope -> .)
    BYTE            reduce using rule 300 (end_scope -> .)
    SHORT           reduce using rule 300 (end_scope -> .)
    INT             reduce using rule 300 (end_scope -> .)
    LONG            reduce using rule 300 (end_scope -> .)
    CHAR            reduce using rule 300 (end_scope -> .)
    FLOAT           reduce using rule 300 (end_scope -> .)
    DOUBLE          reduce using rule 300 (end_scope -> .)
    THIS            reduce using rule 300 (end_scope -> .)
    LPAREN          reduce using rule 300 (end_scope -> .)
    DECIMAL_LITERAL reduce using rule 300 (end_scope -> .)
    HEX_LITERAL     reduce using rule 300 (end_scope -> .)
    BINARY_LITERAL  reduce using rule 300 (end_scope -> .)
    FLOAT_LITERAL   reduce using rule 300 (end_scope -> .)
    BOOL_LITERAL    reduce using rule 300 (end_scope -> .)
    CHAR_LITERAL    reduce using rule 300 (end_scope -> .)
    STRING_LITERAL  reduce using rule 300 (end_scope -> .)
    NULL            reduce using rule 300 (end_scope -> .)
    CASE            reduce using rule 300 (end_scope -> .)
    DEFAULT         reduce using rule 300 (end_scope -> .)

    end_scope                      shift and go to state 522

state 508

    (166) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (181) for_l1 -> .

    IDENTIFIER      reduce using rule 181 (for_l1 -> .)
    IF              reduce using rule 181 (for_l1 -> .)
    WHILE           reduce using rule 181 (for_l1 -> .)
    FOR             reduce using rule 181 (for_l1 -> .)
    LBRACE          reduce using rule 181 (for_l1 -> .)
    SEMI            reduce using rule 181 (for_l1 -> .)
    SWITCH          reduce using rule 181 (for_l1 -> .)
    DO              reduce using rule 181 (for_l1 -> .)
    BREAK           reduce using rule 181 (for_l1 -> .)
    CONTINUE        reduce using rule 181 (for_l1 -> .)
    RETURN          reduce using rule 181 (for_l1 -> .)
    INC             reduce using rule 181 (for_l1 -> .)
    DEC             reduce using rule 181 (for_l1 -> .)
    NEW             reduce using rule 181 (for_l1 -> .)
    THIS            reduce using rule 181 (for_l1 -> .)
    LPAREN          reduce using rule 181 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 181 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 181 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 181 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 181 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 181 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 181 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 181 (for_l1 -> .)
    NULL            reduce using rule 181 (for_l1 -> .)

    for_l1                         shift and go to state 523

state 509

    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 126
    IF              shift and go to state 127
    WHILE           shift and go to state 129
    FOR             shift and go to state 130
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    Statement                      shift and go to state 524
    StatementWithoutTrailingSubstatement shift and go to state 111
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    StatementExpression            shift and go to state 131
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 510

    (162) DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope . dwhile_l2
    (164) dwhile_l2 -> .

    RBRACE          reduce using rule 164 (dwhile_l2 -> .)
    IDENTIFIER      reduce using rule 164 (dwhile_l2 -> .)
    IF              reduce using rule 164 (dwhile_l2 -> .)
    WHILE           reduce using rule 164 (dwhile_l2 -> .)
    FOR             reduce using rule 164 (dwhile_l2 -> .)
    LBRACE          reduce using rule 164 (dwhile_l2 -> .)
    SEMI            reduce using rule 164 (dwhile_l2 -> .)
    SWITCH          reduce using rule 164 (dwhile_l2 -> .)
    DO              reduce using rule 164 (dwhile_l2 -> .)
    BREAK           reduce using rule 164 (dwhile_l2 -> .)
    CONTINUE        reduce using rule 164 (dwhile_l2 -> .)
    RETURN          reduce using rule 164 (dwhile_l2 -> .)
    BOOLEAN         reduce using rule 164 (dwhile_l2 -> .)
    INC             reduce using rule 164 (dwhile_l2 -> .)
    DEC             reduce using rule 164 (dwhile_l2 -> .)
    NEW             reduce using rule 164 (dwhile_l2 -> .)
    BYTE            reduce using rule 164 (dwhile_l2 -> .)
    SHORT           reduce using rule 164 (dwhile_l2 -> .)
    INT             reduce using rule 164 (dwhile_l2 -> .)
    LONG            reduce using rule 164 (dwhile_l2 -> .)
    CHAR            reduce using rule 164 (dwhile_l2 -> .)
    FLOAT           reduce using rule 164 (dwhile_l2 -> .)
    DOUBLE          reduce using rule 164 (dwhile_l2 -> .)
    THIS            reduce using rule 164 (dwhile_l2 -> .)
    LPAREN          reduce using rule 164 (dwhile_l2 -> .)
    DECIMAL_LITERAL reduce using rule 164 (dwhile_l2 -> .)
    HEX_LITERAL     reduce using rule 164 (dwhile_l2 -> .)
    BINARY_LITERAL  reduce using rule 164 (dwhile_l2 -> .)
    FLOAT_LITERAL   reduce using rule 164 (dwhile_l2 -> .)
    BOOL_LITERAL    reduce using rule 164 (dwhile_l2 -> .)
    CHAR_LITERAL    reduce using rule 164 (dwhile_l2 -> .)
    STRING_LITERAL  reduce using rule 164 (dwhile_l2 -> .)
    NULL            reduce using rule 164 (dwhile_l2 -> .)
    CASE            reduce using rule 164 (dwhile_l2 -> .)
    DEFAULT         reduce using rule 164 (dwhile_l2 -> .)
    ELSE            reduce using rule 164 (dwhile_l2 -> .)

    dwhile_l2                      shift and go to state 525

state 511

    (143) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf . end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (144) IfThenElseStatementNoShortIf -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf . end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (300) end_scope -> .

    ELSE            reduce using rule 300 (end_scope -> .)

    end_scope                      shift and go to state 526

state 512

    (143) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope . ifMark2
    (141) ifMark2 -> .

    RBRACE          reduce using rule 141 (ifMark2 -> .)
    IDENTIFIER      reduce using rule 141 (ifMark2 -> .)
    IF              reduce using rule 141 (ifMark2 -> .)
    WHILE           reduce using rule 141 (ifMark2 -> .)
    FOR             reduce using rule 141 (ifMark2 -> .)
    LBRACE          reduce using rule 141 (ifMark2 -> .)
    SEMI            reduce using rule 141 (ifMark2 -> .)
    SWITCH          reduce using rule 141 (ifMark2 -> .)
    DO              reduce using rule 141 (ifMark2 -> .)
    BREAK           reduce using rule 141 (ifMark2 -> .)
    CONTINUE        reduce using rule 141 (ifMark2 -> .)
    RETURN          reduce using rule 141 (ifMark2 -> .)
    BOOLEAN         reduce using rule 141 (ifMark2 -> .)
    INC             reduce using rule 141 (ifMark2 -> .)
    DEC             reduce using rule 141 (ifMark2 -> .)
    NEW             reduce using rule 141 (ifMark2 -> .)
    BYTE            reduce using rule 141 (ifMark2 -> .)
    SHORT           reduce using rule 141 (ifMark2 -> .)
    INT             reduce using rule 141 (ifMark2 -> .)
    LONG            reduce using rule 141 (ifMark2 -> .)
    CHAR            reduce using rule 141 (ifMark2 -> .)
    FLOAT           reduce using rule 141 (ifMark2 -> .)
    DOUBLE          reduce using rule 141 (ifMark2 -> .)
    THIS            reduce using rule 141 (ifMark2 -> .)
    LPAREN          reduce using rule 141 (ifMark2 -> .)
    DECIMAL_LITERAL reduce using rule 141 (ifMark2 -> .)
    HEX_LITERAL     reduce using rule 141 (ifMark2 -> .)
    BINARY_LITERAL  reduce using rule 141 (ifMark2 -> .)
    FLOAT_LITERAL   reduce using rule 141 (ifMark2 -> .)
    BOOL_LITERAL    reduce using rule 141 (ifMark2 -> .)
    CHAR_LITERAL    reduce using rule 141 (ifMark2 -> .)
    STRING_LITERAL  reduce using rule 141 (ifMark2 -> .)
    NULL            reduce using rule 141 (ifMark2 -> .)
    CASE            reduce using rule 141 (ifMark2 -> .)
    DEFAULT         reduce using rule 141 (ifMark2 -> .)

    ifMark2                        shift and go to state 527

state 513

    (157) WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN . while_l1 Statement end_scope while_l2
    (158) WhileStatementNoShortIf -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN . while_l1 StatementNoShortIf end_scope while_l2
    (160) while_l1 -> .

    IDENTIFIER      reduce using rule 160 (while_l1 -> .)
    IF              reduce using rule 160 (while_l1 -> .)
    WHILE           reduce using rule 160 (while_l1 -> .)
    FOR             reduce using rule 160 (while_l1 -> .)
    LBRACE          reduce using rule 160 (while_l1 -> .)
    SEMI            reduce using rule 160 (while_l1 -> .)
    SWITCH          reduce using rule 160 (while_l1 -> .)
    DO              reduce using rule 160 (while_l1 -> .)
    BREAK           reduce using rule 160 (while_l1 -> .)
    CONTINUE        reduce using rule 160 (while_l1 -> .)
    RETURN          reduce using rule 160 (while_l1 -> .)
    INC             reduce using rule 160 (while_l1 -> .)
    DEC             reduce using rule 160 (while_l1 -> .)
    NEW             reduce using rule 160 (while_l1 -> .)
    THIS            reduce using rule 160 (while_l1 -> .)
    LPAREN          reduce using rule 160 (while_l1 -> .)
    DECIMAL_LITERAL reduce using rule 160 (while_l1 -> .)
    HEX_LITERAL     reduce using rule 160 (while_l1 -> .)
    BINARY_LITERAL  reduce using rule 160 (while_l1 -> .)
    FLOAT_LITERAL   reduce using rule 160 (while_l1 -> .)
    BOOL_LITERAL    reduce using rule 160 (while_l1 -> .)
    CHAR_LITERAL    reduce using rule 160 (while_l1 -> .)
    STRING_LITERAL  reduce using rule 160 (while_l1 -> .)
    NULL            reduce using rule 160 (while_l1 -> .)

    while_l1                       shift and go to state 528

state 514

    (165) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 . Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 . SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 . Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 . SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 . Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (175) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 . SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 . Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 . SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (295) Expression -> . AssignmentExpression
    (277) AssignmentExpression -> . ConditionalExpression
    (278) AssignmentExpression -> . Assignment
    (275) ConditionalExpression -> . ConditionalOrExpression
    (276) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (272) ConditionalOrExpression -> . ConditionalAndExpression
    (273) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (270) ConditionalAndExpression -> . InclusiveOrExpression
    (271) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (268) InclusiveOrExpression -> . ExclusiveOrExpression
    (269) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (266) ExclusiveOrExpression -> . AndExpression
    (267) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (264) AndExpression -> . EqualityExpression
    (265) AndExpression -> . AndExpression BITAND EqualityExpression
    (261) EqualityExpression -> . RelationalExpression
    (262) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (263) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (256) RelationalExpression -> . ShiftExpression
    (257) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (258) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (259) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (260) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (252) ShiftExpression -> . AdditiveExpression
    (253) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (254) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (255) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (249) AdditiveExpression -> . MultiplicativeExpression
    (250) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (251) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (245) MultiplicativeExpression -> . UnaryExpression
    (246) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (247) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (248) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (230) UnaryExpression -> . PreIncrementExpression
    (231) UnaryExpression -> . PreDecrementExpression
    (232) UnaryExpression -> . ADD UnaryExpression
    (233) UnaryExpression -> . SUB UnaryExpression
    (234) UnaryExpression -> . UnaryExpressionNotAddSub
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (237) UnaryExpressionNotAddSub -> . PostfixExpression
    (238) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (239) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (240) UnaryExpressionNotAddSub -> . CastExpression
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (241) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (242) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (243) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (244) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC

    SEMI            shift and go to state 529
    IDENTIFIER      shift and go to state 61
    THIS            shift and go to state 157
    LPAREN          shift and go to state 188
    NEW             shift and go to state 203
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165
    ADD             shift and go to state 209
    SUB             shift and go to state 210
    INC             shift and go to state 146
    DEC             shift and go to state 147
    BANG            shift and go to state 216
    TILDE           shift and go to state 217

    Expression                     shift and go to state 530
    AssignmentExpression           shift and go to state 190
    ConditionalExpression          shift and go to state 191
    Assignment                     shift and go to state 192
    ConditionalOrExpression        shift and go to state 193
    LeftHandSide                   shift and go to state 145
    ConditionalAndExpression       shift and go to state 194
    Name                           shift and go to state 195
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    InclusiveOrExpression          shift and go to state 196
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Primary                        shift and go to state 197
    PrimaryNoNewArray              shift and go to state 198
    ExclusiveOrExpression          shift and go to state 199
    ArrayCreationExpression        shift and go to state 155
    Literal                        shift and go to state 156
    ClassInstanceCreationExpression shift and go to state 200
    MethodInvocation               shift and go to state 201
    AndExpression                  shift and go to state 202
    EqualityExpression             shift and go to state 204
    RelationalExpression           shift and go to state 205
    ShiftExpression                shift and go to state 206
    AdditiveExpression             shift and go to state 207
    MultiplicativeExpression       shift and go to state 208
    UnaryExpression                shift and go to state 211
    PreIncrementExpression         shift and go to state 212
    PreDecrementExpression         shift and go to state 213
    UnaryExpressionNotAddSub       shift and go to state 214
    PostfixExpression              shift and go to state 215
    CastExpression                 shift and go to state 218
    PostIncrementExpression        shift and go to state 219
    PostDecrementExpression        shift and go to state 220

state 515

    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI . for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI . for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (179) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI . for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI . for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (181) for_l1 -> .

    INC             reduce using rule 181 (for_l1 -> .)
    DEC             reduce using rule 181 (for_l1 -> .)
    NEW             reduce using rule 181 (for_l1 -> .)
    THIS            reduce using rule 181 (for_l1 -> .)
    LPAREN          reduce using rule 181 (for_l1 -> .)
    IDENTIFIER      reduce using rule 181 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 181 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 181 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 181 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 181 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 181 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 181 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 181 (for_l1 -> .)
    NULL            reduce using rule 181 (for_l1 -> .)
    RPAREN          reduce using rule 181 (for_l1 -> .)

    for_l1                         shift and go to state 531

state 516

    (166) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression . SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression . SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression . SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression . SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2

    SEMI            shift and go to state 532


state 517

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 126
    IF              shift and go to state 127
    WHILE           shift and go to state 129
    FOR             shift and go to state 130
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    Statement                      shift and go to state 533
    StatementWithoutTrailingSubstatement shift and go to state 111
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    StatementExpression            shift and go to state 131
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 518

    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement . end_scope for_l2
    (300) end_scope -> .

    RBRACE          reduce using rule 300 (end_scope -> .)
    IDENTIFIER      reduce using rule 300 (end_scope -> .)
    IF              reduce using rule 300 (end_scope -> .)
    WHILE           reduce using rule 300 (end_scope -> .)
    FOR             reduce using rule 300 (end_scope -> .)
    LBRACE          reduce using rule 300 (end_scope -> .)
    SEMI            reduce using rule 300 (end_scope -> .)
    SWITCH          reduce using rule 300 (end_scope -> .)
    DO              reduce using rule 300 (end_scope -> .)
    BREAK           reduce using rule 300 (end_scope -> .)
    CONTINUE        reduce using rule 300 (end_scope -> .)
    RETURN          reduce using rule 300 (end_scope -> .)
    BOOLEAN         reduce using rule 300 (end_scope -> .)
    INC             reduce using rule 300 (end_scope -> .)
    DEC             reduce using rule 300 (end_scope -> .)
    NEW             reduce using rule 300 (end_scope -> .)
    BYTE            reduce using rule 300 (end_scope -> .)
    SHORT           reduce using rule 300 (end_scope -> .)
    INT             reduce using rule 300 (end_scope -> .)
    LONG            reduce using rule 300 (end_scope -> .)
    CHAR            reduce using rule 300 (end_scope -> .)
    FLOAT           reduce using rule 300 (end_scope -> .)
    DOUBLE          reduce using rule 300 (end_scope -> .)
    THIS            reduce using rule 300 (end_scope -> .)
    LPAREN          reduce using rule 300 (end_scope -> .)
    DECIMAL_LITERAL reduce using rule 300 (end_scope -> .)
    HEX_LITERAL     reduce using rule 300 (end_scope -> .)
    BINARY_LITERAL  reduce using rule 300 (end_scope -> .)
    FLOAT_LITERAL   reduce using rule 300 (end_scope -> .)
    BOOL_LITERAL    reduce using rule 300 (end_scope -> .)
    CHAR_LITERAL    reduce using rule 300 (end_scope -> .)
    STRING_LITERAL  reduce using rule 300 (end_scope -> .)
    NULL            reduce using rule 300 (end_scope -> .)
    CASE            reduce using rule 300 (end_scope -> .)
    DEFAULT         reduce using rule 300 (end_scope -> .)

    end_scope                      shift and go to state 534

state 519

    (165) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (181) for_l1 -> .

    IDENTIFIER      reduce using rule 181 (for_l1 -> .)
    IF              reduce using rule 181 (for_l1 -> .)
    WHILE           reduce using rule 181 (for_l1 -> .)
    FOR             reduce using rule 181 (for_l1 -> .)
    LBRACE          reduce using rule 181 (for_l1 -> .)
    SEMI            reduce using rule 181 (for_l1 -> .)
    SWITCH          reduce using rule 181 (for_l1 -> .)
    DO              reduce using rule 181 (for_l1 -> .)
    BREAK           reduce using rule 181 (for_l1 -> .)
    CONTINUE        reduce using rule 181 (for_l1 -> .)
    RETURN          reduce using rule 181 (for_l1 -> .)
    INC             reduce using rule 181 (for_l1 -> .)
    DEC             reduce using rule 181 (for_l1 -> .)
    NEW             reduce using rule 181 (for_l1 -> .)
    THIS            reduce using rule 181 (for_l1 -> .)
    LPAREN          reduce using rule 181 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 181 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 181 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 181 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 181 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 181 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 181 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 181 (for_l1 -> .)
    NULL            reduce using rule 181 (for_l1 -> .)

    for_l1                         shift and go to state 535

state 520

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 126
    IF              shift and go to state 127
    WHILE           shift and go to state 129
    FOR             shift and go to state 130
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    Statement                      shift and go to state 536
    StatementWithoutTrailingSubstatement shift and go to state 111
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    StatementExpression            shift and go to state 131
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 521

    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement . end_scope for_l2
    (300) end_scope -> .

    RBRACE          reduce using rule 300 (end_scope -> .)
    IDENTIFIER      reduce using rule 300 (end_scope -> .)
    IF              reduce using rule 300 (end_scope -> .)
    WHILE           reduce using rule 300 (end_scope -> .)
    FOR             reduce using rule 300 (end_scope -> .)
    LBRACE          reduce using rule 300 (end_scope -> .)
    SEMI            reduce using rule 300 (end_scope -> .)
    SWITCH          reduce using rule 300 (end_scope -> .)
    DO              reduce using rule 300 (end_scope -> .)
    BREAK           reduce using rule 300 (end_scope -> .)
    CONTINUE        reduce using rule 300 (end_scope -> .)
    RETURN          reduce using rule 300 (end_scope -> .)
    BOOLEAN         reduce using rule 300 (end_scope -> .)
    INC             reduce using rule 300 (end_scope -> .)
    DEC             reduce using rule 300 (end_scope -> .)
    NEW             reduce using rule 300 (end_scope -> .)
    BYTE            reduce using rule 300 (end_scope -> .)
    SHORT           reduce using rule 300 (end_scope -> .)
    INT             reduce using rule 300 (end_scope -> .)
    LONG            reduce using rule 300 (end_scope -> .)
    CHAR            reduce using rule 300 (end_scope -> .)
    FLOAT           reduce using rule 300 (end_scope -> .)
    DOUBLE          reduce using rule 300 (end_scope -> .)
    THIS            reduce using rule 300 (end_scope -> .)
    LPAREN          reduce using rule 300 (end_scope -> .)
    DECIMAL_LITERAL reduce using rule 300 (end_scope -> .)
    HEX_LITERAL     reduce using rule 300 (end_scope -> .)
    BINARY_LITERAL  reduce using rule 300 (end_scope -> .)
    FLOAT_LITERAL   reduce using rule 300 (end_scope -> .)
    BOOL_LITERAL    reduce using rule 300 (end_scope -> .)
    CHAR_LITERAL    reduce using rule 300 (end_scope -> .)
    STRING_LITERAL  reduce using rule 300 (end_scope -> .)
    NULL            reduce using rule 300 (end_scope -> .)
    CASE            reduce using rule 300 (end_scope -> .)
    DEFAULT         reduce using rule 300 (end_scope -> .)

    end_scope                      shift and go to state 537

state 522

    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope . for_l2
    (182) for_l2 -> .

    RBRACE          reduce using rule 182 (for_l2 -> .)
    IDENTIFIER      reduce using rule 182 (for_l2 -> .)
    IF              reduce using rule 182 (for_l2 -> .)
    WHILE           reduce using rule 182 (for_l2 -> .)
    FOR             reduce using rule 182 (for_l2 -> .)
    LBRACE          reduce using rule 182 (for_l2 -> .)
    SEMI            reduce using rule 182 (for_l2 -> .)
    SWITCH          reduce using rule 182 (for_l2 -> .)
    DO              reduce using rule 182 (for_l2 -> .)
    BREAK           reduce using rule 182 (for_l2 -> .)
    CONTINUE        reduce using rule 182 (for_l2 -> .)
    RETURN          reduce using rule 182 (for_l2 -> .)
    BOOLEAN         reduce using rule 182 (for_l2 -> .)
    INC             reduce using rule 182 (for_l2 -> .)
    DEC             reduce using rule 182 (for_l2 -> .)
    NEW             reduce using rule 182 (for_l2 -> .)
    BYTE            reduce using rule 182 (for_l2 -> .)
    SHORT           reduce using rule 182 (for_l2 -> .)
    INT             reduce using rule 182 (for_l2 -> .)
    LONG            reduce using rule 182 (for_l2 -> .)
    CHAR            reduce using rule 182 (for_l2 -> .)
    FLOAT           reduce using rule 182 (for_l2 -> .)
    DOUBLE          reduce using rule 182 (for_l2 -> .)
    THIS            reduce using rule 182 (for_l2 -> .)
    LPAREN          reduce using rule 182 (for_l2 -> .)
    DECIMAL_LITERAL reduce using rule 182 (for_l2 -> .)
    HEX_LITERAL     reduce using rule 182 (for_l2 -> .)
    BINARY_LITERAL  reduce using rule 182 (for_l2 -> .)
    FLOAT_LITERAL   reduce using rule 182 (for_l2 -> .)
    BOOL_LITERAL    reduce using rule 182 (for_l2 -> .)
    CHAR_LITERAL    reduce using rule 182 (for_l2 -> .)
    STRING_LITERAL  reduce using rule 182 (for_l2 -> .)
    NULL            reduce using rule 182 (for_l2 -> .)
    CASE            reduce using rule 182 (for_l2 -> .)
    DEFAULT         reduce using rule 182 (for_l2 -> .)

    for_l2                         shift and go to state 538

state 523

    (166) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 126
    IF              shift and go to state 127
    WHILE           shift and go to state 129
    FOR             shift and go to state 130
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    Statement                      shift and go to state 539
    StatementWithoutTrailingSubstatement shift and go to state 111
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    StatementExpression            shift and go to state 131
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 524

    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement . end_scope for_l2
    (300) end_scope -> .

    RBRACE          reduce using rule 300 (end_scope -> .)
    IDENTIFIER      reduce using rule 300 (end_scope -> .)
    IF              reduce using rule 300 (end_scope -> .)
    WHILE           reduce using rule 300 (end_scope -> .)
    FOR             reduce using rule 300 (end_scope -> .)
    LBRACE          reduce using rule 300 (end_scope -> .)
    SEMI            reduce using rule 300 (end_scope -> .)
    SWITCH          reduce using rule 300 (end_scope -> .)
    DO              reduce using rule 300 (end_scope -> .)
    BREAK           reduce using rule 300 (end_scope -> .)
    CONTINUE        reduce using rule 300 (end_scope -> .)
    RETURN          reduce using rule 300 (end_scope -> .)
    BOOLEAN         reduce using rule 300 (end_scope -> .)
    INC             reduce using rule 300 (end_scope -> .)
    DEC             reduce using rule 300 (end_scope -> .)
    NEW             reduce using rule 300 (end_scope -> .)
    BYTE            reduce using rule 300 (end_scope -> .)
    SHORT           reduce using rule 300 (end_scope -> .)
    INT             reduce using rule 300 (end_scope -> .)
    LONG            reduce using rule 300 (end_scope -> .)
    CHAR            reduce using rule 300 (end_scope -> .)
    FLOAT           reduce using rule 300 (end_scope -> .)
    DOUBLE          reduce using rule 300 (end_scope -> .)
    THIS            reduce using rule 300 (end_scope -> .)
    LPAREN          reduce using rule 300 (end_scope -> .)
    DECIMAL_LITERAL reduce using rule 300 (end_scope -> .)
    HEX_LITERAL     reduce using rule 300 (end_scope -> .)
    BINARY_LITERAL  reduce using rule 300 (end_scope -> .)
    FLOAT_LITERAL   reduce using rule 300 (end_scope -> .)
    BOOL_LITERAL    reduce using rule 300 (end_scope -> .)
    CHAR_LITERAL    reduce using rule 300 (end_scope -> .)
    STRING_LITERAL  reduce using rule 300 (end_scope -> .)
    NULL            reduce using rule 300 (end_scope -> .)
    CASE            reduce using rule 300 (end_scope -> .)
    DEFAULT         reduce using rule 300 (end_scope -> .)

    end_scope                      shift and go to state 540

state 525

    (162) DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .

    RBRACE          reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    IDENTIFIER      reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    IF              reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    WHILE           reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    FOR             reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    LBRACE          reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    SEMI            reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    SWITCH          reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    DO              reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    BREAK           reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    CONTINUE        reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    RETURN          reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    BOOLEAN         reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    INC             reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    DEC             reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    NEW             reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    BYTE            reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    SHORT           reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    INT             reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    LONG            reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    CHAR            reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    FLOAT           reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    DOUBLE          reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    THIS            reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    LPAREN          reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    DECIMAL_LITERAL reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    HEX_LITERAL     reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    BINARY_LITERAL  reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    FLOAT_LITERAL   reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    BOOL_LITERAL    reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    CHAR_LITERAL    reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    STRING_LITERAL  reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    NULL            reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    CASE            reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    DEFAULT         reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    ELSE            reduce using rule 162 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)


state 526

    (143) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope . ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (144) IfThenElseStatementNoShortIf -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope . ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2

    ELSE            shift and go to state 541


state 527

    (143) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .

    RBRACE          reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    IDENTIFIER      reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    IF              reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    WHILE           reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    FOR             reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    LBRACE          reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    SEMI            reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    SWITCH          reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    DO              reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    BREAK           reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    CONTINUE        reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    RETURN          reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    BOOLEAN         reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    INC             reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    DEC             reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    NEW             reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    BYTE            reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    SHORT           reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    INT             reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    LONG            reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    CHAR            reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    FLOAT           reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    DOUBLE          reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    THIS            reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    LPAREN          reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    DECIMAL_LITERAL reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    HEX_LITERAL     reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    BINARY_LITERAL  reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    FLOAT_LITERAL   reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    BOOL_LITERAL    reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    CHAR_LITERAL    reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    STRING_LITERAL  reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    NULL            reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    CASE            reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    DEFAULT         reduce using rule 143 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)


state 528

    (157) WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 . Statement end_scope while_l2
    (158) WhileStatementNoShortIf -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 . StatementNoShortIf end_scope while_l2
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (115) StatementNoShortIf -> . StatementWithoutTrailingSubstatement
    (116) StatementNoShortIf -> . LabeledStatementNoShortIf
    (117) StatementNoShortIf -> . IfThenElseStatementNoShortIf
    (118) StatementNoShortIf -> . WhileStatementNoShortIf
    (119) StatementNoShortIf -> . ForStatementNoShortIf
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (130) LabeledStatementNoShortIf -> . IDENTIFIER COLON StatementNoShortIf
    (144) IfThenElseStatementNoShortIf -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (158) WhileStatementNoShortIf -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (173) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (174) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (175) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 415
    IF              shift and go to state 407
    WHILE           shift and go to state 416
    FOR             shift and go to state 417
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    Statement                      shift and go to state 456
    StatementNoShortIf             shift and go to state 542
    StatementWithoutTrailingSubstatement shift and go to state 410
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    LabeledStatementNoShortIf      shift and go to state 411
    IfThenElseStatementNoShortIf   shift and go to state 412
    WhileStatementNoShortIf        shift and go to state 413
    ForStatementNoShortIf          shift and go to state 414
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    StatementExpression            shift and go to state 131
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 529

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI . for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI . for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (175) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI . for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI . for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (181) for_l1 -> .

    INC             reduce using rule 181 (for_l1 -> .)
    DEC             reduce using rule 181 (for_l1 -> .)
    NEW             reduce using rule 181 (for_l1 -> .)
    THIS            reduce using rule 181 (for_l1 -> .)
    LPAREN          reduce using rule 181 (for_l1 -> .)
    IDENTIFIER      reduce using rule 181 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 181 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 181 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 181 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 181 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 181 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 181 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 181 (for_l1 -> .)
    NULL            reduce using rule 181 (for_l1 -> .)
    RPAREN          reduce using rule 181 (for_l1 -> .)

    for_l1                         shift and go to state 543

state 530

    (165) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression . SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression . SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression . SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression . SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2

    SEMI            shift and go to state 544


state 531

    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 . ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (179) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 . ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 . for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (186) ForUpdate -> . StatementExpressionList
    (183) for_l3 -> .
    (187) StatementExpressionList -> . StatementExpression
    (188) StatementExpressionList -> . StatementExpressionList COMMA StatementExpression
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RPAREN          reduce using rule 183 (for_l3 -> .)
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    ForUpdate                      shift and go to state 545
    for_l3                         shift and go to state 546
    StatementExpressionList        shift and go to state 461
    StatementExpression            shift and go to state 383
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 532

    (166) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI . for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI . for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI . for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI . for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (181) for_l1 -> .

    INC             reduce using rule 181 (for_l1 -> .)
    DEC             reduce using rule 181 (for_l1 -> .)
    NEW             reduce using rule 181 (for_l1 -> .)
    THIS            reduce using rule 181 (for_l1 -> .)
    LPAREN          reduce using rule 181 (for_l1 -> .)
    IDENTIFIER      reduce using rule 181 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 181 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 181 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 181 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 181 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 181 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 181 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 181 (for_l1 -> .)
    NULL            reduce using rule 181 (for_l1 -> .)
    RPAREN          reduce using rule 181 (for_l1 -> .)

    for_l1                         shift and go to state 547

state 533

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement . end_scope for_l2
    (300) end_scope -> .

    RBRACE          reduce using rule 300 (end_scope -> .)
    IDENTIFIER      reduce using rule 300 (end_scope -> .)
    IF              reduce using rule 300 (end_scope -> .)
    WHILE           reduce using rule 300 (end_scope -> .)
    FOR             reduce using rule 300 (end_scope -> .)
    LBRACE          reduce using rule 300 (end_scope -> .)
    SEMI            reduce using rule 300 (end_scope -> .)
    SWITCH          reduce using rule 300 (end_scope -> .)
    DO              reduce using rule 300 (end_scope -> .)
    BREAK           reduce using rule 300 (end_scope -> .)
    CONTINUE        reduce using rule 300 (end_scope -> .)
    RETURN          reduce using rule 300 (end_scope -> .)
    BOOLEAN         reduce using rule 300 (end_scope -> .)
    INC             reduce using rule 300 (end_scope -> .)
    DEC             reduce using rule 300 (end_scope -> .)
    NEW             reduce using rule 300 (end_scope -> .)
    BYTE            reduce using rule 300 (end_scope -> .)
    SHORT           reduce using rule 300 (end_scope -> .)
    INT             reduce using rule 300 (end_scope -> .)
    LONG            reduce using rule 300 (end_scope -> .)
    CHAR            reduce using rule 300 (end_scope -> .)
    FLOAT           reduce using rule 300 (end_scope -> .)
    DOUBLE          reduce using rule 300 (end_scope -> .)
    THIS            reduce using rule 300 (end_scope -> .)
    LPAREN          reduce using rule 300 (end_scope -> .)
    DECIMAL_LITERAL reduce using rule 300 (end_scope -> .)
    HEX_LITERAL     reduce using rule 300 (end_scope -> .)
    BINARY_LITERAL  reduce using rule 300 (end_scope -> .)
    FLOAT_LITERAL   reduce using rule 300 (end_scope -> .)
    BOOL_LITERAL    reduce using rule 300 (end_scope -> .)
    CHAR_LITERAL    reduce using rule 300 (end_scope -> .)
    STRING_LITERAL  reduce using rule 300 (end_scope -> .)
    NULL            reduce using rule 300 (end_scope -> .)
    CASE            reduce using rule 300 (end_scope -> .)
    DEFAULT         reduce using rule 300 (end_scope -> .)

    end_scope                      shift and go to state 548

state 534

    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope . for_l2
    (182) for_l2 -> .

    RBRACE          reduce using rule 182 (for_l2 -> .)
    IDENTIFIER      reduce using rule 182 (for_l2 -> .)
    IF              reduce using rule 182 (for_l2 -> .)
    WHILE           reduce using rule 182 (for_l2 -> .)
    FOR             reduce using rule 182 (for_l2 -> .)
    LBRACE          reduce using rule 182 (for_l2 -> .)
    SEMI            reduce using rule 182 (for_l2 -> .)
    SWITCH          reduce using rule 182 (for_l2 -> .)
    DO              reduce using rule 182 (for_l2 -> .)
    BREAK           reduce using rule 182 (for_l2 -> .)
    CONTINUE        reduce using rule 182 (for_l2 -> .)
    RETURN          reduce using rule 182 (for_l2 -> .)
    BOOLEAN         reduce using rule 182 (for_l2 -> .)
    INC             reduce using rule 182 (for_l2 -> .)
    DEC             reduce using rule 182 (for_l2 -> .)
    NEW             reduce using rule 182 (for_l2 -> .)
    BYTE            reduce using rule 182 (for_l2 -> .)
    SHORT           reduce using rule 182 (for_l2 -> .)
    INT             reduce using rule 182 (for_l2 -> .)
    LONG            reduce using rule 182 (for_l2 -> .)
    CHAR            reduce using rule 182 (for_l2 -> .)
    FLOAT           reduce using rule 182 (for_l2 -> .)
    DOUBLE          reduce using rule 182 (for_l2 -> .)
    THIS            reduce using rule 182 (for_l2 -> .)
    LPAREN          reduce using rule 182 (for_l2 -> .)
    DECIMAL_LITERAL reduce using rule 182 (for_l2 -> .)
    HEX_LITERAL     reduce using rule 182 (for_l2 -> .)
    BINARY_LITERAL  reduce using rule 182 (for_l2 -> .)
    FLOAT_LITERAL   reduce using rule 182 (for_l2 -> .)
    BOOL_LITERAL    reduce using rule 182 (for_l2 -> .)
    CHAR_LITERAL    reduce using rule 182 (for_l2 -> .)
    STRING_LITERAL  reduce using rule 182 (for_l2 -> .)
    NULL            reduce using rule 182 (for_l2 -> .)
    CASE            reduce using rule 182 (for_l2 -> .)
    DEFAULT         reduce using rule 182 (for_l2 -> .)

    for_l2                         shift and go to state 549

state 535

    (165) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 126
    IF              shift and go to state 127
    WHILE           shift and go to state 129
    FOR             shift and go to state 130
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    Statement                      shift and go to state 550
    StatementWithoutTrailingSubstatement shift and go to state 111
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    StatementExpression            shift and go to state 131
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 536

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement . end_scope for_l2
    (300) end_scope -> .

    RBRACE          reduce using rule 300 (end_scope -> .)
    IDENTIFIER      reduce using rule 300 (end_scope -> .)
    IF              reduce using rule 300 (end_scope -> .)
    WHILE           reduce using rule 300 (end_scope -> .)
    FOR             reduce using rule 300 (end_scope -> .)
    LBRACE          reduce using rule 300 (end_scope -> .)
    SEMI            reduce using rule 300 (end_scope -> .)
    SWITCH          reduce using rule 300 (end_scope -> .)
    DO              reduce using rule 300 (end_scope -> .)
    BREAK           reduce using rule 300 (end_scope -> .)
    CONTINUE        reduce using rule 300 (end_scope -> .)
    RETURN          reduce using rule 300 (end_scope -> .)
    BOOLEAN         reduce using rule 300 (end_scope -> .)
    INC             reduce using rule 300 (end_scope -> .)
    DEC             reduce using rule 300 (end_scope -> .)
    NEW             reduce using rule 300 (end_scope -> .)
    BYTE            reduce using rule 300 (end_scope -> .)
    SHORT           reduce using rule 300 (end_scope -> .)
    INT             reduce using rule 300 (end_scope -> .)
    LONG            reduce using rule 300 (end_scope -> .)
    CHAR            reduce using rule 300 (end_scope -> .)
    FLOAT           reduce using rule 300 (end_scope -> .)
    DOUBLE          reduce using rule 300 (end_scope -> .)
    THIS            reduce using rule 300 (end_scope -> .)
    LPAREN          reduce using rule 300 (end_scope -> .)
    DECIMAL_LITERAL reduce using rule 300 (end_scope -> .)
    HEX_LITERAL     reduce using rule 300 (end_scope -> .)
    BINARY_LITERAL  reduce using rule 300 (end_scope -> .)
    FLOAT_LITERAL   reduce using rule 300 (end_scope -> .)
    BOOL_LITERAL    reduce using rule 300 (end_scope -> .)
    CHAR_LITERAL    reduce using rule 300 (end_scope -> .)
    STRING_LITERAL  reduce using rule 300 (end_scope -> .)
    NULL            reduce using rule 300 (end_scope -> .)
    CASE            reduce using rule 300 (end_scope -> .)
    DEFAULT         reduce using rule 300 (end_scope -> .)

    end_scope                      shift and go to state 551

state 537

    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope . for_l2
    (182) for_l2 -> .

    RBRACE          reduce using rule 182 (for_l2 -> .)
    IDENTIFIER      reduce using rule 182 (for_l2 -> .)
    IF              reduce using rule 182 (for_l2 -> .)
    WHILE           reduce using rule 182 (for_l2 -> .)
    FOR             reduce using rule 182 (for_l2 -> .)
    LBRACE          reduce using rule 182 (for_l2 -> .)
    SEMI            reduce using rule 182 (for_l2 -> .)
    SWITCH          reduce using rule 182 (for_l2 -> .)
    DO              reduce using rule 182 (for_l2 -> .)
    BREAK           reduce using rule 182 (for_l2 -> .)
    CONTINUE        reduce using rule 182 (for_l2 -> .)
    RETURN          reduce using rule 182 (for_l2 -> .)
    BOOLEAN         reduce using rule 182 (for_l2 -> .)
    INC             reduce using rule 182 (for_l2 -> .)
    DEC             reduce using rule 182 (for_l2 -> .)
    NEW             reduce using rule 182 (for_l2 -> .)
    BYTE            reduce using rule 182 (for_l2 -> .)
    SHORT           reduce using rule 182 (for_l2 -> .)
    INT             reduce using rule 182 (for_l2 -> .)
    LONG            reduce using rule 182 (for_l2 -> .)
    CHAR            reduce using rule 182 (for_l2 -> .)
    FLOAT           reduce using rule 182 (for_l2 -> .)
    DOUBLE          reduce using rule 182 (for_l2 -> .)
    THIS            reduce using rule 182 (for_l2 -> .)
    LPAREN          reduce using rule 182 (for_l2 -> .)
    DECIMAL_LITERAL reduce using rule 182 (for_l2 -> .)
    HEX_LITERAL     reduce using rule 182 (for_l2 -> .)
    BINARY_LITERAL  reduce using rule 182 (for_l2 -> .)
    FLOAT_LITERAL   reduce using rule 182 (for_l2 -> .)
    BOOL_LITERAL    reduce using rule 182 (for_l2 -> .)
    CHAR_LITERAL    reduce using rule 182 (for_l2 -> .)
    STRING_LITERAL  reduce using rule 182 (for_l2 -> .)
    NULL            reduce using rule 182 (for_l2 -> .)
    CASE            reduce using rule 182 (for_l2 -> .)
    DEFAULT         reduce using rule 182 (for_l2 -> .)

    for_l2                         shift and go to state 552

state 538

    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .

    RBRACE          reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IDENTIFIER      reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IF              reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    WHILE           reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FOR             reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LBRACE          reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SEMI            reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SWITCH          reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DO              reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BREAK           reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CONTINUE        reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    RETURN          reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOLEAN         reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INC             reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEC             reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NEW             reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BYTE            reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SHORT           reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INT             reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LONG            reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR            reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT           reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DOUBLE          reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    THIS            reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LPAREN          reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DECIMAL_LITERAL reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    HEX_LITERAL     reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BINARY_LITERAL  reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT_LITERAL   reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOL_LITERAL    reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR_LITERAL    reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    STRING_LITERAL  reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NULL            reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CASE            reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEFAULT         reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)


state 539

    (166) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement . end_scope for_l2
    (300) end_scope -> .

    RBRACE          reduce using rule 300 (end_scope -> .)
    IDENTIFIER      reduce using rule 300 (end_scope -> .)
    IF              reduce using rule 300 (end_scope -> .)
    WHILE           reduce using rule 300 (end_scope -> .)
    FOR             reduce using rule 300 (end_scope -> .)
    LBRACE          reduce using rule 300 (end_scope -> .)
    SEMI            reduce using rule 300 (end_scope -> .)
    SWITCH          reduce using rule 300 (end_scope -> .)
    DO              reduce using rule 300 (end_scope -> .)
    BREAK           reduce using rule 300 (end_scope -> .)
    CONTINUE        reduce using rule 300 (end_scope -> .)
    RETURN          reduce using rule 300 (end_scope -> .)
    BOOLEAN         reduce using rule 300 (end_scope -> .)
    INC             reduce using rule 300 (end_scope -> .)
    DEC             reduce using rule 300 (end_scope -> .)
    NEW             reduce using rule 300 (end_scope -> .)
    BYTE            reduce using rule 300 (end_scope -> .)
    SHORT           reduce using rule 300 (end_scope -> .)
    INT             reduce using rule 300 (end_scope -> .)
    LONG            reduce using rule 300 (end_scope -> .)
    CHAR            reduce using rule 300 (end_scope -> .)
    FLOAT           reduce using rule 300 (end_scope -> .)
    DOUBLE          reduce using rule 300 (end_scope -> .)
    THIS            reduce using rule 300 (end_scope -> .)
    LPAREN          reduce using rule 300 (end_scope -> .)
    DECIMAL_LITERAL reduce using rule 300 (end_scope -> .)
    HEX_LITERAL     reduce using rule 300 (end_scope -> .)
    BINARY_LITERAL  reduce using rule 300 (end_scope -> .)
    FLOAT_LITERAL   reduce using rule 300 (end_scope -> .)
    BOOL_LITERAL    reduce using rule 300 (end_scope -> .)
    CHAR_LITERAL    reduce using rule 300 (end_scope -> .)
    STRING_LITERAL  reduce using rule 300 (end_scope -> .)
    NULL            reduce using rule 300 (end_scope -> .)
    CASE            reduce using rule 300 (end_scope -> .)
    DEFAULT         reduce using rule 300 (end_scope -> .)

    end_scope                      shift and go to state 553

state 540

    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope . for_l2
    (182) for_l2 -> .

    RBRACE          reduce using rule 182 (for_l2 -> .)
    IDENTIFIER      reduce using rule 182 (for_l2 -> .)
    IF              reduce using rule 182 (for_l2 -> .)
    WHILE           reduce using rule 182 (for_l2 -> .)
    FOR             reduce using rule 182 (for_l2 -> .)
    LBRACE          reduce using rule 182 (for_l2 -> .)
    SEMI            reduce using rule 182 (for_l2 -> .)
    SWITCH          reduce using rule 182 (for_l2 -> .)
    DO              reduce using rule 182 (for_l2 -> .)
    BREAK           reduce using rule 182 (for_l2 -> .)
    CONTINUE        reduce using rule 182 (for_l2 -> .)
    RETURN          reduce using rule 182 (for_l2 -> .)
    BOOLEAN         reduce using rule 182 (for_l2 -> .)
    INC             reduce using rule 182 (for_l2 -> .)
    DEC             reduce using rule 182 (for_l2 -> .)
    NEW             reduce using rule 182 (for_l2 -> .)
    BYTE            reduce using rule 182 (for_l2 -> .)
    SHORT           reduce using rule 182 (for_l2 -> .)
    INT             reduce using rule 182 (for_l2 -> .)
    LONG            reduce using rule 182 (for_l2 -> .)
    CHAR            reduce using rule 182 (for_l2 -> .)
    FLOAT           reduce using rule 182 (for_l2 -> .)
    DOUBLE          reduce using rule 182 (for_l2 -> .)
    THIS            reduce using rule 182 (for_l2 -> .)
    LPAREN          reduce using rule 182 (for_l2 -> .)
    DECIMAL_LITERAL reduce using rule 182 (for_l2 -> .)
    HEX_LITERAL     reduce using rule 182 (for_l2 -> .)
    BINARY_LITERAL  reduce using rule 182 (for_l2 -> .)
    FLOAT_LITERAL   reduce using rule 182 (for_l2 -> .)
    BOOL_LITERAL    reduce using rule 182 (for_l2 -> .)
    CHAR_LITERAL    reduce using rule 182 (for_l2 -> .)
    STRING_LITERAL  reduce using rule 182 (for_l2 -> .)
    NULL            reduce using rule 182 (for_l2 -> .)
    CASE            reduce using rule 182 (for_l2 -> .)
    DEFAULT         reduce using rule 182 (for_l2 -> .)

    for_l2                         shift and go to state 554

state 541

    (143) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE . ifMark3 begin_scope Statement end_scope ifMark2
    (144) IfThenElseStatementNoShortIf -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE . ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (142) ifMark3 -> .

    IDENTIFIER      reduce using rule 142 (ifMark3 -> .)
    IF              reduce using rule 142 (ifMark3 -> .)
    WHILE           reduce using rule 142 (ifMark3 -> .)
    FOR             reduce using rule 142 (ifMark3 -> .)
    LBRACE          reduce using rule 142 (ifMark3 -> .)
    SEMI            reduce using rule 142 (ifMark3 -> .)
    SWITCH          reduce using rule 142 (ifMark3 -> .)
    DO              reduce using rule 142 (ifMark3 -> .)
    BREAK           reduce using rule 142 (ifMark3 -> .)
    CONTINUE        reduce using rule 142 (ifMark3 -> .)
    RETURN          reduce using rule 142 (ifMark3 -> .)
    INC             reduce using rule 142 (ifMark3 -> .)
    DEC             reduce using rule 142 (ifMark3 -> .)
    NEW             reduce using rule 142 (ifMark3 -> .)
    THIS            reduce using rule 142 (ifMark3 -> .)
    LPAREN          reduce using rule 142 (ifMark3 -> .)
    DECIMAL_LITERAL reduce using rule 142 (ifMark3 -> .)
    HEX_LITERAL     reduce using rule 142 (ifMark3 -> .)
    BINARY_LITERAL  reduce using rule 142 (ifMark3 -> .)
    FLOAT_LITERAL   reduce using rule 142 (ifMark3 -> .)
    BOOL_LITERAL    reduce using rule 142 (ifMark3 -> .)
    CHAR_LITERAL    reduce using rule 142 (ifMark3 -> .)
    STRING_LITERAL  reduce using rule 142 (ifMark3 -> .)
    NULL            reduce using rule 142 (ifMark3 -> .)

    ifMark3                        shift and go to state 555

state 542

    (158) WhileStatementNoShortIf -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf . end_scope while_l2
    (300) end_scope -> .

    ELSE            reduce using rule 300 (end_scope -> .)

    end_scope                      shift and go to state 556

state 543

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 . ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (175) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 . ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 . for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (186) ForUpdate -> . StatementExpressionList
    (183) for_l3 -> .
    (187) StatementExpressionList -> . StatementExpression
    (188) StatementExpressionList -> . StatementExpressionList COMMA StatementExpression
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RPAREN          reduce using rule 183 (for_l3 -> .)
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    ForUpdate                      shift and go to state 557
    for_l3                         shift and go to state 558
    StatementExpressionList        shift and go to state 461
    StatementExpression            shift and go to state 383
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 544

    (165) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI . for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI . for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI . for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI . for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (181) for_l1 -> .

    INC             reduce using rule 181 (for_l1 -> .)
    DEC             reduce using rule 181 (for_l1 -> .)
    NEW             reduce using rule 181 (for_l1 -> .)
    THIS            reduce using rule 181 (for_l1 -> .)
    LPAREN          reduce using rule 181 (for_l1 -> .)
    IDENTIFIER      reduce using rule 181 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 181 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 181 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 181 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 181 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 181 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 181 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 181 (for_l1 -> .)
    NULL            reduce using rule 181 (for_l1 -> .)
    RPAREN          reduce using rule 181 (for_l1 -> .)

    for_l1                         shift and go to state 559

state 545

    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (179) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate . for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (183) for_l3 -> .

    RPAREN          reduce using rule 183 (for_l3 -> .)

    for_l3                         shift and go to state 560

state 546

    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 . RPAREN for_l1 Statement end_scope for_l2
    (180) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 . RPAREN for_l1 StatementNoShortIf end_scope for_l2

    RPAREN          shift and go to state 561


state 547

    (166) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 . ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 . ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 . for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (186) ForUpdate -> . StatementExpressionList
    (183) for_l3 -> .
    (187) StatementExpressionList -> . StatementExpression
    (188) StatementExpressionList -> . StatementExpressionList COMMA StatementExpression
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RPAREN          reduce using rule 183 (for_l3 -> .)
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    ForUpdate                      shift and go to state 562
    for_l3                         shift and go to state 563
    StatementExpressionList        shift and go to state 461
    StatementExpression            shift and go to state 383
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 548

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope . for_l2
    (182) for_l2 -> .

    RBRACE          reduce using rule 182 (for_l2 -> .)
    IDENTIFIER      reduce using rule 182 (for_l2 -> .)
    IF              reduce using rule 182 (for_l2 -> .)
    WHILE           reduce using rule 182 (for_l2 -> .)
    FOR             reduce using rule 182 (for_l2 -> .)
    LBRACE          reduce using rule 182 (for_l2 -> .)
    SEMI            reduce using rule 182 (for_l2 -> .)
    SWITCH          reduce using rule 182 (for_l2 -> .)
    DO              reduce using rule 182 (for_l2 -> .)
    BREAK           reduce using rule 182 (for_l2 -> .)
    CONTINUE        reduce using rule 182 (for_l2 -> .)
    RETURN          reduce using rule 182 (for_l2 -> .)
    BOOLEAN         reduce using rule 182 (for_l2 -> .)
    INC             reduce using rule 182 (for_l2 -> .)
    DEC             reduce using rule 182 (for_l2 -> .)
    NEW             reduce using rule 182 (for_l2 -> .)
    BYTE            reduce using rule 182 (for_l2 -> .)
    SHORT           reduce using rule 182 (for_l2 -> .)
    INT             reduce using rule 182 (for_l2 -> .)
    LONG            reduce using rule 182 (for_l2 -> .)
    CHAR            reduce using rule 182 (for_l2 -> .)
    FLOAT           reduce using rule 182 (for_l2 -> .)
    DOUBLE          reduce using rule 182 (for_l2 -> .)
    THIS            reduce using rule 182 (for_l2 -> .)
    LPAREN          reduce using rule 182 (for_l2 -> .)
    DECIMAL_LITERAL reduce using rule 182 (for_l2 -> .)
    HEX_LITERAL     reduce using rule 182 (for_l2 -> .)
    BINARY_LITERAL  reduce using rule 182 (for_l2 -> .)
    FLOAT_LITERAL   reduce using rule 182 (for_l2 -> .)
    BOOL_LITERAL    reduce using rule 182 (for_l2 -> .)
    CHAR_LITERAL    reduce using rule 182 (for_l2 -> .)
    STRING_LITERAL  reduce using rule 182 (for_l2 -> .)
    NULL            reduce using rule 182 (for_l2 -> .)
    CASE            reduce using rule 182 (for_l2 -> .)
    DEFAULT         reduce using rule 182 (for_l2 -> .)

    for_l2                         shift and go to state 564

state 549

    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .

    RBRACE          reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IDENTIFIER      reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IF              reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    WHILE           reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FOR             reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LBRACE          reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SEMI            reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SWITCH          reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DO              reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BREAK           reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CONTINUE        reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    RETURN          reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOLEAN         reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INC             reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEC             reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NEW             reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BYTE            reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SHORT           reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INT             reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LONG            reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR            reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT           reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DOUBLE          reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    THIS            reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LPAREN          reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DECIMAL_LITERAL reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    HEX_LITERAL     reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BINARY_LITERAL  reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT_LITERAL   reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOL_LITERAL    reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR_LITERAL    reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    STRING_LITERAL  reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NULL            reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CASE            reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEFAULT         reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)


state 550

    (165) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement . end_scope for_l2
    (300) end_scope -> .

    RBRACE          reduce using rule 300 (end_scope -> .)
    IDENTIFIER      reduce using rule 300 (end_scope -> .)
    IF              reduce using rule 300 (end_scope -> .)
    WHILE           reduce using rule 300 (end_scope -> .)
    FOR             reduce using rule 300 (end_scope -> .)
    LBRACE          reduce using rule 300 (end_scope -> .)
    SEMI            reduce using rule 300 (end_scope -> .)
    SWITCH          reduce using rule 300 (end_scope -> .)
    DO              reduce using rule 300 (end_scope -> .)
    BREAK           reduce using rule 300 (end_scope -> .)
    CONTINUE        reduce using rule 300 (end_scope -> .)
    RETURN          reduce using rule 300 (end_scope -> .)
    BOOLEAN         reduce using rule 300 (end_scope -> .)
    INC             reduce using rule 300 (end_scope -> .)
    DEC             reduce using rule 300 (end_scope -> .)
    NEW             reduce using rule 300 (end_scope -> .)
    BYTE            reduce using rule 300 (end_scope -> .)
    SHORT           reduce using rule 300 (end_scope -> .)
    INT             reduce using rule 300 (end_scope -> .)
    LONG            reduce using rule 300 (end_scope -> .)
    CHAR            reduce using rule 300 (end_scope -> .)
    FLOAT           reduce using rule 300 (end_scope -> .)
    DOUBLE          reduce using rule 300 (end_scope -> .)
    THIS            reduce using rule 300 (end_scope -> .)
    LPAREN          reduce using rule 300 (end_scope -> .)
    DECIMAL_LITERAL reduce using rule 300 (end_scope -> .)
    HEX_LITERAL     reduce using rule 300 (end_scope -> .)
    BINARY_LITERAL  reduce using rule 300 (end_scope -> .)
    FLOAT_LITERAL   reduce using rule 300 (end_scope -> .)
    BOOL_LITERAL    reduce using rule 300 (end_scope -> .)
    CHAR_LITERAL    reduce using rule 300 (end_scope -> .)
    STRING_LITERAL  reduce using rule 300 (end_scope -> .)
    NULL            reduce using rule 300 (end_scope -> .)
    CASE            reduce using rule 300 (end_scope -> .)
    DEFAULT         reduce using rule 300 (end_scope -> .)

    end_scope                      shift and go to state 565

state 551

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope . for_l2
    (182) for_l2 -> .

    RBRACE          reduce using rule 182 (for_l2 -> .)
    IDENTIFIER      reduce using rule 182 (for_l2 -> .)
    IF              reduce using rule 182 (for_l2 -> .)
    WHILE           reduce using rule 182 (for_l2 -> .)
    FOR             reduce using rule 182 (for_l2 -> .)
    LBRACE          reduce using rule 182 (for_l2 -> .)
    SEMI            reduce using rule 182 (for_l2 -> .)
    SWITCH          reduce using rule 182 (for_l2 -> .)
    DO              reduce using rule 182 (for_l2 -> .)
    BREAK           reduce using rule 182 (for_l2 -> .)
    CONTINUE        reduce using rule 182 (for_l2 -> .)
    RETURN          reduce using rule 182 (for_l2 -> .)
    BOOLEAN         reduce using rule 182 (for_l2 -> .)
    INC             reduce using rule 182 (for_l2 -> .)
    DEC             reduce using rule 182 (for_l2 -> .)
    NEW             reduce using rule 182 (for_l2 -> .)
    BYTE            reduce using rule 182 (for_l2 -> .)
    SHORT           reduce using rule 182 (for_l2 -> .)
    INT             reduce using rule 182 (for_l2 -> .)
    LONG            reduce using rule 182 (for_l2 -> .)
    CHAR            reduce using rule 182 (for_l2 -> .)
    FLOAT           reduce using rule 182 (for_l2 -> .)
    DOUBLE          reduce using rule 182 (for_l2 -> .)
    THIS            reduce using rule 182 (for_l2 -> .)
    LPAREN          reduce using rule 182 (for_l2 -> .)
    DECIMAL_LITERAL reduce using rule 182 (for_l2 -> .)
    HEX_LITERAL     reduce using rule 182 (for_l2 -> .)
    BINARY_LITERAL  reduce using rule 182 (for_l2 -> .)
    FLOAT_LITERAL   reduce using rule 182 (for_l2 -> .)
    BOOL_LITERAL    reduce using rule 182 (for_l2 -> .)
    CHAR_LITERAL    reduce using rule 182 (for_l2 -> .)
    STRING_LITERAL  reduce using rule 182 (for_l2 -> .)
    NULL            reduce using rule 182 (for_l2 -> .)
    CASE            reduce using rule 182 (for_l2 -> .)
    DEFAULT         reduce using rule 182 (for_l2 -> .)

    for_l2                         shift and go to state 566

state 552

    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .

    RBRACE          reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IDENTIFIER      reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IF              reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    WHILE           reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FOR             reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LBRACE          reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SEMI            reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SWITCH          reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DO              reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BREAK           reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CONTINUE        reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    RETURN          reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOLEAN         reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INC             reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEC             reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NEW             reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BYTE            reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SHORT           reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INT             reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LONG            reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR            reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT           reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DOUBLE          reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    THIS            reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LPAREN          reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DECIMAL_LITERAL reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    HEX_LITERAL     reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BINARY_LITERAL  reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT_LITERAL   reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOL_LITERAL    reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR_LITERAL    reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    STRING_LITERAL  reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NULL            reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CASE            reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEFAULT         reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)


state 553

    (166) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope . for_l2
    (182) for_l2 -> .

    RBRACE          reduce using rule 182 (for_l2 -> .)
    IDENTIFIER      reduce using rule 182 (for_l2 -> .)
    IF              reduce using rule 182 (for_l2 -> .)
    WHILE           reduce using rule 182 (for_l2 -> .)
    FOR             reduce using rule 182 (for_l2 -> .)
    LBRACE          reduce using rule 182 (for_l2 -> .)
    SEMI            reduce using rule 182 (for_l2 -> .)
    SWITCH          reduce using rule 182 (for_l2 -> .)
    DO              reduce using rule 182 (for_l2 -> .)
    BREAK           reduce using rule 182 (for_l2 -> .)
    CONTINUE        reduce using rule 182 (for_l2 -> .)
    RETURN          reduce using rule 182 (for_l2 -> .)
    BOOLEAN         reduce using rule 182 (for_l2 -> .)
    INC             reduce using rule 182 (for_l2 -> .)
    DEC             reduce using rule 182 (for_l2 -> .)
    NEW             reduce using rule 182 (for_l2 -> .)
    BYTE            reduce using rule 182 (for_l2 -> .)
    SHORT           reduce using rule 182 (for_l2 -> .)
    INT             reduce using rule 182 (for_l2 -> .)
    LONG            reduce using rule 182 (for_l2 -> .)
    CHAR            reduce using rule 182 (for_l2 -> .)
    FLOAT           reduce using rule 182 (for_l2 -> .)
    DOUBLE          reduce using rule 182 (for_l2 -> .)
    THIS            reduce using rule 182 (for_l2 -> .)
    LPAREN          reduce using rule 182 (for_l2 -> .)
    DECIMAL_LITERAL reduce using rule 182 (for_l2 -> .)
    HEX_LITERAL     reduce using rule 182 (for_l2 -> .)
    BINARY_LITERAL  reduce using rule 182 (for_l2 -> .)
    FLOAT_LITERAL   reduce using rule 182 (for_l2 -> .)
    BOOL_LITERAL    reduce using rule 182 (for_l2 -> .)
    CHAR_LITERAL    reduce using rule 182 (for_l2 -> .)
    STRING_LITERAL  reduce using rule 182 (for_l2 -> .)
    NULL            reduce using rule 182 (for_l2 -> .)
    CASE            reduce using rule 182 (for_l2 -> .)
    DEFAULT         reduce using rule 182 (for_l2 -> .)

    for_l2                         shift and go to state 567

state 554

    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .

    RBRACE          reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IDENTIFIER      reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IF              reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    WHILE           reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FOR             reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LBRACE          reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SEMI            reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SWITCH          reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DO              reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BREAK           reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CONTINUE        reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    RETURN          reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOLEAN         reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INC             reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEC             reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NEW             reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BYTE            reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SHORT           reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INT             reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LONG            reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR            reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT           reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DOUBLE          reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    THIS            reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LPAREN          reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DECIMAL_LITERAL reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    HEX_LITERAL     reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BINARY_LITERAL  reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT_LITERAL   reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOL_LITERAL    reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR_LITERAL    reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    STRING_LITERAL  reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NULL            reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CASE            reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEFAULT         reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)


state 555

    (143) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 . begin_scope Statement end_scope ifMark2
    (144) IfThenElseStatementNoShortIf -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 . begin_scope StatementNoShortIf end_scope ifMark2
    (299) begin_scope -> .

    IDENTIFIER      reduce using rule 299 (begin_scope -> .)
    IF              reduce using rule 299 (begin_scope -> .)
    WHILE           reduce using rule 299 (begin_scope -> .)
    FOR             reduce using rule 299 (begin_scope -> .)
    LBRACE          reduce using rule 299 (begin_scope -> .)
    SEMI            reduce using rule 299 (begin_scope -> .)
    SWITCH          reduce using rule 299 (begin_scope -> .)
    DO              reduce using rule 299 (begin_scope -> .)
    BREAK           reduce using rule 299 (begin_scope -> .)
    CONTINUE        reduce using rule 299 (begin_scope -> .)
    RETURN          reduce using rule 299 (begin_scope -> .)
    INC             reduce using rule 299 (begin_scope -> .)
    DEC             reduce using rule 299 (begin_scope -> .)
    NEW             reduce using rule 299 (begin_scope -> .)
    THIS            reduce using rule 299 (begin_scope -> .)
    LPAREN          reduce using rule 299 (begin_scope -> .)
    DECIMAL_LITERAL reduce using rule 299 (begin_scope -> .)
    HEX_LITERAL     reduce using rule 299 (begin_scope -> .)
    BINARY_LITERAL  reduce using rule 299 (begin_scope -> .)
    FLOAT_LITERAL   reduce using rule 299 (begin_scope -> .)
    BOOL_LITERAL    reduce using rule 299 (begin_scope -> .)
    CHAR_LITERAL    reduce using rule 299 (begin_scope -> .)
    STRING_LITERAL  reduce using rule 299 (begin_scope -> .)
    NULL            reduce using rule 299 (begin_scope -> .)

    begin_scope                    shift and go to state 568

state 556

    (158) WhileStatementNoShortIf -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope . while_l2
    (161) while_l2 -> .

    ELSE            reduce using rule 161 (while_l2 -> .)

    while_l2                       shift and go to state 569

state 557

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (175) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate . for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (183) for_l3 -> .

    RPAREN          reduce using rule 183 (for_l3 -> .)

    for_l3                         shift and go to state 570

state 558

    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 . RPAREN for_l1 Statement end_scope for_l2
    (177) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 . RPAREN for_l1 StatementNoShortIf end_scope for_l2

    RPAREN          shift and go to state 571


state 559

    (165) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 . ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 . ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 . for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (186) ForUpdate -> . StatementExpressionList
    (183) for_l3 -> .
    (187) StatementExpressionList -> . StatementExpression
    (188) StatementExpressionList -> . StatementExpressionList COMMA StatementExpression
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RPAREN          reduce using rule 183 (for_l3 -> .)
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    IDENTIFIER      shift and go to state 61
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    ForUpdate                      shift and go to state 572
    for_l3                         shift and go to state 573
    StatementExpressionList        shift and go to state 461
    StatementExpression            shift and go to state 383
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 560

    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 . RPAREN for_l1 Statement end_scope for_l2
    (179) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 . RPAREN for_l1 StatementNoShortIf end_scope for_l2

    RPAREN          shift and go to state 574


state 561

    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (180) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN . for_l1 StatementNoShortIf end_scope for_l2
    (181) for_l1 -> .

    IDENTIFIER      reduce using rule 181 (for_l1 -> .)
    IF              reduce using rule 181 (for_l1 -> .)
    WHILE           reduce using rule 181 (for_l1 -> .)
    FOR             reduce using rule 181 (for_l1 -> .)
    LBRACE          reduce using rule 181 (for_l1 -> .)
    SEMI            reduce using rule 181 (for_l1 -> .)
    SWITCH          reduce using rule 181 (for_l1 -> .)
    DO              reduce using rule 181 (for_l1 -> .)
    BREAK           reduce using rule 181 (for_l1 -> .)
    CONTINUE        reduce using rule 181 (for_l1 -> .)
    RETURN          reduce using rule 181 (for_l1 -> .)
    INC             reduce using rule 181 (for_l1 -> .)
    DEC             reduce using rule 181 (for_l1 -> .)
    NEW             reduce using rule 181 (for_l1 -> .)
    THIS            reduce using rule 181 (for_l1 -> .)
    LPAREN          reduce using rule 181 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 181 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 181 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 181 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 181 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 181 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 181 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 181 (for_l1 -> .)
    NULL            reduce using rule 181 (for_l1 -> .)

    for_l1                         shift and go to state 575

state 562

    (166) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate . for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (183) for_l3 -> .

    RPAREN          reduce using rule 183 (for_l3 -> .)

    for_l3                         shift and go to state 576

state 563

    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 . RPAREN for_l1 Statement end_scope for_l2
    (178) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 . RPAREN for_l1 StatementNoShortIf end_scope for_l2

    RPAREN          shift and go to state 577


state 564

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .

    RBRACE          reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IDENTIFIER      reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IF              reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    WHILE           reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FOR             reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LBRACE          reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SEMI            reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SWITCH          reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DO              reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BREAK           reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CONTINUE        reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    RETURN          reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOLEAN         reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INC             reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEC             reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NEW             reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BYTE            reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SHORT           reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INT             reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LONG            reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR            reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT           reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DOUBLE          reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    THIS            reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LPAREN          reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DECIMAL_LITERAL reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    HEX_LITERAL     reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BINARY_LITERAL  reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT_LITERAL   reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOL_LITERAL    reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR_LITERAL    reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    STRING_LITERAL  reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NULL            reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CASE            reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEFAULT         reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)


state 565

    (165) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope . for_l2
    (182) for_l2 -> .

    RBRACE          reduce using rule 182 (for_l2 -> .)
    IDENTIFIER      reduce using rule 182 (for_l2 -> .)
    IF              reduce using rule 182 (for_l2 -> .)
    WHILE           reduce using rule 182 (for_l2 -> .)
    FOR             reduce using rule 182 (for_l2 -> .)
    LBRACE          reduce using rule 182 (for_l2 -> .)
    SEMI            reduce using rule 182 (for_l2 -> .)
    SWITCH          reduce using rule 182 (for_l2 -> .)
    DO              reduce using rule 182 (for_l2 -> .)
    BREAK           reduce using rule 182 (for_l2 -> .)
    CONTINUE        reduce using rule 182 (for_l2 -> .)
    RETURN          reduce using rule 182 (for_l2 -> .)
    BOOLEAN         reduce using rule 182 (for_l2 -> .)
    INC             reduce using rule 182 (for_l2 -> .)
    DEC             reduce using rule 182 (for_l2 -> .)
    NEW             reduce using rule 182 (for_l2 -> .)
    BYTE            reduce using rule 182 (for_l2 -> .)
    SHORT           reduce using rule 182 (for_l2 -> .)
    INT             reduce using rule 182 (for_l2 -> .)
    LONG            reduce using rule 182 (for_l2 -> .)
    CHAR            reduce using rule 182 (for_l2 -> .)
    FLOAT           reduce using rule 182 (for_l2 -> .)
    DOUBLE          reduce using rule 182 (for_l2 -> .)
    THIS            reduce using rule 182 (for_l2 -> .)
    LPAREN          reduce using rule 182 (for_l2 -> .)
    DECIMAL_LITERAL reduce using rule 182 (for_l2 -> .)
    HEX_LITERAL     reduce using rule 182 (for_l2 -> .)
    BINARY_LITERAL  reduce using rule 182 (for_l2 -> .)
    FLOAT_LITERAL   reduce using rule 182 (for_l2 -> .)
    BOOL_LITERAL    reduce using rule 182 (for_l2 -> .)
    CHAR_LITERAL    reduce using rule 182 (for_l2 -> .)
    STRING_LITERAL  reduce using rule 182 (for_l2 -> .)
    NULL            reduce using rule 182 (for_l2 -> .)
    CASE            reduce using rule 182 (for_l2 -> .)
    DEFAULT         reduce using rule 182 (for_l2 -> .)

    for_l2                         shift and go to state 578

state 566

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .

    RBRACE          reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IDENTIFIER      reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IF              reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    WHILE           reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FOR             reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LBRACE          reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SEMI            reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SWITCH          reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DO              reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BREAK           reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CONTINUE        reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    RETURN          reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOLEAN         reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INC             reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEC             reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NEW             reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BYTE            reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SHORT           reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INT             reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LONG            reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR            reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT           reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DOUBLE          reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    THIS            reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LPAREN          reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DECIMAL_LITERAL reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    HEX_LITERAL     reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BINARY_LITERAL  reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT_LITERAL   reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOL_LITERAL    reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR_LITERAL    reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    STRING_LITERAL  reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NULL            reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CASE            reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEFAULT         reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)


state 567

    (166) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .

    RBRACE          reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IDENTIFIER      reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IF              reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    WHILE           reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FOR             reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LBRACE          reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SEMI            reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SWITCH          reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DO              reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BREAK           reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CONTINUE        reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    RETURN          reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOLEAN         reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INC             reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEC             reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NEW             reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BYTE            reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SHORT           reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INT             reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LONG            reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR            reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT           reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DOUBLE          reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    THIS            reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LPAREN          reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DECIMAL_LITERAL reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    HEX_LITERAL     reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BINARY_LITERAL  reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT_LITERAL   reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOL_LITERAL    reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR_LITERAL    reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    STRING_LITERAL  reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NULL            reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CASE            reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEFAULT         reduce using rule 166 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)


state 568

    (143) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope . Statement end_scope ifMark2
    (144) IfThenElseStatementNoShortIf -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope . StatementNoShortIf end_scope ifMark2
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (115) StatementNoShortIf -> . StatementWithoutTrailingSubstatement
    (116) StatementNoShortIf -> . LabeledStatementNoShortIf
    (117) StatementNoShortIf -> . IfThenElseStatementNoShortIf
    (118) StatementNoShortIf -> . WhileStatementNoShortIf
    (119) StatementNoShortIf -> . ForStatementNoShortIf
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (130) LabeledStatementNoShortIf -> . IDENTIFIER COLON StatementNoShortIf
    (144) IfThenElseStatementNoShortIf -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (158) WhileStatementNoShortIf -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (173) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (174) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (175) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 415
    IF              shift and go to state 407
    WHILE           shift and go to state 416
    FOR             shift and go to state 417
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    StatementNoShortIf             shift and go to state 579
    Statement                      shift and go to state 498
    StatementWithoutTrailingSubstatement shift and go to state 410
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    LabeledStatementNoShortIf      shift and go to state 411
    IfThenElseStatementNoShortIf   shift and go to state 412
    WhileStatementNoShortIf        shift and go to state 413
    ForStatementNoShortIf          shift and go to state 414
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    StatementExpression            shift and go to state 131
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 569

    (158) WhileStatementNoShortIf -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2 .

    ELSE            reduce using rule 158 (WhileStatementNoShortIf -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2 .)


state 570

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 . RPAREN for_l1 Statement end_scope for_l2
    (175) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 . RPAREN for_l1 StatementNoShortIf end_scope for_l2

    RPAREN          shift and go to state 580


state 571

    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (177) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN . for_l1 StatementNoShortIf end_scope for_l2
    (181) for_l1 -> .

    IDENTIFIER      reduce using rule 181 (for_l1 -> .)
    IF              reduce using rule 181 (for_l1 -> .)
    WHILE           reduce using rule 181 (for_l1 -> .)
    FOR             reduce using rule 181 (for_l1 -> .)
    LBRACE          reduce using rule 181 (for_l1 -> .)
    SEMI            reduce using rule 181 (for_l1 -> .)
    SWITCH          reduce using rule 181 (for_l1 -> .)
    DO              reduce using rule 181 (for_l1 -> .)
    BREAK           reduce using rule 181 (for_l1 -> .)
    CONTINUE        reduce using rule 181 (for_l1 -> .)
    RETURN          reduce using rule 181 (for_l1 -> .)
    INC             reduce using rule 181 (for_l1 -> .)
    DEC             reduce using rule 181 (for_l1 -> .)
    NEW             reduce using rule 181 (for_l1 -> .)
    THIS            reduce using rule 181 (for_l1 -> .)
    LPAREN          reduce using rule 181 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 181 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 181 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 181 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 181 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 181 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 181 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 181 (for_l1 -> .)
    NULL            reduce using rule 181 (for_l1 -> .)

    for_l1                         shift and go to state 581

state 572

    (165) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate . for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (183) for_l3 -> .

    RPAREN          reduce using rule 183 (for_l3 -> .)

    for_l3                         shift and go to state 582

state 573

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 . RPAREN for_l1 Statement end_scope for_l2
    (176) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 . RPAREN for_l1 StatementNoShortIf end_scope for_l2

    RPAREN          shift and go to state 583


state 574

    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (179) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN . for_l1 StatementNoShortIf end_scope for_l2
    (181) for_l1 -> .

    IDENTIFIER      reduce using rule 181 (for_l1 -> .)
    IF              reduce using rule 181 (for_l1 -> .)
    WHILE           reduce using rule 181 (for_l1 -> .)
    FOR             reduce using rule 181 (for_l1 -> .)
    LBRACE          reduce using rule 181 (for_l1 -> .)
    SEMI            reduce using rule 181 (for_l1 -> .)
    SWITCH          reduce using rule 181 (for_l1 -> .)
    DO              reduce using rule 181 (for_l1 -> .)
    BREAK           reduce using rule 181 (for_l1 -> .)
    CONTINUE        reduce using rule 181 (for_l1 -> .)
    RETURN          reduce using rule 181 (for_l1 -> .)
    INC             reduce using rule 181 (for_l1 -> .)
    DEC             reduce using rule 181 (for_l1 -> .)
    NEW             reduce using rule 181 (for_l1 -> .)
    THIS            reduce using rule 181 (for_l1 -> .)
    LPAREN          reduce using rule 181 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 181 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 181 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 181 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 181 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 181 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 181 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 181 (for_l1 -> .)
    NULL            reduce using rule 181 (for_l1 -> .)

    for_l1                         shift and go to state 584

state 575

    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (180) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 . StatementNoShortIf end_scope for_l2
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (115) StatementNoShortIf -> . StatementWithoutTrailingSubstatement
    (116) StatementNoShortIf -> . LabeledStatementNoShortIf
    (117) StatementNoShortIf -> . IfThenElseStatementNoShortIf
    (118) StatementNoShortIf -> . WhileStatementNoShortIf
    (119) StatementNoShortIf -> . ForStatementNoShortIf
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (130) LabeledStatementNoShortIf -> . IDENTIFIER COLON StatementNoShortIf
    (144) IfThenElseStatementNoShortIf -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (158) WhileStatementNoShortIf -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (173) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (174) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (175) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 415
    IF              shift and go to state 407
    WHILE           shift and go to state 416
    FOR             shift and go to state 417
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    Statement                      shift and go to state 507
    StatementNoShortIf             shift and go to state 585
    StatementWithoutTrailingSubstatement shift and go to state 410
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    LabeledStatementNoShortIf      shift and go to state 411
    IfThenElseStatementNoShortIf   shift and go to state 412
    WhileStatementNoShortIf        shift and go to state 413
    ForStatementNoShortIf          shift and go to state 414
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    StatementExpression            shift and go to state 131
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 576

    (166) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 . RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 . RPAREN for_l1 StatementNoShortIf end_scope for_l2

    RPAREN          shift and go to state 586


state 577

    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (178) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN . for_l1 StatementNoShortIf end_scope for_l2
    (181) for_l1 -> .

    IDENTIFIER      reduce using rule 181 (for_l1 -> .)
    IF              reduce using rule 181 (for_l1 -> .)
    WHILE           reduce using rule 181 (for_l1 -> .)
    FOR             reduce using rule 181 (for_l1 -> .)
    LBRACE          reduce using rule 181 (for_l1 -> .)
    SEMI            reduce using rule 181 (for_l1 -> .)
    SWITCH          reduce using rule 181 (for_l1 -> .)
    DO              reduce using rule 181 (for_l1 -> .)
    BREAK           reduce using rule 181 (for_l1 -> .)
    CONTINUE        reduce using rule 181 (for_l1 -> .)
    RETURN          reduce using rule 181 (for_l1 -> .)
    INC             reduce using rule 181 (for_l1 -> .)
    DEC             reduce using rule 181 (for_l1 -> .)
    NEW             reduce using rule 181 (for_l1 -> .)
    THIS            reduce using rule 181 (for_l1 -> .)
    LPAREN          reduce using rule 181 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 181 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 181 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 181 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 181 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 181 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 181 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 181 (for_l1 -> .)
    NULL            reduce using rule 181 (for_l1 -> .)

    for_l1                         shift and go to state 587

state 578

    (165) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .

    RBRACE          reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IDENTIFIER      reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IF              reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    WHILE           reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FOR             reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LBRACE          reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SEMI            reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SWITCH          reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DO              reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BREAK           reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CONTINUE        reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    RETURN          reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOLEAN         reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INC             reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEC             reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NEW             reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BYTE            reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SHORT           reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INT             reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LONG            reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR            reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT           reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DOUBLE          reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    THIS            reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LPAREN          reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DECIMAL_LITERAL reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    HEX_LITERAL     reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BINARY_LITERAL  reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT_LITERAL   reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOL_LITERAL    reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR_LITERAL    reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    STRING_LITERAL  reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NULL            reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CASE            reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEFAULT         reduce using rule 165 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)


state 579

    (144) IfThenElseStatementNoShortIf -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf . end_scope ifMark2
    (300) end_scope -> .

    ELSE            reduce using rule 300 (end_scope -> .)

    end_scope                      shift and go to state 588

state 580

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (175) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN . for_l1 StatementNoShortIf end_scope for_l2
    (181) for_l1 -> .

    IDENTIFIER      reduce using rule 181 (for_l1 -> .)
    IF              reduce using rule 181 (for_l1 -> .)
    WHILE           reduce using rule 181 (for_l1 -> .)
    FOR             reduce using rule 181 (for_l1 -> .)
    LBRACE          reduce using rule 181 (for_l1 -> .)
    SEMI            reduce using rule 181 (for_l1 -> .)
    SWITCH          reduce using rule 181 (for_l1 -> .)
    DO              reduce using rule 181 (for_l1 -> .)
    BREAK           reduce using rule 181 (for_l1 -> .)
    CONTINUE        reduce using rule 181 (for_l1 -> .)
    RETURN          reduce using rule 181 (for_l1 -> .)
    INC             reduce using rule 181 (for_l1 -> .)
    DEC             reduce using rule 181 (for_l1 -> .)
    NEW             reduce using rule 181 (for_l1 -> .)
    THIS            reduce using rule 181 (for_l1 -> .)
    LPAREN          reduce using rule 181 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 181 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 181 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 181 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 181 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 181 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 181 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 181 (for_l1 -> .)
    NULL            reduce using rule 181 (for_l1 -> .)

    for_l1                         shift and go to state 589

state 581

    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (177) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 . StatementNoShortIf end_scope for_l2
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (115) StatementNoShortIf -> . StatementWithoutTrailingSubstatement
    (116) StatementNoShortIf -> . LabeledStatementNoShortIf
    (117) StatementNoShortIf -> . IfThenElseStatementNoShortIf
    (118) StatementNoShortIf -> . WhileStatementNoShortIf
    (119) StatementNoShortIf -> . ForStatementNoShortIf
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (130) LabeledStatementNoShortIf -> . IDENTIFIER COLON StatementNoShortIf
    (144) IfThenElseStatementNoShortIf -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (158) WhileStatementNoShortIf -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (173) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (174) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (175) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 415
    IF              shift and go to state 407
    WHILE           shift and go to state 416
    FOR             shift and go to state 417
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    Statement                      shift and go to state 518
    StatementNoShortIf             shift and go to state 590
    StatementWithoutTrailingSubstatement shift and go to state 410
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    LabeledStatementNoShortIf      shift and go to state 411
    IfThenElseStatementNoShortIf   shift and go to state 412
    WhileStatementNoShortIf        shift and go to state 413
    ForStatementNoShortIf          shift and go to state 414
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    StatementExpression            shift and go to state 131
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 582

    (165) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 . RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 . RPAREN for_l1 StatementNoShortIf end_scope for_l2

    RPAREN          shift and go to state 591


state 583

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (176) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN . for_l1 StatementNoShortIf end_scope for_l2
    (181) for_l1 -> .

    IDENTIFIER      reduce using rule 181 (for_l1 -> .)
    IF              reduce using rule 181 (for_l1 -> .)
    WHILE           reduce using rule 181 (for_l1 -> .)
    FOR             reduce using rule 181 (for_l1 -> .)
    LBRACE          reduce using rule 181 (for_l1 -> .)
    SEMI            reduce using rule 181 (for_l1 -> .)
    SWITCH          reduce using rule 181 (for_l1 -> .)
    DO              reduce using rule 181 (for_l1 -> .)
    BREAK           reduce using rule 181 (for_l1 -> .)
    CONTINUE        reduce using rule 181 (for_l1 -> .)
    RETURN          reduce using rule 181 (for_l1 -> .)
    INC             reduce using rule 181 (for_l1 -> .)
    DEC             reduce using rule 181 (for_l1 -> .)
    NEW             reduce using rule 181 (for_l1 -> .)
    THIS            reduce using rule 181 (for_l1 -> .)
    LPAREN          reduce using rule 181 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 181 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 181 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 181 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 181 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 181 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 181 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 181 (for_l1 -> .)
    NULL            reduce using rule 181 (for_l1 -> .)

    for_l1                         shift and go to state 592

state 584

    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (179) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 . StatementNoShortIf end_scope for_l2
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (115) StatementNoShortIf -> . StatementWithoutTrailingSubstatement
    (116) StatementNoShortIf -> . LabeledStatementNoShortIf
    (117) StatementNoShortIf -> . IfThenElseStatementNoShortIf
    (118) StatementNoShortIf -> . WhileStatementNoShortIf
    (119) StatementNoShortIf -> . ForStatementNoShortIf
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (130) LabeledStatementNoShortIf -> . IDENTIFIER COLON StatementNoShortIf
    (144) IfThenElseStatementNoShortIf -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (158) WhileStatementNoShortIf -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (173) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (174) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (175) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 415
    IF              shift and go to state 407
    WHILE           shift and go to state 416
    FOR             shift and go to state 417
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    Statement                      shift and go to state 521
    StatementNoShortIf             shift and go to state 593
    StatementWithoutTrailingSubstatement shift and go to state 410
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    LabeledStatementNoShortIf      shift and go to state 411
    IfThenElseStatementNoShortIf   shift and go to state 412
    WhileStatementNoShortIf        shift and go to state 413
    ForStatementNoShortIf          shift and go to state 414
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    StatementExpression            shift and go to state 131
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 585

    (180) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf . end_scope for_l2
    (300) end_scope -> .

    ELSE            reduce using rule 300 (end_scope -> .)

    end_scope                      shift and go to state 594

state 586

    (166) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (174) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN . for_l1 StatementNoShortIf end_scope for_l2
    (181) for_l1 -> .

    IDENTIFIER      reduce using rule 181 (for_l1 -> .)
    IF              reduce using rule 181 (for_l1 -> .)
    WHILE           reduce using rule 181 (for_l1 -> .)
    FOR             reduce using rule 181 (for_l1 -> .)
    LBRACE          reduce using rule 181 (for_l1 -> .)
    SEMI            reduce using rule 181 (for_l1 -> .)
    SWITCH          reduce using rule 181 (for_l1 -> .)
    DO              reduce using rule 181 (for_l1 -> .)
    BREAK           reduce using rule 181 (for_l1 -> .)
    CONTINUE        reduce using rule 181 (for_l1 -> .)
    RETURN          reduce using rule 181 (for_l1 -> .)
    INC             reduce using rule 181 (for_l1 -> .)
    DEC             reduce using rule 181 (for_l1 -> .)
    NEW             reduce using rule 181 (for_l1 -> .)
    THIS            reduce using rule 181 (for_l1 -> .)
    LPAREN          reduce using rule 181 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 181 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 181 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 181 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 181 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 181 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 181 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 181 (for_l1 -> .)
    NULL            reduce using rule 181 (for_l1 -> .)

    for_l1                         shift and go to state 595

state 587

    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (178) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 . StatementNoShortIf end_scope for_l2
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (115) StatementNoShortIf -> . StatementWithoutTrailingSubstatement
    (116) StatementNoShortIf -> . LabeledStatementNoShortIf
    (117) StatementNoShortIf -> . IfThenElseStatementNoShortIf
    (118) StatementNoShortIf -> . WhileStatementNoShortIf
    (119) StatementNoShortIf -> . ForStatementNoShortIf
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (130) LabeledStatementNoShortIf -> . IDENTIFIER COLON StatementNoShortIf
    (144) IfThenElseStatementNoShortIf -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (158) WhileStatementNoShortIf -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (173) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (174) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (175) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 415
    IF              shift and go to state 407
    WHILE           shift and go to state 416
    FOR             shift and go to state 417
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    Statement                      shift and go to state 524
    StatementNoShortIf             shift and go to state 596
    StatementWithoutTrailingSubstatement shift and go to state 410
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    LabeledStatementNoShortIf      shift and go to state 411
    IfThenElseStatementNoShortIf   shift and go to state 412
    WhileStatementNoShortIf        shift and go to state 413
    ForStatementNoShortIf          shift and go to state 414
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    StatementExpression            shift and go to state 131
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 588

    (144) IfThenElseStatementNoShortIf -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope . ifMark2
    (141) ifMark2 -> .

    ELSE            reduce using rule 141 (ifMark2 -> .)

    ifMark2                        shift and go to state 597

state 589

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (175) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 . StatementNoShortIf end_scope for_l2
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (115) StatementNoShortIf -> . StatementWithoutTrailingSubstatement
    (116) StatementNoShortIf -> . LabeledStatementNoShortIf
    (117) StatementNoShortIf -> . IfThenElseStatementNoShortIf
    (118) StatementNoShortIf -> . WhileStatementNoShortIf
    (119) StatementNoShortIf -> . ForStatementNoShortIf
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (130) LabeledStatementNoShortIf -> . IDENTIFIER COLON StatementNoShortIf
    (144) IfThenElseStatementNoShortIf -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (158) WhileStatementNoShortIf -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (173) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (174) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (175) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 415
    IF              shift and go to state 407
    WHILE           shift and go to state 416
    FOR             shift and go to state 417
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    Statement                      shift and go to state 533
    StatementNoShortIf             shift and go to state 598
    StatementWithoutTrailingSubstatement shift and go to state 410
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    LabeledStatementNoShortIf      shift and go to state 411
    IfThenElseStatementNoShortIf   shift and go to state 412
    WhileStatementNoShortIf        shift and go to state 413
    ForStatementNoShortIf          shift and go to state 414
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    StatementExpression            shift and go to state 131
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 590

    (177) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf . end_scope for_l2
    (300) end_scope -> .

    ELSE            reduce using rule 300 (end_scope -> .)

    end_scope                      shift and go to state 599

state 591

    (165) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (173) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN . for_l1 StatementNoShortIf end_scope for_l2
    (181) for_l1 -> .

    IDENTIFIER      reduce using rule 181 (for_l1 -> .)
    IF              reduce using rule 181 (for_l1 -> .)
    WHILE           reduce using rule 181 (for_l1 -> .)
    FOR             reduce using rule 181 (for_l1 -> .)
    LBRACE          reduce using rule 181 (for_l1 -> .)
    SEMI            reduce using rule 181 (for_l1 -> .)
    SWITCH          reduce using rule 181 (for_l1 -> .)
    DO              reduce using rule 181 (for_l1 -> .)
    BREAK           reduce using rule 181 (for_l1 -> .)
    CONTINUE        reduce using rule 181 (for_l1 -> .)
    RETURN          reduce using rule 181 (for_l1 -> .)
    INC             reduce using rule 181 (for_l1 -> .)
    DEC             reduce using rule 181 (for_l1 -> .)
    NEW             reduce using rule 181 (for_l1 -> .)
    THIS            reduce using rule 181 (for_l1 -> .)
    LPAREN          reduce using rule 181 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 181 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 181 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 181 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 181 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 181 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 181 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 181 (for_l1 -> .)
    NULL            reduce using rule 181 (for_l1 -> .)

    for_l1                         shift and go to state 600

state 592

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (176) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 . StatementNoShortIf end_scope for_l2
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (115) StatementNoShortIf -> . StatementWithoutTrailingSubstatement
    (116) StatementNoShortIf -> . LabeledStatementNoShortIf
    (117) StatementNoShortIf -> . IfThenElseStatementNoShortIf
    (118) StatementNoShortIf -> . WhileStatementNoShortIf
    (119) StatementNoShortIf -> . ForStatementNoShortIf
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (130) LabeledStatementNoShortIf -> . IDENTIFIER COLON StatementNoShortIf
    (144) IfThenElseStatementNoShortIf -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (158) WhileStatementNoShortIf -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (173) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (174) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (175) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 415
    IF              shift and go to state 407
    WHILE           shift and go to state 416
    FOR             shift and go to state 417
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    Statement                      shift and go to state 536
    StatementNoShortIf             shift and go to state 601
    StatementWithoutTrailingSubstatement shift and go to state 410
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    LabeledStatementNoShortIf      shift and go to state 411
    IfThenElseStatementNoShortIf   shift and go to state 412
    WhileStatementNoShortIf        shift and go to state 413
    ForStatementNoShortIf          shift and go to state 414
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    StatementExpression            shift and go to state 131
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 593

    (179) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf . end_scope for_l2
    (300) end_scope -> .

    ELSE            reduce using rule 300 (end_scope -> .)

    end_scope                      shift and go to state 602

state 594

    (180) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope . for_l2
    (182) for_l2 -> .

    ELSE            reduce using rule 182 (for_l2 -> .)

    for_l2                         shift and go to state 603

state 595

    (166) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (174) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 . StatementNoShortIf end_scope for_l2
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (115) StatementNoShortIf -> . StatementWithoutTrailingSubstatement
    (116) StatementNoShortIf -> . LabeledStatementNoShortIf
    (117) StatementNoShortIf -> . IfThenElseStatementNoShortIf
    (118) StatementNoShortIf -> . WhileStatementNoShortIf
    (119) StatementNoShortIf -> . ForStatementNoShortIf
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (130) LabeledStatementNoShortIf -> . IDENTIFIER COLON StatementNoShortIf
    (144) IfThenElseStatementNoShortIf -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (158) WhileStatementNoShortIf -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (173) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (174) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (175) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 415
    IF              shift and go to state 407
    WHILE           shift and go to state 416
    FOR             shift and go to state 417
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    Statement                      shift and go to state 539
    StatementNoShortIf             shift and go to state 604
    StatementWithoutTrailingSubstatement shift and go to state 410
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    LabeledStatementNoShortIf      shift and go to state 411
    IfThenElseStatementNoShortIf   shift and go to state 412
    WhileStatementNoShortIf        shift and go to state 413
    ForStatementNoShortIf          shift and go to state 414
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    StatementExpression            shift and go to state 131
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 596

    (178) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf . end_scope for_l2
    (300) end_scope -> .

    ELSE            reduce using rule 300 (end_scope -> .)

    end_scope                      shift and go to state 605

state 597

    (144) IfThenElseStatementNoShortIf -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2 .

    ELSE            reduce using rule 144 (IfThenElseStatementNoShortIf -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2 .)


state 598

    (175) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf . end_scope for_l2
    (300) end_scope -> .

    ELSE            reduce using rule 300 (end_scope -> .)

    end_scope                      shift and go to state 606

state 599

    (177) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope . for_l2
    (182) for_l2 -> .

    ELSE            reduce using rule 182 (for_l2 -> .)

    for_l2                         shift and go to state 607

state 600

    (165) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (173) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 . StatementNoShortIf end_scope for_l2
    (109) Statement -> . StatementWithoutTrailingSubstatement
    (110) Statement -> . LabeledStatement
    (111) Statement -> . IfThenStatement
    (112) Statement -> . IfThenElseStatement
    (113) Statement -> . WhileStatement
    (114) Statement -> . ForStatement
    (115) StatementNoShortIf -> . StatementWithoutTrailingSubstatement
    (116) StatementNoShortIf -> . LabeledStatementNoShortIf
    (117) StatementNoShortIf -> . IfThenElseStatementNoShortIf
    (118) StatementNoShortIf -> . WhileStatementNoShortIf
    (119) StatementNoShortIf -> . ForStatementNoShortIf
    (120) StatementWithoutTrailingSubstatement -> . Block
    (121) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (122) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (123) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (124) StatementWithoutTrailingSubstatement -> . DoStatement
    (125) StatementWithoutTrailingSubstatement -> . BreakStatement
    (126) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (127) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (129) LabeledStatement -> . IDENTIFIER COLON Statement
    (139) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (143) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (157) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (165) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (166) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (130) LabeledStatementNoShortIf -> . IDENTIFIER COLON StatementNoShortIf
    (144) IfThenElseStatementNoShortIf -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (158) WhileStatementNoShortIf -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (173) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (174) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (175) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (101) Block -> . LBRACE RBRACE
    (102) Block -> . LBRACE BlockStatements RBRACE
    (128) EmptyStatement -> . SEMI
    (131) ExpressionStatement -> . StatementExpression SEMI
    (145) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (162) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (189) BreakStatement -> . BREAK IDENTIFIER SEMI
    (190) BreakStatement -> . BREAK SEMI
    (191) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (192) ContinueStatement -> . CONTINUE SEMI
    (193) ReturnStatement -> . RETURN Expression SEMI
    (194) ReturnStatement -> . RETURN SEMI
    (132) StatementExpression -> . Assignment
    (133) StatementExpression -> . PreIncrementExpression
    (134) StatementExpression -> . PreDecrementExpression
    (135) StatementExpression -> . PostIncrementExpression
    (136) StatementExpression -> . PostDecrementExpression
    (137) StatementExpression -> . MethodInvocation
    (138) StatementExpression -> . ClassInstanceCreationExpression
    (279) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (235) PreIncrementExpression -> . INC UnaryExpression
    (236) PreDecrementExpression -> . DEC UnaryExpression
    (228) PostIncrementExpression -> . PostfixExpression INC
    (229) PostDecrementExpression -> . PostfixExpression DEC
    (218) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (219) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (220) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (221) MethodInvocation -> . Name LPAREN RPAREN
    (204) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (205) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (280) LeftHandSide -> . Name
    (281) LeftHandSide -> . FieldAccess
    (282) LeftHandSide -> . ArrayAccess
    (224) PostfixExpression -> . Primary
    (225) PostfixExpression -> . Name
    (226) PostfixExpression -> . PostIncrementExpression
    (227) PostfixExpression -> . PostDecrementExpression
    (195) Primary -> . PrimaryNoNewArray
    (196) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (217) FieldAccess -> . Primary DOT Name
    (222) ArrayAccess -> . Name LBRACK Expression RBRACK
    (223) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (197) PrimaryNoNewArray -> . Literal
    (198) PrimaryNoNewArray -> . THIS
    (199) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (200) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (201) PrimaryNoNewArray -> . FieldAccess
    (202) PrimaryNoNewArray -> . MethodInvocation
    (203) PrimaryNoNewArray -> . ArrayAccess
    (208) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (209) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (210) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 415
    IF              shift and go to state 407
    WHILE           shift and go to state 416
    FOR             shift and go to state 417
    LBRACE          shift and go to state 92
    SEMI            shift and go to state 110
    SWITCH          shift and go to state 132
    DO              shift and go to state 133
    BREAK           shift and go to state 134
    CONTINUE        shift and go to state 135
    RETURN          shift and go to state 136
    INC             shift and go to state 146
    DEC             shift and go to state 147
    NEW             shift and go to state 150
    THIS            shift and go to state 157
    LPAREN          shift and go to state 128
    DECIMAL_LITERAL shift and go to state 158
    HEX_LITERAL     shift and go to state 159
    BINARY_LITERAL  shift and go to state 160
    FLOAT_LITERAL   shift and go to state 161
    BOOL_LITERAL    shift and go to state 162
    CHAR_LITERAL    shift and go to state 163
    STRING_LITERAL  shift and go to state 164
    NULL            shift and go to state 165

    Statement                      shift and go to state 550
    StatementNoShortIf             shift and go to state 608
    StatementWithoutTrailingSubstatement shift and go to state 410
    LabeledStatement               shift and go to state 112
    IfThenStatement                shift and go to state 113
    IfThenElseStatement            shift and go to state 114
    WhileStatement                 shift and go to state 115
    ForStatement                   shift and go to state 116
    LabeledStatementNoShortIf      shift and go to state 411
    IfThenElseStatementNoShortIf   shift and go to state 412
    WhileStatementNoShortIf        shift and go to state 413
    ForStatementNoShortIf          shift and go to state 414
    Block                          shift and go to state 118
    EmptyStatement                 shift and go to state 119
    ExpressionStatement            shift and go to state 120
    SwitchStatement                shift and go to state 121
    DoStatement                    shift and go to state 122
    BreakStatement                 shift and go to state 123
    ContinueStatement              shift and go to state 124
    ReturnStatement                shift and go to state 125
    StatementExpression            shift and go to state 131
    Assignment                     shift and go to state 137
    PreIncrementExpression         shift and go to state 138
    PreDecrementExpression         shift and go to state 139
    PostIncrementExpression        shift and go to state 140
    PostDecrementExpression        shift and go to state 141
    MethodInvocation               shift and go to state 142
    ClassInstanceCreationExpression shift and go to state 143
    LeftHandSide                   shift and go to state 145
    PostfixExpression              shift and go to state 148
    Primary                        shift and go to state 149
    Name                           shift and go to state 272
    FieldAccess                    shift and go to state 152
    ArrayAccess                    shift and go to state 153
    PrimaryNoNewArray              shift and go to state 154
    ArrayCreationExpression        shift and go to state 155
    SimpleName                     shift and go to state 151
    QualifiedName                  shift and go to state 76
    Literal                        shift and go to state 156

state 601

    (176) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf . end_scope for_l2
    (300) end_scope -> .

    ELSE            reduce using rule 300 (end_scope -> .)

    end_scope                      shift and go to state 609

state 602

    (179) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope . for_l2
    (182) for_l2 -> .

    ELSE            reduce using rule 182 (for_l2 -> .)

    for_l2                         shift and go to state 610

state 603

    (180) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .

    ELSE            reduce using rule 180 (ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .)


state 604

    (174) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf . end_scope for_l2
    (300) end_scope -> .

    ELSE            reduce using rule 300 (end_scope -> .)

    end_scope                      shift and go to state 611

state 605

    (178) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope . for_l2
    (182) for_l2 -> .

    ELSE            reduce using rule 182 (for_l2 -> .)

    for_l2                         shift and go to state 612

state 606

    (175) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope . for_l2
    (182) for_l2 -> .

    ELSE            reduce using rule 182 (for_l2 -> .)

    for_l2                         shift and go to state 613

state 607

    (177) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .

    ELSE            reduce using rule 177 (ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .)


state 608

    (173) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf . end_scope for_l2
    (300) end_scope -> .

    ELSE            reduce using rule 300 (end_scope -> .)

    end_scope                      shift and go to state 614

state 609

    (176) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope . for_l2
    (182) for_l2 -> .

    ELSE            reduce using rule 182 (for_l2 -> .)

    for_l2                         shift and go to state 615

state 610

    (179) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .

    ELSE            reduce using rule 179 (ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .)


state 611

    (174) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope . for_l2
    (182) for_l2 -> .

    ELSE            reduce using rule 182 (for_l2 -> .)

    for_l2                         shift and go to state 616

state 612

    (178) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .

    ELSE            reduce using rule 178 (ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .)


state 613

    (175) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .

    ELSE            reduce using rule 175 (ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .)


state 614

    (173) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope . for_l2
    (182) for_l2 -> .

    ELSE            reduce using rule 182 (for_l2 -> .)

    for_l2                         shift and go to state 617

state 615

    (176) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .

    ELSE            reduce using rule 176 (ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .)


state 616

    (174) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .

    ELSE            reduce using rule 174 (ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .)


state 617

    (173) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .

    ELSE            reduce using rule 173 (ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOT in state 319 resolved as shift
