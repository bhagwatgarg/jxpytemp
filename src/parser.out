Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Goal
Rule 1     Goal -> CompilationUnit
Rule 2     Literal -> DECIMAL_LITERAL
Rule 3     Literal -> HEX_LITERAL
Rule 4     Literal -> BINARY_LITERAL
Rule 5     Literal -> FLOAT_LITERAL
Rule 6     Literal -> BOOL_LITERAL
Rule 7     Literal -> CHAR_LITERAL
Rule 8     Literal -> STRING_LITERAL
Rule 9     Literal -> NULL
Rule 10    Type -> PrimitiveType
Rule 11    Type -> ReferenceType
Rule 12    PrimitiveType -> NumericType
Rule 13    PrimitiveType -> BOOLEAN
Rule 14    NumericType -> IntegralType
Rule 15    NumericType -> FloatingPointType
Rule 16    IntegralType -> BYTE
Rule 17    IntegralType -> SHORT
Rule 18    IntegralType -> INT
Rule 19    IntegralType -> LONG
Rule 20    IntegralType -> CHAR
Rule 21    FloatingPointType -> FLOAT
Rule 22    FloatingPointType -> DOUBLE
Rule 23    ReferenceType -> ArrayType
Rule 24    ReferenceType -> ClassType
Rule 25    ClassType -> Name
Rule 26    ArrayType -> PrimitiveType Dims
Rule 27    ArrayType -> Name Dims
Rule 28    Name -> SimpleName
Rule 29    Name -> QualifiedName
Rule 30    SimpleName -> IDENTIFIER
Rule 31    QualifiedName -> Name DOT IDENTIFIER
Rule 32    CompilationUnit -> PackageDeclaration ImportDeclarations TypeDeclarations
Rule 33    CompilationUnit -> PackageDeclaration ImportDeclarations
Rule 34    CompilationUnit -> PackageDeclaration
Rule 35    CompilationUnit -> PackageDeclaration TypeDeclarations
Rule 36    CompilationUnit -> ImportDeclarations
Rule 37    CompilationUnit -> ImportDeclarations TypeDeclarations
Rule 38    CompilationUnit -> TypeDeclarations
Rule 39    ImportDeclarations -> ImportDeclaration
Rule 40    ImportDeclarations -> ImportDeclarations ImportDeclaration
Rule 41    TypeDeclarations -> TypeDeclaration
Rule 42    TypeDeclarations -> TypeDeclarations TypeDeclaration
Rule 43    PackageDeclaration -> PACKAGE IDENTIFIER SEMI
Rule 44    ImportDeclaration -> SingleTypeImportDeclaration
Rule 45    ImportDeclaration -> TypeImportOnDemandDeclaration
Rule 46    SingleTypeImportDeclaration -> IMPORT import_identifier SEMI
Rule 47    TypeImportOnDemandDeclaration -> IMPORT import_identifier DOT MUL SEMI
Rule 48    import_identifier -> import_identifier DOT IDENTIFIER
Rule 49    import_identifier -> IDENTIFIER
Rule 50    TypeDeclaration -> ClassDeclaration
Rule 51    TypeDeclaration -> SEMI
Rule 52    Modifiers -> Modifier
Rule 53    Modifiers -> Modifiers Modifier
Rule 54    Modifier -> STATIC
Rule 55    Modifier -> FINAL
Rule 56    Modifier -> PRIVATE
Rule 57    Modifier -> PROTECTED
Rule 58    Modifier -> PUBLIC
Rule 59    ClassDeclaration -> Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody
Rule 60    ClassDeclaration -> CLASS IDENTIFIER decl_mark_2 ClassBody
Rule 61    ClassBody -> LBRACE RBRACE
Rule 62    ClassBody -> LBRACE ClassBodyDeclarations RBRACE
Rule 63    ClassBodyDeclarations -> ClassBodyDeclaration
Rule 64    ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration
Rule 65    ClassBodyDeclaration -> ClassMemberDeclaration
Rule 66    ClassBodyDeclaration -> ConstructorDeclaration
Rule 67    ClassBodyDeclaration -> StaticInitializer
Rule 68    ClassMemberDeclaration -> FieldDeclaration
Rule 69    ClassMemberDeclaration -> MethodDeclaration
Rule 70    FieldDeclaration -> Modifiers Type VariableDeclarators SEMI
Rule 71    FieldDeclaration -> Type VariableDeclarators SEMI
Rule 72    VariableDeclarators -> VariableDeclarator
Rule 73    VariableDeclarators -> VariableDeclarators COMMA VariableDeclarator
Rule 74    VariableDeclarator -> VariableDeclaratorId
Rule 75    VariableDeclarator -> VariableDeclaratorId ASSIGN VariableInitializer
Rule 76    VariableDeclaratorId -> IDENTIFIER
Rule 77    VariableDeclaratorId -> IDENTIFIER Dims
Rule 78    VariableInitializer -> Expression
Rule 79    MethodDeclaration -> MethodHeader MethodBody
Rule 80    MethodHeader -> Modifiers Type MethodDeclarator
Rule 81    MethodHeader -> Type MethodDeclarator
Rule 82    MethodHeader -> Modifiers VOID MethodDeclarator
Rule 83    MethodHeader -> VOID MethodDeclarator
Rule 84    MethodDeclarator -> IDENTIFIER LPAREN RPAREN
Rule 85    MethodDeclarator -> IDENTIFIER LPAREN FormalParameterList RPAREN
Rule 86    FormalParameterList -> FormalParameter
Rule 87    FormalParameterList -> FormalParameterList COMMA FormalParameter
Rule 88    FormalParameter -> Type VariableDeclaratorId
Rule 89    MethodBody -> Block
Rule 90    MethodBody -> SEMI
Rule 91    StaticInitializer -> begin_scope STATIC Block end_scope
Rule 92    ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody
Rule 93    ConstructorDeclaration -> ConstructorDeclarator ConstructorBody
Rule 94    ConstructorDeclarator -> SimpleName LPAREN decl_mark FormalParameterList RPAREN
Rule 95    ConstructorDeclarator -> SimpleName decl_mark LPAREN RPAREN
Rule 96    ConstructorBody -> <empty>
Rule 97    ConstructorBody -> LBRACE BlockStatements RBRACE
Rule 98    ConstructorBody -> LBRACE RBRACE
Rule 99    ExplicitConstructorInvocation -> THIS LPAREN ArgumentList RPAREN SEMI
Rule 100   ExplicitConstructorInvocation -> THIS LPAREN RPAREN SEMI
Rule 101   VariableInitializers -> VariableInitializer
Rule 102   VariableInitializers -> VariableInitializers COMMA VariableInitializer
Rule 103   Block -> LBRACE RBRACE
Rule 104   Block -> LBRACE BlockStatements RBRACE
Rule 105   BlockStatements -> BlockStatement
Rule 106   BlockStatements -> BlockStatements BlockStatement
Rule 107   BlockStatement -> LocalVariableDeclarationStatement
Rule 108   BlockStatement -> Statement
Rule 109   LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI
Rule 110   LocalVariableDeclaration -> Type VariableDeclarators
Rule 111   Statement -> StatementWithoutTrailingSubstatement
Rule 112   Statement -> LabeledStatement
Rule 113   Statement -> IfThenStatement
Rule 114   Statement -> IfThenElseStatement
Rule 115   Statement -> WhileStatement
Rule 116   Statement -> ForStatement
Rule 117   StatementNoShortIf -> StatementWithoutTrailingSubstatement
Rule 118   StatementNoShortIf -> LabeledStatementNoShortIf
Rule 119   StatementNoShortIf -> IfThenElseStatementNoShortIf
Rule 120   StatementNoShortIf -> WhileStatementNoShortIf
Rule 121   StatementNoShortIf -> ForStatementNoShortIf
Rule 122   StatementWithoutTrailingSubstatement -> Block
Rule 123   StatementWithoutTrailingSubstatement -> EmptyStatement
Rule 124   StatementWithoutTrailingSubstatement -> ExpressionStatement
Rule 125   StatementWithoutTrailingSubstatement -> SwitchStatement
Rule 126   StatementWithoutTrailingSubstatement -> DoStatement
Rule 127   StatementWithoutTrailingSubstatement -> BreakStatement
Rule 128   StatementWithoutTrailingSubstatement -> ContinueStatement
Rule 129   StatementWithoutTrailingSubstatement -> ReturnStatement
Rule 130   EmptyStatement -> SEMI
Rule 131   LabeledStatement -> IDENTIFIER COLON Statement
Rule 132   LabeledStatementNoShortIf -> IDENTIFIER COLON StatementNoShortIf
Rule 133   ExpressionStatement -> StatementExpression SEMI
Rule 134   StatementExpression -> Assignment
Rule 135   StatementExpression -> PreIncrementExpression
Rule 136   StatementExpression -> PreDecrementExpression
Rule 137   StatementExpression -> PostIncrementExpression
Rule 138   StatementExpression -> PostDecrementExpression
Rule 139   StatementExpression -> MethodInvocation
Rule 140   StatementExpression -> ClassInstanceCreationExpression
Rule 141   IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
Rule 142   ifMark1 -> <empty>
Rule 143   ifMark2 -> <empty>
Rule 144   ifMark3 -> <empty>
Rule 145   IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
Rule 146   IfThenElseStatementNoShortIf -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
Rule 147   SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock
Rule 148   SwitchBlock -> LBRACE RBRACE
Rule 149   SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE
Rule 150   SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE
Rule 151   SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE
Rule 152   SwitchBlockStatementGroups -> SwitchBlockStatementGroup
Rule 153   SwitchBlockStatementGroups -> SwitchBlockStatementGroups SwitchBlockStatementGroup
Rule 154   SwitchBlockStatementGroup -> begin_scope SwitchLabels BlockStatements end_scope
Rule 155   SwitchLabels -> SwitchLabel
Rule 156   SwitchLabels -> SwitchLabels SwitchLabel
Rule 157   SwitchLabel -> CASE ConstantExpression COLON
Rule 158   SwitchLabel -> DEFAULT COLON
Rule 159   WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
Rule 160   WhileStatementNoShortIf -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
Rule 161   prep_fw_stack -> <empty>
Rule 162   while_l1 -> <empty>
Rule 163   while_l2 -> <empty>
Rule 164   DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
Rule 165   dwhile_l1 -> <empty>
Rule 166   dwhile_l2 -> <empty>
Rule 167   ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
Rule 168   ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
Rule 169   ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
Rule 170   ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
Rule 171   ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
Rule 172   ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
Rule 173   ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
Rule 174   ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
Rule 175   ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
Rule 176   ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
Rule 177   ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
Rule 178   ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
Rule 179   ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
Rule 180   ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
Rule 181   ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
Rule 182   ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
Rule 183   for_l1 -> <empty>
Rule 184   for_l2 -> <empty>
Rule 185   for_l3 -> <empty>
Rule 186   ForInit -> StatementExpressionList
Rule 187   ForInit -> LocalVariableDeclaration
Rule 188   ForUpdate -> StatementExpressionList
Rule 189   StatementExpressionList -> StatementExpression
Rule 190   StatementExpressionList -> StatementExpressionList COMMA StatementExpression
Rule 191   BreakStatement -> BREAK IDENTIFIER SEMI
Rule 192   BreakStatement -> BREAK SEMI
Rule 193   ContinueStatement -> CONTINUE IDENTIFIER SEMI
Rule 194   ContinueStatement -> CONTINUE SEMI
Rule 195   ReturnStatement -> RETURN Expression SEMI
Rule 196   ReturnStatement -> RETURN SEMI
Rule 197   Primary -> PrimaryNoNewArray
Rule 198   Primary -> ArrayCreationExpression
Rule 199   PrimaryNoNewArray -> Literal
Rule 200   PrimaryNoNewArray -> THIS
Rule 201   PrimaryNoNewArray -> LPAREN Expression RPAREN
Rule 202   PrimaryNoNewArray -> ClassInstanceCreationExpression
Rule 203   PrimaryNoNewArray -> FieldAccess
Rule 204   PrimaryNoNewArray -> MethodInvocation
Rule 205   PrimaryNoNewArray -> ArrayAccess
Rule 206   ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN
Rule 207   ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN
Rule 208   ArgumentList -> Expression
Rule 209   ArgumentList -> ArgumentList COMMA Expression
Rule 210   ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims
Rule 211   ArrayCreationExpression -> NEW PrimitiveType DimExprs
Rule 212   ArrayCreationExpression -> NEW ClassType DimExprs Dims
Rule 213   ArrayCreationExpression -> NEW ClassType DimExprs
Rule 214   DimExprs -> DimExpr
Rule 215   DimExprs -> DimExprs DimExpr
Rule 216   DimExpr -> LBRACK Expression RBRACK
Rule 217   Dims -> LBRACK RBRACK
Rule 218   Dims -> Dims LBRACK RBRACK
Rule 219   FieldAccess -> Primary DOT Name
Rule 220   FieldAccess -> SUPER DOT Name
Rule 221   MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
Rule 222   MethodInvocation -> Name LPAREN ArgumentList RPAREN
Rule 223   MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN
Rule 224   MethodInvocation -> Name LPAREN RPAREN
Rule 225   ArrayAccess -> Name LBRACK Expression RBRACK
Rule 226   ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK
Rule 227   PostfixExpression -> Primary
Rule 228   PostfixExpression -> Name
Rule 229   PostfixExpression -> PostIncrementExpression
Rule 230   PostfixExpression -> PostDecrementExpression
Rule 231   PostIncrementExpression -> PostfixExpression INC
Rule 232   PostDecrementExpression -> PostfixExpression DEC
Rule 233   UnaryExpression -> PreIncrementExpression
Rule 234   UnaryExpression -> PreDecrementExpression
Rule 235   UnaryExpression -> ADD UnaryExpression
Rule 236   UnaryExpression -> SUB UnaryExpression
Rule 237   UnaryExpression -> UnaryExpressionNotAddSub
Rule 238   PreIncrementExpression -> INC UnaryExpression
Rule 239   PreDecrementExpression -> DEC UnaryExpression
Rule 240   UnaryExpressionNotAddSub -> PostfixExpression
Rule 241   UnaryExpressionNotAddSub -> BANG UnaryExpression
Rule 242   UnaryExpressionNotAddSub -> TILDE UnaryExpression
Rule 243   UnaryExpressionNotAddSub -> CastExpression
Rule 244   CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression
Rule 245   CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression
Rule 246   CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub
Rule 247   CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
Rule 248   MultiplicativeExpression -> UnaryExpression
Rule 249   MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression
Rule 250   MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression
Rule 251   MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression
Rule 252   AdditiveExpression -> MultiplicativeExpression
Rule 253   AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression
Rule 254   AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression
Rule 255   ShiftExpression -> AdditiveExpression
Rule 256   ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression
Rule 257   ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression
Rule 258   ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression
Rule 259   RelationalExpression -> ShiftExpression
Rule 260   RelationalExpression -> RelationalExpression LT ShiftExpression
Rule 261   RelationalExpression -> RelationalExpression GT ShiftExpression
Rule 262   RelationalExpression -> RelationalExpression LE ShiftExpression
Rule 263   RelationalExpression -> RelationalExpression GE ShiftExpression
Rule 264   EqualityExpression -> RelationalExpression
Rule 265   EqualityExpression -> EqualityExpression EQUAL RelationalExpression
Rule 266   EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression
Rule 267   AndExpression -> EqualityExpression
Rule 268   AndExpression -> AndExpression BITAND EqualityExpression
Rule 269   ExclusiveOrExpression -> AndExpression
Rule 270   ExclusiveOrExpression -> ExclusiveOrExpression CARET AndExpression
Rule 271   InclusiveOrExpression -> ExclusiveOrExpression
Rule 272   InclusiveOrExpression -> InclusiveOrExpression BITOR ExclusiveOrExpression
Rule 273   ConditionalAndExpression -> InclusiveOrExpression
Rule 274   ConditionalAndExpression -> ConditionalAndExpression AND ConMarker InclusiveOrExpression
Rule 275   ConditionalOrExpression -> ConditionalAndExpression
Rule 276   ConditionalOrExpression -> ConditionalOrExpression OR ConMarker ConditionalAndExpression
Rule 277   ConMarker -> <empty>
Rule 278   ConditionalExpression -> ConditionalOrExpression
Rule 279   ConditionalExpression -> ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
Rule 280   AssignmentExpression -> ConditionalExpression
Rule 281   AssignmentExpression -> Assignment
Rule 282   Assignment -> LeftHandSide AssignmentOperator AssignmentExpression
Rule 283   LeftHandSide -> Name
Rule 284   LeftHandSide -> FieldAccess
Rule 285   LeftHandSide -> ArrayAccess
Rule 286   AssignmentOperator -> ASSIGN
Rule 287   AssignmentOperator -> ADD_ASSIGN
Rule 288   AssignmentOperator -> SUB_ASSIGN
Rule 289   AssignmentOperator -> MUL_ASSIGN
Rule 290   AssignmentOperator -> DIV_ASSIGN
Rule 291   AssignmentOperator -> AND_ASSIGN
Rule 292   AssignmentOperator -> OR_ASSIGN
Rule 293   AssignmentOperator -> XOR_ASSIGN
Rule 294   AssignmentOperator -> MOD_ASSIGN
Rule 295   AssignmentOperator -> LSHIFT_ASSIGN
Rule 296   AssignmentOperator -> RSHIFT_ASSIGN
Rule 297   AssignmentOperator -> URSHIFT_ASSIGN
Rule 298   Expression -> AssignmentExpression
Rule 299   ConstantExpression -> Expression
Rule 300   decl_mark -> <empty>
Rule 301   decl_mark_2 -> <empty>
Rule 302   begin_scope -> <empty>
Rule 303   end_scope -> <empty>

Terminals, with rules where they appear

ADD                  : 235 253
ADD_ASSIGN           : 287
AND                  : 274
AND_ASSIGN           : 291
ASSIGN               : 75 286
BANG                 : 241
BINARY_LITERAL       : 4
BITAND               : 268
BITOR                : 272
BOOLEAN              : 13
BOOL_LITERAL         : 6
BREAK                : 191 192
BYTE                 : 16
CARET                : 270
CASE                 : 157
CHAR                 : 20
CHAR_LITERAL         : 7
CLASS                : 59 60
COLON                : 131 132 157 158 279
COMMA                : 73 87 102 190 209
CONTINUE             : 193 194
DEC                  : 232 239
DECIMAL_LITERAL      : 2
DEFAULT              : 158
DIV                  : 250
DIV_ASSIGN           : 290
DO                   : 164
DOT                  : 31 47 48 219 220 221 223
DOUBLE               : 22
ELSE                 : 145 146
EQUAL                : 265
FINAL                : 55
FLOAT                : 21
FLOAT_LITERAL        : 5
FOR                  : 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182
GE                   : 263
GT                   : 261
HEX_LITERAL          : 3
IDENTIFIER           : 30 31 43 48 49 59 60 76 77 84 85 131 132 191 193 221 223
IF                   : 141 145 146
IMPORT               : 46 47
INC                  : 231 238
INT                  : 18
LBRACE               : 61 62 97 98 103 104 148 149 150 151
LBRACK               : 216 217 218 225 226
LE                   : 262
LONG                 : 19
LPAREN               : 84 85 94 95 99 100 141 145 146 147 159 160 164 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 201 206 207 221 222 223 224 244 245 246 247
LSHIFT               : 256
LSHIFT_ASSIGN        : 295
LT                   : 260
MOD                  : 251
MOD_ASSIGN           : 294
MUL                  : 47 249
MUL_ASSIGN           : 289
NEW                  : 206 207 210 211 212 213
NOTEQUAL             : 266
NULL                 : 9
OR                   : 276
OR_ASSIGN            : 292
PACKAGE              : 43
PRIVATE              : 56
PROTECTED            : 57
PUBLIC               : 58
QUESTION             : 279
RBRACE               : 61 62 97 98 103 104 148 149 150 151
RBRACK               : 216 217 218 225 226
RETURN               : 195 196
RPAREN               : 84 85 94 95 99 100 141 145 146 147 159 160 164 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 201 206 207 221 222 223 224 244 245 246 247
RSHIFT               : 257
RSHIFT_ASSIGN        : 296
SEMI                 : 43 46 47 51 70 71 90 99 100 109 130 133 164 167 167 168 168 169 169 170 170 171 171 172 172 173 173 174 174 175 175 176 176 177 177 178 178 179 179 180 180 181 181 182 182 191 192 193 194 195 196
SHORT                : 17
STATIC               : 54 91
STRING_LITERAL       : 8
SUB                  : 236 254
SUB_ASSIGN           : 288
SUPER                : 220
SWITCH               : 147
THIS                 : 99 100 200
TILDE                : 242
URSHIFT              : 258
URSHIFT_ASSIGN       : 297
VOID                 : 82 83
WHILE                : 159 160 164
XOR_ASSIGN           : 293
error                : 

Nonterminals, with rules where they appear

AdditiveExpression   : 253 254 255 256 257 258
AndExpression        : 268 269 270
ArgumentList         : 99 207 209 221 222
ArrayAccess          : 205 285
ArrayCreationExpression : 198
ArrayType            : 23
Assignment           : 134 281
AssignmentExpression : 282 298
AssignmentOperator   : 282
Block                : 89 91 122
BlockStatement       : 105 106
BlockStatements      : 97 104 106 154
BreakStatement       : 127
CastExpression       : 243
ClassBody            : 59 60
ClassBodyDeclaration : 63 64
ClassBodyDeclarations : 62 64
ClassDeclaration     : 50
ClassInstanceCreationExpression : 140 202
ClassMemberDeclaration : 65
ClassType            : 24 206 207 212 213
CompilationUnit      : 1
ConMarker            : 274 276
ConditionalAndExpression : 274 275 276
ConditionalExpression : 279 280
ConditionalOrExpression : 276 278 279
ConstantExpression   : 157
ConstructorBody      : 92 93
ConstructorDeclaration : 66
ConstructorDeclarator : 92 93
ContinueStatement    : 128
DimExpr              : 214 215
DimExprs             : 210 211 212 213 215
Dims                 : 26 27 77 210 212 218 244 247
DoStatement          : 126
EmptyStatement       : 123
EqualityExpression   : 265 266 267 268
ExclusiveOrExpression : 270 271 272
ExplicitConstructorInvocation : 
Expression           : 78 141 145 146 147 159 160 164 167 168 170 172 175 176 178 180 195 201 208 209 216 225 226 246 279 299
ExpressionStatement  : 124
FieldAccess          : 203 284
FieldDeclaration     : 68
FloatingPointType    : 15
ForInit              : 167 169 170 171 175 177 178 179
ForStatement         : 116
ForStatementNoShortIf : 121
ForUpdate            : 167 168 169 173 175 176 177 181
FormalParameter      : 86 87
FormalParameterList  : 85 87 94
Goal                 : 0
IfThenElseStatement  : 114
IfThenElseStatementNoShortIf : 119
IfThenStatement      : 113
ImportDeclaration    : 39 40
ImportDeclarations   : 32 33 36 37 40
InclusiveOrExpression : 272 273 274
IntegralType         : 14
LabeledStatement     : 112
LabeledStatementNoShortIf : 118
LeftHandSide         : 282
Literal              : 199
LocalVariableDeclaration : 109 187
LocalVariableDeclarationStatement : 107
MethodBody           : 79
MethodDeclaration    : 69
MethodDeclarator     : 80 81 82 83
MethodHeader         : 79
MethodInvocation     : 139 204
Modifier             : 52 53
Modifiers            : 53 59 70 80 82 92
MultiplicativeExpression : 249 250 251 252 253 254
Name                 : 25 27 31 219 220 222 224 225 228 247 283
NumericType          : 12
PackageDeclaration   : 32 33 34 35
PostDecrementExpression : 138 230
PostIncrementExpression : 137 229
PostfixExpression    : 231 232 240
PreDecrementExpression : 136 234
PreIncrementExpression : 135 233
Primary              : 219 221 223 227
PrimaryNoNewArray    : 197 226
PrimitiveType        : 10 26 210 211 244 245
QualifiedName        : 29
ReferenceType        : 11
RelationalExpression : 260 261 262 263 264 265 266
ReturnStatement      : 129
ShiftExpression      : 256 257 258 259 260 261 262 263
SimpleName           : 28 94 95
SingleTypeImportDeclaration : 44
Statement            : 108 131 141 145 159 164 167 168 169 170 171 172 173 174
StatementExpression  : 133 189 190
StatementExpressionList : 186 188 190
StatementNoShortIf   : 132 145 146 146 160 175 176 177 178 179 180 181 182
StatementWithoutTrailingSubstatement : 111 117
StaticInitializer    : 67
SwitchBlock          : 147
SwitchBlockStatementGroup : 152 153
SwitchBlockStatementGroups : 149 150 153
SwitchLabel          : 155 156
SwitchLabels         : 149 151 154 156
SwitchStatement      : 125
Type                 : 70 71 80 81 88 110
TypeDeclaration      : 41 42
TypeDeclarations     : 32 35 37 38 42
TypeImportOnDemandDeclaration : 45
UnaryExpression      : 235 236 238 239 241 242 244 245 248 249 250 251
UnaryExpressionNotAddSub : 237 246 247
VariableDeclarator   : 72 73
VariableDeclaratorId : 74 75 88
VariableDeclarators  : 70 71 73 110
VariableInitializer  : 75 101 102
VariableInitializers : 102
WhileStatement       : 115
WhileStatementNoShortIf : 120
begin_scope          : 91 141 145 145 146 146 149 151 154 159 160 164 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182
decl_mark            : 94 95
decl_mark_2          : 59 60
dwhile_l1            : 164 164
dwhile_l2            : 164
end_scope            : 91 141 145 145 146 146 149 151 154 159 160 164 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182
for_l1               : 167 167 167 168 168 168 169 169 169 170 170 170 171 171 171 172 172 172 173 173 173 174 174 174 175 175 175 176 176 176 177 177 177 178 178 178 179 179 179 180 180 180 181 181 181 182 182 182
for_l2               : 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182
for_l3               : 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182
ifMark1              : 141 141 145 146
ifMark2              : 145 146
ifMark3              : 145 146
import_identifier    : 46 47 48
prep_fw_stack        : 159 160 164 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182
while_l1             : 159 159 160 160
while_l2             : 159 160

Parsing method: LALR

state 0

    (0) S' -> . Goal
    (1) Goal -> . CompilationUnit
    (32) CompilationUnit -> . PackageDeclaration ImportDeclarations TypeDeclarations
    (33) CompilationUnit -> . PackageDeclaration ImportDeclarations
    (34) CompilationUnit -> . PackageDeclaration
    (35) CompilationUnit -> . PackageDeclaration TypeDeclarations
    (36) CompilationUnit -> . ImportDeclarations
    (37) CompilationUnit -> . ImportDeclarations TypeDeclarations
    (38) CompilationUnit -> . TypeDeclarations
    (43) PackageDeclaration -> . PACKAGE IDENTIFIER SEMI
    (39) ImportDeclarations -> . ImportDeclaration
    (40) ImportDeclarations -> . ImportDeclarations ImportDeclaration
    (41) TypeDeclarations -> . TypeDeclaration
    (42) TypeDeclarations -> . TypeDeclarations TypeDeclaration
    (44) ImportDeclaration -> . SingleTypeImportDeclaration
    (45) ImportDeclaration -> . TypeImportOnDemandDeclaration
    (50) TypeDeclaration -> . ClassDeclaration
    (51) TypeDeclaration -> . SEMI
    (46) SingleTypeImportDeclaration -> . IMPORT import_identifier SEMI
    (47) TypeImportOnDemandDeclaration -> . IMPORT import_identifier DOT MUL SEMI
    (59) ClassDeclaration -> . Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody
    (60) ClassDeclaration -> . CLASS IDENTIFIER decl_mark_2 ClassBody
    (52) Modifiers -> . Modifier
    (53) Modifiers -> . Modifiers Modifier
    (54) Modifier -> . STATIC
    (55) Modifier -> . FINAL
    (56) Modifier -> . PRIVATE
    (57) Modifier -> . PROTECTED
    (58) Modifier -> . PUBLIC

    PACKAGE         shift and go to state 6
    SEMI            shift and go to state 7
    IMPORT          shift and go to state 13
    CLASS           shift and go to state 15
    STATIC          shift and go to state 17
    FINAL           shift and go to state 18
    PRIVATE         shift and go to state 19
    PROTECTED       shift and go to state 20
    PUBLIC          shift and go to state 21

    Goal                           shift and go to state 1
    CompilationUnit                shift and go to state 2
    PackageDeclaration             shift and go to state 3
    ImportDeclarations             shift and go to state 4
    TypeDeclarations               shift and go to state 5
    ImportDeclaration              shift and go to state 8
    TypeDeclaration                shift and go to state 9
    SingleTypeImportDeclaration    shift and go to state 10
    TypeImportOnDemandDeclaration  shift and go to state 11
    ClassDeclaration               shift and go to state 12
    Modifiers                      shift and go to state 14
    Modifier                       shift and go to state 16

state 1

    (0) S' -> Goal .



state 2

    (1) Goal -> CompilationUnit .

    $end            reduce using rule 1 (Goal -> CompilationUnit .)


state 3

    (32) CompilationUnit -> PackageDeclaration . ImportDeclarations TypeDeclarations
    (33) CompilationUnit -> PackageDeclaration . ImportDeclarations
    (34) CompilationUnit -> PackageDeclaration .
    (35) CompilationUnit -> PackageDeclaration . TypeDeclarations
    (39) ImportDeclarations -> . ImportDeclaration
    (40) ImportDeclarations -> . ImportDeclarations ImportDeclaration
    (41) TypeDeclarations -> . TypeDeclaration
    (42) TypeDeclarations -> . TypeDeclarations TypeDeclaration
    (44) ImportDeclaration -> . SingleTypeImportDeclaration
    (45) ImportDeclaration -> . TypeImportOnDemandDeclaration
    (50) TypeDeclaration -> . ClassDeclaration
    (51) TypeDeclaration -> . SEMI
    (46) SingleTypeImportDeclaration -> . IMPORT import_identifier SEMI
    (47) TypeImportOnDemandDeclaration -> . IMPORT import_identifier DOT MUL SEMI
    (59) ClassDeclaration -> . Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody
    (60) ClassDeclaration -> . CLASS IDENTIFIER decl_mark_2 ClassBody
    (52) Modifiers -> . Modifier
    (53) Modifiers -> . Modifiers Modifier
    (54) Modifier -> . STATIC
    (55) Modifier -> . FINAL
    (56) Modifier -> . PRIVATE
    (57) Modifier -> . PROTECTED
    (58) Modifier -> . PUBLIC

    $end            reduce using rule 34 (CompilationUnit -> PackageDeclaration .)
    SEMI            shift and go to state 7
    IMPORT          shift and go to state 13
    CLASS           shift and go to state 15
    STATIC          shift and go to state 17
    FINAL           shift and go to state 18
    PRIVATE         shift and go to state 19
    PROTECTED       shift and go to state 20
    PUBLIC          shift and go to state 21

    ImportDeclarations             shift and go to state 22
    TypeDeclarations               shift and go to state 23
    ImportDeclaration              shift and go to state 8
    TypeDeclaration                shift and go to state 9
    SingleTypeImportDeclaration    shift and go to state 10
    TypeImportOnDemandDeclaration  shift and go to state 11
    ClassDeclaration               shift and go to state 12
    Modifiers                      shift and go to state 14
    Modifier                       shift and go to state 16

state 4

    (36) CompilationUnit -> ImportDeclarations .
    (37) CompilationUnit -> ImportDeclarations . TypeDeclarations
    (40) ImportDeclarations -> ImportDeclarations . ImportDeclaration
    (41) TypeDeclarations -> . TypeDeclaration
    (42) TypeDeclarations -> . TypeDeclarations TypeDeclaration
    (44) ImportDeclaration -> . SingleTypeImportDeclaration
    (45) ImportDeclaration -> . TypeImportOnDemandDeclaration
    (50) TypeDeclaration -> . ClassDeclaration
    (51) TypeDeclaration -> . SEMI
    (46) SingleTypeImportDeclaration -> . IMPORT import_identifier SEMI
    (47) TypeImportOnDemandDeclaration -> . IMPORT import_identifier DOT MUL SEMI
    (59) ClassDeclaration -> . Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody
    (60) ClassDeclaration -> . CLASS IDENTIFIER decl_mark_2 ClassBody
    (52) Modifiers -> . Modifier
    (53) Modifiers -> . Modifiers Modifier
    (54) Modifier -> . STATIC
    (55) Modifier -> . FINAL
    (56) Modifier -> . PRIVATE
    (57) Modifier -> . PROTECTED
    (58) Modifier -> . PUBLIC

    $end            reduce using rule 36 (CompilationUnit -> ImportDeclarations .)
    SEMI            shift and go to state 7
    IMPORT          shift and go to state 13
    CLASS           shift and go to state 15
    STATIC          shift and go to state 17
    FINAL           shift and go to state 18
    PRIVATE         shift and go to state 19
    PROTECTED       shift and go to state 20
    PUBLIC          shift and go to state 21

    TypeDeclarations               shift and go to state 24
    ImportDeclaration              shift and go to state 25
    TypeDeclaration                shift and go to state 9
    SingleTypeImportDeclaration    shift and go to state 10
    TypeImportOnDemandDeclaration  shift and go to state 11
    ClassDeclaration               shift and go to state 12
    Modifiers                      shift and go to state 14
    Modifier                       shift and go to state 16

state 5

    (38) CompilationUnit -> TypeDeclarations .
    (42) TypeDeclarations -> TypeDeclarations . TypeDeclaration
    (50) TypeDeclaration -> . ClassDeclaration
    (51) TypeDeclaration -> . SEMI
    (59) ClassDeclaration -> . Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody
    (60) ClassDeclaration -> . CLASS IDENTIFIER decl_mark_2 ClassBody
    (52) Modifiers -> . Modifier
    (53) Modifiers -> . Modifiers Modifier
    (54) Modifier -> . STATIC
    (55) Modifier -> . FINAL
    (56) Modifier -> . PRIVATE
    (57) Modifier -> . PROTECTED
    (58) Modifier -> . PUBLIC

    $end            reduce using rule 38 (CompilationUnit -> TypeDeclarations .)
    SEMI            shift and go to state 7
    CLASS           shift and go to state 15
    STATIC          shift and go to state 17
    FINAL           shift and go to state 18
    PRIVATE         shift and go to state 19
    PROTECTED       shift and go to state 20
    PUBLIC          shift and go to state 21

    TypeDeclaration                shift and go to state 26
    ClassDeclaration               shift and go to state 12
    Modifiers                      shift and go to state 14
    Modifier                       shift and go to state 16

state 6

    (43) PackageDeclaration -> PACKAGE . IDENTIFIER SEMI

    IDENTIFIER      shift and go to state 27


state 7

    (51) TypeDeclaration -> SEMI .

    SEMI            reduce using rule 51 (TypeDeclaration -> SEMI .)
    CLASS           reduce using rule 51 (TypeDeclaration -> SEMI .)
    STATIC          reduce using rule 51 (TypeDeclaration -> SEMI .)
    FINAL           reduce using rule 51 (TypeDeclaration -> SEMI .)
    PRIVATE         reduce using rule 51 (TypeDeclaration -> SEMI .)
    PROTECTED       reduce using rule 51 (TypeDeclaration -> SEMI .)
    PUBLIC          reduce using rule 51 (TypeDeclaration -> SEMI .)
    $end            reduce using rule 51 (TypeDeclaration -> SEMI .)


state 8

    (39) ImportDeclarations -> ImportDeclaration .

    SEMI            reduce using rule 39 (ImportDeclarations -> ImportDeclaration .)
    IMPORT          reduce using rule 39 (ImportDeclarations -> ImportDeclaration .)
    CLASS           reduce using rule 39 (ImportDeclarations -> ImportDeclaration .)
    STATIC          reduce using rule 39 (ImportDeclarations -> ImportDeclaration .)
    FINAL           reduce using rule 39 (ImportDeclarations -> ImportDeclaration .)
    PRIVATE         reduce using rule 39 (ImportDeclarations -> ImportDeclaration .)
    PROTECTED       reduce using rule 39 (ImportDeclarations -> ImportDeclaration .)
    PUBLIC          reduce using rule 39 (ImportDeclarations -> ImportDeclaration .)
    $end            reduce using rule 39 (ImportDeclarations -> ImportDeclaration .)


state 9

    (41) TypeDeclarations -> TypeDeclaration .

    SEMI            reduce using rule 41 (TypeDeclarations -> TypeDeclaration .)
    CLASS           reduce using rule 41 (TypeDeclarations -> TypeDeclaration .)
    STATIC          reduce using rule 41 (TypeDeclarations -> TypeDeclaration .)
    FINAL           reduce using rule 41 (TypeDeclarations -> TypeDeclaration .)
    PRIVATE         reduce using rule 41 (TypeDeclarations -> TypeDeclaration .)
    PROTECTED       reduce using rule 41 (TypeDeclarations -> TypeDeclaration .)
    PUBLIC          reduce using rule 41 (TypeDeclarations -> TypeDeclaration .)
    $end            reduce using rule 41 (TypeDeclarations -> TypeDeclaration .)


state 10

    (44) ImportDeclaration -> SingleTypeImportDeclaration .

    SEMI            reduce using rule 44 (ImportDeclaration -> SingleTypeImportDeclaration .)
    IMPORT          reduce using rule 44 (ImportDeclaration -> SingleTypeImportDeclaration .)
    CLASS           reduce using rule 44 (ImportDeclaration -> SingleTypeImportDeclaration .)
    STATIC          reduce using rule 44 (ImportDeclaration -> SingleTypeImportDeclaration .)
    FINAL           reduce using rule 44 (ImportDeclaration -> SingleTypeImportDeclaration .)
    PRIVATE         reduce using rule 44 (ImportDeclaration -> SingleTypeImportDeclaration .)
    PROTECTED       reduce using rule 44 (ImportDeclaration -> SingleTypeImportDeclaration .)
    PUBLIC          reduce using rule 44 (ImportDeclaration -> SingleTypeImportDeclaration .)
    $end            reduce using rule 44 (ImportDeclaration -> SingleTypeImportDeclaration .)


state 11

    (45) ImportDeclaration -> TypeImportOnDemandDeclaration .

    SEMI            reduce using rule 45 (ImportDeclaration -> TypeImportOnDemandDeclaration .)
    IMPORT          reduce using rule 45 (ImportDeclaration -> TypeImportOnDemandDeclaration .)
    CLASS           reduce using rule 45 (ImportDeclaration -> TypeImportOnDemandDeclaration .)
    STATIC          reduce using rule 45 (ImportDeclaration -> TypeImportOnDemandDeclaration .)
    FINAL           reduce using rule 45 (ImportDeclaration -> TypeImportOnDemandDeclaration .)
    PRIVATE         reduce using rule 45 (ImportDeclaration -> TypeImportOnDemandDeclaration .)
    PROTECTED       reduce using rule 45 (ImportDeclaration -> TypeImportOnDemandDeclaration .)
    PUBLIC          reduce using rule 45 (ImportDeclaration -> TypeImportOnDemandDeclaration .)
    $end            reduce using rule 45 (ImportDeclaration -> TypeImportOnDemandDeclaration .)


state 12

    (50) TypeDeclaration -> ClassDeclaration .

    SEMI            reduce using rule 50 (TypeDeclaration -> ClassDeclaration .)
    CLASS           reduce using rule 50 (TypeDeclaration -> ClassDeclaration .)
    STATIC          reduce using rule 50 (TypeDeclaration -> ClassDeclaration .)
    FINAL           reduce using rule 50 (TypeDeclaration -> ClassDeclaration .)
    PRIVATE         reduce using rule 50 (TypeDeclaration -> ClassDeclaration .)
    PROTECTED       reduce using rule 50 (TypeDeclaration -> ClassDeclaration .)
    PUBLIC          reduce using rule 50 (TypeDeclaration -> ClassDeclaration .)
    $end            reduce using rule 50 (TypeDeclaration -> ClassDeclaration .)


state 13

    (46) SingleTypeImportDeclaration -> IMPORT . import_identifier SEMI
    (47) TypeImportOnDemandDeclaration -> IMPORT . import_identifier DOT MUL SEMI
    (48) import_identifier -> . import_identifier DOT IDENTIFIER
    (49) import_identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 29

    import_identifier              shift and go to state 28

state 14

    (59) ClassDeclaration -> Modifiers . CLASS IDENTIFIER decl_mark_2 ClassBody
    (53) Modifiers -> Modifiers . Modifier
    (54) Modifier -> . STATIC
    (55) Modifier -> . FINAL
    (56) Modifier -> . PRIVATE
    (57) Modifier -> . PROTECTED
    (58) Modifier -> . PUBLIC

    CLASS           shift and go to state 30
    STATIC          shift and go to state 17
    FINAL           shift and go to state 18
    PRIVATE         shift and go to state 19
    PROTECTED       shift and go to state 20
    PUBLIC          shift and go to state 21

    Modifier                       shift and go to state 31

state 15

    (60) ClassDeclaration -> CLASS . IDENTIFIER decl_mark_2 ClassBody

    IDENTIFIER      shift and go to state 32


state 16

    (52) Modifiers -> Modifier .

    CLASS           reduce using rule 52 (Modifiers -> Modifier .)
    STATIC          reduce using rule 52 (Modifiers -> Modifier .)
    FINAL           reduce using rule 52 (Modifiers -> Modifier .)
    PRIVATE         reduce using rule 52 (Modifiers -> Modifier .)
    PROTECTED       reduce using rule 52 (Modifiers -> Modifier .)
    PUBLIC          reduce using rule 52 (Modifiers -> Modifier .)
    VOID            reduce using rule 52 (Modifiers -> Modifier .)
    IDENTIFIER      reduce using rule 52 (Modifiers -> Modifier .)
    BOOLEAN         reduce using rule 52 (Modifiers -> Modifier .)
    BYTE            reduce using rule 52 (Modifiers -> Modifier .)
    SHORT           reduce using rule 52 (Modifiers -> Modifier .)
    INT             reduce using rule 52 (Modifiers -> Modifier .)
    LONG            reduce using rule 52 (Modifiers -> Modifier .)
    CHAR            reduce using rule 52 (Modifiers -> Modifier .)
    FLOAT           reduce using rule 52 (Modifiers -> Modifier .)
    DOUBLE          reduce using rule 52 (Modifiers -> Modifier .)


state 17

    (54) Modifier -> STATIC .

    CLASS           reduce using rule 54 (Modifier -> STATIC .)
    STATIC          reduce using rule 54 (Modifier -> STATIC .)
    FINAL           reduce using rule 54 (Modifier -> STATIC .)
    PRIVATE         reduce using rule 54 (Modifier -> STATIC .)
    PROTECTED       reduce using rule 54 (Modifier -> STATIC .)
    PUBLIC          reduce using rule 54 (Modifier -> STATIC .)
    VOID            reduce using rule 54 (Modifier -> STATIC .)
    IDENTIFIER      reduce using rule 54 (Modifier -> STATIC .)
    BOOLEAN         reduce using rule 54 (Modifier -> STATIC .)
    BYTE            reduce using rule 54 (Modifier -> STATIC .)
    SHORT           reduce using rule 54 (Modifier -> STATIC .)
    INT             reduce using rule 54 (Modifier -> STATIC .)
    LONG            reduce using rule 54 (Modifier -> STATIC .)
    CHAR            reduce using rule 54 (Modifier -> STATIC .)
    FLOAT           reduce using rule 54 (Modifier -> STATIC .)
    DOUBLE          reduce using rule 54 (Modifier -> STATIC .)


state 18

    (55) Modifier -> FINAL .

    CLASS           reduce using rule 55 (Modifier -> FINAL .)
    STATIC          reduce using rule 55 (Modifier -> FINAL .)
    FINAL           reduce using rule 55 (Modifier -> FINAL .)
    PRIVATE         reduce using rule 55 (Modifier -> FINAL .)
    PROTECTED       reduce using rule 55 (Modifier -> FINAL .)
    PUBLIC          reduce using rule 55 (Modifier -> FINAL .)
    VOID            reduce using rule 55 (Modifier -> FINAL .)
    IDENTIFIER      reduce using rule 55 (Modifier -> FINAL .)
    BOOLEAN         reduce using rule 55 (Modifier -> FINAL .)
    BYTE            reduce using rule 55 (Modifier -> FINAL .)
    SHORT           reduce using rule 55 (Modifier -> FINAL .)
    INT             reduce using rule 55 (Modifier -> FINAL .)
    LONG            reduce using rule 55 (Modifier -> FINAL .)
    CHAR            reduce using rule 55 (Modifier -> FINAL .)
    FLOAT           reduce using rule 55 (Modifier -> FINAL .)
    DOUBLE          reduce using rule 55 (Modifier -> FINAL .)


state 19

    (56) Modifier -> PRIVATE .

    CLASS           reduce using rule 56 (Modifier -> PRIVATE .)
    STATIC          reduce using rule 56 (Modifier -> PRIVATE .)
    FINAL           reduce using rule 56 (Modifier -> PRIVATE .)
    PRIVATE         reduce using rule 56 (Modifier -> PRIVATE .)
    PROTECTED       reduce using rule 56 (Modifier -> PRIVATE .)
    PUBLIC          reduce using rule 56 (Modifier -> PRIVATE .)
    VOID            reduce using rule 56 (Modifier -> PRIVATE .)
    IDENTIFIER      reduce using rule 56 (Modifier -> PRIVATE .)
    BOOLEAN         reduce using rule 56 (Modifier -> PRIVATE .)
    BYTE            reduce using rule 56 (Modifier -> PRIVATE .)
    SHORT           reduce using rule 56 (Modifier -> PRIVATE .)
    INT             reduce using rule 56 (Modifier -> PRIVATE .)
    LONG            reduce using rule 56 (Modifier -> PRIVATE .)
    CHAR            reduce using rule 56 (Modifier -> PRIVATE .)
    FLOAT           reduce using rule 56 (Modifier -> PRIVATE .)
    DOUBLE          reduce using rule 56 (Modifier -> PRIVATE .)


state 20

    (57) Modifier -> PROTECTED .

    CLASS           reduce using rule 57 (Modifier -> PROTECTED .)
    STATIC          reduce using rule 57 (Modifier -> PROTECTED .)
    FINAL           reduce using rule 57 (Modifier -> PROTECTED .)
    PRIVATE         reduce using rule 57 (Modifier -> PROTECTED .)
    PROTECTED       reduce using rule 57 (Modifier -> PROTECTED .)
    PUBLIC          reduce using rule 57 (Modifier -> PROTECTED .)
    VOID            reduce using rule 57 (Modifier -> PROTECTED .)
    IDENTIFIER      reduce using rule 57 (Modifier -> PROTECTED .)
    BOOLEAN         reduce using rule 57 (Modifier -> PROTECTED .)
    BYTE            reduce using rule 57 (Modifier -> PROTECTED .)
    SHORT           reduce using rule 57 (Modifier -> PROTECTED .)
    INT             reduce using rule 57 (Modifier -> PROTECTED .)
    LONG            reduce using rule 57 (Modifier -> PROTECTED .)
    CHAR            reduce using rule 57 (Modifier -> PROTECTED .)
    FLOAT           reduce using rule 57 (Modifier -> PROTECTED .)
    DOUBLE          reduce using rule 57 (Modifier -> PROTECTED .)


state 21

    (58) Modifier -> PUBLIC .

    CLASS           reduce using rule 58 (Modifier -> PUBLIC .)
    STATIC          reduce using rule 58 (Modifier -> PUBLIC .)
    FINAL           reduce using rule 58 (Modifier -> PUBLIC .)
    PRIVATE         reduce using rule 58 (Modifier -> PUBLIC .)
    PROTECTED       reduce using rule 58 (Modifier -> PUBLIC .)
    PUBLIC          reduce using rule 58 (Modifier -> PUBLIC .)
    VOID            reduce using rule 58 (Modifier -> PUBLIC .)
    IDENTIFIER      reduce using rule 58 (Modifier -> PUBLIC .)
    BOOLEAN         reduce using rule 58 (Modifier -> PUBLIC .)
    BYTE            reduce using rule 58 (Modifier -> PUBLIC .)
    SHORT           reduce using rule 58 (Modifier -> PUBLIC .)
    INT             reduce using rule 58 (Modifier -> PUBLIC .)
    LONG            reduce using rule 58 (Modifier -> PUBLIC .)
    CHAR            reduce using rule 58 (Modifier -> PUBLIC .)
    FLOAT           reduce using rule 58 (Modifier -> PUBLIC .)
    DOUBLE          reduce using rule 58 (Modifier -> PUBLIC .)


state 22

    (32) CompilationUnit -> PackageDeclaration ImportDeclarations . TypeDeclarations
    (33) CompilationUnit -> PackageDeclaration ImportDeclarations .
    (40) ImportDeclarations -> ImportDeclarations . ImportDeclaration
    (41) TypeDeclarations -> . TypeDeclaration
    (42) TypeDeclarations -> . TypeDeclarations TypeDeclaration
    (44) ImportDeclaration -> . SingleTypeImportDeclaration
    (45) ImportDeclaration -> . TypeImportOnDemandDeclaration
    (50) TypeDeclaration -> . ClassDeclaration
    (51) TypeDeclaration -> . SEMI
    (46) SingleTypeImportDeclaration -> . IMPORT import_identifier SEMI
    (47) TypeImportOnDemandDeclaration -> . IMPORT import_identifier DOT MUL SEMI
    (59) ClassDeclaration -> . Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody
    (60) ClassDeclaration -> . CLASS IDENTIFIER decl_mark_2 ClassBody
    (52) Modifiers -> . Modifier
    (53) Modifiers -> . Modifiers Modifier
    (54) Modifier -> . STATIC
    (55) Modifier -> . FINAL
    (56) Modifier -> . PRIVATE
    (57) Modifier -> . PROTECTED
    (58) Modifier -> . PUBLIC

    $end            reduce using rule 33 (CompilationUnit -> PackageDeclaration ImportDeclarations .)
    SEMI            shift and go to state 7
    IMPORT          shift and go to state 13
    CLASS           shift and go to state 15
    STATIC          shift and go to state 17
    FINAL           shift and go to state 18
    PRIVATE         shift and go to state 19
    PROTECTED       shift and go to state 20
    PUBLIC          shift and go to state 21

    TypeDeclarations               shift and go to state 33
    ImportDeclaration              shift and go to state 25
    TypeDeclaration                shift and go to state 9
    SingleTypeImportDeclaration    shift and go to state 10
    TypeImportOnDemandDeclaration  shift and go to state 11
    ClassDeclaration               shift and go to state 12
    Modifiers                      shift and go to state 14
    Modifier                       shift and go to state 16

state 23

    (35) CompilationUnit -> PackageDeclaration TypeDeclarations .
    (42) TypeDeclarations -> TypeDeclarations . TypeDeclaration
    (50) TypeDeclaration -> . ClassDeclaration
    (51) TypeDeclaration -> . SEMI
    (59) ClassDeclaration -> . Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody
    (60) ClassDeclaration -> . CLASS IDENTIFIER decl_mark_2 ClassBody
    (52) Modifiers -> . Modifier
    (53) Modifiers -> . Modifiers Modifier
    (54) Modifier -> . STATIC
    (55) Modifier -> . FINAL
    (56) Modifier -> . PRIVATE
    (57) Modifier -> . PROTECTED
    (58) Modifier -> . PUBLIC

    $end            reduce using rule 35 (CompilationUnit -> PackageDeclaration TypeDeclarations .)
    SEMI            shift and go to state 7
    CLASS           shift and go to state 15
    STATIC          shift and go to state 17
    FINAL           shift and go to state 18
    PRIVATE         shift and go to state 19
    PROTECTED       shift and go to state 20
    PUBLIC          shift and go to state 21

    TypeDeclaration                shift and go to state 26
    ClassDeclaration               shift and go to state 12
    Modifiers                      shift and go to state 14
    Modifier                       shift and go to state 16

state 24

    (37) CompilationUnit -> ImportDeclarations TypeDeclarations .
    (42) TypeDeclarations -> TypeDeclarations . TypeDeclaration
    (50) TypeDeclaration -> . ClassDeclaration
    (51) TypeDeclaration -> . SEMI
    (59) ClassDeclaration -> . Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody
    (60) ClassDeclaration -> . CLASS IDENTIFIER decl_mark_2 ClassBody
    (52) Modifiers -> . Modifier
    (53) Modifiers -> . Modifiers Modifier
    (54) Modifier -> . STATIC
    (55) Modifier -> . FINAL
    (56) Modifier -> . PRIVATE
    (57) Modifier -> . PROTECTED
    (58) Modifier -> . PUBLIC

    $end            reduce using rule 37 (CompilationUnit -> ImportDeclarations TypeDeclarations .)
    SEMI            shift and go to state 7
    CLASS           shift and go to state 15
    STATIC          shift and go to state 17
    FINAL           shift and go to state 18
    PRIVATE         shift and go to state 19
    PROTECTED       shift and go to state 20
    PUBLIC          shift and go to state 21

    TypeDeclaration                shift and go to state 26
    ClassDeclaration               shift and go to state 12
    Modifiers                      shift and go to state 14
    Modifier                       shift and go to state 16

state 25

    (40) ImportDeclarations -> ImportDeclarations ImportDeclaration .

    SEMI            reduce using rule 40 (ImportDeclarations -> ImportDeclarations ImportDeclaration .)
    IMPORT          reduce using rule 40 (ImportDeclarations -> ImportDeclarations ImportDeclaration .)
    CLASS           reduce using rule 40 (ImportDeclarations -> ImportDeclarations ImportDeclaration .)
    STATIC          reduce using rule 40 (ImportDeclarations -> ImportDeclarations ImportDeclaration .)
    FINAL           reduce using rule 40 (ImportDeclarations -> ImportDeclarations ImportDeclaration .)
    PRIVATE         reduce using rule 40 (ImportDeclarations -> ImportDeclarations ImportDeclaration .)
    PROTECTED       reduce using rule 40 (ImportDeclarations -> ImportDeclarations ImportDeclaration .)
    PUBLIC          reduce using rule 40 (ImportDeclarations -> ImportDeclarations ImportDeclaration .)
    $end            reduce using rule 40 (ImportDeclarations -> ImportDeclarations ImportDeclaration .)


state 26

    (42) TypeDeclarations -> TypeDeclarations TypeDeclaration .

    SEMI            reduce using rule 42 (TypeDeclarations -> TypeDeclarations TypeDeclaration .)
    CLASS           reduce using rule 42 (TypeDeclarations -> TypeDeclarations TypeDeclaration .)
    STATIC          reduce using rule 42 (TypeDeclarations -> TypeDeclarations TypeDeclaration .)
    FINAL           reduce using rule 42 (TypeDeclarations -> TypeDeclarations TypeDeclaration .)
    PRIVATE         reduce using rule 42 (TypeDeclarations -> TypeDeclarations TypeDeclaration .)
    PROTECTED       reduce using rule 42 (TypeDeclarations -> TypeDeclarations TypeDeclaration .)
    PUBLIC          reduce using rule 42 (TypeDeclarations -> TypeDeclarations TypeDeclaration .)
    $end            reduce using rule 42 (TypeDeclarations -> TypeDeclarations TypeDeclaration .)


state 27

    (43) PackageDeclaration -> PACKAGE IDENTIFIER . SEMI

    SEMI            shift and go to state 34


state 28

    (46) SingleTypeImportDeclaration -> IMPORT import_identifier . SEMI
    (47) TypeImportOnDemandDeclaration -> IMPORT import_identifier . DOT MUL SEMI
    (48) import_identifier -> import_identifier . DOT IDENTIFIER

    SEMI            shift and go to state 35
    DOT             shift and go to state 36


state 29

    (49) import_identifier -> IDENTIFIER .

    SEMI            reduce using rule 49 (import_identifier -> IDENTIFIER .)
    DOT             reduce using rule 49 (import_identifier -> IDENTIFIER .)


state 30

    (59) ClassDeclaration -> Modifiers CLASS . IDENTIFIER decl_mark_2 ClassBody

    IDENTIFIER      shift and go to state 37


state 31

    (53) Modifiers -> Modifiers Modifier .

    CLASS           reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    STATIC          reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    FINAL           reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    PRIVATE         reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    PROTECTED       reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    PUBLIC          reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    VOID            reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    IDENTIFIER      reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    BOOLEAN         reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    BYTE            reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    SHORT           reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    INT             reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    LONG            reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    CHAR            reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    FLOAT           reduce using rule 53 (Modifiers -> Modifiers Modifier .)
    DOUBLE          reduce using rule 53 (Modifiers -> Modifiers Modifier .)


state 32

    (60) ClassDeclaration -> CLASS IDENTIFIER . decl_mark_2 ClassBody
    (301) decl_mark_2 -> .

    LBRACE          reduce using rule 301 (decl_mark_2 -> .)

    decl_mark_2                    shift and go to state 38

state 33

    (32) CompilationUnit -> PackageDeclaration ImportDeclarations TypeDeclarations .
    (42) TypeDeclarations -> TypeDeclarations . TypeDeclaration
    (50) TypeDeclaration -> . ClassDeclaration
    (51) TypeDeclaration -> . SEMI
    (59) ClassDeclaration -> . Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody
    (60) ClassDeclaration -> . CLASS IDENTIFIER decl_mark_2 ClassBody
    (52) Modifiers -> . Modifier
    (53) Modifiers -> . Modifiers Modifier
    (54) Modifier -> . STATIC
    (55) Modifier -> . FINAL
    (56) Modifier -> . PRIVATE
    (57) Modifier -> . PROTECTED
    (58) Modifier -> . PUBLIC

    $end            reduce using rule 32 (CompilationUnit -> PackageDeclaration ImportDeclarations TypeDeclarations .)
    SEMI            shift and go to state 7
    CLASS           shift and go to state 15
    STATIC          shift and go to state 17
    FINAL           shift and go to state 18
    PRIVATE         shift and go to state 19
    PROTECTED       shift and go to state 20
    PUBLIC          shift and go to state 21

    TypeDeclaration                shift and go to state 26
    ClassDeclaration               shift and go to state 12
    Modifiers                      shift and go to state 14
    Modifier                       shift and go to state 16

state 34

    (43) PackageDeclaration -> PACKAGE IDENTIFIER SEMI .

    SEMI            reduce using rule 43 (PackageDeclaration -> PACKAGE IDENTIFIER SEMI .)
    IMPORT          reduce using rule 43 (PackageDeclaration -> PACKAGE IDENTIFIER SEMI .)
    CLASS           reduce using rule 43 (PackageDeclaration -> PACKAGE IDENTIFIER SEMI .)
    STATIC          reduce using rule 43 (PackageDeclaration -> PACKAGE IDENTIFIER SEMI .)
    FINAL           reduce using rule 43 (PackageDeclaration -> PACKAGE IDENTIFIER SEMI .)
    PRIVATE         reduce using rule 43 (PackageDeclaration -> PACKAGE IDENTIFIER SEMI .)
    PROTECTED       reduce using rule 43 (PackageDeclaration -> PACKAGE IDENTIFIER SEMI .)
    PUBLIC          reduce using rule 43 (PackageDeclaration -> PACKAGE IDENTIFIER SEMI .)
    $end            reduce using rule 43 (PackageDeclaration -> PACKAGE IDENTIFIER SEMI .)


state 35

    (46) SingleTypeImportDeclaration -> IMPORT import_identifier SEMI .

    SEMI            reduce using rule 46 (SingleTypeImportDeclaration -> IMPORT import_identifier SEMI .)
    IMPORT          reduce using rule 46 (SingleTypeImportDeclaration -> IMPORT import_identifier SEMI .)
    CLASS           reduce using rule 46 (SingleTypeImportDeclaration -> IMPORT import_identifier SEMI .)
    STATIC          reduce using rule 46 (SingleTypeImportDeclaration -> IMPORT import_identifier SEMI .)
    FINAL           reduce using rule 46 (SingleTypeImportDeclaration -> IMPORT import_identifier SEMI .)
    PRIVATE         reduce using rule 46 (SingleTypeImportDeclaration -> IMPORT import_identifier SEMI .)
    PROTECTED       reduce using rule 46 (SingleTypeImportDeclaration -> IMPORT import_identifier SEMI .)
    PUBLIC          reduce using rule 46 (SingleTypeImportDeclaration -> IMPORT import_identifier SEMI .)
    $end            reduce using rule 46 (SingleTypeImportDeclaration -> IMPORT import_identifier SEMI .)


state 36

    (47) TypeImportOnDemandDeclaration -> IMPORT import_identifier DOT . MUL SEMI
    (48) import_identifier -> import_identifier DOT . IDENTIFIER

    MUL             shift and go to state 39
    IDENTIFIER      shift and go to state 40


state 37

    (59) ClassDeclaration -> Modifiers CLASS IDENTIFIER . decl_mark_2 ClassBody
    (301) decl_mark_2 -> .

    LBRACE          reduce using rule 301 (decl_mark_2 -> .)

    decl_mark_2                    shift and go to state 41

state 38

    (60) ClassDeclaration -> CLASS IDENTIFIER decl_mark_2 . ClassBody
    (61) ClassBody -> . LBRACE RBRACE
    (62) ClassBody -> . LBRACE ClassBodyDeclarations RBRACE

    LBRACE          shift and go to state 43

    ClassBody                      shift and go to state 42

state 39

    (47) TypeImportOnDemandDeclaration -> IMPORT import_identifier DOT MUL . SEMI

    SEMI            shift and go to state 44


state 40

    (48) import_identifier -> import_identifier DOT IDENTIFIER .

    SEMI            reduce using rule 48 (import_identifier -> import_identifier DOT IDENTIFIER .)
    DOT             reduce using rule 48 (import_identifier -> import_identifier DOT IDENTIFIER .)


state 41

    (59) ClassDeclaration -> Modifiers CLASS IDENTIFIER decl_mark_2 . ClassBody
    (61) ClassBody -> . LBRACE RBRACE
    (62) ClassBody -> . LBRACE ClassBodyDeclarations RBRACE

    LBRACE          shift and go to state 43

    ClassBody                      shift and go to state 45

state 42

    (60) ClassDeclaration -> CLASS IDENTIFIER decl_mark_2 ClassBody .

    SEMI            reduce using rule 60 (ClassDeclaration -> CLASS IDENTIFIER decl_mark_2 ClassBody .)
    CLASS           reduce using rule 60 (ClassDeclaration -> CLASS IDENTIFIER decl_mark_2 ClassBody .)
    STATIC          reduce using rule 60 (ClassDeclaration -> CLASS IDENTIFIER decl_mark_2 ClassBody .)
    FINAL           reduce using rule 60 (ClassDeclaration -> CLASS IDENTIFIER decl_mark_2 ClassBody .)
    PRIVATE         reduce using rule 60 (ClassDeclaration -> CLASS IDENTIFIER decl_mark_2 ClassBody .)
    PROTECTED       reduce using rule 60 (ClassDeclaration -> CLASS IDENTIFIER decl_mark_2 ClassBody .)
    PUBLIC          reduce using rule 60 (ClassDeclaration -> CLASS IDENTIFIER decl_mark_2 ClassBody .)
    $end            reduce using rule 60 (ClassDeclaration -> CLASS IDENTIFIER decl_mark_2 ClassBody .)


state 43

    (61) ClassBody -> LBRACE . RBRACE
    (62) ClassBody -> LBRACE . ClassBodyDeclarations RBRACE
    (63) ClassBodyDeclarations -> . ClassBodyDeclaration
    (64) ClassBodyDeclarations -> . ClassBodyDeclarations ClassBodyDeclaration
    (65) ClassBodyDeclaration -> . ClassMemberDeclaration
    (66) ClassBodyDeclaration -> . ConstructorDeclaration
    (67) ClassBodyDeclaration -> . StaticInitializer
    (68) ClassMemberDeclaration -> . FieldDeclaration
    (69) ClassMemberDeclaration -> . MethodDeclaration
    (92) ConstructorDeclaration -> . Modifiers ConstructorDeclarator ConstructorBody
    (93) ConstructorDeclaration -> . ConstructorDeclarator ConstructorBody
    (91) StaticInitializer -> . begin_scope STATIC Block end_scope
    (70) FieldDeclaration -> . Modifiers Type VariableDeclarators SEMI
    (71) FieldDeclaration -> . Type VariableDeclarators SEMI
    (79) MethodDeclaration -> . MethodHeader MethodBody
    (52) Modifiers -> . Modifier
    (53) Modifiers -> . Modifiers Modifier
    (94) ConstructorDeclarator -> . SimpleName LPAREN decl_mark FormalParameterList RPAREN
    (95) ConstructorDeclarator -> . SimpleName decl_mark LPAREN RPAREN
    (302) begin_scope -> .
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (80) MethodHeader -> . Modifiers Type MethodDeclarator
    (81) MethodHeader -> . Type MethodDeclarator
    (82) MethodHeader -> . Modifiers VOID MethodDeclarator
    (83) MethodHeader -> . VOID MethodDeclarator
    (54) Modifier -> . STATIC
    (55) Modifier -> . FINAL
    (56) Modifier -> . PRIVATE
    (57) Modifier -> . PROTECTED
    (58) Modifier -> . PUBLIC
    (30) SimpleName -> . IDENTIFIER
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (31) QualifiedName -> . Name DOT IDENTIFIER

  ! shift/reduce conflict for STATIC resolved as shift
    RBRACE          shift and go to state 46
    VOID            shift and go to state 62
    STATIC          shift and go to state 17
    FINAL           shift and go to state 18
    PRIVATE         shift and go to state 19
    PROTECTED       shift and go to state 20
    PUBLIC          shift and go to state 21
    IDENTIFIER      shift and go to state 63
    BOOLEAN         shift and go to state 65
    BYTE            shift and go to state 71
    SHORT           shift and go to state 72
    INT             shift and go to state 73
    LONG            shift and go to state 74
    CHAR            shift and go to state 75
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 77

  ! STATIC          [ reduce using rule 302 (begin_scope -> .) ]

    ClassBodyDeclarations          shift and go to state 47
    ClassBodyDeclaration           shift and go to state 48
    ClassMemberDeclaration         shift and go to state 49
    ConstructorDeclaration         shift and go to state 50
    StaticInitializer              shift and go to state 51
    FieldDeclaration               shift and go to state 52
    MethodDeclaration              shift and go to state 53
    Modifiers                      shift and go to state 54
    ConstructorDeclarator          shift and go to state 55
    begin_scope                    shift and go to state 56
    Type                           shift and go to state 57
    MethodHeader                   shift and go to state 58
    Modifier                       shift and go to state 16
    SimpleName                     shift and go to state 59
    PrimitiveType                  shift and go to state 60
    ReferenceType                  shift and go to state 61
    NumericType                    shift and go to state 64
    ArrayType                      shift and go to state 66
    ClassType                      shift and go to state 67
    IntegralType                   shift and go to state 68
    FloatingPointType              shift and go to state 69
    Name                           shift and go to state 70
    QualifiedName                  shift and go to state 78

state 44

    (47) TypeImportOnDemandDeclaration -> IMPORT import_identifier DOT MUL SEMI .

    SEMI            reduce using rule 47 (TypeImportOnDemandDeclaration -> IMPORT import_identifier DOT MUL SEMI .)
    IMPORT          reduce using rule 47 (TypeImportOnDemandDeclaration -> IMPORT import_identifier DOT MUL SEMI .)
    CLASS           reduce using rule 47 (TypeImportOnDemandDeclaration -> IMPORT import_identifier DOT MUL SEMI .)
    STATIC          reduce using rule 47 (TypeImportOnDemandDeclaration -> IMPORT import_identifier DOT MUL SEMI .)
    FINAL           reduce using rule 47 (TypeImportOnDemandDeclaration -> IMPORT import_identifier DOT MUL SEMI .)
    PRIVATE         reduce using rule 47 (TypeImportOnDemandDeclaration -> IMPORT import_identifier DOT MUL SEMI .)
    PROTECTED       reduce using rule 47 (TypeImportOnDemandDeclaration -> IMPORT import_identifier DOT MUL SEMI .)
    PUBLIC          reduce using rule 47 (TypeImportOnDemandDeclaration -> IMPORT import_identifier DOT MUL SEMI .)
    $end            reduce using rule 47 (TypeImportOnDemandDeclaration -> IMPORT import_identifier DOT MUL SEMI .)


state 45

    (59) ClassDeclaration -> Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody .

    SEMI            reduce using rule 59 (ClassDeclaration -> Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody .)
    CLASS           reduce using rule 59 (ClassDeclaration -> Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody .)
    STATIC          reduce using rule 59 (ClassDeclaration -> Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody .)
    FINAL           reduce using rule 59 (ClassDeclaration -> Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody .)
    PRIVATE         reduce using rule 59 (ClassDeclaration -> Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody .)
    PROTECTED       reduce using rule 59 (ClassDeclaration -> Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody .)
    PUBLIC          reduce using rule 59 (ClassDeclaration -> Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody .)
    $end            reduce using rule 59 (ClassDeclaration -> Modifiers CLASS IDENTIFIER decl_mark_2 ClassBody .)


state 46

    (61) ClassBody -> LBRACE RBRACE .

    SEMI            reduce using rule 61 (ClassBody -> LBRACE RBRACE .)
    CLASS           reduce using rule 61 (ClassBody -> LBRACE RBRACE .)
    STATIC          reduce using rule 61 (ClassBody -> LBRACE RBRACE .)
    FINAL           reduce using rule 61 (ClassBody -> LBRACE RBRACE .)
    PRIVATE         reduce using rule 61 (ClassBody -> LBRACE RBRACE .)
    PROTECTED       reduce using rule 61 (ClassBody -> LBRACE RBRACE .)
    PUBLIC          reduce using rule 61 (ClassBody -> LBRACE RBRACE .)
    $end            reduce using rule 61 (ClassBody -> LBRACE RBRACE .)


state 47

    (62) ClassBody -> LBRACE ClassBodyDeclarations . RBRACE
    (64) ClassBodyDeclarations -> ClassBodyDeclarations . ClassBodyDeclaration
    (65) ClassBodyDeclaration -> . ClassMemberDeclaration
    (66) ClassBodyDeclaration -> . ConstructorDeclaration
    (67) ClassBodyDeclaration -> . StaticInitializer
    (68) ClassMemberDeclaration -> . FieldDeclaration
    (69) ClassMemberDeclaration -> . MethodDeclaration
    (92) ConstructorDeclaration -> . Modifiers ConstructorDeclarator ConstructorBody
    (93) ConstructorDeclaration -> . ConstructorDeclarator ConstructorBody
    (91) StaticInitializer -> . begin_scope STATIC Block end_scope
    (70) FieldDeclaration -> . Modifiers Type VariableDeclarators SEMI
    (71) FieldDeclaration -> . Type VariableDeclarators SEMI
    (79) MethodDeclaration -> . MethodHeader MethodBody
    (52) Modifiers -> . Modifier
    (53) Modifiers -> . Modifiers Modifier
    (94) ConstructorDeclarator -> . SimpleName LPAREN decl_mark FormalParameterList RPAREN
    (95) ConstructorDeclarator -> . SimpleName decl_mark LPAREN RPAREN
    (302) begin_scope -> .
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (80) MethodHeader -> . Modifiers Type MethodDeclarator
    (81) MethodHeader -> . Type MethodDeclarator
    (82) MethodHeader -> . Modifiers VOID MethodDeclarator
    (83) MethodHeader -> . VOID MethodDeclarator
    (54) Modifier -> . STATIC
    (55) Modifier -> . FINAL
    (56) Modifier -> . PRIVATE
    (57) Modifier -> . PROTECTED
    (58) Modifier -> . PUBLIC
    (30) SimpleName -> . IDENTIFIER
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (31) QualifiedName -> . Name DOT IDENTIFIER

  ! shift/reduce conflict for STATIC resolved as shift
    RBRACE          shift and go to state 79
    VOID            shift and go to state 62
    STATIC          shift and go to state 17
    FINAL           shift and go to state 18
    PRIVATE         shift and go to state 19
    PROTECTED       shift and go to state 20
    PUBLIC          shift and go to state 21
    IDENTIFIER      shift and go to state 63
    BOOLEAN         shift and go to state 65
    BYTE            shift and go to state 71
    SHORT           shift and go to state 72
    INT             shift and go to state 73
    LONG            shift and go to state 74
    CHAR            shift and go to state 75
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 77

  ! STATIC          [ reduce using rule 302 (begin_scope -> .) ]

    ClassBodyDeclaration           shift and go to state 80
    ClassMemberDeclaration         shift and go to state 49
    ConstructorDeclaration         shift and go to state 50
    StaticInitializer              shift and go to state 51
    FieldDeclaration               shift and go to state 52
    MethodDeclaration              shift and go to state 53
    Modifiers                      shift and go to state 54
    ConstructorDeclarator          shift and go to state 55
    begin_scope                    shift and go to state 56
    Type                           shift and go to state 57
    MethodHeader                   shift and go to state 58
    Modifier                       shift and go to state 16
    SimpleName                     shift and go to state 59
    PrimitiveType                  shift and go to state 60
    ReferenceType                  shift and go to state 61
    NumericType                    shift and go to state 64
    ArrayType                      shift and go to state 66
    ClassType                      shift and go to state 67
    IntegralType                   shift and go to state 68
    FloatingPointType              shift and go to state 69
    Name                           shift and go to state 70
    QualifiedName                  shift and go to state 78

state 48

    (63) ClassBodyDeclarations -> ClassBodyDeclaration .

    RBRACE          reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    VOID            reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    STATIC          reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    FINAL           reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    PRIVATE         reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    PROTECTED       reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    PUBLIC          reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    IDENTIFIER      reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    BOOLEAN         reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    BYTE            reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    SHORT           reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    INT             reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    LONG            reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    CHAR            reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    FLOAT           reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)
    DOUBLE          reduce using rule 63 (ClassBodyDeclarations -> ClassBodyDeclaration .)


state 49

    (65) ClassBodyDeclaration -> ClassMemberDeclaration .

    RBRACE          reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    VOID            reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    STATIC          reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    FINAL           reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    PRIVATE         reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    PROTECTED       reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    PUBLIC          reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    IDENTIFIER      reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    BOOLEAN         reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    BYTE            reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    SHORT           reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    INT             reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    LONG            reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    CHAR            reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    FLOAT           reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)
    DOUBLE          reduce using rule 65 (ClassBodyDeclaration -> ClassMemberDeclaration .)


state 50

    (66) ClassBodyDeclaration -> ConstructorDeclaration .

    RBRACE          reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    VOID            reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    STATIC          reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    FINAL           reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    PRIVATE         reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    PROTECTED       reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    PUBLIC          reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    IDENTIFIER      reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    BOOLEAN         reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    BYTE            reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    SHORT           reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    INT             reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    LONG            reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    CHAR            reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    FLOAT           reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)
    DOUBLE          reduce using rule 66 (ClassBodyDeclaration -> ConstructorDeclaration .)


state 51

    (67) ClassBodyDeclaration -> StaticInitializer .

    RBRACE          reduce using rule 67 (ClassBodyDeclaration -> StaticInitializer .)
    VOID            reduce using rule 67 (ClassBodyDeclaration -> StaticInitializer .)
    STATIC          reduce using rule 67 (ClassBodyDeclaration -> StaticInitializer .)
    FINAL           reduce using rule 67 (ClassBodyDeclaration -> StaticInitializer .)
    PRIVATE         reduce using rule 67 (ClassBodyDeclaration -> StaticInitializer .)
    PROTECTED       reduce using rule 67 (ClassBodyDeclaration -> StaticInitializer .)
    PUBLIC          reduce using rule 67 (ClassBodyDeclaration -> StaticInitializer .)
    IDENTIFIER      reduce using rule 67 (ClassBodyDeclaration -> StaticInitializer .)
    BOOLEAN         reduce using rule 67 (ClassBodyDeclaration -> StaticInitializer .)
    BYTE            reduce using rule 67 (ClassBodyDeclaration -> StaticInitializer .)
    SHORT           reduce using rule 67 (ClassBodyDeclaration -> StaticInitializer .)
    INT             reduce using rule 67 (ClassBodyDeclaration -> StaticInitializer .)
    LONG            reduce using rule 67 (ClassBodyDeclaration -> StaticInitializer .)
    CHAR            reduce using rule 67 (ClassBodyDeclaration -> StaticInitializer .)
    FLOAT           reduce using rule 67 (ClassBodyDeclaration -> StaticInitializer .)
    DOUBLE          reduce using rule 67 (ClassBodyDeclaration -> StaticInitializer .)


state 52

    (68) ClassMemberDeclaration -> FieldDeclaration .

    RBRACE          reduce using rule 68 (ClassMemberDeclaration -> FieldDeclaration .)
    VOID            reduce using rule 68 (ClassMemberDeclaration -> FieldDeclaration .)
    STATIC          reduce using rule 68 (ClassMemberDeclaration -> FieldDeclaration .)
    FINAL           reduce using rule 68 (ClassMemberDeclaration -> FieldDeclaration .)
    PRIVATE         reduce using rule 68 (ClassMemberDeclaration -> FieldDeclaration .)
    PROTECTED       reduce using rule 68 (ClassMemberDeclaration -> FieldDeclaration .)
    PUBLIC          reduce using rule 68 (ClassMemberDeclaration -> FieldDeclaration .)
    IDENTIFIER      reduce using rule 68 (ClassMemberDeclaration -> FieldDeclaration .)
    BOOLEAN         reduce using rule 68 (ClassMemberDeclaration -> FieldDeclaration .)
    BYTE            reduce using rule 68 (ClassMemberDeclaration -> FieldDeclaration .)
    SHORT           reduce using rule 68 (ClassMemberDeclaration -> FieldDeclaration .)
    INT             reduce using rule 68 (ClassMemberDeclaration -> FieldDeclaration .)
    LONG            reduce using rule 68 (ClassMemberDeclaration -> FieldDeclaration .)
    CHAR            reduce using rule 68 (ClassMemberDeclaration -> FieldDeclaration .)
    FLOAT           reduce using rule 68 (ClassMemberDeclaration -> FieldDeclaration .)
    DOUBLE          reduce using rule 68 (ClassMemberDeclaration -> FieldDeclaration .)


state 53

    (69) ClassMemberDeclaration -> MethodDeclaration .

    RBRACE          reduce using rule 69 (ClassMemberDeclaration -> MethodDeclaration .)
    VOID            reduce using rule 69 (ClassMemberDeclaration -> MethodDeclaration .)
    STATIC          reduce using rule 69 (ClassMemberDeclaration -> MethodDeclaration .)
    FINAL           reduce using rule 69 (ClassMemberDeclaration -> MethodDeclaration .)
    PRIVATE         reduce using rule 69 (ClassMemberDeclaration -> MethodDeclaration .)
    PROTECTED       reduce using rule 69 (ClassMemberDeclaration -> MethodDeclaration .)
    PUBLIC          reduce using rule 69 (ClassMemberDeclaration -> MethodDeclaration .)
    IDENTIFIER      reduce using rule 69 (ClassMemberDeclaration -> MethodDeclaration .)
    BOOLEAN         reduce using rule 69 (ClassMemberDeclaration -> MethodDeclaration .)
    BYTE            reduce using rule 69 (ClassMemberDeclaration -> MethodDeclaration .)
    SHORT           reduce using rule 69 (ClassMemberDeclaration -> MethodDeclaration .)
    INT             reduce using rule 69 (ClassMemberDeclaration -> MethodDeclaration .)
    LONG            reduce using rule 69 (ClassMemberDeclaration -> MethodDeclaration .)
    CHAR            reduce using rule 69 (ClassMemberDeclaration -> MethodDeclaration .)
    FLOAT           reduce using rule 69 (ClassMemberDeclaration -> MethodDeclaration .)
    DOUBLE          reduce using rule 69 (ClassMemberDeclaration -> MethodDeclaration .)


state 54

    (92) ConstructorDeclaration -> Modifiers . ConstructorDeclarator ConstructorBody
    (70) FieldDeclaration -> Modifiers . Type VariableDeclarators SEMI
    (53) Modifiers -> Modifiers . Modifier
    (80) MethodHeader -> Modifiers . Type MethodDeclarator
    (82) MethodHeader -> Modifiers . VOID MethodDeclarator
    (94) ConstructorDeclarator -> . SimpleName LPAREN decl_mark FormalParameterList RPAREN
    (95) ConstructorDeclarator -> . SimpleName decl_mark LPAREN RPAREN
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (54) Modifier -> . STATIC
    (55) Modifier -> . FINAL
    (56) Modifier -> . PRIVATE
    (57) Modifier -> . PROTECTED
    (58) Modifier -> . PUBLIC
    (30) SimpleName -> . IDENTIFIER
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (31) QualifiedName -> . Name DOT IDENTIFIER

    VOID            shift and go to state 83
    STATIC          shift and go to state 17
    FINAL           shift and go to state 18
    PRIVATE         shift and go to state 19
    PROTECTED       shift and go to state 20
    PUBLIC          shift and go to state 21
    IDENTIFIER      shift and go to state 63
    BOOLEAN         shift and go to state 65
    BYTE            shift and go to state 71
    SHORT           shift and go to state 72
    INT             shift and go to state 73
    LONG            shift and go to state 74
    CHAR            shift and go to state 75
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 77

    ConstructorDeclarator          shift and go to state 81
    Type                           shift and go to state 82
    Modifier                       shift and go to state 31
    SimpleName                     shift and go to state 59
    PrimitiveType                  shift and go to state 60
    ReferenceType                  shift and go to state 61
    NumericType                    shift and go to state 64
    ArrayType                      shift and go to state 66
    ClassType                      shift and go to state 67
    IntegralType                   shift and go to state 68
    FloatingPointType              shift and go to state 69
    Name                           shift and go to state 70
    QualifiedName                  shift and go to state 78

state 55

    (93) ConstructorDeclaration -> ConstructorDeclarator . ConstructorBody
    (96) ConstructorBody -> .
    (97) ConstructorBody -> . LBRACE BlockStatements RBRACE
    (98) ConstructorBody -> . LBRACE RBRACE

    RBRACE          reduce using rule 96 (ConstructorBody -> .)
    VOID            reduce using rule 96 (ConstructorBody -> .)
    STATIC          reduce using rule 96 (ConstructorBody -> .)
    FINAL           reduce using rule 96 (ConstructorBody -> .)
    PRIVATE         reduce using rule 96 (ConstructorBody -> .)
    PROTECTED       reduce using rule 96 (ConstructorBody -> .)
    PUBLIC          reduce using rule 96 (ConstructorBody -> .)
    IDENTIFIER      reduce using rule 96 (ConstructorBody -> .)
    BOOLEAN         reduce using rule 96 (ConstructorBody -> .)
    BYTE            reduce using rule 96 (ConstructorBody -> .)
    SHORT           reduce using rule 96 (ConstructorBody -> .)
    INT             reduce using rule 96 (ConstructorBody -> .)
    LONG            reduce using rule 96 (ConstructorBody -> .)
    CHAR            reduce using rule 96 (ConstructorBody -> .)
    FLOAT           reduce using rule 96 (ConstructorBody -> .)
    DOUBLE          reduce using rule 96 (ConstructorBody -> .)
    LBRACE          shift and go to state 85

    ConstructorBody                shift and go to state 84

state 56

    (91) StaticInitializer -> begin_scope . STATIC Block end_scope

    STATIC          shift and go to state 86


state 57

    (71) FieldDeclaration -> Type . VariableDeclarators SEMI
    (81) MethodHeader -> Type . MethodDeclarator
    (72) VariableDeclarators -> . VariableDeclarator
    (73) VariableDeclarators -> . VariableDeclarators COMMA VariableDeclarator
    (84) MethodDeclarator -> . IDENTIFIER LPAREN RPAREN
    (85) MethodDeclarator -> . IDENTIFIER LPAREN FormalParameterList RPAREN
    (74) VariableDeclarator -> . VariableDeclaratorId
    (75) VariableDeclarator -> . VariableDeclaratorId ASSIGN VariableInitializer
    (76) VariableDeclaratorId -> . IDENTIFIER
    (77) VariableDeclaratorId -> . IDENTIFIER Dims

    IDENTIFIER      shift and go to state 90

    VariableDeclarators            shift and go to state 87
    MethodDeclarator               shift and go to state 88
    VariableDeclarator             shift and go to state 89
    VariableDeclaratorId           shift and go to state 91

state 58

    (79) MethodDeclaration -> MethodHeader . MethodBody
    (89) MethodBody -> . Block
    (90) MethodBody -> . SEMI
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE

    SEMI            shift and go to state 94
    LBRACE          shift and go to state 95

    MethodBody                     shift and go to state 92
    Block                          shift and go to state 93

state 59

    (94) ConstructorDeclarator -> SimpleName . LPAREN decl_mark FormalParameterList RPAREN
    (95) ConstructorDeclarator -> SimpleName . decl_mark LPAREN RPAREN
    (28) Name -> SimpleName .
    (300) decl_mark -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 96
    DOT             reduce using rule 28 (Name -> SimpleName .)
    LBRACK          reduce using rule 28 (Name -> SimpleName .)
    IDENTIFIER      reduce using rule 28 (Name -> SimpleName .)

  ! LPAREN          [ reduce using rule 300 (decl_mark -> .) ]

    decl_mark                      shift and go to state 97

state 60

    (10) Type -> PrimitiveType .
    (26) ArrayType -> PrimitiveType . Dims
    (217) Dims -> . LBRACK RBRACK
    (218) Dims -> . Dims LBRACK RBRACK

    IDENTIFIER      reduce using rule 10 (Type -> PrimitiveType .)
    LBRACK          shift and go to state 99

    Dims                           shift and go to state 98

state 61

    (11) Type -> ReferenceType .

    IDENTIFIER      reduce using rule 11 (Type -> ReferenceType .)


state 62

    (83) MethodHeader -> VOID . MethodDeclarator
    (84) MethodDeclarator -> . IDENTIFIER LPAREN RPAREN
    (85) MethodDeclarator -> . IDENTIFIER LPAREN FormalParameterList RPAREN

    IDENTIFIER      shift and go to state 101

    MethodDeclarator               shift and go to state 100

state 63

    (30) SimpleName -> IDENTIFIER .

    LPAREN          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    DOT             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    LBRACK          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    ASSIGN          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 30 (SimpleName -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 30 (SimpleName -> IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 30 (SimpleName -> IDENTIFIER .)
    URSHIFT_ASSIGN  reduce using rule 30 (SimpleName -> IDENTIFIER .)
    INC             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    DEC             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    MUL             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    DIV             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    MOD             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    ADD             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    SUB             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    LSHIFT          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    RSHIFT          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    URSHIFT         reduce using rule 30 (SimpleName -> IDENTIFIER .)
    LT              reduce using rule 30 (SimpleName -> IDENTIFIER .)
    GT              reduce using rule 30 (SimpleName -> IDENTIFIER .)
    LE              reduce using rule 30 (SimpleName -> IDENTIFIER .)
    GE              reduce using rule 30 (SimpleName -> IDENTIFIER .)
    EQUAL           reduce using rule 30 (SimpleName -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 30 (SimpleName -> IDENTIFIER .)
    BITAND          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    CARET           reduce using rule 30 (SimpleName -> IDENTIFIER .)
    BITOR           reduce using rule 30 (SimpleName -> IDENTIFIER .)
    AND             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    QUESTION        reduce using rule 30 (SimpleName -> IDENTIFIER .)
    OR              reduce using rule 30 (SimpleName -> IDENTIFIER .)
    RPAREN          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    SEMI            reduce using rule 30 (SimpleName -> IDENTIFIER .)
    COMMA           reduce using rule 30 (SimpleName -> IDENTIFIER .)
    RBRACK          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    COLON           reduce using rule 30 (SimpleName -> IDENTIFIER .)


state 64

    (12) PrimitiveType -> NumericType .

    LBRACK          reduce using rule 12 (PrimitiveType -> NumericType .)
    IDENTIFIER      reduce using rule 12 (PrimitiveType -> NumericType .)
    RPAREN          reduce using rule 12 (PrimitiveType -> NumericType .)


state 65

    (13) PrimitiveType -> BOOLEAN .

    LBRACK          reduce using rule 13 (PrimitiveType -> BOOLEAN .)
    IDENTIFIER      reduce using rule 13 (PrimitiveType -> BOOLEAN .)
    RPAREN          reduce using rule 13 (PrimitiveType -> BOOLEAN .)


state 66

    (23) ReferenceType -> ArrayType .

    IDENTIFIER      reduce using rule 23 (ReferenceType -> ArrayType .)


state 67

    (24) ReferenceType -> ClassType .

    IDENTIFIER      reduce using rule 24 (ReferenceType -> ClassType .)


state 68

    (14) NumericType -> IntegralType .

    LBRACK          reduce using rule 14 (NumericType -> IntegralType .)
    IDENTIFIER      reduce using rule 14 (NumericType -> IntegralType .)
    RPAREN          reduce using rule 14 (NumericType -> IntegralType .)


state 69

    (15) NumericType -> FloatingPointType .

    LBRACK          reduce using rule 15 (NumericType -> FloatingPointType .)
    IDENTIFIER      reduce using rule 15 (NumericType -> FloatingPointType .)
    RPAREN          reduce using rule 15 (NumericType -> FloatingPointType .)


state 70

    (27) ArrayType -> Name . Dims
    (25) ClassType -> Name .
    (31) QualifiedName -> Name . DOT IDENTIFIER
    (217) Dims -> . LBRACK RBRACK
    (218) Dims -> . Dims LBRACK RBRACK

    IDENTIFIER      reduce using rule 25 (ClassType -> Name .)
    DOT             shift and go to state 103
    LBRACK          shift and go to state 99

    Dims                           shift and go to state 102

state 71

    (16) IntegralType -> BYTE .

    LBRACK          reduce using rule 16 (IntegralType -> BYTE .)
    IDENTIFIER      reduce using rule 16 (IntegralType -> BYTE .)
    RPAREN          reduce using rule 16 (IntegralType -> BYTE .)


state 72

    (17) IntegralType -> SHORT .

    LBRACK          reduce using rule 17 (IntegralType -> SHORT .)
    IDENTIFIER      reduce using rule 17 (IntegralType -> SHORT .)
    RPAREN          reduce using rule 17 (IntegralType -> SHORT .)


state 73

    (18) IntegralType -> INT .

    LBRACK          reduce using rule 18 (IntegralType -> INT .)
    IDENTIFIER      reduce using rule 18 (IntegralType -> INT .)
    RPAREN          reduce using rule 18 (IntegralType -> INT .)


state 74

    (19) IntegralType -> LONG .

    LBRACK          reduce using rule 19 (IntegralType -> LONG .)
    IDENTIFIER      reduce using rule 19 (IntegralType -> LONG .)
    RPAREN          reduce using rule 19 (IntegralType -> LONG .)


state 75

    (20) IntegralType -> CHAR .

    LBRACK          reduce using rule 20 (IntegralType -> CHAR .)
    IDENTIFIER      reduce using rule 20 (IntegralType -> CHAR .)
    RPAREN          reduce using rule 20 (IntegralType -> CHAR .)


state 76

    (21) FloatingPointType -> FLOAT .

    LBRACK          reduce using rule 21 (FloatingPointType -> FLOAT .)
    IDENTIFIER      reduce using rule 21 (FloatingPointType -> FLOAT .)
    RPAREN          reduce using rule 21 (FloatingPointType -> FLOAT .)


state 77

    (22) FloatingPointType -> DOUBLE .

    LBRACK          reduce using rule 22 (FloatingPointType -> DOUBLE .)
    IDENTIFIER      reduce using rule 22 (FloatingPointType -> DOUBLE .)
    RPAREN          reduce using rule 22 (FloatingPointType -> DOUBLE .)


state 78

    (29) Name -> QualifiedName .

    DOT             reduce using rule 29 (Name -> QualifiedName .)
    LBRACK          reduce using rule 29 (Name -> QualifiedName .)
    IDENTIFIER      reduce using rule 29 (Name -> QualifiedName .)
    LPAREN          reduce using rule 29 (Name -> QualifiedName .)
    ASSIGN          reduce using rule 29 (Name -> QualifiedName .)
    ADD_ASSIGN      reduce using rule 29 (Name -> QualifiedName .)
    SUB_ASSIGN      reduce using rule 29 (Name -> QualifiedName .)
    MUL_ASSIGN      reduce using rule 29 (Name -> QualifiedName .)
    DIV_ASSIGN      reduce using rule 29 (Name -> QualifiedName .)
    AND_ASSIGN      reduce using rule 29 (Name -> QualifiedName .)
    OR_ASSIGN       reduce using rule 29 (Name -> QualifiedName .)
    XOR_ASSIGN      reduce using rule 29 (Name -> QualifiedName .)
    MOD_ASSIGN      reduce using rule 29 (Name -> QualifiedName .)
    LSHIFT_ASSIGN   reduce using rule 29 (Name -> QualifiedName .)
    RSHIFT_ASSIGN   reduce using rule 29 (Name -> QualifiedName .)
    URSHIFT_ASSIGN  reduce using rule 29 (Name -> QualifiedName .)
    INC             reduce using rule 29 (Name -> QualifiedName .)
    DEC             reduce using rule 29 (Name -> QualifiedName .)
    MUL             reduce using rule 29 (Name -> QualifiedName .)
    DIV             reduce using rule 29 (Name -> QualifiedName .)
    MOD             reduce using rule 29 (Name -> QualifiedName .)
    ADD             reduce using rule 29 (Name -> QualifiedName .)
    SUB             reduce using rule 29 (Name -> QualifiedName .)
    LSHIFT          reduce using rule 29 (Name -> QualifiedName .)
    RSHIFT          reduce using rule 29 (Name -> QualifiedName .)
    URSHIFT         reduce using rule 29 (Name -> QualifiedName .)
    LT              reduce using rule 29 (Name -> QualifiedName .)
    GT              reduce using rule 29 (Name -> QualifiedName .)
    LE              reduce using rule 29 (Name -> QualifiedName .)
    GE              reduce using rule 29 (Name -> QualifiedName .)
    EQUAL           reduce using rule 29 (Name -> QualifiedName .)
    NOTEQUAL        reduce using rule 29 (Name -> QualifiedName .)
    BITAND          reduce using rule 29 (Name -> QualifiedName .)
    CARET           reduce using rule 29 (Name -> QualifiedName .)
    BITOR           reduce using rule 29 (Name -> QualifiedName .)
    AND             reduce using rule 29 (Name -> QualifiedName .)
    QUESTION        reduce using rule 29 (Name -> QualifiedName .)
    OR              reduce using rule 29 (Name -> QualifiedName .)
    RPAREN          reduce using rule 29 (Name -> QualifiedName .)
    SEMI            reduce using rule 29 (Name -> QualifiedName .)
    COMMA           reduce using rule 29 (Name -> QualifiedName .)
    RBRACK          reduce using rule 29 (Name -> QualifiedName .)
    COLON           reduce using rule 29 (Name -> QualifiedName .)


state 79

    (62) ClassBody -> LBRACE ClassBodyDeclarations RBRACE .

    SEMI            reduce using rule 62 (ClassBody -> LBRACE ClassBodyDeclarations RBRACE .)
    CLASS           reduce using rule 62 (ClassBody -> LBRACE ClassBodyDeclarations RBRACE .)
    STATIC          reduce using rule 62 (ClassBody -> LBRACE ClassBodyDeclarations RBRACE .)
    FINAL           reduce using rule 62 (ClassBody -> LBRACE ClassBodyDeclarations RBRACE .)
    PRIVATE         reduce using rule 62 (ClassBody -> LBRACE ClassBodyDeclarations RBRACE .)
    PROTECTED       reduce using rule 62 (ClassBody -> LBRACE ClassBodyDeclarations RBRACE .)
    PUBLIC          reduce using rule 62 (ClassBody -> LBRACE ClassBodyDeclarations RBRACE .)
    $end            reduce using rule 62 (ClassBody -> LBRACE ClassBodyDeclarations RBRACE .)


state 80

    (64) ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .

    RBRACE          reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    VOID            reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    STATIC          reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    FINAL           reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    PRIVATE         reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    PROTECTED       reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    PUBLIC          reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    IDENTIFIER      reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    BOOLEAN         reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    BYTE            reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    SHORT           reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    INT             reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    LONG            reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    CHAR            reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    FLOAT           reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)
    DOUBLE          reduce using rule 64 (ClassBodyDeclarations -> ClassBodyDeclarations ClassBodyDeclaration .)


state 81

    (92) ConstructorDeclaration -> Modifiers ConstructorDeclarator . ConstructorBody
    (96) ConstructorBody -> .
    (97) ConstructorBody -> . LBRACE BlockStatements RBRACE
    (98) ConstructorBody -> . LBRACE RBRACE

    RBRACE          reduce using rule 96 (ConstructorBody -> .)
    VOID            reduce using rule 96 (ConstructorBody -> .)
    STATIC          reduce using rule 96 (ConstructorBody -> .)
    FINAL           reduce using rule 96 (ConstructorBody -> .)
    PRIVATE         reduce using rule 96 (ConstructorBody -> .)
    PROTECTED       reduce using rule 96 (ConstructorBody -> .)
    PUBLIC          reduce using rule 96 (ConstructorBody -> .)
    IDENTIFIER      reduce using rule 96 (ConstructorBody -> .)
    BOOLEAN         reduce using rule 96 (ConstructorBody -> .)
    BYTE            reduce using rule 96 (ConstructorBody -> .)
    SHORT           reduce using rule 96 (ConstructorBody -> .)
    INT             reduce using rule 96 (ConstructorBody -> .)
    LONG            reduce using rule 96 (ConstructorBody -> .)
    CHAR            reduce using rule 96 (ConstructorBody -> .)
    FLOAT           reduce using rule 96 (ConstructorBody -> .)
    DOUBLE          reduce using rule 96 (ConstructorBody -> .)
    LBRACE          shift and go to state 85

    ConstructorBody                shift and go to state 104

state 82

    (70) FieldDeclaration -> Modifiers Type . VariableDeclarators SEMI
    (80) MethodHeader -> Modifiers Type . MethodDeclarator
    (72) VariableDeclarators -> . VariableDeclarator
    (73) VariableDeclarators -> . VariableDeclarators COMMA VariableDeclarator
    (84) MethodDeclarator -> . IDENTIFIER LPAREN RPAREN
    (85) MethodDeclarator -> . IDENTIFIER LPAREN FormalParameterList RPAREN
    (74) VariableDeclarator -> . VariableDeclaratorId
    (75) VariableDeclarator -> . VariableDeclaratorId ASSIGN VariableInitializer
    (76) VariableDeclaratorId -> . IDENTIFIER
    (77) VariableDeclaratorId -> . IDENTIFIER Dims

    IDENTIFIER      shift and go to state 90

    VariableDeclarators            shift and go to state 105
    MethodDeclarator               shift and go to state 106
    VariableDeclarator             shift and go to state 89
    VariableDeclaratorId           shift and go to state 91

state 83

    (82) MethodHeader -> Modifiers VOID . MethodDeclarator
    (84) MethodDeclarator -> . IDENTIFIER LPAREN RPAREN
    (85) MethodDeclarator -> . IDENTIFIER LPAREN FormalParameterList RPAREN

    IDENTIFIER      shift and go to state 101

    MethodDeclarator               shift and go to state 107

state 84

    (93) ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .

    RBRACE          reduce using rule 93 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    VOID            reduce using rule 93 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    STATIC          reduce using rule 93 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    FINAL           reduce using rule 93 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    PRIVATE         reduce using rule 93 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    PROTECTED       reduce using rule 93 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    PUBLIC          reduce using rule 93 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    IDENTIFIER      reduce using rule 93 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    BOOLEAN         reduce using rule 93 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    BYTE            reduce using rule 93 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    SHORT           reduce using rule 93 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    INT             reduce using rule 93 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    LONG            reduce using rule 93 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    CHAR            reduce using rule 93 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    FLOAT           reduce using rule 93 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)
    DOUBLE          reduce using rule 93 (ConstructorDeclaration -> ConstructorDeclarator ConstructorBody .)


state 85

    (97) ConstructorBody -> LBRACE . BlockStatements RBRACE
    (98) ConstructorBody -> LBRACE . RBRACE
    (105) BlockStatements -> . BlockStatement
    (106) BlockStatements -> . BlockStatements BlockStatement
    (107) BlockStatement -> . LocalVariableDeclarationStatement
    (108) BlockStatement -> . Statement
    (109) LocalVariableDeclarationStatement -> . LocalVariableDeclaration SEMI
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (110) LocalVariableDeclaration -> . Type VariableDeclarators
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RBRACE          shift and go to state 109
    IDENTIFIER      shift and go to state 130
    IF              shift and go to state 131
    WHILE           shift and go to state 133
    FOR             shift and go to state 134
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    BOOLEAN         shift and go to state 65
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    BYTE            shift and go to state 71
    SHORT           shift and go to state 72
    INT             shift and go to state 73
    LONG            shift and go to state 74
    CHAR            shift and go to state 75
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 77
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    BlockStatements                shift and go to state 108
    BlockStatement                 shift and go to state 110
    LocalVariableDeclarationStatement shift and go to state 111
    Statement                      shift and go to state 112
    LocalVariableDeclaration       shift and go to state 113
    StatementWithoutTrailingSubstatement shift and go to state 115
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    Type                           shift and go to state 121
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    PrimitiveType                  shift and go to state 60
    ReferenceType                  shift and go to state 61
    StatementExpression            shift and go to state 135
    NumericType                    shift and go to state 64
    ArrayType                      shift and go to state 66
    ClassType                      shift and go to state 67
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    IntegralType                   shift and go to state 68
    FloatingPointType              shift and go to state 69
    Name                           shift and go to state 148
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161

state 86

    (91) StaticInitializer -> begin_scope STATIC . Block end_scope
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE

    LBRACE          shift and go to state 95

    Block                          shift and go to state 171

state 87

    (71) FieldDeclaration -> Type VariableDeclarators . SEMI
    (73) VariableDeclarators -> VariableDeclarators . COMMA VariableDeclarator

    SEMI            shift and go to state 172
    COMMA           shift and go to state 173


state 88

    (81) MethodHeader -> Type MethodDeclarator .

    SEMI            reduce using rule 81 (MethodHeader -> Type MethodDeclarator .)
    LBRACE          reduce using rule 81 (MethodHeader -> Type MethodDeclarator .)


state 89

    (72) VariableDeclarators -> VariableDeclarator .

    SEMI            reduce using rule 72 (VariableDeclarators -> VariableDeclarator .)
    COMMA           reduce using rule 72 (VariableDeclarators -> VariableDeclarator .)


state 90

    (84) MethodDeclarator -> IDENTIFIER . LPAREN RPAREN
    (85) MethodDeclarator -> IDENTIFIER . LPAREN FormalParameterList RPAREN
    (76) VariableDeclaratorId -> IDENTIFIER .
    (77) VariableDeclaratorId -> IDENTIFIER . Dims
    (217) Dims -> . LBRACK RBRACK
    (218) Dims -> . Dims LBRACK RBRACK

    LPAREN          shift and go to state 174
    ASSIGN          reduce using rule 76 (VariableDeclaratorId -> IDENTIFIER .)
    SEMI            reduce using rule 76 (VariableDeclaratorId -> IDENTIFIER .)
    COMMA           reduce using rule 76 (VariableDeclaratorId -> IDENTIFIER .)
    LBRACK          shift and go to state 99

    Dims                           shift and go to state 175

state 91

    (74) VariableDeclarator -> VariableDeclaratorId .
    (75) VariableDeclarator -> VariableDeclaratorId . ASSIGN VariableInitializer

    SEMI            reduce using rule 74 (VariableDeclarator -> VariableDeclaratorId .)
    COMMA           reduce using rule 74 (VariableDeclarator -> VariableDeclaratorId .)
    ASSIGN          shift and go to state 176


state 92

    (79) MethodDeclaration -> MethodHeader MethodBody .

    RBRACE          reduce using rule 79 (MethodDeclaration -> MethodHeader MethodBody .)
    VOID            reduce using rule 79 (MethodDeclaration -> MethodHeader MethodBody .)
    STATIC          reduce using rule 79 (MethodDeclaration -> MethodHeader MethodBody .)
    FINAL           reduce using rule 79 (MethodDeclaration -> MethodHeader MethodBody .)
    PRIVATE         reduce using rule 79 (MethodDeclaration -> MethodHeader MethodBody .)
    PROTECTED       reduce using rule 79 (MethodDeclaration -> MethodHeader MethodBody .)
    PUBLIC          reduce using rule 79 (MethodDeclaration -> MethodHeader MethodBody .)
    IDENTIFIER      reduce using rule 79 (MethodDeclaration -> MethodHeader MethodBody .)
    BOOLEAN         reduce using rule 79 (MethodDeclaration -> MethodHeader MethodBody .)
    BYTE            reduce using rule 79 (MethodDeclaration -> MethodHeader MethodBody .)
    SHORT           reduce using rule 79 (MethodDeclaration -> MethodHeader MethodBody .)
    INT             reduce using rule 79 (MethodDeclaration -> MethodHeader MethodBody .)
    LONG            reduce using rule 79 (MethodDeclaration -> MethodHeader MethodBody .)
    CHAR            reduce using rule 79 (MethodDeclaration -> MethodHeader MethodBody .)
    FLOAT           reduce using rule 79 (MethodDeclaration -> MethodHeader MethodBody .)
    DOUBLE          reduce using rule 79 (MethodDeclaration -> MethodHeader MethodBody .)


state 93

    (89) MethodBody -> Block .

    RBRACE          reduce using rule 89 (MethodBody -> Block .)
    VOID            reduce using rule 89 (MethodBody -> Block .)
    STATIC          reduce using rule 89 (MethodBody -> Block .)
    FINAL           reduce using rule 89 (MethodBody -> Block .)
    PRIVATE         reduce using rule 89 (MethodBody -> Block .)
    PROTECTED       reduce using rule 89 (MethodBody -> Block .)
    PUBLIC          reduce using rule 89 (MethodBody -> Block .)
    IDENTIFIER      reduce using rule 89 (MethodBody -> Block .)
    BOOLEAN         reduce using rule 89 (MethodBody -> Block .)
    BYTE            reduce using rule 89 (MethodBody -> Block .)
    SHORT           reduce using rule 89 (MethodBody -> Block .)
    INT             reduce using rule 89 (MethodBody -> Block .)
    LONG            reduce using rule 89 (MethodBody -> Block .)
    CHAR            reduce using rule 89 (MethodBody -> Block .)
    FLOAT           reduce using rule 89 (MethodBody -> Block .)
    DOUBLE          reduce using rule 89 (MethodBody -> Block .)


state 94

    (90) MethodBody -> SEMI .

    RBRACE          reduce using rule 90 (MethodBody -> SEMI .)
    VOID            reduce using rule 90 (MethodBody -> SEMI .)
    STATIC          reduce using rule 90 (MethodBody -> SEMI .)
    FINAL           reduce using rule 90 (MethodBody -> SEMI .)
    PRIVATE         reduce using rule 90 (MethodBody -> SEMI .)
    PROTECTED       reduce using rule 90 (MethodBody -> SEMI .)
    PUBLIC          reduce using rule 90 (MethodBody -> SEMI .)
    IDENTIFIER      reduce using rule 90 (MethodBody -> SEMI .)
    BOOLEAN         reduce using rule 90 (MethodBody -> SEMI .)
    BYTE            reduce using rule 90 (MethodBody -> SEMI .)
    SHORT           reduce using rule 90 (MethodBody -> SEMI .)
    INT             reduce using rule 90 (MethodBody -> SEMI .)
    LONG            reduce using rule 90 (MethodBody -> SEMI .)
    CHAR            reduce using rule 90 (MethodBody -> SEMI .)
    FLOAT           reduce using rule 90 (MethodBody -> SEMI .)
    DOUBLE          reduce using rule 90 (MethodBody -> SEMI .)


state 95

    (103) Block -> LBRACE . RBRACE
    (104) Block -> LBRACE . BlockStatements RBRACE
    (105) BlockStatements -> . BlockStatement
    (106) BlockStatements -> . BlockStatements BlockStatement
    (107) BlockStatement -> . LocalVariableDeclarationStatement
    (108) BlockStatement -> . Statement
    (109) LocalVariableDeclarationStatement -> . LocalVariableDeclaration SEMI
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (110) LocalVariableDeclaration -> . Type VariableDeclarators
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RBRACE          shift and go to state 177
    IDENTIFIER      shift and go to state 130
    IF              shift and go to state 131
    WHILE           shift and go to state 133
    FOR             shift and go to state 134
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    BOOLEAN         shift and go to state 65
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    BYTE            shift and go to state 71
    SHORT           shift and go to state 72
    INT             shift and go to state 73
    LONG            shift and go to state 74
    CHAR            shift and go to state 75
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 77
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    BlockStatements                shift and go to state 178
    BlockStatement                 shift and go to state 110
    LocalVariableDeclarationStatement shift and go to state 111
    Statement                      shift and go to state 112
    LocalVariableDeclaration       shift and go to state 113
    StatementWithoutTrailingSubstatement shift and go to state 115
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    Type                           shift and go to state 121
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    PrimitiveType                  shift and go to state 60
    ReferenceType                  shift and go to state 61
    StatementExpression            shift and go to state 135
    NumericType                    shift and go to state 64
    ArrayType                      shift and go to state 66
    ClassType                      shift and go to state 67
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    IntegralType                   shift and go to state 68
    FloatingPointType              shift and go to state 69
    Name                           shift and go to state 148
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161

state 96

    (94) ConstructorDeclarator -> SimpleName LPAREN . decl_mark FormalParameterList RPAREN
    (300) decl_mark -> .

    BOOLEAN         reduce using rule 300 (decl_mark -> .)
    BYTE            reduce using rule 300 (decl_mark -> .)
    SHORT           reduce using rule 300 (decl_mark -> .)
    INT             reduce using rule 300 (decl_mark -> .)
    LONG            reduce using rule 300 (decl_mark -> .)
    CHAR            reduce using rule 300 (decl_mark -> .)
    FLOAT           reduce using rule 300 (decl_mark -> .)
    DOUBLE          reduce using rule 300 (decl_mark -> .)
    IDENTIFIER      reduce using rule 300 (decl_mark -> .)

    decl_mark                      shift and go to state 179

state 97

    (95) ConstructorDeclarator -> SimpleName decl_mark . LPAREN RPAREN

    LPAREN          shift and go to state 180


state 98

    (26) ArrayType -> PrimitiveType Dims .
    (218) Dims -> Dims . LBRACK RBRACK

    IDENTIFIER      reduce using rule 26 (ArrayType -> PrimitiveType Dims .)
    LBRACK          shift and go to state 181


state 99

    (217) Dims -> LBRACK . RBRACK

    RBRACK          shift and go to state 182


state 100

    (83) MethodHeader -> VOID MethodDeclarator .

    SEMI            reduce using rule 83 (MethodHeader -> VOID MethodDeclarator .)
    LBRACE          reduce using rule 83 (MethodHeader -> VOID MethodDeclarator .)


state 101

    (84) MethodDeclarator -> IDENTIFIER . LPAREN RPAREN
    (85) MethodDeclarator -> IDENTIFIER . LPAREN FormalParameterList RPAREN

    LPAREN          shift and go to state 174


state 102

    (27) ArrayType -> Name Dims .
    (218) Dims -> Dims . LBRACK RBRACK

    IDENTIFIER      reduce using rule 27 (ArrayType -> Name Dims .)
    LBRACK          shift and go to state 181


state 103

    (31) QualifiedName -> Name DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 183


state 104

    (92) ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .

    RBRACE          reduce using rule 92 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    VOID            reduce using rule 92 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    STATIC          reduce using rule 92 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    FINAL           reduce using rule 92 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    PRIVATE         reduce using rule 92 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    PROTECTED       reduce using rule 92 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    PUBLIC          reduce using rule 92 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    IDENTIFIER      reduce using rule 92 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    BOOLEAN         reduce using rule 92 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    BYTE            reduce using rule 92 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    SHORT           reduce using rule 92 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    INT             reduce using rule 92 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    LONG            reduce using rule 92 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    CHAR            reduce using rule 92 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    FLOAT           reduce using rule 92 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)
    DOUBLE          reduce using rule 92 (ConstructorDeclaration -> Modifiers ConstructorDeclarator ConstructorBody .)


state 105

    (70) FieldDeclaration -> Modifiers Type VariableDeclarators . SEMI
    (73) VariableDeclarators -> VariableDeclarators . COMMA VariableDeclarator

    SEMI            shift and go to state 184
    COMMA           shift and go to state 173


state 106

    (80) MethodHeader -> Modifiers Type MethodDeclarator .

    SEMI            reduce using rule 80 (MethodHeader -> Modifiers Type MethodDeclarator .)
    LBRACE          reduce using rule 80 (MethodHeader -> Modifiers Type MethodDeclarator .)


state 107

    (82) MethodHeader -> Modifiers VOID MethodDeclarator .

    SEMI            reduce using rule 82 (MethodHeader -> Modifiers VOID MethodDeclarator .)
    LBRACE          reduce using rule 82 (MethodHeader -> Modifiers VOID MethodDeclarator .)


state 108

    (97) ConstructorBody -> LBRACE BlockStatements . RBRACE
    (106) BlockStatements -> BlockStatements . BlockStatement
    (107) BlockStatement -> . LocalVariableDeclarationStatement
    (108) BlockStatement -> . Statement
    (109) LocalVariableDeclarationStatement -> . LocalVariableDeclaration SEMI
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (110) LocalVariableDeclaration -> . Type VariableDeclarators
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RBRACE          shift and go to state 185
    IDENTIFIER      shift and go to state 130
    IF              shift and go to state 131
    WHILE           shift and go to state 133
    FOR             shift and go to state 134
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    BOOLEAN         shift and go to state 65
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    BYTE            shift and go to state 71
    SHORT           shift and go to state 72
    INT             shift and go to state 73
    LONG            shift and go to state 74
    CHAR            shift and go to state 75
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 77
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    BlockStatement                 shift and go to state 186
    LocalVariableDeclarationStatement shift and go to state 111
    Statement                      shift and go to state 112
    LocalVariableDeclaration       shift and go to state 113
    StatementWithoutTrailingSubstatement shift and go to state 115
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    Type                           shift and go to state 121
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    PrimitiveType                  shift and go to state 60
    ReferenceType                  shift and go to state 61
    StatementExpression            shift and go to state 135
    NumericType                    shift and go to state 64
    ArrayType                      shift and go to state 66
    ClassType                      shift and go to state 67
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    IntegralType                   shift and go to state 68
    FloatingPointType              shift and go to state 69
    Name                           shift and go to state 148
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161

state 109

    (98) ConstructorBody -> LBRACE RBRACE .

    RBRACE          reduce using rule 98 (ConstructorBody -> LBRACE RBRACE .)
    VOID            reduce using rule 98 (ConstructorBody -> LBRACE RBRACE .)
    STATIC          reduce using rule 98 (ConstructorBody -> LBRACE RBRACE .)
    FINAL           reduce using rule 98 (ConstructorBody -> LBRACE RBRACE .)
    PRIVATE         reduce using rule 98 (ConstructorBody -> LBRACE RBRACE .)
    PROTECTED       reduce using rule 98 (ConstructorBody -> LBRACE RBRACE .)
    PUBLIC          reduce using rule 98 (ConstructorBody -> LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 98 (ConstructorBody -> LBRACE RBRACE .)
    BOOLEAN         reduce using rule 98 (ConstructorBody -> LBRACE RBRACE .)
    BYTE            reduce using rule 98 (ConstructorBody -> LBRACE RBRACE .)
    SHORT           reduce using rule 98 (ConstructorBody -> LBRACE RBRACE .)
    INT             reduce using rule 98 (ConstructorBody -> LBRACE RBRACE .)
    LONG            reduce using rule 98 (ConstructorBody -> LBRACE RBRACE .)
    CHAR            reduce using rule 98 (ConstructorBody -> LBRACE RBRACE .)
    FLOAT           reduce using rule 98 (ConstructorBody -> LBRACE RBRACE .)
    DOUBLE          reduce using rule 98 (ConstructorBody -> LBRACE RBRACE .)


state 110

    (105) BlockStatements -> BlockStatement .

    RBRACE          reduce using rule 105 (BlockStatements -> BlockStatement .)
    IDENTIFIER      reduce using rule 105 (BlockStatements -> BlockStatement .)
    IF              reduce using rule 105 (BlockStatements -> BlockStatement .)
    WHILE           reduce using rule 105 (BlockStatements -> BlockStatement .)
    FOR             reduce using rule 105 (BlockStatements -> BlockStatement .)
    LBRACE          reduce using rule 105 (BlockStatements -> BlockStatement .)
    SEMI            reduce using rule 105 (BlockStatements -> BlockStatement .)
    SWITCH          reduce using rule 105 (BlockStatements -> BlockStatement .)
    DO              reduce using rule 105 (BlockStatements -> BlockStatement .)
    BREAK           reduce using rule 105 (BlockStatements -> BlockStatement .)
    CONTINUE        reduce using rule 105 (BlockStatements -> BlockStatement .)
    RETURN          reduce using rule 105 (BlockStatements -> BlockStatement .)
    BOOLEAN         reduce using rule 105 (BlockStatements -> BlockStatement .)
    INC             reduce using rule 105 (BlockStatements -> BlockStatement .)
    DEC             reduce using rule 105 (BlockStatements -> BlockStatement .)
    NEW             reduce using rule 105 (BlockStatements -> BlockStatement .)
    BYTE            reduce using rule 105 (BlockStatements -> BlockStatement .)
    SHORT           reduce using rule 105 (BlockStatements -> BlockStatement .)
    INT             reduce using rule 105 (BlockStatements -> BlockStatement .)
    LONG            reduce using rule 105 (BlockStatements -> BlockStatement .)
    CHAR            reduce using rule 105 (BlockStatements -> BlockStatement .)
    FLOAT           reduce using rule 105 (BlockStatements -> BlockStatement .)
    DOUBLE          reduce using rule 105 (BlockStatements -> BlockStatement .)
    SUPER           reduce using rule 105 (BlockStatements -> BlockStatement .)
    THIS            reduce using rule 105 (BlockStatements -> BlockStatement .)
    LPAREN          reduce using rule 105 (BlockStatements -> BlockStatement .)
    DECIMAL_LITERAL reduce using rule 105 (BlockStatements -> BlockStatement .)
    HEX_LITERAL     reduce using rule 105 (BlockStatements -> BlockStatement .)
    BINARY_LITERAL  reduce using rule 105 (BlockStatements -> BlockStatement .)
    FLOAT_LITERAL   reduce using rule 105 (BlockStatements -> BlockStatement .)
    BOOL_LITERAL    reduce using rule 105 (BlockStatements -> BlockStatement .)
    CHAR_LITERAL    reduce using rule 105 (BlockStatements -> BlockStatement .)
    STRING_LITERAL  reduce using rule 105 (BlockStatements -> BlockStatement .)
    NULL            reduce using rule 105 (BlockStatements -> BlockStatement .)
    CASE            reduce using rule 105 (BlockStatements -> BlockStatement .)
    DEFAULT         reduce using rule 105 (BlockStatements -> BlockStatement .)


state 111

    (107) BlockStatement -> LocalVariableDeclarationStatement .

    RBRACE          reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    IDENTIFIER      reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    IF              reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    WHILE           reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    FOR             reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    LBRACE          reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    SEMI            reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    SWITCH          reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    DO              reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    BREAK           reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    CONTINUE        reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    RETURN          reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    BOOLEAN         reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    INC             reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    DEC             reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    NEW             reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    BYTE            reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    SHORT           reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    INT             reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    LONG            reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    CHAR            reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    FLOAT           reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    DOUBLE          reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    SUPER           reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    THIS            reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    LPAREN          reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    DECIMAL_LITERAL reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    HEX_LITERAL     reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    BINARY_LITERAL  reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    FLOAT_LITERAL   reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    BOOL_LITERAL    reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    CHAR_LITERAL    reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    STRING_LITERAL  reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    NULL            reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    CASE            reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)
    DEFAULT         reduce using rule 107 (BlockStatement -> LocalVariableDeclarationStatement .)


state 112

    (108) BlockStatement -> Statement .

    RBRACE          reduce using rule 108 (BlockStatement -> Statement .)
    IDENTIFIER      reduce using rule 108 (BlockStatement -> Statement .)
    IF              reduce using rule 108 (BlockStatement -> Statement .)
    WHILE           reduce using rule 108 (BlockStatement -> Statement .)
    FOR             reduce using rule 108 (BlockStatement -> Statement .)
    LBRACE          reduce using rule 108 (BlockStatement -> Statement .)
    SEMI            reduce using rule 108 (BlockStatement -> Statement .)
    SWITCH          reduce using rule 108 (BlockStatement -> Statement .)
    DO              reduce using rule 108 (BlockStatement -> Statement .)
    BREAK           reduce using rule 108 (BlockStatement -> Statement .)
    CONTINUE        reduce using rule 108 (BlockStatement -> Statement .)
    RETURN          reduce using rule 108 (BlockStatement -> Statement .)
    BOOLEAN         reduce using rule 108 (BlockStatement -> Statement .)
    INC             reduce using rule 108 (BlockStatement -> Statement .)
    DEC             reduce using rule 108 (BlockStatement -> Statement .)
    NEW             reduce using rule 108 (BlockStatement -> Statement .)
    BYTE            reduce using rule 108 (BlockStatement -> Statement .)
    SHORT           reduce using rule 108 (BlockStatement -> Statement .)
    INT             reduce using rule 108 (BlockStatement -> Statement .)
    LONG            reduce using rule 108 (BlockStatement -> Statement .)
    CHAR            reduce using rule 108 (BlockStatement -> Statement .)
    FLOAT           reduce using rule 108 (BlockStatement -> Statement .)
    DOUBLE          reduce using rule 108 (BlockStatement -> Statement .)
    SUPER           reduce using rule 108 (BlockStatement -> Statement .)
    THIS            reduce using rule 108 (BlockStatement -> Statement .)
    LPAREN          reduce using rule 108 (BlockStatement -> Statement .)
    DECIMAL_LITERAL reduce using rule 108 (BlockStatement -> Statement .)
    HEX_LITERAL     reduce using rule 108 (BlockStatement -> Statement .)
    BINARY_LITERAL  reduce using rule 108 (BlockStatement -> Statement .)
    FLOAT_LITERAL   reduce using rule 108 (BlockStatement -> Statement .)
    BOOL_LITERAL    reduce using rule 108 (BlockStatement -> Statement .)
    CHAR_LITERAL    reduce using rule 108 (BlockStatement -> Statement .)
    STRING_LITERAL  reduce using rule 108 (BlockStatement -> Statement .)
    NULL            reduce using rule 108 (BlockStatement -> Statement .)
    CASE            reduce using rule 108 (BlockStatement -> Statement .)
    DEFAULT         reduce using rule 108 (BlockStatement -> Statement .)


state 113

    (109) LocalVariableDeclarationStatement -> LocalVariableDeclaration . SEMI

    SEMI            shift and go to state 187


state 114

    (130) EmptyStatement -> SEMI .

    RBRACE          reduce using rule 130 (EmptyStatement -> SEMI .)
    IDENTIFIER      reduce using rule 130 (EmptyStatement -> SEMI .)
    IF              reduce using rule 130 (EmptyStatement -> SEMI .)
    WHILE           reduce using rule 130 (EmptyStatement -> SEMI .)
    FOR             reduce using rule 130 (EmptyStatement -> SEMI .)
    LBRACE          reduce using rule 130 (EmptyStatement -> SEMI .)
    SEMI            reduce using rule 130 (EmptyStatement -> SEMI .)
    SWITCH          reduce using rule 130 (EmptyStatement -> SEMI .)
    DO              reduce using rule 130 (EmptyStatement -> SEMI .)
    BREAK           reduce using rule 130 (EmptyStatement -> SEMI .)
    CONTINUE        reduce using rule 130 (EmptyStatement -> SEMI .)
    RETURN          reduce using rule 130 (EmptyStatement -> SEMI .)
    BOOLEAN         reduce using rule 130 (EmptyStatement -> SEMI .)
    INC             reduce using rule 130 (EmptyStatement -> SEMI .)
    DEC             reduce using rule 130 (EmptyStatement -> SEMI .)
    NEW             reduce using rule 130 (EmptyStatement -> SEMI .)
    BYTE            reduce using rule 130 (EmptyStatement -> SEMI .)
    SHORT           reduce using rule 130 (EmptyStatement -> SEMI .)
    INT             reduce using rule 130 (EmptyStatement -> SEMI .)
    LONG            reduce using rule 130 (EmptyStatement -> SEMI .)
    CHAR            reduce using rule 130 (EmptyStatement -> SEMI .)
    FLOAT           reduce using rule 130 (EmptyStatement -> SEMI .)
    DOUBLE          reduce using rule 130 (EmptyStatement -> SEMI .)
    SUPER           reduce using rule 130 (EmptyStatement -> SEMI .)
    THIS            reduce using rule 130 (EmptyStatement -> SEMI .)
    LPAREN          reduce using rule 130 (EmptyStatement -> SEMI .)
    DECIMAL_LITERAL reduce using rule 130 (EmptyStatement -> SEMI .)
    HEX_LITERAL     reduce using rule 130 (EmptyStatement -> SEMI .)
    BINARY_LITERAL  reduce using rule 130 (EmptyStatement -> SEMI .)
    FLOAT_LITERAL   reduce using rule 130 (EmptyStatement -> SEMI .)
    BOOL_LITERAL    reduce using rule 130 (EmptyStatement -> SEMI .)
    CHAR_LITERAL    reduce using rule 130 (EmptyStatement -> SEMI .)
    STRING_LITERAL  reduce using rule 130 (EmptyStatement -> SEMI .)
    NULL            reduce using rule 130 (EmptyStatement -> SEMI .)
    CASE            reduce using rule 130 (EmptyStatement -> SEMI .)
    DEFAULT         reduce using rule 130 (EmptyStatement -> SEMI .)
    ELSE            reduce using rule 130 (EmptyStatement -> SEMI .)


state 115

    (111) Statement -> StatementWithoutTrailingSubstatement .

    RBRACE          reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    IDENTIFIER      reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    IF              reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    WHILE           reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    FOR             reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    LBRACE          reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    SEMI            reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    SWITCH          reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    DO              reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    BREAK           reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    CONTINUE        reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    RETURN          reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    BOOLEAN         reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    INC             reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    DEC             reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    NEW             reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    BYTE            reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    SHORT           reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    INT             reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    LONG            reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    CHAR            reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    FLOAT           reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    DOUBLE          reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    SUPER           reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    THIS            reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    LPAREN          reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    DECIMAL_LITERAL reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    HEX_LITERAL     reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    BINARY_LITERAL  reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    FLOAT_LITERAL   reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    BOOL_LITERAL    reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    CHAR_LITERAL    reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    STRING_LITERAL  reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    NULL            reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    CASE            reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    DEFAULT         reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)


state 116

    (112) Statement -> LabeledStatement .

    RBRACE          reduce using rule 112 (Statement -> LabeledStatement .)
    IDENTIFIER      reduce using rule 112 (Statement -> LabeledStatement .)
    IF              reduce using rule 112 (Statement -> LabeledStatement .)
    WHILE           reduce using rule 112 (Statement -> LabeledStatement .)
    FOR             reduce using rule 112 (Statement -> LabeledStatement .)
    LBRACE          reduce using rule 112 (Statement -> LabeledStatement .)
    SEMI            reduce using rule 112 (Statement -> LabeledStatement .)
    SWITCH          reduce using rule 112 (Statement -> LabeledStatement .)
    DO              reduce using rule 112 (Statement -> LabeledStatement .)
    BREAK           reduce using rule 112 (Statement -> LabeledStatement .)
    CONTINUE        reduce using rule 112 (Statement -> LabeledStatement .)
    RETURN          reduce using rule 112 (Statement -> LabeledStatement .)
    BOOLEAN         reduce using rule 112 (Statement -> LabeledStatement .)
    INC             reduce using rule 112 (Statement -> LabeledStatement .)
    DEC             reduce using rule 112 (Statement -> LabeledStatement .)
    NEW             reduce using rule 112 (Statement -> LabeledStatement .)
    BYTE            reduce using rule 112 (Statement -> LabeledStatement .)
    SHORT           reduce using rule 112 (Statement -> LabeledStatement .)
    INT             reduce using rule 112 (Statement -> LabeledStatement .)
    LONG            reduce using rule 112 (Statement -> LabeledStatement .)
    CHAR            reduce using rule 112 (Statement -> LabeledStatement .)
    FLOAT           reduce using rule 112 (Statement -> LabeledStatement .)
    DOUBLE          reduce using rule 112 (Statement -> LabeledStatement .)
    SUPER           reduce using rule 112 (Statement -> LabeledStatement .)
    THIS            reduce using rule 112 (Statement -> LabeledStatement .)
    LPAREN          reduce using rule 112 (Statement -> LabeledStatement .)
    DECIMAL_LITERAL reduce using rule 112 (Statement -> LabeledStatement .)
    HEX_LITERAL     reduce using rule 112 (Statement -> LabeledStatement .)
    BINARY_LITERAL  reduce using rule 112 (Statement -> LabeledStatement .)
    FLOAT_LITERAL   reduce using rule 112 (Statement -> LabeledStatement .)
    BOOL_LITERAL    reduce using rule 112 (Statement -> LabeledStatement .)
    CHAR_LITERAL    reduce using rule 112 (Statement -> LabeledStatement .)
    STRING_LITERAL  reduce using rule 112 (Statement -> LabeledStatement .)
    NULL            reduce using rule 112 (Statement -> LabeledStatement .)
    CASE            reduce using rule 112 (Statement -> LabeledStatement .)
    DEFAULT         reduce using rule 112 (Statement -> LabeledStatement .)


state 117

    (113) Statement -> IfThenStatement .

    RBRACE          reduce using rule 113 (Statement -> IfThenStatement .)
    IDENTIFIER      reduce using rule 113 (Statement -> IfThenStatement .)
    IF              reduce using rule 113 (Statement -> IfThenStatement .)
    WHILE           reduce using rule 113 (Statement -> IfThenStatement .)
    FOR             reduce using rule 113 (Statement -> IfThenStatement .)
    LBRACE          reduce using rule 113 (Statement -> IfThenStatement .)
    SEMI            reduce using rule 113 (Statement -> IfThenStatement .)
    SWITCH          reduce using rule 113 (Statement -> IfThenStatement .)
    DO              reduce using rule 113 (Statement -> IfThenStatement .)
    BREAK           reduce using rule 113 (Statement -> IfThenStatement .)
    CONTINUE        reduce using rule 113 (Statement -> IfThenStatement .)
    RETURN          reduce using rule 113 (Statement -> IfThenStatement .)
    BOOLEAN         reduce using rule 113 (Statement -> IfThenStatement .)
    INC             reduce using rule 113 (Statement -> IfThenStatement .)
    DEC             reduce using rule 113 (Statement -> IfThenStatement .)
    NEW             reduce using rule 113 (Statement -> IfThenStatement .)
    BYTE            reduce using rule 113 (Statement -> IfThenStatement .)
    SHORT           reduce using rule 113 (Statement -> IfThenStatement .)
    INT             reduce using rule 113 (Statement -> IfThenStatement .)
    LONG            reduce using rule 113 (Statement -> IfThenStatement .)
    CHAR            reduce using rule 113 (Statement -> IfThenStatement .)
    FLOAT           reduce using rule 113 (Statement -> IfThenStatement .)
    DOUBLE          reduce using rule 113 (Statement -> IfThenStatement .)
    SUPER           reduce using rule 113 (Statement -> IfThenStatement .)
    THIS            reduce using rule 113 (Statement -> IfThenStatement .)
    LPAREN          reduce using rule 113 (Statement -> IfThenStatement .)
    DECIMAL_LITERAL reduce using rule 113 (Statement -> IfThenStatement .)
    HEX_LITERAL     reduce using rule 113 (Statement -> IfThenStatement .)
    BINARY_LITERAL  reduce using rule 113 (Statement -> IfThenStatement .)
    FLOAT_LITERAL   reduce using rule 113 (Statement -> IfThenStatement .)
    BOOL_LITERAL    reduce using rule 113 (Statement -> IfThenStatement .)
    CHAR_LITERAL    reduce using rule 113 (Statement -> IfThenStatement .)
    STRING_LITERAL  reduce using rule 113 (Statement -> IfThenStatement .)
    NULL            reduce using rule 113 (Statement -> IfThenStatement .)
    CASE            reduce using rule 113 (Statement -> IfThenStatement .)
    DEFAULT         reduce using rule 113 (Statement -> IfThenStatement .)


state 118

    (114) Statement -> IfThenElseStatement .

    RBRACE          reduce using rule 114 (Statement -> IfThenElseStatement .)
    IDENTIFIER      reduce using rule 114 (Statement -> IfThenElseStatement .)
    IF              reduce using rule 114 (Statement -> IfThenElseStatement .)
    WHILE           reduce using rule 114 (Statement -> IfThenElseStatement .)
    FOR             reduce using rule 114 (Statement -> IfThenElseStatement .)
    LBRACE          reduce using rule 114 (Statement -> IfThenElseStatement .)
    SEMI            reduce using rule 114 (Statement -> IfThenElseStatement .)
    SWITCH          reduce using rule 114 (Statement -> IfThenElseStatement .)
    DO              reduce using rule 114 (Statement -> IfThenElseStatement .)
    BREAK           reduce using rule 114 (Statement -> IfThenElseStatement .)
    CONTINUE        reduce using rule 114 (Statement -> IfThenElseStatement .)
    RETURN          reduce using rule 114 (Statement -> IfThenElseStatement .)
    BOOLEAN         reduce using rule 114 (Statement -> IfThenElseStatement .)
    INC             reduce using rule 114 (Statement -> IfThenElseStatement .)
    DEC             reduce using rule 114 (Statement -> IfThenElseStatement .)
    NEW             reduce using rule 114 (Statement -> IfThenElseStatement .)
    BYTE            reduce using rule 114 (Statement -> IfThenElseStatement .)
    SHORT           reduce using rule 114 (Statement -> IfThenElseStatement .)
    INT             reduce using rule 114 (Statement -> IfThenElseStatement .)
    LONG            reduce using rule 114 (Statement -> IfThenElseStatement .)
    CHAR            reduce using rule 114 (Statement -> IfThenElseStatement .)
    FLOAT           reduce using rule 114 (Statement -> IfThenElseStatement .)
    DOUBLE          reduce using rule 114 (Statement -> IfThenElseStatement .)
    SUPER           reduce using rule 114 (Statement -> IfThenElseStatement .)
    THIS            reduce using rule 114 (Statement -> IfThenElseStatement .)
    LPAREN          reduce using rule 114 (Statement -> IfThenElseStatement .)
    DECIMAL_LITERAL reduce using rule 114 (Statement -> IfThenElseStatement .)
    HEX_LITERAL     reduce using rule 114 (Statement -> IfThenElseStatement .)
    BINARY_LITERAL  reduce using rule 114 (Statement -> IfThenElseStatement .)
    FLOAT_LITERAL   reduce using rule 114 (Statement -> IfThenElseStatement .)
    BOOL_LITERAL    reduce using rule 114 (Statement -> IfThenElseStatement .)
    CHAR_LITERAL    reduce using rule 114 (Statement -> IfThenElseStatement .)
    STRING_LITERAL  reduce using rule 114 (Statement -> IfThenElseStatement .)
    NULL            reduce using rule 114 (Statement -> IfThenElseStatement .)
    CASE            reduce using rule 114 (Statement -> IfThenElseStatement .)
    DEFAULT         reduce using rule 114 (Statement -> IfThenElseStatement .)


state 119

    (115) Statement -> WhileStatement .

    RBRACE          reduce using rule 115 (Statement -> WhileStatement .)
    IDENTIFIER      reduce using rule 115 (Statement -> WhileStatement .)
    IF              reduce using rule 115 (Statement -> WhileStatement .)
    WHILE           reduce using rule 115 (Statement -> WhileStatement .)
    FOR             reduce using rule 115 (Statement -> WhileStatement .)
    LBRACE          reduce using rule 115 (Statement -> WhileStatement .)
    SEMI            reduce using rule 115 (Statement -> WhileStatement .)
    SWITCH          reduce using rule 115 (Statement -> WhileStatement .)
    DO              reduce using rule 115 (Statement -> WhileStatement .)
    BREAK           reduce using rule 115 (Statement -> WhileStatement .)
    CONTINUE        reduce using rule 115 (Statement -> WhileStatement .)
    RETURN          reduce using rule 115 (Statement -> WhileStatement .)
    BOOLEAN         reduce using rule 115 (Statement -> WhileStatement .)
    INC             reduce using rule 115 (Statement -> WhileStatement .)
    DEC             reduce using rule 115 (Statement -> WhileStatement .)
    NEW             reduce using rule 115 (Statement -> WhileStatement .)
    BYTE            reduce using rule 115 (Statement -> WhileStatement .)
    SHORT           reduce using rule 115 (Statement -> WhileStatement .)
    INT             reduce using rule 115 (Statement -> WhileStatement .)
    LONG            reduce using rule 115 (Statement -> WhileStatement .)
    CHAR            reduce using rule 115 (Statement -> WhileStatement .)
    FLOAT           reduce using rule 115 (Statement -> WhileStatement .)
    DOUBLE          reduce using rule 115 (Statement -> WhileStatement .)
    SUPER           reduce using rule 115 (Statement -> WhileStatement .)
    THIS            reduce using rule 115 (Statement -> WhileStatement .)
    LPAREN          reduce using rule 115 (Statement -> WhileStatement .)
    DECIMAL_LITERAL reduce using rule 115 (Statement -> WhileStatement .)
    HEX_LITERAL     reduce using rule 115 (Statement -> WhileStatement .)
    BINARY_LITERAL  reduce using rule 115 (Statement -> WhileStatement .)
    FLOAT_LITERAL   reduce using rule 115 (Statement -> WhileStatement .)
    BOOL_LITERAL    reduce using rule 115 (Statement -> WhileStatement .)
    CHAR_LITERAL    reduce using rule 115 (Statement -> WhileStatement .)
    STRING_LITERAL  reduce using rule 115 (Statement -> WhileStatement .)
    NULL            reduce using rule 115 (Statement -> WhileStatement .)
    CASE            reduce using rule 115 (Statement -> WhileStatement .)
    DEFAULT         reduce using rule 115 (Statement -> WhileStatement .)


state 120

    (116) Statement -> ForStatement .

    RBRACE          reduce using rule 116 (Statement -> ForStatement .)
    IDENTIFIER      reduce using rule 116 (Statement -> ForStatement .)
    IF              reduce using rule 116 (Statement -> ForStatement .)
    WHILE           reduce using rule 116 (Statement -> ForStatement .)
    FOR             reduce using rule 116 (Statement -> ForStatement .)
    LBRACE          reduce using rule 116 (Statement -> ForStatement .)
    SEMI            reduce using rule 116 (Statement -> ForStatement .)
    SWITCH          reduce using rule 116 (Statement -> ForStatement .)
    DO              reduce using rule 116 (Statement -> ForStatement .)
    BREAK           reduce using rule 116 (Statement -> ForStatement .)
    CONTINUE        reduce using rule 116 (Statement -> ForStatement .)
    RETURN          reduce using rule 116 (Statement -> ForStatement .)
    BOOLEAN         reduce using rule 116 (Statement -> ForStatement .)
    INC             reduce using rule 116 (Statement -> ForStatement .)
    DEC             reduce using rule 116 (Statement -> ForStatement .)
    NEW             reduce using rule 116 (Statement -> ForStatement .)
    BYTE            reduce using rule 116 (Statement -> ForStatement .)
    SHORT           reduce using rule 116 (Statement -> ForStatement .)
    INT             reduce using rule 116 (Statement -> ForStatement .)
    LONG            reduce using rule 116 (Statement -> ForStatement .)
    CHAR            reduce using rule 116 (Statement -> ForStatement .)
    FLOAT           reduce using rule 116 (Statement -> ForStatement .)
    DOUBLE          reduce using rule 116 (Statement -> ForStatement .)
    SUPER           reduce using rule 116 (Statement -> ForStatement .)
    THIS            reduce using rule 116 (Statement -> ForStatement .)
    LPAREN          reduce using rule 116 (Statement -> ForStatement .)
    DECIMAL_LITERAL reduce using rule 116 (Statement -> ForStatement .)
    HEX_LITERAL     reduce using rule 116 (Statement -> ForStatement .)
    BINARY_LITERAL  reduce using rule 116 (Statement -> ForStatement .)
    FLOAT_LITERAL   reduce using rule 116 (Statement -> ForStatement .)
    BOOL_LITERAL    reduce using rule 116 (Statement -> ForStatement .)
    CHAR_LITERAL    reduce using rule 116 (Statement -> ForStatement .)
    STRING_LITERAL  reduce using rule 116 (Statement -> ForStatement .)
    NULL            reduce using rule 116 (Statement -> ForStatement .)
    CASE            reduce using rule 116 (Statement -> ForStatement .)
    DEFAULT         reduce using rule 116 (Statement -> ForStatement .)


state 121

    (110) LocalVariableDeclaration -> Type . VariableDeclarators
    (72) VariableDeclarators -> . VariableDeclarator
    (73) VariableDeclarators -> . VariableDeclarators COMMA VariableDeclarator
    (74) VariableDeclarator -> . VariableDeclaratorId
    (75) VariableDeclarator -> . VariableDeclaratorId ASSIGN VariableInitializer
    (76) VariableDeclaratorId -> . IDENTIFIER
    (77) VariableDeclaratorId -> . IDENTIFIER Dims

    IDENTIFIER      shift and go to state 189

    VariableDeclarators            shift and go to state 188
    VariableDeclarator             shift and go to state 89
    VariableDeclaratorId           shift and go to state 91

state 122

    (122) StatementWithoutTrailingSubstatement -> Block .

    RBRACE          reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    IDENTIFIER      reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    IF              reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    WHILE           reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    FOR             reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    LBRACE          reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    SEMI            reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    SWITCH          reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    DO              reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    BREAK           reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    CONTINUE        reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    RETURN          reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    BOOLEAN         reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    INC             reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    DEC             reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    NEW             reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    BYTE            reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    SHORT           reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    INT             reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    LONG            reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    CHAR            reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    FLOAT           reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    DOUBLE          reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    SUPER           reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    THIS            reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    LPAREN          reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    DECIMAL_LITERAL reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    HEX_LITERAL     reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    BINARY_LITERAL  reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    FLOAT_LITERAL   reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    BOOL_LITERAL    reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    CHAR_LITERAL    reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    STRING_LITERAL  reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    NULL            reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    CASE            reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    DEFAULT         reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)
    ELSE            reduce using rule 122 (StatementWithoutTrailingSubstatement -> Block .)


state 123

    (123) StatementWithoutTrailingSubstatement -> EmptyStatement .

    RBRACE          reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    IDENTIFIER      reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    IF              reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    WHILE           reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    FOR             reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    LBRACE          reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    SEMI            reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    SWITCH          reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    DO              reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    BREAK           reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    CONTINUE        reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    RETURN          reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    BOOLEAN         reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    INC             reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    DEC             reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    NEW             reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    BYTE            reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    SHORT           reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    INT             reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    LONG            reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    CHAR            reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    FLOAT           reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    DOUBLE          reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    SUPER           reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    THIS            reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    LPAREN          reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    DECIMAL_LITERAL reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    HEX_LITERAL     reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    BINARY_LITERAL  reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    FLOAT_LITERAL   reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    BOOL_LITERAL    reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    CHAR_LITERAL    reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    STRING_LITERAL  reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    NULL            reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    CASE            reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    DEFAULT         reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)
    ELSE            reduce using rule 123 (StatementWithoutTrailingSubstatement -> EmptyStatement .)


state 124

    (124) StatementWithoutTrailingSubstatement -> ExpressionStatement .

    RBRACE          reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    IDENTIFIER      reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    IF              reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    WHILE           reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    FOR             reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    LBRACE          reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    SEMI            reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    SWITCH          reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    DO              reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    BREAK           reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    CONTINUE        reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    RETURN          reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    BOOLEAN         reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    INC             reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    DEC             reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    NEW             reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    BYTE            reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    SHORT           reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    INT             reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    LONG            reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    CHAR            reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    FLOAT           reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    DOUBLE          reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    SUPER           reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    THIS            reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    LPAREN          reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    DECIMAL_LITERAL reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    HEX_LITERAL     reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    BINARY_LITERAL  reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    FLOAT_LITERAL   reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    BOOL_LITERAL    reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    CHAR_LITERAL    reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    STRING_LITERAL  reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    NULL            reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    CASE            reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    DEFAULT         reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)
    ELSE            reduce using rule 124 (StatementWithoutTrailingSubstatement -> ExpressionStatement .)


state 125

    (125) StatementWithoutTrailingSubstatement -> SwitchStatement .

    RBRACE          reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    IDENTIFIER      reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    IF              reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    WHILE           reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    FOR             reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    LBRACE          reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    SEMI            reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    SWITCH          reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    DO              reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    BREAK           reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    CONTINUE        reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    RETURN          reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    BOOLEAN         reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    INC             reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    DEC             reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    NEW             reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    BYTE            reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    SHORT           reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    INT             reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    LONG            reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    CHAR            reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    FLOAT           reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    DOUBLE          reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    SUPER           reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    THIS            reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    LPAREN          reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    DECIMAL_LITERAL reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    HEX_LITERAL     reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    BINARY_LITERAL  reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    FLOAT_LITERAL   reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    BOOL_LITERAL    reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    CHAR_LITERAL    reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    STRING_LITERAL  reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    NULL            reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    CASE            reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    DEFAULT         reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)
    ELSE            reduce using rule 125 (StatementWithoutTrailingSubstatement -> SwitchStatement .)


state 126

    (126) StatementWithoutTrailingSubstatement -> DoStatement .

    RBRACE          reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    IDENTIFIER      reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    IF              reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    WHILE           reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    FOR             reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    LBRACE          reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    SEMI            reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    SWITCH          reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    DO              reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    BREAK           reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    CONTINUE        reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    RETURN          reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    BOOLEAN         reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    INC             reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    DEC             reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    NEW             reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    BYTE            reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    SHORT           reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    INT             reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    LONG            reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    CHAR            reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    FLOAT           reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    DOUBLE          reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    SUPER           reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    THIS            reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    LPAREN          reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    DECIMAL_LITERAL reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    HEX_LITERAL     reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    BINARY_LITERAL  reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    FLOAT_LITERAL   reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    BOOL_LITERAL    reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    CHAR_LITERAL    reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    STRING_LITERAL  reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    NULL            reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    CASE            reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    DEFAULT         reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)
    ELSE            reduce using rule 126 (StatementWithoutTrailingSubstatement -> DoStatement .)


state 127

    (127) StatementWithoutTrailingSubstatement -> BreakStatement .

    RBRACE          reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    IDENTIFIER      reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    IF              reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    WHILE           reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    FOR             reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    LBRACE          reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    SEMI            reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    SWITCH          reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    DO              reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    BREAK           reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    CONTINUE        reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    RETURN          reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    BOOLEAN         reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    INC             reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    DEC             reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    NEW             reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    BYTE            reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    SHORT           reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    INT             reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    LONG            reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    CHAR            reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    FLOAT           reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    DOUBLE          reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    SUPER           reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    THIS            reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    LPAREN          reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    DECIMAL_LITERAL reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    HEX_LITERAL     reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    BINARY_LITERAL  reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    FLOAT_LITERAL   reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    BOOL_LITERAL    reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    CHAR_LITERAL    reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    STRING_LITERAL  reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    NULL            reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    CASE            reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    DEFAULT         reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)
    ELSE            reduce using rule 127 (StatementWithoutTrailingSubstatement -> BreakStatement .)


state 128

    (128) StatementWithoutTrailingSubstatement -> ContinueStatement .

    RBRACE          reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    IDENTIFIER      reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    IF              reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    WHILE           reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    FOR             reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    LBRACE          reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    SEMI            reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    SWITCH          reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    DO              reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    BREAK           reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    CONTINUE        reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    RETURN          reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    BOOLEAN         reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    INC             reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    DEC             reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    NEW             reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    BYTE            reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    SHORT           reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    INT             reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    LONG            reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    CHAR            reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    FLOAT           reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    DOUBLE          reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    SUPER           reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    THIS            reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    LPAREN          reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    DECIMAL_LITERAL reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    HEX_LITERAL     reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    BINARY_LITERAL  reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    FLOAT_LITERAL   reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    BOOL_LITERAL    reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    CHAR_LITERAL    reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    STRING_LITERAL  reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    NULL            reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    CASE            reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    DEFAULT         reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)
    ELSE            reduce using rule 128 (StatementWithoutTrailingSubstatement -> ContinueStatement .)


state 129

    (129) StatementWithoutTrailingSubstatement -> ReturnStatement .

    RBRACE          reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    IDENTIFIER      reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    IF              reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    WHILE           reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    FOR             reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    LBRACE          reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    SEMI            reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    SWITCH          reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    DO              reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    BREAK           reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    CONTINUE        reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    RETURN          reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    BOOLEAN         reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    INC             reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    DEC             reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    NEW             reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    BYTE            reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    SHORT           reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    INT             reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    LONG            reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    CHAR            reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    FLOAT           reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    DOUBLE          reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    SUPER           reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    THIS            reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    LPAREN          reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    DECIMAL_LITERAL reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    HEX_LITERAL     reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    BINARY_LITERAL  reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    FLOAT_LITERAL   reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    BOOL_LITERAL    reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    CHAR_LITERAL    reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    STRING_LITERAL  reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    NULL            reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    CASE            reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    DEFAULT         reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)
    ELSE            reduce using rule 129 (StatementWithoutTrailingSubstatement -> ReturnStatement .)


state 130

    (131) LabeledStatement -> IDENTIFIER . COLON Statement
    (30) SimpleName -> IDENTIFIER .

    COLON           shift and go to state 190
    LPAREN          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    DOT             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    LBRACK          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    ASSIGN          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 30 (SimpleName -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 30 (SimpleName -> IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 30 (SimpleName -> IDENTIFIER .)
    URSHIFT_ASSIGN  reduce using rule 30 (SimpleName -> IDENTIFIER .)
    INC             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    DEC             reduce using rule 30 (SimpleName -> IDENTIFIER .)


state 131

    (141) IfThenStatement -> IF . begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> IF . begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (302) begin_scope -> .

    LPAREN          reduce using rule 302 (begin_scope -> .)

    begin_scope                    shift and go to state 191

state 132

    (201) PrimaryNoNewArray -> LPAREN . Expression RPAREN
    (298) Expression -> . AssignmentExpression
    (280) AssignmentExpression -> . ConditionalExpression
    (281) AssignmentExpression -> . Assignment
    (278) ConditionalExpression -> . ConditionalOrExpression
    (279) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (275) ConditionalOrExpression -> . ConditionalAndExpression
    (276) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (273) ConditionalAndExpression -> . InclusiveOrExpression
    (274) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC

    SUPER           shift and go to state 160
    IDENTIFIER      shift and go to state 63
    THIS            shift and go to state 162
    LPAREN          shift and go to state 192
    NEW             shift and go to state 207
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221

    Expression                     shift and go to state 193
    AssignmentExpression           shift and go to state 194
    ConditionalExpression          shift and go to state 195
    Assignment                     shift and go to state 196
    ConditionalOrExpression        shift and go to state 197
    LeftHandSide                   shift and go to state 149
    ConditionalAndExpression       shift and go to state 198
    Name                           shift and go to state 199
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    InclusiveOrExpression          shift and go to state 200
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Primary                        shift and go to state 201
    PrimaryNoNewArray              shift and go to state 202
    ExclusiveOrExpression          shift and go to state 203
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    MethodInvocation               shift and go to state 205
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224

state 133

    (159) WhileStatement -> WHILE . prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (161) prep_fw_stack -> .

    LPAREN          reduce using rule 161 (prep_fw_stack -> .)

    prep_fw_stack                  shift and go to state 225

state 134

    (167) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (161) prep_fw_stack -> .

    LPAREN          reduce using rule 161 (prep_fw_stack -> .)

    prep_fw_stack                  shift and go to state 226

state 135

    (133) ExpressionStatement -> StatementExpression . SEMI

    SEMI            shift and go to state 227


state 136

    (147) SwitchStatement -> SWITCH . LPAREN Expression RPAREN SwitchBlock

    LPAREN          shift and go to state 228


state 137

    (164) DoStatement -> DO . prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (161) prep_fw_stack -> .

    IDENTIFIER      reduce using rule 161 (prep_fw_stack -> .)
    IF              reduce using rule 161 (prep_fw_stack -> .)
    WHILE           reduce using rule 161 (prep_fw_stack -> .)
    FOR             reduce using rule 161 (prep_fw_stack -> .)
    LBRACE          reduce using rule 161 (prep_fw_stack -> .)
    SEMI            reduce using rule 161 (prep_fw_stack -> .)
    SWITCH          reduce using rule 161 (prep_fw_stack -> .)
    DO              reduce using rule 161 (prep_fw_stack -> .)
    BREAK           reduce using rule 161 (prep_fw_stack -> .)
    CONTINUE        reduce using rule 161 (prep_fw_stack -> .)
    RETURN          reduce using rule 161 (prep_fw_stack -> .)
    INC             reduce using rule 161 (prep_fw_stack -> .)
    DEC             reduce using rule 161 (prep_fw_stack -> .)
    NEW             reduce using rule 161 (prep_fw_stack -> .)
    SUPER           reduce using rule 161 (prep_fw_stack -> .)
    THIS            reduce using rule 161 (prep_fw_stack -> .)
    LPAREN          reduce using rule 161 (prep_fw_stack -> .)
    DECIMAL_LITERAL reduce using rule 161 (prep_fw_stack -> .)
    HEX_LITERAL     reduce using rule 161 (prep_fw_stack -> .)
    BINARY_LITERAL  reduce using rule 161 (prep_fw_stack -> .)
    FLOAT_LITERAL   reduce using rule 161 (prep_fw_stack -> .)
    BOOL_LITERAL    reduce using rule 161 (prep_fw_stack -> .)
    CHAR_LITERAL    reduce using rule 161 (prep_fw_stack -> .)
    STRING_LITERAL  reduce using rule 161 (prep_fw_stack -> .)
    NULL            reduce using rule 161 (prep_fw_stack -> .)

    prep_fw_stack                  shift and go to state 229

state 138

    (191) BreakStatement -> BREAK . IDENTIFIER SEMI
    (192) BreakStatement -> BREAK . SEMI

    IDENTIFIER      shift and go to state 230
    SEMI            shift and go to state 231


state 139

    (193) ContinueStatement -> CONTINUE . IDENTIFIER SEMI
    (194) ContinueStatement -> CONTINUE . SEMI

    IDENTIFIER      shift and go to state 232
    SEMI            shift and go to state 233


state 140

    (195) ReturnStatement -> RETURN . Expression SEMI
    (196) ReturnStatement -> RETURN . SEMI
    (298) Expression -> . AssignmentExpression
    (280) AssignmentExpression -> . ConditionalExpression
    (281) AssignmentExpression -> . Assignment
    (278) ConditionalExpression -> . ConditionalOrExpression
    (279) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (275) ConditionalOrExpression -> . ConditionalAndExpression
    (276) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (273) ConditionalAndExpression -> . InclusiveOrExpression
    (274) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC

    SEMI            shift and go to state 235
    SUPER           shift and go to state 160
    IDENTIFIER      shift and go to state 63
    THIS            shift and go to state 162
    LPAREN          shift and go to state 192
    NEW             shift and go to state 207
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221

    Expression                     shift and go to state 234
    AssignmentExpression           shift and go to state 194
    ConditionalExpression          shift and go to state 195
    Assignment                     shift and go to state 196
    ConditionalOrExpression        shift and go to state 197
    LeftHandSide                   shift and go to state 149
    ConditionalAndExpression       shift and go to state 198
    Name                           shift and go to state 199
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    InclusiveOrExpression          shift and go to state 200
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Primary                        shift and go to state 201
    PrimaryNoNewArray              shift and go to state 202
    ExclusiveOrExpression          shift and go to state 203
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    MethodInvocation               shift and go to state 205
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224

state 141

    (134) StatementExpression -> Assignment .

    SEMI            reduce using rule 134 (StatementExpression -> Assignment .)
    COMMA           reduce using rule 134 (StatementExpression -> Assignment .)
    RPAREN          reduce using rule 134 (StatementExpression -> Assignment .)


state 142

    (135) StatementExpression -> PreIncrementExpression .

    SEMI            reduce using rule 135 (StatementExpression -> PreIncrementExpression .)
    COMMA           reduce using rule 135 (StatementExpression -> PreIncrementExpression .)
    RPAREN          reduce using rule 135 (StatementExpression -> PreIncrementExpression .)


state 143

    (136) StatementExpression -> PreDecrementExpression .

    SEMI            reduce using rule 136 (StatementExpression -> PreDecrementExpression .)
    COMMA           reduce using rule 136 (StatementExpression -> PreDecrementExpression .)
    RPAREN          reduce using rule 136 (StatementExpression -> PreDecrementExpression .)


state 144

    (137) StatementExpression -> PostIncrementExpression .
    (229) PostfixExpression -> PostIncrementExpression .

    SEMI            reduce using rule 137 (StatementExpression -> PostIncrementExpression .)
    COMMA           reduce using rule 137 (StatementExpression -> PostIncrementExpression .)
    RPAREN          reduce using rule 137 (StatementExpression -> PostIncrementExpression .)
    INC             reduce using rule 229 (PostfixExpression -> PostIncrementExpression .)
    DEC             reduce using rule 229 (PostfixExpression -> PostIncrementExpression .)


state 145

    (138) StatementExpression -> PostDecrementExpression .
    (230) PostfixExpression -> PostDecrementExpression .

    SEMI            reduce using rule 138 (StatementExpression -> PostDecrementExpression .)
    COMMA           reduce using rule 138 (StatementExpression -> PostDecrementExpression .)
    RPAREN          reduce using rule 138 (StatementExpression -> PostDecrementExpression .)
    INC             reduce using rule 230 (PostfixExpression -> PostDecrementExpression .)
    DEC             reduce using rule 230 (PostfixExpression -> PostDecrementExpression .)


state 146

    (139) StatementExpression -> MethodInvocation .
    (204) PrimaryNoNewArray -> MethodInvocation .

    SEMI            reduce using rule 139 (StatementExpression -> MethodInvocation .)
    COMMA           reduce using rule 139 (StatementExpression -> MethodInvocation .)
    RPAREN          reduce using rule 139 (StatementExpression -> MethodInvocation .)
    LBRACK          reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    DOT             reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    INC             reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    DEC             reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)


state 147

    (140) StatementExpression -> ClassInstanceCreationExpression .
    (202) PrimaryNoNewArray -> ClassInstanceCreationExpression .

    SEMI            reduce using rule 140 (StatementExpression -> ClassInstanceCreationExpression .)
    COMMA           reduce using rule 140 (StatementExpression -> ClassInstanceCreationExpression .)
    RPAREN          reduce using rule 140 (StatementExpression -> ClassInstanceCreationExpression .)
    LBRACK          reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    DOT             reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    INC             reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    DEC             reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)


state 148

    (27) ArrayType -> Name . Dims
    (25) ClassType -> Name .
    (222) MethodInvocation -> Name . LPAREN ArgumentList RPAREN
    (224) MethodInvocation -> Name . LPAREN RPAREN
    (283) LeftHandSide -> Name .
    (228) PostfixExpression -> Name .
    (31) QualifiedName -> Name . DOT IDENTIFIER
    (225) ArrayAccess -> Name . LBRACK Expression RBRACK
    (217) Dims -> . LBRACK RBRACK
    (218) Dims -> . Dims LBRACK RBRACK

    IDENTIFIER      reduce using rule 25 (ClassType -> Name .)
    LPAREN          shift and go to state 236
    ASSIGN          reduce using rule 283 (LeftHandSide -> Name .)
    ADD_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    SUB_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    MUL_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    DIV_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    AND_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    OR_ASSIGN       reduce using rule 283 (LeftHandSide -> Name .)
    XOR_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    MOD_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    LSHIFT_ASSIGN   reduce using rule 283 (LeftHandSide -> Name .)
    RSHIFT_ASSIGN   reduce using rule 283 (LeftHandSide -> Name .)
    URSHIFT_ASSIGN  reduce using rule 283 (LeftHandSide -> Name .)
    INC             reduce using rule 228 (PostfixExpression -> Name .)
    DEC             reduce using rule 228 (PostfixExpression -> Name .)
    DOT             shift and go to state 103
    LBRACK          shift and go to state 237

    Dims                           shift and go to state 102

state 149

    (282) Assignment -> LeftHandSide . AssignmentOperator AssignmentExpression
    (286) AssignmentOperator -> . ASSIGN
    (287) AssignmentOperator -> . ADD_ASSIGN
    (288) AssignmentOperator -> . SUB_ASSIGN
    (289) AssignmentOperator -> . MUL_ASSIGN
    (290) AssignmentOperator -> . DIV_ASSIGN
    (291) AssignmentOperator -> . AND_ASSIGN
    (292) AssignmentOperator -> . OR_ASSIGN
    (293) AssignmentOperator -> . XOR_ASSIGN
    (294) AssignmentOperator -> . MOD_ASSIGN
    (295) AssignmentOperator -> . LSHIFT_ASSIGN
    (296) AssignmentOperator -> . RSHIFT_ASSIGN
    (297) AssignmentOperator -> . URSHIFT_ASSIGN

    ASSIGN          shift and go to state 239
    ADD_ASSIGN      shift and go to state 240
    SUB_ASSIGN      shift and go to state 241
    MUL_ASSIGN      shift and go to state 242
    DIV_ASSIGN      shift and go to state 243
    AND_ASSIGN      shift and go to state 244
    OR_ASSIGN       shift and go to state 245
    XOR_ASSIGN      shift and go to state 246
    MOD_ASSIGN      shift and go to state 247
    LSHIFT_ASSIGN   shift and go to state 248
    RSHIFT_ASSIGN   shift and go to state 249
    URSHIFT_ASSIGN  shift and go to state 250

    AssignmentOperator             shift and go to state 238

state 150

    (238) PreIncrementExpression -> INC . UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    UnaryExpression                shift and go to state 251
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 151

    (239) PreDecrementExpression -> DEC . UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    UnaryExpression                shift and go to state 257
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 152

    (231) PostIncrementExpression -> PostfixExpression . INC
    (232) PostDecrementExpression -> PostfixExpression . DEC

    INC             shift and go to state 258
    DEC             shift and go to state 259


state 153

    (221) MethodInvocation -> Primary . DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> Primary . DOT IDENTIFIER LPAREN RPAREN
    (227) PostfixExpression -> Primary .
    (219) FieldAccess -> Primary . DOT Name

    DOT             shift and go to state 260
    INC             reduce using rule 227 (PostfixExpression -> Primary .)
    DEC             reduce using rule 227 (PostfixExpression -> Primary .)


state 154

    (206) ClassInstanceCreationExpression -> NEW . ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> NEW . ClassType LPAREN ArgumentList RPAREN
    (210) ArrayCreationExpression -> NEW . PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> NEW . PrimitiveType DimExprs
    (212) ArrayCreationExpression -> NEW . ClassType DimExprs Dims
    (213) ArrayCreationExpression -> NEW . ClassType DimExprs
    (25) ClassType -> . Name
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE

    BOOLEAN         shift and go to state 65
    IDENTIFIER      shift and go to state 63
    BYTE            shift and go to state 71
    SHORT           shift and go to state 72
    INT             shift and go to state 73
    LONG            shift and go to state 74
    CHAR            shift and go to state 75
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 77

    ClassType                      shift and go to state 261
    PrimitiveType                  shift and go to state 262
    Name                           shift and go to state 263
    NumericType                    shift and go to state 64
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    IntegralType                   shift and go to state 68
    FloatingPointType              shift and go to state 69

state 155

    (28) Name -> SimpleName .

    LPAREN          reduce using rule 28 (Name -> SimpleName .)
    DOT             reduce using rule 28 (Name -> SimpleName .)
    LBRACK          reduce using rule 28 (Name -> SimpleName .)
    IDENTIFIER      reduce using rule 28 (Name -> SimpleName .)
    ASSIGN          reduce using rule 28 (Name -> SimpleName .)
    ADD_ASSIGN      reduce using rule 28 (Name -> SimpleName .)
    SUB_ASSIGN      reduce using rule 28 (Name -> SimpleName .)
    MUL_ASSIGN      reduce using rule 28 (Name -> SimpleName .)
    DIV_ASSIGN      reduce using rule 28 (Name -> SimpleName .)
    AND_ASSIGN      reduce using rule 28 (Name -> SimpleName .)
    OR_ASSIGN       reduce using rule 28 (Name -> SimpleName .)
    XOR_ASSIGN      reduce using rule 28 (Name -> SimpleName .)
    MOD_ASSIGN      reduce using rule 28 (Name -> SimpleName .)
    LSHIFT_ASSIGN   reduce using rule 28 (Name -> SimpleName .)
    RSHIFT_ASSIGN   reduce using rule 28 (Name -> SimpleName .)
    URSHIFT_ASSIGN  reduce using rule 28 (Name -> SimpleName .)
    INC             reduce using rule 28 (Name -> SimpleName .)
    DEC             reduce using rule 28 (Name -> SimpleName .)
    MUL             reduce using rule 28 (Name -> SimpleName .)
    DIV             reduce using rule 28 (Name -> SimpleName .)
    MOD             reduce using rule 28 (Name -> SimpleName .)
    ADD             reduce using rule 28 (Name -> SimpleName .)
    SUB             reduce using rule 28 (Name -> SimpleName .)
    LSHIFT          reduce using rule 28 (Name -> SimpleName .)
    RSHIFT          reduce using rule 28 (Name -> SimpleName .)
    URSHIFT         reduce using rule 28 (Name -> SimpleName .)
    LT              reduce using rule 28 (Name -> SimpleName .)
    GT              reduce using rule 28 (Name -> SimpleName .)
    LE              reduce using rule 28 (Name -> SimpleName .)
    GE              reduce using rule 28 (Name -> SimpleName .)
    EQUAL           reduce using rule 28 (Name -> SimpleName .)
    NOTEQUAL        reduce using rule 28 (Name -> SimpleName .)
    BITAND          reduce using rule 28 (Name -> SimpleName .)
    CARET           reduce using rule 28 (Name -> SimpleName .)
    BITOR           reduce using rule 28 (Name -> SimpleName .)
    AND             reduce using rule 28 (Name -> SimpleName .)
    QUESTION        reduce using rule 28 (Name -> SimpleName .)
    OR              reduce using rule 28 (Name -> SimpleName .)
    RPAREN          reduce using rule 28 (Name -> SimpleName .)
    SEMI            reduce using rule 28 (Name -> SimpleName .)
    COMMA           reduce using rule 28 (Name -> SimpleName .)
    RBRACK          reduce using rule 28 (Name -> SimpleName .)
    COLON           reduce using rule 28 (Name -> SimpleName .)


state 156

    (284) LeftHandSide -> FieldAccess .
    (203) PrimaryNoNewArray -> FieldAccess .

    ASSIGN          reduce using rule 284 (LeftHandSide -> FieldAccess .)
    ADD_ASSIGN      reduce using rule 284 (LeftHandSide -> FieldAccess .)
    SUB_ASSIGN      reduce using rule 284 (LeftHandSide -> FieldAccess .)
    MUL_ASSIGN      reduce using rule 284 (LeftHandSide -> FieldAccess .)
    DIV_ASSIGN      reduce using rule 284 (LeftHandSide -> FieldAccess .)
    AND_ASSIGN      reduce using rule 284 (LeftHandSide -> FieldAccess .)
    OR_ASSIGN       reduce using rule 284 (LeftHandSide -> FieldAccess .)
    XOR_ASSIGN      reduce using rule 284 (LeftHandSide -> FieldAccess .)
    MOD_ASSIGN      reduce using rule 284 (LeftHandSide -> FieldAccess .)
    LSHIFT_ASSIGN   reduce using rule 284 (LeftHandSide -> FieldAccess .)
    RSHIFT_ASSIGN   reduce using rule 284 (LeftHandSide -> FieldAccess .)
    URSHIFT_ASSIGN  reduce using rule 284 (LeftHandSide -> FieldAccess .)
    LBRACK          reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    DOT             reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    INC             reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    DEC             reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    MUL             reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    DIV             reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    MOD             reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    ADD             reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    SUB             reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    LSHIFT          reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    RSHIFT          reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    URSHIFT         reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    LT              reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    GT              reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    LE              reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    GE              reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    EQUAL           reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    NOTEQUAL        reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    BITAND          reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    CARET           reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    BITOR           reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    AND             reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    QUESTION        reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    OR              reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    RPAREN          reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    SEMI            reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    COMMA           reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    RBRACK          reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    COLON           reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)


state 157

    (285) LeftHandSide -> ArrayAccess .
    (205) PrimaryNoNewArray -> ArrayAccess .

    ASSIGN          reduce using rule 285 (LeftHandSide -> ArrayAccess .)
    ADD_ASSIGN      reduce using rule 285 (LeftHandSide -> ArrayAccess .)
    SUB_ASSIGN      reduce using rule 285 (LeftHandSide -> ArrayAccess .)
    MUL_ASSIGN      reduce using rule 285 (LeftHandSide -> ArrayAccess .)
    DIV_ASSIGN      reduce using rule 285 (LeftHandSide -> ArrayAccess .)
    AND_ASSIGN      reduce using rule 285 (LeftHandSide -> ArrayAccess .)
    OR_ASSIGN       reduce using rule 285 (LeftHandSide -> ArrayAccess .)
    XOR_ASSIGN      reduce using rule 285 (LeftHandSide -> ArrayAccess .)
    MOD_ASSIGN      reduce using rule 285 (LeftHandSide -> ArrayAccess .)
    LSHIFT_ASSIGN   reduce using rule 285 (LeftHandSide -> ArrayAccess .)
    RSHIFT_ASSIGN   reduce using rule 285 (LeftHandSide -> ArrayAccess .)
    URSHIFT_ASSIGN  reduce using rule 285 (LeftHandSide -> ArrayAccess .)
    LBRACK          reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    DOT             reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    INC             reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    DEC             reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    MUL             reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    DIV             reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    MOD             reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    ADD             reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    SUB             reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    LSHIFT          reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    RSHIFT          reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    URSHIFT         reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    LT              reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    GT              reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    LE              reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    GE              reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    EQUAL           reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    NOTEQUAL        reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    BITAND          reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    CARET           reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    BITOR           reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    AND             reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    QUESTION        reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    OR              reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    RPAREN          reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    SEMI            reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    COMMA           reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    RBRACK          reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    COLON           reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)


state 158

    (197) Primary -> PrimaryNoNewArray .
    (226) ArrayAccess -> PrimaryNoNewArray . LBRACK Expression RBRACK

    DOT             reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    INC             reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    DEC             reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    SEMI            reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    MUL             reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    DIV             reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    MOD             reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    ADD             reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    SUB             reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    LSHIFT          reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    RSHIFT          reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    URSHIFT         reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    LT              reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    GT              reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    LE              reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    GE              reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    EQUAL           reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    NOTEQUAL        reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    BITAND          reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    CARET           reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    BITOR           reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    AND             reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    QUESTION        reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    OR              reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    RPAREN          reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    COMMA           reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    RBRACK          reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    COLON           reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    LBRACK          shift and go to state 264


state 159

    (198) Primary -> ArrayCreationExpression .

    DOT             reduce using rule 198 (Primary -> ArrayCreationExpression .)
    INC             reduce using rule 198 (Primary -> ArrayCreationExpression .)
    DEC             reduce using rule 198 (Primary -> ArrayCreationExpression .)
    MUL             reduce using rule 198 (Primary -> ArrayCreationExpression .)
    DIV             reduce using rule 198 (Primary -> ArrayCreationExpression .)
    MOD             reduce using rule 198 (Primary -> ArrayCreationExpression .)
    ADD             reduce using rule 198 (Primary -> ArrayCreationExpression .)
    SUB             reduce using rule 198 (Primary -> ArrayCreationExpression .)
    LSHIFT          reduce using rule 198 (Primary -> ArrayCreationExpression .)
    RSHIFT          reduce using rule 198 (Primary -> ArrayCreationExpression .)
    URSHIFT         reduce using rule 198 (Primary -> ArrayCreationExpression .)
    LT              reduce using rule 198 (Primary -> ArrayCreationExpression .)
    GT              reduce using rule 198 (Primary -> ArrayCreationExpression .)
    LE              reduce using rule 198 (Primary -> ArrayCreationExpression .)
    GE              reduce using rule 198 (Primary -> ArrayCreationExpression .)
    EQUAL           reduce using rule 198 (Primary -> ArrayCreationExpression .)
    NOTEQUAL        reduce using rule 198 (Primary -> ArrayCreationExpression .)
    BITAND          reduce using rule 198 (Primary -> ArrayCreationExpression .)
    CARET           reduce using rule 198 (Primary -> ArrayCreationExpression .)
    BITOR           reduce using rule 198 (Primary -> ArrayCreationExpression .)
    AND             reduce using rule 198 (Primary -> ArrayCreationExpression .)
    QUESTION        reduce using rule 198 (Primary -> ArrayCreationExpression .)
    OR              reduce using rule 198 (Primary -> ArrayCreationExpression .)
    RPAREN          reduce using rule 198 (Primary -> ArrayCreationExpression .)
    SEMI            reduce using rule 198 (Primary -> ArrayCreationExpression .)
    COMMA           reduce using rule 198 (Primary -> ArrayCreationExpression .)
    RBRACK          reduce using rule 198 (Primary -> ArrayCreationExpression .)
    COLON           reduce using rule 198 (Primary -> ArrayCreationExpression .)


state 160

    (220) FieldAccess -> SUPER . DOT Name

    DOT             shift and go to state 265


state 161

    (199) PrimaryNoNewArray -> Literal .

    LBRACK          reduce using rule 199 (PrimaryNoNewArray -> Literal .)
    DOT             reduce using rule 199 (PrimaryNoNewArray -> Literal .)
    INC             reduce using rule 199 (PrimaryNoNewArray -> Literal .)
    DEC             reduce using rule 199 (PrimaryNoNewArray -> Literal .)
    MUL             reduce using rule 199 (PrimaryNoNewArray -> Literal .)
    DIV             reduce using rule 199 (PrimaryNoNewArray -> Literal .)
    MOD             reduce using rule 199 (PrimaryNoNewArray -> Literal .)
    ADD             reduce using rule 199 (PrimaryNoNewArray -> Literal .)
    SUB             reduce using rule 199 (PrimaryNoNewArray -> Literal .)
    LSHIFT          reduce using rule 199 (PrimaryNoNewArray -> Literal .)
    RSHIFT          reduce using rule 199 (PrimaryNoNewArray -> Literal .)
    URSHIFT         reduce using rule 199 (PrimaryNoNewArray -> Literal .)
    LT              reduce using rule 199 (PrimaryNoNewArray -> Literal .)
    GT              reduce using rule 199 (PrimaryNoNewArray -> Literal .)
    LE              reduce using rule 199 (PrimaryNoNewArray -> Literal .)
    GE              reduce using rule 199 (PrimaryNoNewArray -> Literal .)
    EQUAL           reduce using rule 199 (PrimaryNoNewArray -> Literal .)
    NOTEQUAL        reduce using rule 199 (PrimaryNoNewArray -> Literal .)
    BITAND          reduce using rule 199 (PrimaryNoNewArray -> Literal .)
    CARET           reduce using rule 199 (PrimaryNoNewArray -> Literal .)
    BITOR           reduce using rule 199 (PrimaryNoNewArray -> Literal .)
    AND             reduce using rule 199 (PrimaryNoNewArray -> Literal .)
    QUESTION        reduce using rule 199 (PrimaryNoNewArray -> Literal .)
    OR              reduce using rule 199 (PrimaryNoNewArray -> Literal .)
    RPAREN          reduce using rule 199 (PrimaryNoNewArray -> Literal .)
    SEMI            reduce using rule 199 (PrimaryNoNewArray -> Literal .)
    COMMA           reduce using rule 199 (PrimaryNoNewArray -> Literal .)
    RBRACK          reduce using rule 199 (PrimaryNoNewArray -> Literal .)
    COLON           reduce using rule 199 (PrimaryNoNewArray -> Literal .)


state 162

    (200) PrimaryNoNewArray -> THIS .

    LBRACK          reduce using rule 200 (PrimaryNoNewArray -> THIS .)
    DOT             reduce using rule 200 (PrimaryNoNewArray -> THIS .)
    INC             reduce using rule 200 (PrimaryNoNewArray -> THIS .)
    DEC             reduce using rule 200 (PrimaryNoNewArray -> THIS .)
    MUL             reduce using rule 200 (PrimaryNoNewArray -> THIS .)
    DIV             reduce using rule 200 (PrimaryNoNewArray -> THIS .)
    MOD             reduce using rule 200 (PrimaryNoNewArray -> THIS .)
    ADD             reduce using rule 200 (PrimaryNoNewArray -> THIS .)
    SUB             reduce using rule 200 (PrimaryNoNewArray -> THIS .)
    LSHIFT          reduce using rule 200 (PrimaryNoNewArray -> THIS .)
    RSHIFT          reduce using rule 200 (PrimaryNoNewArray -> THIS .)
    URSHIFT         reduce using rule 200 (PrimaryNoNewArray -> THIS .)
    LT              reduce using rule 200 (PrimaryNoNewArray -> THIS .)
    GT              reduce using rule 200 (PrimaryNoNewArray -> THIS .)
    LE              reduce using rule 200 (PrimaryNoNewArray -> THIS .)
    GE              reduce using rule 200 (PrimaryNoNewArray -> THIS .)
    EQUAL           reduce using rule 200 (PrimaryNoNewArray -> THIS .)
    NOTEQUAL        reduce using rule 200 (PrimaryNoNewArray -> THIS .)
    BITAND          reduce using rule 200 (PrimaryNoNewArray -> THIS .)
    CARET           reduce using rule 200 (PrimaryNoNewArray -> THIS .)
    BITOR           reduce using rule 200 (PrimaryNoNewArray -> THIS .)
    AND             reduce using rule 200 (PrimaryNoNewArray -> THIS .)
    QUESTION        reduce using rule 200 (PrimaryNoNewArray -> THIS .)
    OR              reduce using rule 200 (PrimaryNoNewArray -> THIS .)
    RPAREN          reduce using rule 200 (PrimaryNoNewArray -> THIS .)
    SEMI            reduce using rule 200 (PrimaryNoNewArray -> THIS .)
    COMMA           reduce using rule 200 (PrimaryNoNewArray -> THIS .)
    RBRACK          reduce using rule 200 (PrimaryNoNewArray -> THIS .)
    COLON           reduce using rule 200 (PrimaryNoNewArray -> THIS .)


state 163

    (2) Literal -> DECIMAL_LITERAL .

    LBRACK          reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    DOT             reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    INC             reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    DEC             reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    MUL             reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    DIV             reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    MOD             reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    ADD             reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    SUB             reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    LSHIFT          reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    RSHIFT          reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    URSHIFT         reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    LT              reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    GT              reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    LE              reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    GE              reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    EQUAL           reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    NOTEQUAL        reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    BITAND          reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    CARET           reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    BITOR           reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    AND             reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    QUESTION        reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    OR              reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    RPAREN          reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    SEMI            reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    COMMA           reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    RBRACK          reduce using rule 2 (Literal -> DECIMAL_LITERAL .)
    COLON           reduce using rule 2 (Literal -> DECIMAL_LITERAL .)


state 164

    (3) Literal -> HEX_LITERAL .

    LBRACK          reduce using rule 3 (Literal -> HEX_LITERAL .)
    DOT             reduce using rule 3 (Literal -> HEX_LITERAL .)
    INC             reduce using rule 3 (Literal -> HEX_LITERAL .)
    DEC             reduce using rule 3 (Literal -> HEX_LITERAL .)
    MUL             reduce using rule 3 (Literal -> HEX_LITERAL .)
    DIV             reduce using rule 3 (Literal -> HEX_LITERAL .)
    MOD             reduce using rule 3 (Literal -> HEX_LITERAL .)
    ADD             reduce using rule 3 (Literal -> HEX_LITERAL .)
    SUB             reduce using rule 3 (Literal -> HEX_LITERAL .)
    LSHIFT          reduce using rule 3 (Literal -> HEX_LITERAL .)
    RSHIFT          reduce using rule 3 (Literal -> HEX_LITERAL .)
    URSHIFT         reduce using rule 3 (Literal -> HEX_LITERAL .)
    LT              reduce using rule 3 (Literal -> HEX_LITERAL .)
    GT              reduce using rule 3 (Literal -> HEX_LITERAL .)
    LE              reduce using rule 3 (Literal -> HEX_LITERAL .)
    GE              reduce using rule 3 (Literal -> HEX_LITERAL .)
    EQUAL           reduce using rule 3 (Literal -> HEX_LITERAL .)
    NOTEQUAL        reduce using rule 3 (Literal -> HEX_LITERAL .)
    BITAND          reduce using rule 3 (Literal -> HEX_LITERAL .)
    CARET           reduce using rule 3 (Literal -> HEX_LITERAL .)
    BITOR           reduce using rule 3 (Literal -> HEX_LITERAL .)
    AND             reduce using rule 3 (Literal -> HEX_LITERAL .)
    QUESTION        reduce using rule 3 (Literal -> HEX_LITERAL .)
    OR              reduce using rule 3 (Literal -> HEX_LITERAL .)
    RPAREN          reduce using rule 3 (Literal -> HEX_LITERAL .)
    SEMI            reduce using rule 3 (Literal -> HEX_LITERAL .)
    COMMA           reduce using rule 3 (Literal -> HEX_LITERAL .)
    RBRACK          reduce using rule 3 (Literal -> HEX_LITERAL .)
    COLON           reduce using rule 3 (Literal -> HEX_LITERAL .)


state 165

    (4) Literal -> BINARY_LITERAL .

    LBRACK          reduce using rule 4 (Literal -> BINARY_LITERAL .)
    DOT             reduce using rule 4 (Literal -> BINARY_LITERAL .)
    INC             reduce using rule 4 (Literal -> BINARY_LITERAL .)
    DEC             reduce using rule 4 (Literal -> BINARY_LITERAL .)
    MUL             reduce using rule 4 (Literal -> BINARY_LITERAL .)
    DIV             reduce using rule 4 (Literal -> BINARY_LITERAL .)
    MOD             reduce using rule 4 (Literal -> BINARY_LITERAL .)
    ADD             reduce using rule 4 (Literal -> BINARY_LITERAL .)
    SUB             reduce using rule 4 (Literal -> BINARY_LITERAL .)
    LSHIFT          reduce using rule 4 (Literal -> BINARY_LITERAL .)
    RSHIFT          reduce using rule 4 (Literal -> BINARY_LITERAL .)
    URSHIFT         reduce using rule 4 (Literal -> BINARY_LITERAL .)
    LT              reduce using rule 4 (Literal -> BINARY_LITERAL .)
    GT              reduce using rule 4 (Literal -> BINARY_LITERAL .)
    LE              reduce using rule 4 (Literal -> BINARY_LITERAL .)
    GE              reduce using rule 4 (Literal -> BINARY_LITERAL .)
    EQUAL           reduce using rule 4 (Literal -> BINARY_LITERAL .)
    NOTEQUAL        reduce using rule 4 (Literal -> BINARY_LITERAL .)
    BITAND          reduce using rule 4 (Literal -> BINARY_LITERAL .)
    CARET           reduce using rule 4 (Literal -> BINARY_LITERAL .)
    BITOR           reduce using rule 4 (Literal -> BINARY_LITERAL .)
    AND             reduce using rule 4 (Literal -> BINARY_LITERAL .)
    QUESTION        reduce using rule 4 (Literal -> BINARY_LITERAL .)
    OR              reduce using rule 4 (Literal -> BINARY_LITERAL .)
    RPAREN          reduce using rule 4 (Literal -> BINARY_LITERAL .)
    SEMI            reduce using rule 4 (Literal -> BINARY_LITERAL .)
    COMMA           reduce using rule 4 (Literal -> BINARY_LITERAL .)
    RBRACK          reduce using rule 4 (Literal -> BINARY_LITERAL .)
    COLON           reduce using rule 4 (Literal -> BINARY_LITERAL .)


state 166

    (5) Literal -> FLOAT_LITERAL .

    LBRACK          reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    DOT             reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    INC             reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    DEC             reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    MUL             reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    DIV             reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    MOD             reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    ADD             reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    SUB             reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    LSHIFT          reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    RSHIFT          reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    URSHIFT         reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    LT              reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    GT              reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    LE              reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    GE              reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    EQUAL           reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    NOTEQUAL        reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    BITAND          reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    CARET           reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    BITOR           reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    AND             reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    QUESTION        reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    OR              reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    RPAREN          reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    SEMI            reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    COMMA           reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    RBRACK          reduce using rule 5 (Literal -> FLOAT_LITERAL .)
    COLON           reduce using rule 5 (Literal -> FLOAT_LITERAL .)


state 167

    (6) Literal -> BOOL_LITERAL .

    LBRACK          reduce using rule 6 (Literal -> BOOL_LITERAL .)
    DOT             reduce using rule 6 (Literal -> BOOL_LITERAL .)
    INC             reduce using rule 6 (Literal -> BOOL_LITERAL .)
    DEC             reduce using rule 6 (Literal -> BOOL_LITERAL .)
    MUL             reduce using rule 6 (Literal -> BOOL_LITERAL .)
    DIV             reduce using rule 6 (Literal -> BOOL_LITERAL .)
    MOD             reduce using rule 6 (Literal -> BOOL_LITERAL .)
    ADD             reduce using rule 6 (Literal -> BOOL_LITERAL .)
    SUB             reduce using rule 6 (Literal -> BOOL_LITERAL .)
    LSHIFT          reduce using rule 6 (Literal -> BOOL_LITERAL .)
    RSHIFT          reduce using rule 6 (Literal -> BOOL_LITERAL .)
    URSHIFT         reduce using rule 6 (Literal -> BOOL_LITERAL .)
    LT              reduce using rule 6 (Literal -> BOOL_LITERAL .)
    GT              reduce using rule 6 (Literal -> BOOL_LITERAL .)
    LE              reduce using rule 6 (Literal -> BOOL_LITERAL .)
    GE              reduce using rule 6 (Literal -> BOOL_LITERAL .)
    EQUAL           reduce using rule 6 (Literal -> BOOL_LITERAL .)
    NOTEQUAL        reduce using rule 6 (Literal -> BOOL_LITERAL .)
    BITAND          reduce using rule 6 (Literal -> BOOL_LITERAL .)
    CARET           reduce using rule 6 (Literal -> BOOL_LITERAL .)
    BITOR           reduce using rule 6 (Literal -> BOOL_LITERAL .)
    AND             reduce using rule 6 (Literal -> BOOL_LITERAL .)
    QUESTION        reduce using rule 6 (Literal -> BOOL_LITERAL .)
    OR              reduce using rule 6 (Literal -> BOOL_LITERAL .)
    RPAREN          reduce using rule 6 (Literal -> BOOL_LITERAL .)
    SEMI            reduce using rule 6 (Literal -> BOOL_LITERAL .)
    COMMA           reduce using rule 6 (Literal -> BOOL_LITERAL .)
    RBRACK          reduce using rule 6 (Literal -> BOOL_LITERAL .)
    COLON           reduce using rule 6 (Literal -> BOOL_LITERAL .)


state 168

    (7) Literal -> CHAR_LITERAL .

    LBRACK          reduce using rule 7 (Literal -> CHAR_LITERAL .)
    DOT             reduce using rule 7 (Literal -> CHAR_LITERAL .)
    INC             reduce using rule 7 (Literal -> CHAR_LITERAL .)
    DEC             reduce using rule 7 (Literal -> CHAR_LITERAL .)
    MUL             reduce using rule 7 (Literal -> CHAR_LITERAL .)
    DIV             reduce using rule 7 (Literal -> CHAR_LITERAL .)
    MOD             reduce using rule 7 (Literal -> CHAR_LITERAL .)
    ADD             reduce using rule 7 (Literal -> CHAR_LITERAL .)
    SUB             reduce using rule 7 (Literal -> CHAR_LITERAL .)
    LSHIFT          reduce using rule 7 (Literal -> CHAR_LITERAL .)
    RSHIFT          reduce using rule 7 (Literal -> CHAR_LITERAL .)
    URSHIFT         reduce using rule 7 (Literal -> CHAR_LITERAL .)
    LT              reduce using rule 7 (Literal -> CHAR_LITERAL .)
    GT              reduce using rule 7 (Literal -> CHAR_LITERAL .)
    LE              reduce using rule 7 (Literal -> CHAR_LITERAL .)
    GE              reduce using rule 7 (Literal -> CHAR_LITERAL .)
    EQUAL           reduce using rule 7 (Literal -> CHAR_LITERAL .)
    NOTEQUAL        reduce using rule 7 (Literal -> CHAR_LITERAL .)
    BITAND          reduce using rule 7 (Literal -> CHAR_LITERAL .)
    CARET           reduce using rule 7 (Literal -> CHAR_LITERAL .)
    BITOR           reduce using rule 7 (Literal -> CHAR_LITERAL .)
    AND             reduce using rule 7 (Literal -> CHAR_LITERAL .)
    QUESTION        reduce using rule 7 (Literal -> CHAR_LITERAL .)
    OR              reduce using rule 7 (Literal -> CHAR_LITERAL .)
    RPAREN          reduce using rule 7 (Literal -> CHAR_LITERAL .)
    SEMI            reduce using rule 7 (Literal -> CHAR_LITERAL .)
    COMMA           reduce using rule 7 (Literal -> CHAR_LITERAL .)
    RBRACK          reduce using rule 7 (Literal -> CHAR_LITERAL .)
    COLON           reduce using rule 7 (Literal -> CHAR_LITERAL .)


state 169

    (8) Literal -> STRING_LITERAL .

    LBRACK          reduce using rule 8 (Literal -> STRING_LITERAL .)
    DOT             reduce using rule 8 (Literal -> STRING_LITERAL .)
    INC             reduce using rule 8 (Literal -> STRING_LITERAL .)
    DEC             reduce using rule 8 (Literal -> STRING_LITERAL .)
    MUL             reduce using rule 8 (Literal -> STRING_LITERAL .)
    DIV             reduce using rule 8 (Literal -> STRING_LITERAL .)
    MOD             reduce using rule 8 (Literal -> STRING_LITERAL .)
    ADD             reduce using rule 8 (Literal -> STRING_LITERAL .)
    SUB             reduce using rule 8 (Literal -> STRING_LITERAL .)
    LSHIFT          reduce using rule 8 (Literal -> STRING_LITERAL .)
    RSHIFT          reduce using rule 8 (Literal -> STRING_LITERAL .)
    URSHIFT         reduce using rule 8 (Literal -> STRING_LITERAL .)
    LT              reduce using rule 8 (Literal -> STRING_LITERAL .)
    GT              reduce using rule 8 (Literal -> STRING_LITERAL .)
    LE              reduce using rule 8 (Literal -> STRING_LITERAL .)
    GE              reduce using rule 8 (Literal -> STRING_LITERAL .)
    EQUAL           reduce using rule 8 (Literal -> STRING_LITERAL .)
    NOTEQUAL        reduce using rule 8 (Literal -> STRING_LITERAL .)
    BITAND          reduce using rule 8 (Literal -> STRING_LITERAL .)
    CARET           reduce using rule 8 (Literal -> STRING_LITERAL .)
    BITOR           reduce using rule 8 (Literal -> STRING_LITERAL .)
    AND             reduce using rule 8 (Literal -> STRING_LITERAL .)
    QUESTION        reduce using rule 8 (Literal -> STRING_LITERAL .)
    OR              reduce using rule 8 (Literal -> STRING_LITERAL .)
    RPAREN          reduce using rule 8 (Literal -> STRING_LITERAL .)
    SEMI            reduce using rule 8 (Literal -> STRING_LITERAL .)
    COMMA           reduce using rule 8 (Literal -> STRING_LITERAL .)
    RBRACK          reduce using rule 8 (Literal -> STRING_LITERAL .)
    COLON           reduce using rule 8 (Literal -> STRING_LITERAL .)


state 170

    (9) Literal -> NULL .

    LBRACK          reduce using rule 9 (Literal -> NULL .)
    DOT             reduce using rule 9 (Literal -> NULL .)
    INC             reduce using rule 9 (Literal -> NULL .)
    DEC             reduce using rule 9 (Literal -> NULL .)
    MUL             reduce using rule 9 (Literal -> NULL .)
    DIV             reduce using rule 9 (Literal -> NULL .)
    MOD             reduce using rule 9 (Literal -> NULL .)
    ADD             reduce using rule 9 (Literal -> NULL .)
    SUB             reduce using rule 9 (Literal -> NULL .)
    LSHIFT          reduce using rule 9 (Literal -> NULL .)
    RSHIFT          reduce using rule 9 (Literal -> NULL .)
    URSHIFT         reduce using rule 9 (Literal -> NULL .)
    LT              reduce using rule 9 (Literal -> NULL .)
    GT              reduce using rule 9 (Literal -> NULL .)
    LE              reduce using rule 9 (Literal -> NULL .)
    GE              reduce using rule 9 (Literal -> NULL .)
    EQUAL           reduce using rule 9 (Literal -> NULL .)
    NOTEQUAL        reduce using rule 9 (Literal -> NULL .)
    BITAND          reduce using rule 9 (Literal -> NULL .)
    CARET           reduce using rule 9 (Literal -> NULL .)
    BITOR           reduce using rule 9 (Literal -> NULL .)
    AND             reduce using rule 9 (Literal -> NULL .)
    QUESTION        reduce using rule 9 (Literal -> NULL .)
    OR              reduce using rule 9 (Literal -> NULL .)
    RPAREN          reduce using rule 9 (Literal -> NULL .)
    SEMI            reduce using rule 9 (Literal -> NULL .)
    COMMA           reduce using rule 9 (Literal -> NULL .)
    RBRACK          reduce using rule 9 (Literal -> NULL .)
    COLON           reduce using rule 9 (Literal -> NULL .)


state 171

    (91) StaticInitializer -> begin_scope STATIC Block . end_scope
    (303) end_scope -> .

    RBRACE          reduce using rule 303 (end_scope -> .)
    VOID            reduce using rule 303 (end_scope -> .)
    STATIC          reduce using rule 303 (end_scope -> .)
    FINAL           reduce using rule 303 (end_scope -> .)
    PRIVATE         reduce using rule 303 (end_scope -> .)
    PROTECTED       reduce using rule 303 (end_scope -> .)
    PUBLIC          reduce using rule 303 (end_scope -> .)
    IDENTIFIER      reduce using rule 303 (end_scope -> .)
    BOOLEAN         reduce using rule 303 (end_scope -> .)
    BYTE            reduce using rule 303 (end_scope -> .)
    SHORT           reduce using rule 303 (end_scope -> .)
    INT             reduce using rule 303 (end_scope -> .)
    LONG            reduce using rule 303 (end_scope -> .)
    CHAR            reduce using rule 303 (end_scope -> .)
    FLOAT           reduce using rule 303 (end_scope -> .)
    DOUBLE          reduce using rule 303 (end_scope -> .)

    end_scope                      shift and go to state 266

state 172

    (71) FieldDeclaration -> Type VariableDeclarators SEMI .

    RBRACE          reduce using rule 71 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    VOID            reduce using rule 71 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    STATIC          reduce using rule 71 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    FINAL           reduce using rule 71 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    PRIVATE         reduce using rule 71 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    PROTECTED       reduce using rule 71 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    PUBLIC          reduce using rule 71 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    IDENTIFIER      reduce using rule 71 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    BOOLEAN         reduce using rule 71 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    BYTE            reduce using rule 71 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    SHORT           reduce using rule 71 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    INT             reduce using rule 71 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    LONG            reduce using rule 71 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    CHAR            reduce using rule 71 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    FLOAT           reduce using rule 71 (FieldDeclaration -> Type VariableDeclarators SEMI .)
    DOUBLE          reduce using rule 71 (FieldDeclaration -> Type VariableDeclarators SEMI .)


state 173

    (73) VariableDeclarators -> VariableDeclarators COMMA . VariableDeclarator
    (74) VariableDeclarator -> . VariableDeclaratorId
    (75) VariableDeclarator -> . VariableDeclaratorId ASSIGN VariableInitializer
    (76) VariableDeclaratorId -> . IDENTIFIER
    (77) VariableDeclaratorId -> . IDENTIFIER Dims

    IDENTIFIER      shift and go to state 189

    VariableDeclarator             shift and go to state 267
    VariableDeclaratorId           shift and go to state 91

state 174

    (84) MethodDeclarator -> IDENTIFIER LPAREN . RPAREN
    (85) MethodDeclarator -> IDENTIFIER LPAREN . FormalParameterList RPAREN
    (86) FormalParameterList -> . FormalParameter
    (87) FormalParameterList -> . FormalParameterList COMMA FormalParameter
    (88) FormalParameter -> . Type VariableDeclaratorId
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER

    RPAREN          shift and go to state 268
    BOOLEAN         shift and go to state 65
    BYTE            shift and go to state 71
    SHORT           shift and go to state 72
    INT             shift and go to state 73
    LONG            shift and go to state 74
    CHAR            shift and go to state 75
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 77
    IDENTIFIER      shift and go to state 63

    FormalParameterList            shift and go to state 269
    FormalParameter                shift and go to state 270
    Type                           shift and go to state 271
    PrimitiveType                  shift and go to state 60
    ReferenceType                  shift and go to state 61
    NumericType                    shift and go to state 64
    ArrayType                      shift and go to state 66
    ClassType                      shift and go to state 67
    IntegralType                   shift and go to state 68
    FloatingPointType              shift and go to state 69
    Name                           shift and go to state 70
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78

state 175

    (77) VariableDeclaratorId -> IDENTIFIER Dims .
    (218) Dims -> Dims . LBRACK RBRACK

    ASSIGN          reduce using rule 77 (VariableDeclaratorId -> IDENTIFIER Dims .)
    SEMI            reduce using rule 77 (VariableDeclaratorId -> IDENTIFIER Dims .)
    COMMA           reduce using rule 77 (VariableDeclaratorId -> IDENTIFIER Dims .)
    RPAREN          reduce using rule 77 (VariableDeclaratorId -> IDENTIFIER Dims .)
    LBRACK          shift and go to state 181


state 176

    (75) VariableDeclarator -> VariableDeclaratorId ASSIGN . VariableInitializer
    (78) VariableInitializer -> . Expression
    (298) Expression -> . AssignmentExpression
    (280) AssignmentExpression -> . ConditionalExpression
    (281) AssignmentExpression -> . Assignment
    (278) ConditionalExpression -> . ConditionalOrExpression
    (279) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (275) ConditionalOrExpression -> . ConditionalAndExpression
    (276) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (273) ConditionalAndExpression -> . InclusiveOrExpression
    (274) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC

    SUPER           shift and go to state 160
    IDENTIFIER      shift and go to state 63
    THIS            shift and go to state 162
    LPAREN          shift and go to state 192
    NEW             shift and go to state 207
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221

    VariableInitializer            shift and go to state 272
    Expression                     shift and go to state 273
    AssignmentExpression           shift and go to state 194
    ConditionalExpression          shift and go to state 195
    Assignment                     shift and go to state 196
    ConditionalOrExpression        shift and go to state 197
    LeftHandSide                   shift and go to state 149
    ConditionalAndExpression       shift and go to state 198
    Name                           shift and go to state 199
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    InclusiveOrExpression          shift and go to state 200
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Primary                        shift and go to state 201
    PrimaryNoNewArray              shift and go to state 202
    ExclusiveOrExpression          shift and go to state 203
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    MethodInvocation               shift and go to state 205
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224

state 177

    (103) Block -> LBRACE RBRACE .

    RBRACE          reduce using rule 103 (Block -> LBRACE RBRACE .)
    VOID            reduce using rule 103 (Block -> LBRACE RBRACE .)
    STATIC          reduce using rule 103 (Block -> LBRACE RBRACE .)
    FINAL           reduce using rule 103 (Block -> LBRACE RBRACE .)
    PRIVATE         reduce using rule 103 (Block -> LBRACE RBRACE .)
    PROTECTED       reduce using rule 103 (Block -> LBRACE RBRACE .)
    PUBLIC          reduce using rule 103 (Block -> LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 103 (Block -> LBRACE RBRACE .)
    BOOLEAN         reduce using rule 103 (Block -> LBRACE RBRACE .)
    BYTE            reduce using rule 103 (Block -> LBRACE RBRACE .)
    SHORT           reduce using rule 103 (Block -> LBRACE RBRACE .)
    INT             reduce using rule 103 (Block -> LBRACE RBRACE .)
    LONG            reduce using rule 103 (Block -> LBRACE RBRACE .)
    CHAR            reduce using rule 103 (Block -> LBRACE RBRACE .)
    FLOAT           reduce using rule 103 (Block -> LBRACE RBRACE .)
    DOUBLE          reduce using rule 103 (Block -> LBRACE RBRACE .)
    IF              reduce using rule 103 (Block -> LBRACE RBRACE .)
    WHILE           reduce using rule 103 (Block -> LBRACE RBRACE .)
    FOR             reduce using rule 103 (Block -> LBRACE RBRACE .)
    LBRACE          reduce using rule 103 (Block -> LBRACE RBRACE .)
    SEMI            reduce using rule 103 (Block -> LBRACE RBRACE .)
    SWITCH          reduce using rule 103 (Block -> LBRACE RBRACE .)
    DO              reduce using rule 103 (Block -> LBRACE RBRACE .)
    BREAK           reduce using rule 103 (Block -> LBRACE RBRACE .)
    CONTINUE        reduce using rule 103 (Block -> LBRACE RBRACE .)
    RETURN          reduce using rule 103 (Block -> LBRACE RBRACE .)
    INC             reduce using rule 103 (Block -> LBRACE RBRACE .)
    DEC             reduce using rule 103 (Block -> LBRACE RBRACE .)
    NEW             reduce using rule 103 (Block -> LBRACE RBRACE .)
    SUPER           reduce using rule 103 (Block -> LBRACE RBRACE .)
    THIS            reduce using rule 103 (Block -> LBRACE RBRACE .)
    LPAREN          reduce using rule 103 (Block -> LBRACE RBRACE .)
    DECIMAL_LITERAL reduce using rule 103 (Block -> LBRACE RBRACE .)
    HEX_LITERAL     reduce using rule 103 (Block -> LBRACE RBRACE .)
    BINARY_LITERAL  reduce using rule 103 (Block -> LBRACE RBRACE .)
    FLOAT_LITERAL   reduce using rule 103 (Block -> LBRACE RBRACE .)
    BOOL_LITERAL    reduce using rule 103 (Block -> LBRACE RBRACE .)
    CHAR_LITERAL    reduce using rule 103 (Block -> LBRACE RBRACE .)
    STRING_LITERAL  reduce using rule 103 (Block -> LBRACE RBRACE .)
    NULL            reduce using rule 103 (Block -> LBRACE RBRACE .)
    CASE            reduce using rule 103 (Block -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 103 (Block -> LBRACE RBRACE .)
    ELSE            reduce using rule 103 (Block -> LBRACE RBRACE .)


state 178

    (104) Block -> LBRACE BlockStatements . RBRACE
    (106) BlockStatements -> BlockStatements . BlockStatement
    (107) BlockStatement -> . LocalVariableDeclarationStatement
    (108) BlockStatement -> . Statement
    (109) LocalVariableDeclarationStatement -> . LocalVariableDeclaration SEMI
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (110) LocalVariableDeclaration -> . Type VariableDeclarators
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RBRACE          shift and go to state 274
    IDENTIFIER      shift and go to state 130
    IF              shift and go to state 131
    WHILE           shift and go to state 133
    FOR             shift and go to state 134
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    BOOLEAN         shift and go to state 65
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    BYTE            shift and go to state 71
    SHORT           shift and go to state 72
    INT             shift and go to state 73
    LONG            shift and go to state 74
    CHAR            shift and go to state 75
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 77
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    BlockStatement                 shift and go to state 186
    LocalVariableDeclarationStatement shift and go to state 111
    Statement                      shift and go to state 112
    LocalVariableDeclaration       shift and go to state 113
    StatementWithoutTrailingSubstatement shift and go to state 115
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    Type                           shift and go to state 121
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    PrimitiveType                  shift and go to state 60
    ReferenceType                  shift and go to state 61
    StatementExpression            shift and go to state 135
    NumericType                    shift and go to state 64
    ArrayType                      shift and go to state 66
    ClassType                      shift and go to state 67
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    IntegralType                   shift and go to state 68
    FloatingPointType              shift and go to state 69
    Name                           shift and go to state 148
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161

state 179

    (94) ConstructorDeclarator -> SimpleName LPAREN decl_mark . FormalParameterList RPAREN
    (86) FormalParameterList -> . FormalParameter
    (87) FormalParameterList -> . FormalParameterList COMMA FormalParameter
    (88) FormalParameter -> . Type VariableDeclaratorId
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER

    BOOLEAN         shift and go to state 65
    BYTE            shift and go to state 71
    SHORT           shift and go to state 72
    INT             shift and go to state 73
    LONG            shift and go to state 74
    CHAR            shift and go to state 75
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 77
    IDENTIFIER      shift and go to state 63

    SimpleName                     shift and go to state 155
    FormalParameterList            shift and go to state 275
    FormalParameter                shift and go to state 270
    Type                           shift and go to state 271
    PrimitiveType                  shift and go to state 60
    ReferenceType                  shift and go to state 61
    NumericType                    shift and go to state 64
    ArrayType                      shift and go to state 66
    ClassType                      shift and go to state 67
    IntegralType                   shift and go to state 68
    FloatingPointType              shift and go to state 69
    Name                           shift and go to state 70
    QualifiedName                  shift and go to state 78

state 180

    (95) ConstructorDeclarator -> SimpleName decl_mark LPAREN . RPAREN

    RPAREN          shift and go to state 276


state 181

    (218) Dims -> Dims LBRACK . RBRACK

    RBRACK          shift and go to state 277


state 182

    (217) Dims -> LBRACK RBRACK .

    LBRACK          reduce using rule 217 (Dims -> LBRACK RBRACK .)
    IDENTIFIER      reduce using rule 217 (Dims -> LBRACK RBRACK .)
    ASSIGN          reduce using rule 217 (Dims -> LBRACK RBRACK .)
    SEMI            reduce using rule 217 (Dims -> LBRACK RBRACK .)
    COMMA           reduce using rule 217 (Dims -> LBRACK RBRACK .)
    RPAREN          reduce using rule 217 (Dims -> LBRACK RBRACK .)
    DOT             reduce using rule 217 (Dims -> LBRACK RBRACK .)
    INC             reduce using rule 217 (Dims -> LBRACK RBRACK .)
    DEC             reduce using rule 217 (Dims -> LBRACK RBRACK .)
    MUL             reduce using rule 217 (Dims -> LBRACK RBRACK .)
    DIV             reduce using rule 217 (Dims -> LBRACK RBRACK .)
    MOD             reduce using rule 217 (Dims -> LBRACK RBRACK .)
    ADD             reduce using rule 217 (Dims -> LBRACK RBRACK .)
    SUB             reduce using rule 217 (Dims -> LBRACK RBRACK .)
    LSHIFT          reduce using rule 217 (Dims -> LBRACK RBRACK .)
    RSHIFT          reduce using rule 217 (Dims -> LBRACK RBRACK .)
    URSHIFT         reduce using rule 217 (Dims -> LBRACK RBRACK .)
    LT              reduce using rule 217 (Dims -> LBRACK RBRACK .)
    GT              reduce using rule 217 (Dims -> LBRACK RBRACK .)
    LE              reduce using rule 217 (Dims -> LBRACK RBRACK .)
    GE              reduce using rule 217 (Dims -> LBRACK RBRACK .)
    EQUAL           reduce using rule 217 (Dims -> LBRACK RBRACK .)
    NOTEQUAL        reduce using rule 217 (Dims -> LBRACK RBRACK .)
    BITAND          reduce using rule 217 (Dims -> LBRACK RBRACK .)
    CARET           reduce using rule 217 (Dims -> LBRACK RBRACK .)
    BITOR           reduce using rule 217 (Dims -> LBRACK RBRACK .)
    AND             reduce using rule 217 (Dims -> LBRACK RBRACK .)
    QUESTION        reduce using rule 217 (Dims -> LBRACK RBRACK .)
    OR              reduce using rule 217 (Dims -> LBRACK RBRACK .)
    RBRACK          reduce using rule 217 (Dims -> LBRACK RBRACK .)
    COLON           reduce using rule 217 (Dims -> LBRACK RBRACK .)


state 183

    (31) QualifiedName -> Name DOT IDENTIFIER .

    DOT             reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    LBRACK          reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    LPAREN          reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    ASSIGN          reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    AND_ASSIGN      reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    OR_ASSIGN       reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    URSHIFT_ASSIGN  reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    INC             reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    DEC             reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    MUL             reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    DIV             reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    MOD             reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    ADD             reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    SUB             reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    LSHIFT          reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    RSHIFT          reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    URSHIFT         reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    LT              reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    GT              reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    LE              reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    GE              reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    EQUAL           reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    NOTEQUAL        reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    BITAND          reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    CARET           reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    BITOR           reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    AND             reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    QUESTION        reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    OR              reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    RPAREN          reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    SEMI            reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    COMMA           reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    RBRACK          reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)
    COLON           reduce using rule 31 (QualifiedName -> Name DOT IDENTIFIER .)


state 184

    (70) FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .

    RBRACE          reduce using rule 70 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    VOID            reduce using rule 70 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    STATIC          reduce using rule 70 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    FINAL           reduce using rule 70 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    PRIVATE         reduce using rule 70 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    PROTECTED       reduce using rule 70 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    PUBLIC          reduce using rule 70 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    IDENTIFIER      reduce using rule 70 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    BOOLEAN         reduce using rule 70 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    BYTE            reduce using rule 70 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    SHORT           reduce using rule 70 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    INT             reduce using rule 70 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    LONG            reduce using rule 70 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    CHAR            reduce using rule 70 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    FLOAT           reduce using rule 70 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)
    DOUBLE          reduce using rule 70 (FieldDeclaration -> Modifiers Type VariableDeclarators SEMI .)


state 185

    (97) ConstructorBody -> LBRACE BlockStatements RBRACE .

    RBRACE          reduce using rule 97 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    VOID            reduce using rule 97 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    STATIC          reduce using rule 97 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    FINAL           reduce using rule 97 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    PRIVATE         reduce using rule 97 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    PROTECTED       reduce using rule 97 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    PUBLIC          reduce using rule 97 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    IDENTIFIER      reduce using rule 97 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    BOOLEAN         reduce using rule 97 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    BYTE            reduce using rule 97 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    SHORT           reduce using rule 97 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    INT             reduce using rule 97 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    LONG            reduce using rule 97 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    CHAR            reduce using rule 97 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    FLOAT           reduce using rule 97 (ConstructorBody -> LBRACE BlockStatements RBRACE .)
    DOUBLE          reduce using rule 97 (ConstructorBody -> LBRACE BlockStatements RBRACE .)


state 186

    (106) BlockStatements -> BlockStatements BlockStatement .

    RBRACE          reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    IDENTIFIER      reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    IF              reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    WHILE           reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    FOR             reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    LBRACE          reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    SEMI            reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    SWITCH          reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    DO              reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    BREAK           reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    CONTINUE        reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    RETURN          reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    BOOLEAN         reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    INC             reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    DEC             reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    NEW             reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    BYTE            reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    SHORT           reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    INT             reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    LONG            reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    CHAR            reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    FLOAT           reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    DOUBLE          reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    SUPER           reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    THIS            reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    LPAREN          reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    DECIMAL_LITERAL reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    HEX_LITERAL     reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    BINARY_LITERAL  reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    FLOAT_LITERAL   reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    BOOL_LITERAL    reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    CHAR_LITERAL    reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    STRING_LITERAL  reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    NULL            reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    CASE            reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)
    DEFAULT         reduce using rule 106 (BlockStatements -> BlockStatements BlockStatement .)


state 187

    (109) LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .

    RBRACE          reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    IDENTIFIER      reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    IF              reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    WHILE           reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    FOR             reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    LBRACE          reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    SEMI            reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    SWITCH          reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    DO              reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    BREAK           reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    CONTINUE        reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    RETURN          reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    BOOLEAN         reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    INC             reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    DEC             reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    NEW             reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    BYTE            reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    SHORT           reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    INT             reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    LONG            reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    CHAR            reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    FLOAT           reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    DOUBLE          reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    SUPER           reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    THIS            reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    LPAREN          reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    DECIMAL_LITERAL reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    HEX_LITERAL     reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    BINARY_LITERAL  reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    FLOAT_LITERAL   reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    BOOL_LITERAL    reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    CHAR_LITERAL    reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    STRING_LITERAL  reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    NULL            reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    CASE            reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)
    DEFAULT         reduce using rule 109 (LocalVariableDeclarationStatement -> LocalVariableDeclaration SEMI .)


state 188

    (110) LocalVariableDeclaration -> Type VariableDeclarators .
    (73) VariableDeclarators -> VariableDeclarators . COMMA VariableDeclarator

    SEMI            reduce using rule 110 (LocalVariableDeclaration -> Type VariableDeclarators .)
    COMMA           shift and go to state 173


state 189

    (76) VariableDeclaratorId -> IDENTIFIER .
    (77) VariableDeclaratorId -> IDENTIFIER . Dims
    (217) Dims -> . LBRACK RBRACK
    (218) Dims -> . Dims LBRACK RBRACK

    ASSIGN          reduce using rule 76 (VariableDeclaratorId -> IDENTIFIER .)
    COMMA           reduce using rule 76 (VariableDeclaratorId -> IDENTIFIER .)
    SEMI            reduce using rule 76 (VariableDeclaratorId -> IDENTIFIER .)
    RPAREN          reduce using rule 76 (VariableDeclaratorId -> IDENTIFIER .)
    LBRACK          shift and go to state 99

    Dims                           shift and go to state 175

state 190

    (131) LabeledStatement -> IDENTIFIER COLON . Statement
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 130
    IF              shift and go to state 131
    WHILE           shift and go to state 133
    FOR             shift and go to state 134
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    Statement                      shift and go to state 278
    StatementWithoutTrailingSubstatement shift and go to state 115
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    StatementExpression            shift and go to state 135
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 191

    (141) IfThenStatement -> IF begin_scope . LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> IF begin_scope . LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2

    LPAREN          shift and go to state 280


state 192

    (201) PrimaryNoNewArray -> LPAREN . Expression RPAREN
    (244) CastExpression -> LPAREN . PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> LPAREN . PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> LPAREN . Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> LPAREN . Name Dims RPAREN UnaryExpressionNotAddSub
    (298) Expression -> . AssignmentExpression
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (280) AssignmentExpression -> . ConditionalExpression
    (281) AssignmentExpression -> . Assignment
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (278) ConditionalExpression -> . ConditionalOrExpression
    (279) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (275) ConditionalOrExpression -> . ConditionalAndExpression
    (276) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (273) ConditionalAndExpression -> . InclusiveOrExpression
    (274) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC

    BOOLEAN         shift and go to state 65
    IDENTIFIER      shift and go to state 63
    BYTE            shift and go to state 71
    SHORT           shift and go to state 72
    INT             shift and go to state 73
    LONG            shift and go to state 74
    CHAR            shift and go to state 75
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 77
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 192
    NEW             shift and go to state 207
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221

    Expression                     shift and go to state 281
    PrimitiveType                  shift and go to state 282
    UnaryExpression                shift and go to state 215
    UnaryExpressionNotAddSub       shift and go to state 218
    Name                           shift and go to state 283
    AssignmentExpression           shift and go to state 194
    NumericType                    shift and go to state 64
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    ConditionalExpression          shift and go to state 195
    Assignment                     shift and go to state 196
    IntegralType                   shift and go to state 68
    FloatingPointType              shift and go to state 69
    ConditionalOrExpression        shift and go to state 197
    LeftHandSide                   shift and go to state 149
    ConditionalAndExpression       shift and go to state 198
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    InclusiveOrExpression          shift and go to state 200
    Primary                        shift and go to state 201
    PrimaryNoNewArray              shift and go to state 202
    ExclusiveOrExpression          shift and go to state 203
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    MethodInvocation               shift and go to state 205
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224

state 193

    (201) PrimaryNoNewArray -> LPAREN Expression . RPAREN

    RPAREN          shift and go to state 284


state 194

    (298) Expression -> AssignmentExpression .

    RPAREN          reduce using rule 298 (Expression -> AssignmentExpression .)
    SEMI            reduce using rule 298 (Expression -> AssignmentExpression .)
    COMMA           reduce using rule 298 (Expression -> AssignmentExpression .)
    RBRACK          reduce using rule 298 (Expression -> AssignmentExpression .)
    COLON           reduce using rule 298 (Expression -> AssignmentExpression .)


state 195

    (280) AssignmentExpression -> ConditionalExpression .

    RPAREN          reduce using rule 280 (AssignmentExpression -> ConditionalExpression .)
    SEMI            reduce using rule 280 (AssignmentExpression -> ConditionalExpression .)
    COMMA           reduce using rule 280 (AssignmentExpression -> ConditionalExpression .)
    RBRACK          reduce using rule 280 (AssignmentExpression -> ConditionalExpression .)
    COLON           reduce using rule 280 (AssignmentExpression -> ConditionalExpression .)


state 196

    (281) AssignmentExpression -> Assignment .

    RPAREN          reduce using rule 281 (AssignmentExpression -> Assignment .)
    SEMI            reduce using rule 281 (AssignmentExpression -> Assignment .)
    COMMA           reduce using rule 281 (AssignmentExpression -> Assignment .)
    RBRACK          reduce using rule 281 (AssignmentExpression -> Assignment .)
    COLON           reduce using rule 281 (AssignmentExpression -> Assignment .)


state 197

    (278) ConditionalExpression -> ConditionalOrExpression .
    (279) ConditionalExpression -> ConditionalOrExpression . QUESTION Expression COLON ConditionalExpression
    (276) ConditionalOrExpression -> ConditionalOrExpression . OR ConMarker ConditionalAndExpression

    RPAREN          reduce using rule 278 (ConditionalExpression -> ConditionalOrExpression .)
    SEMI            reduce using rule 278 (ConditionalExpression -> ConditionalOrExpression .)
    COMMA           reduce using rule 278 (ConditionalExpression -> ConditionalOrExpression .)
    RBRACK          reduce using rule 278 (ConditionalExpression -> ConditionalOrExpression .)
    COLON           reduce using rule 278 (ConditionalExpression -> ConditionalOrExpression .)
    QUESTION        shift and go to state 285
    OR              shift and go to state 286


state 198

    (275) ConditionalOrExpression -> ConditionalAndExpression .
    (274) ConditionalAndExpression -> ConditionalAndExpression . AND ConMarker InclusiveOrExpression

    QUESTION        reduce using rule 275 (ConditionalOrExpression -> ConditionalAndExpression .)
    OR              reduce using rule 275 (ConditionalOrExpression -> ConditionalAndExpression .)
    RPAREN          reduce using rule 275 (ConditionalOrExpression -> ConditionalAndExpression .)
    SEMI            reduce using rule 275 (ConditionalOrExpression -> ConditionalAndExpression .)
    COMMA           reduce using rule 275 (ConditionalOrExpression -> ConditionalAndExpression .)
    RBRACK          reduce using rule 275 (ConditionalOrExpression -> ConditionalAndExpression .)
    COLON           reduce using rule 275 (ConditionalOrExpression -> ConditionalAndExpression .)
    AND             shift and go to state 287


state 199

    (283) LeftHandSide -> Name .
    (225) ArrayAccess -> Name . LBRACK Expression RBRACK
    (31) QualifiedName -> Name . DOT IDENTIFIER
    (222) MethodInvocation -> Name . LPAREN ArgumentList RPAREN
    (224) MethodInvocation -> Name . LPAREN RPAREN
    (228) PostfixExpression -> Name .

    ASSIGN          reduce using rule 283 (LeftHandSide -> Name .)
    ADD_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    SUB_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    MUL_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    DIV_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    AND_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    OR_ASSIGN       reduce using rule 283 (LeftHandSide -> Name .)
    XOR_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    MOD_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    LSHIFT_ASSIGN   reduce using rule 283 (LeftHandSide -> Name .)
    RSHIFT_ASSIGN   reduce using rule 283 (LeftHandSide -> Name .)
    URSHIFT_ASSIGN  reduce using rule 283 (LeftHandSide -> Name .)
    LBRACK          shift and go to state 288
    DOT             shift and go to state 103
    LPAREN          shift and go to state 236
    INC             reduce using rule 228 (PostfixExpression -> Name .)
    DEC             reduce using rule 228 (PostfixExpression -> Name .)
    MUL             reduce using rule 228 (PostfixExpression -> Name .)
    DIV             reduce using rule 228 (PostfixExpression -> Name .)
    MOD             reduce using rule 228 (PostfixExpression -> Name .)
    ADD             reduce using rule 228 (PostfixExpression -> Name .)
    SUB             reduce using rule 228 (PostfixExpression -> Name .)
    LSHIFT          reduce using rule 228 (PostfixExpression -> Name .)
    RSHIFT          reduce using rule 228 (PostfixExpression -> Name .)
    URSHIFT         reduce using rule 228 (PostfixExpression -> Name .)
    LT              reduce using rule 228 (PostfixExpression -> Name .)
    GT              reduce using rule 228 (PostfixExpression -> Name .)
    LE              reduce using rule 228 (PostfixExpression -> Name .)
    GE              reduce using rule 228 (PostfixExpression -> Name .)
    EQUAL           reduce using rule 228 (PostfixExpression -> Name .)
    NOTEQUAL        reduce using rule 228 (PostfixExpression -> Name .)
    BITAND          reduce using rule 228 (PostfixExpression -> Name .)
    CARET           reduce using rule 228 (PostfixExpression -> Name .)
    BITOR           reduce using rule 228 (PostfixExpression -> Name .)
    AND             reduce using rule 228 (PostfixExpression -> Name .)
    QUESTION        reduce using rule 228 (PostfixExpression -> Name .)
    OR              reduce using rule 228 (PostfixExpression -> Name .)
    RPAREN          reduce using rule 228 (PostfixExpression -> Name .)
    SEMI            reduce using rule 228 (PostfixExpression -> Name .)
    COMMA           reduce using rule 228 (PostfixExpression -> Name .)
    RBRACK          reduce using rule 228 (PostfixExpression -> Name .)
    COLON           reduce using rule 228 (PostfixExpression -> Name .)


state 200

    (273) ConditionalAndExpression -> InclusiveOrExpression .
    (272) InclusiveOrExpression -> InclusiveOrExpression . BITOR ExclusiveOrExpression

    AND             reduce using rule 273 (ConditionalAndExpression -> InclusiveOrExpression .)
    QUESTION        reduce using rule 273 (ConditionalAndExpression -> InclusiveOrExpression .)
    OR              reduce using rule 273 (ConditionalAndExpression -> InclusiveOrExpression .)
    RPAREN          reduce using rule 273 (ConditionalAndExpression -> InclusiveOrExpression .)
    SEMI            reduce using rule 273 (ConditionalAndExpression -> InclusiveOrExpression .)
    COMMA           reduce using rule 273 (ConditionalAndExpression -> InclusiveOrExpression .)
    RBRACK          reduce using rule 273 (ConditionalAndExpression -> InclusiveOrExpression .)
    COLON           reduce using rule 273 (ConditionalAndExpression -> InclusiveOrExpression .)
    BITOR           shift and go to state 289


state 201

    (219) FieldAccess -> Primary . DOT Name
    (221) MethodInvocation -> Primary . DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> Primary . DOT IDENTIFIER LPAREN RPAREN
    (227) PostfixExpression -> Primary .

    DOT             shift and go to state 290
    INC             reduce using rule 227 (PostfixExpression -> Primary .)
    DEC             reduce using rule 227 (PostfixExpression -> Primary .)
    MUL             reduce using rule 227 (PostfixExpression -> Primary .)
    DIV             reduce using rule 227 (PostfixExpression -> Primary .)
    MOD             reduce using rule 227 (PostfixExpression -> Primary .)
    ADD             reduce using rule 227 (PostfixExpression -> Primary .)
    SUB             reduce using rule 227 (PostfixExpression -> Primary .)
    LSHIFT          reduce using rule 227 (PostfixExpression -> Primary .)
    RSHIFT          reduce using rule 227 (PostfixExpression -> Primary .)
    URSHIFT         reduce using rule 227 (PostfixExpression -> Primary .)
    LT              reduce using rule 227 (PostfixExpression -> Primary .)
    GT              reduce using rule 227 (PostfixExpression -> Primary .)
    LE              reduce using rule 227 (PostfixExpression -> Primary .)
    GE              reduce using rule 227 (PostfixExpression -> Primary .)
    EQUAL           reduce using rule 227 (PostfixExpression -> Primary .)
    NOTEQUAL        reduce using rule 227 (PostfixExpression -> Primary .)
    BITAND          reduce using rule 227 (PostfixExpression -> Primary .)
    CARET           reduce using rule 227 (PostfixExpression -> Primary .)
    BITOR           reduce using rule 227 (PostfixExpression -> Primary .)
    AND             reduce using rule 227 (PostfixExpression -> Primary .)
    QUESTION        reduce using rule 227 (PostfixExpression -> Primary .)
    OR              reduce using rule 227 (PostfixExpression -> Primary .)
    RPAREN          reduce using rule 227 (PostfixExpression -> Primary .)
    SEMI            reduce using rule 227 (PostfixExpression -> Primary .)
    COMMA           reduce using rule 227 (PostfixExpression -> Primary .)
    RBRACK          reduce using rule 227 (PostfixExpression -> Primary .)
    COLON           reduce using rule 227 (PostfixExpression -> Primary .)


state 202

    (226) ArrayAccess -> PrimaryNoNewArray . LBRACK Expression RBRACK
    (197) Primary -> PrimaryNoNewArray .

    LBRACK          shift and go to state 264
    DOT             reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    INC             reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    DEC             reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    MUL             reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    DIV             reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    MOD             reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    ADD             reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    SUB             reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    LSHIFT          reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    RSHIFT          reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    URSHIFT         reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    LT              reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    GT              reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    LE              reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    GE              reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    EQUAL           reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    NOTEQUAL        reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    BITAND          reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    CARET           reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    BITOR           reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    AND             reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    QUESTION        reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    OR              reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    RPAREN          reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    SEMI            reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    COMMA           reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    RBRACK          reduce using rule 197 (Primary -> PrimaryNoNewArray .)
    COLON           reduce using rule 197 (Primary -> PrimaryNoNewArray .)


state 203

    (271) InclusiveOrExpression -> ExclusiveOrExpression .
    (270) ExclusiveOrExpression -> ExclusiveOrExpression . CARET AndExpression

    BITOR           reduce using rule 271 (InclusiveOrExpression -> ExclusiveOrExpression .)
    AND             reduce using rule 271 (InclusiveOrExpression -> ExclusiveOrExpression .)
    QUESTION        reduce using rule 271 (InclusiveOrExpression -> ExclusiveOrExpression .)
    OR              reduce using rule 271 (InclusiveOrExpression -> ExclusiveOrExpression .)
    RPAREN          reduce using rule 271 (InclusiveOrExpression -> ExclusiveOrExpression .)
    SEMI            reduce using rule 271 (InclusiveOrExpression -> ExclusiveOrExpression .)
    COMMA           reduce using rule 271 (InclusiveOrExpression -> ExclusiveOrExpression .)
    RBRACK          reduce using rule 271 (InclusiveOrExpression -> ExclusiveOrExpression .)
    COLON           reduce using rule 271 (InclusiveOrExpression -> ExclusiveOrExpression .)
    CARET           shift and go to state 291


state 204

    (202) PrimaryNoNewArray -> ClassInstanceCreationExpression .

    LBRACK          reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    DOT             reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    INC             reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    DEC             reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    MUL             reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    DIV             reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    MOD             reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    ADD             reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    SUB             reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    LSHIFT          reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    RSHIFT          reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    URSHIFT         reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    LT              reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    GT              reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    LE              reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    GE              reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    EQUAL           reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    NOTEQUAL        reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    BITAND          reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    CARET           reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    BITOR           reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    AND             reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    QUESTION        reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    OR              reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    RPAREN          reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    SEMI            reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    COMMA           reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    RBRACK          reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)
    COLON           reduce using rule 202 (PrimaryNoNewArray -> ClassInstanceCreationExpression .)


state 205

    (204) PrimaryNoNewArray -> MethodInvocation .

    LBRACK          reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    DOT             reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    INC             reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    DEC             reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    MUL             reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    DIV             reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    MOD             reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    ADD             reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    SUB             reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    LSHIFT          reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    RSHIFT          reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    URSHIFT         reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    LT              reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    GT              reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    LE              reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    GE              reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    EQUAL           reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    NOTEQUAL        reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    BITAND          reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    CARET           reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    BITOR           reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    AND             reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    QUESTION        reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    OR              reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    RPAREN          reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    SEMI            reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    COMMA           reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    RBRACK          reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)
    COLON           reduce using rule 204 (PrimaryNoNewArray -> MethodInvocation .)


state 206

    (269) ExclusiveOrExpression -> AndExpression .
    (268) AndExpression -> AndExpression . BITAND EqualityExpression

    CARET           reduce using rule 269 (ExclusiveOrExpression -> AndExpression .)
    BITOR           reduce using rule 269 (ExclusiveOrExpression -> AndExpression .)
    AND             reduce using rule 269 (ExclusiveOrExpression -> AndExpression .)
    QUESTION        reduce using rule 269 (ExclusiveOrExpression -> AndExpression .)
    OR              reduce using rule 269 (ExclusiveOrExpression -> AndExpression .)
    RPAREN          reduce using rule 269 (ExclusiveOrExpression -> AndExpression .)
    SEMI            reduce using rule 269 (ExclusiveOrExpression -> AndExpression .)
    COMMA           reduce using rule 269 (ExclusiveOrExpression -> AndExpression .)
    RBRACK          reduce using rule 269 (ExclusiveOrExpression -> AndExpression .)
    COLON           reduce using rule 269 (ExclusiveOrExpression -> AndExpression .)
    BITAND          shift and go to state 292


state 207

    (210) ArrayCreationExpression -> NEW . PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> NEW . PrimitiveType DimExprs
    (212) ArrayCreationExpression -> NEW . ClassType DimExprs Dims
    (213) ArrayCreationExpression -> NEW . ClassType DimExprs
    (206) ClassInstanceCreationExpression -> NEW . ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> NEW . ClassType LPAREN ArgumentList RPAREN
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (25) ClassType -> . Name
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER

    BOOLEAN         shift and go to state 65
    BYTE            shift and go to state 71
    SHORT           shift and go to state 72
    INT             shift and go to state 73
    LONG            shift and go to state 74
    CHAR            shift and go to state 75
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 77
    IDENTIFIER      shift and go to state 63

    PrimitiveType                  shift and go to state 262
    ClassType                      shift and go to state 293
    NumericType                    shift and go to state 64
    Name                           shift and go to state 263
    IntegralType                   shift and go to state 68
    FloatingPointType              shift and go to state 69
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78

state 208

    (267) AndExpression -> EqualityExpression .
    (265) EqualityExpression -> EqualityExpression . EQUAL RelationalExpression
    (266) EqualityExpression -> EqualityExpression . NOTEQUAL RelationalExpression

    BITAND          reduce using rule 267 (AndExpression -> EqualityExpression .)
    CARET           reduce using rule 267 (AndExpression -> EqualityExpression .)
    BITOR           reduce using rule 267 (AndExpression -> EqualityExpression .)
    AND             reduce using rule 267 (AndExpression -> EqualityExpression .)
    QUESTION        reduce using rule 267 (AndExpression -> EqualityExpression .)
    OR              reduce using rule 267 (AndExpression -> EqualityExpression .)
    RPAREN          reduce using rule 267 (AndExpression -> EqualityExpression .)
    SEMI            reduce using rule 267 (AndExpression -> EqualityExpression .)
    COMMA           reduce using rule 267 (AndExpression -> EqualityExpression .)
    RBRACK          reduce using rule 267 (AndExpression -> EqualityExpression .)
    COLON           reduce using rule 267 (AndExpression -> EqualityExpression .)
    EQUAL           shift and go to state 294
    NOTEQUAL        shift and go to state 295


state 209

    (264) EqualityExpression -> RelationalExpression .
    (260) RelationalExpression -> RelationalExpression . LT ShiftExpression
    (261) RelationalExpression -> RelationalExpression . GT ShiftExpression
    (262) RelationalExpression -> RelationalExpression . LE ShiftExpression
    (263) RelationalExpression -> RelationalExpression . GE ShiftExpression

    EQUAL           reduce using rule 264 (EqualityExpression -> RelationalExpression .)
    NOTEQUAL        reduce using rule 264 (EqualityExpression -> RelationalExpression .)
    BITAND          reduce using rule 264 (EqualityExpression -> RelationalExpression .)
    CARET           reduce using rule 264 (EqualityExpression -> RelationalExpression .)
    BITOR           reduce using rule 264 (EqualityExpression -> RelationalExpression .)
    AND             reduce using rule 264 (EqualityExpression -> RelationalExpression .)
    QUESTION        reduce using rule 264 (EqualityExpression -> RelationalExpression .)
    OR              reduce using rule 264 (EqualityExpression -> RelationalExpression .)
    RPAREN          reduce using rule 264 (EqualityExpression -> RelationalExpression .)
    SEMI            reduce using rule 264 (EqualityExpression -> RelationalExpression .)
    COMMA           reduce using rule 264 (EqualityExpression -> RelationalExpression .)
    RBRACK          reduce using rule 264 (EqualityExpression -> RelationalExpression .)
    COLON           reduce using rule 264 (EqualityExpression -> RelationalExpression .)
    LT              shift and go to state 296
    GT              shift and go to state 297
    LE              shift and go to state 298
    GE              shift and go to state 299


state 210

    (259) RelationalExpression -> ShiftExpression .
    (256) ShiftExpression -> ShiftExpression . LSHIFT AdditiveExpression
    (257) ShiftExpression -> ShiftExpression . RSHIFT AdditiveExpression
    (258) ShiftExpression -> ShiftExpression . URSHIFT AdditiveExpression

    LT              reduce using rule 259 (RelationalExpression -> ShiftExpression .)
    GT              reduce using rule 259 (RelationalExpression -> ShiftExpression .)
    LE              reduce using rule 259 (RelationalExpression -> ShiftExpression .)
    GE              reduce using rule 259 (RelationalExpression -> ShiftExpression .)
    EQUAL           reduce using rule 259 (RelationalExpression -> ShiftExpression .)
    NOTEQUAL        reduce using rule 259 (RelationalExpression -> ShiftExpression .)
    BITAND          reduce using rule 259 (RelationalExpression -> ShiftExpression .)
    CARET           reduce using rule 259 (RelationalExpression -> ShiftExpression .)
    BITOR           reduce using rule 259 (RelationalExpression -> ShiftExpression .)
    AND             reduce using rule 259 (RelationalExpression -> ShiftExpression .)
    QUESTION        reduce using rule 259 (RelationalExpression -> ShiftExpression .)
    OR              reduce using rule 259 (RelationalExpression -> ShiftExpression .)
    RPAREN          reduce using rule 259 (RelationalExpression -> ShiftExpression .)
    SEMI            reduce using rule 259 (RelationalExpression -> ShiftExpression .)
    COMMA           reduce using rule 259 (RelationalExpression -> ShiftExpression .)
    RBRACK          reduce using rule 259 (RelationalExpression -> ShiftExpression .)
    COLON           reduce using rule 259 (RelationalExpression -> ShiftExpression .)
    LSHIFT          shift and go to state 300
    RSHIFT          shift and go to state 301
    URSHIFT         shift and go to state 302


state 211

    (255) ShiftExpression -> AdditiveExpression .
    (253) AdditiveExpression -> AdditiveExpression . ADD MultiplicativeExpression
    (254) AdditiveExpression -> AdditiveExpression . SUB MultiplicativeExpression

    LSHIFT          reduce using rule 255 (ShiftExpression -> AdditiveExpression .)
    RSHIFT          reduce using rule 255 (ShiftExpression -> AdditiveExpression .)
    URSHIFT         reduce using rule 255 (ShiftExpression -> AdditiveExpression .)
    LT              reduce using rule 255 (ShiftExpression -> AdditiveExpression .)
    GT              reduce using rule 255 (ShiftExpression -> AdditiveExpression .)
    LE              reduce using rule 255 (ShiftExpression -> AdditiveExpression .)
    GE              reduce using rule 255 (ShiftExpression -> AdditiveExpression .)
    EQUAL           reduce using rule 255 (ShiftExpression -> AdditiveExpression .)
    NOTEQUAL        reduce using rule 255 (ShiftExpression -> AdditiveExpression .)
    BITAND          reduce using rule 255 (ShiftExpression -> AdditiveExpression .)
    CARET           reduce using rule 255 (ShiftExpression -> AdditiveExpression .)
    BITOR           reduce using rule 255 (ShiftExpression -> AdditiveExpression .)
    AND             reduce using rule 255 (ShiftExpression -> AdditiveExpression .)
    QUESTION        reduce using rule 255 (ShiftExpression -> AdditiveExpression .)
    OR              reduce using rule 255 (ShiftExpression -> AdditiveExpression .)
    RPAREN          reduce using rule 255 (ShiftExpression -> AdditiveExpression .)
    SEMI            reduce using rule 255 (ShiftExpression -> AdditiveExpression .)
    COMMA           reduce using rule 255 (ShiftExpression -> AdditiveExpression .)
    RBRACK          reduce using rule 255 (ShiftExpression -> AdditiveExpression .)
    COLON           reduce using rule 255 (ShiftExpression -> AdditiveExpression .)
    ADD             shift and go to state 303
    SUB             shift and go to state 304


state 212

    (252) AdditiveExpression -> MultiplicativeExpression .
    (249) MultiplicativeExpression -> MultiplicativeExpression . MUL UnaryExpression
    (250) MultiplicativeExpression -> MultiplicativeExpression . DIV UnaryExpression
    (251) MultiplicativeExpression -> MultiplicativeExpression . MOD UnaryExpression

    ADD             reduce using rule 252 (AdditiveExpression -> MultiplicativeExpression .)
    SUB             reduce using rule 252 (AdditiveExpression -> MultiplicativeExpression .)
    LSHIFT          reduce using rule 252 (AdditiveExpression -> MultiplicativeExpression .)
    RSHIFT          reduce using rule 252 (AdditiveExpression -> MultiplicativeExpression .)
    URSHIFT         reduce using rule 252 (AdditiveExpression -> MultiplicativeExpression .)
    LT              reduce using rule 252 (AdditiveExpression -> MultiplicativeExpression .)
    GT              reduce using rule 252 (AdditiveExpression -> MultiplicativeExpression .)
    LE              reduce using rule 252 (AdditiveExpression -> MultiplicativeExpression .)
    GE              reduce using rule 252 (AdditiveExpression -> MultiplicativeExpression .)
    EQUAL           reduce using rule 252 (AdditiveExpression -> MultiplicativeExpression .)
    NOTEQUAL        reduce using rule 252 (AdditiveExpression -> MultiplicativeExpression .)
    BITAND          reduce using rule 252 (AdditiveExpression -> MultiplicativeExpression .)
    CARET           reduce using rule 252 (AdditiveExpression -> MultiplicativeExpression .)
    BITOR           reduce using rule 252 (AdditiveExpression -> MultiplicativeExpression .)
    AND             reduce using rule 252 (AdditiveExpression -> MultiplicativeExpression .)
    QUESTION        reduce using rule 252 (AdditiveExpression -> MultiplicativeExpression .)
    OR              reduce using rule 252 (AdditiveExpression -> MultiplicativeExpression .)
    RPAREN          reduce using rule 252 (AdditiveExpression -> MultiplicativeExpression .)
    SEMI            reduce using rule 252 (AdditiveExpression -> MultiplicativeExpression .)
    COMMA           reduce using rule 252 (AdditiveExpression -> MultiplicativeExpression .)
    RBRACK          reduce using rule 252 (AdditiveExpression -> MultiplicativeExpression .)
    COLON           reduce using rule 252 (AdditiveExpression -> MultiplicativeExpression .)
    MUL             shift and go to state 305
    DIV             shift and go to state 306
    MOD             shift and go to state 307


state 213

    (235) UnaryExpression -> ADD . UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    UnaryExpression                shift and go to state 308
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 214

    (236) UnaryExpression -> SUB . UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    UnaryExpression                shift and go to state 309
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 215

    (248) MultiplicativeExpression -> UnaryExpression .

    MUL             reduce using rule 248 (MultiplicativeExpression -> UnaryExpression .)
    DIV             reduce using rule 248 (MultiplicativeExpression -> UnaryExpression .)
    MOD             reduce using rule 248 (MultiplicativeExpression -> UnaryExpression .)
    ADD             reduce using rule 248 (MultiplicativeExpression -> UnaryExpression .)
    SUB             reduce using rule 248 (MultiplicativeExpression -> UnaryExpression .)
    LSHIFT          reduce using rule 248 (MultiplicativeExpression -> UnaryExpression .)
    RSHIFT          reduce using rule 248 (MultiplicativeExpression -> UnaryExpression .)
    URSHIFT         reduce using rule 248 (MultiplicativeExpression -> UnaryExpression .)
    LT              reduce using rule 248 (MultiplicativeExpression -> UnaryExpression .)
    GT              reduce using rule 248 (MultiplicativeExpression -> UnaryExpression .)
    LE              reduce using rule 248 (MultiplicativeExpression -> UnaryExpression .)
    GE              reduce using rule 248 (MultiplicativeExpression -> UnaryExpression .)
    EQUAL           reduce using rule 248 (MultiplicativeExpression -> UnaryExpression .)
    NOTEQUAL        reduce using rule 248 (MultiplicativeExpression -> UnaryExpression .)
    BITAND          reduce using rule 248 (MultiplicativeExpression -> UnaryExpression .)
    CARET           reduce using rule 248 (MultiplicativeExpression -> UnaryExpression .)
    BITOR           reduce using rule 248 (MultiplicativeExpression -> UnaryExpression .)
    AND             reduce using rule 248 (MultiplicativeExpression -> UnaryExpression .)
    QUESTION        reduce using rule 248 (MultiplicativeExpression -> UnaryExpression .)
    OR              reduce using rule 248 (MultiplicativeExpression -> UnaryExpression .)
    RPAREN          reduce using rule 248 (MultiplicativeExpression -> UnaryExpression .)
    SEMI            reduce using rule 248 (MultiplicativeExpression -> UnaryExpression .)
    COMMA           reduce using rule 248 (MultiplicativeExpression -> UnaryExpression .)
    RBRACK          reduce using rule 248 (MultiplicativeExpression -> UnaryExpression .)
    COLON           reduce using rule 248 (MultiplicativeExpression -> UnaryExpression .)


state 216

    (233) UnaryExpression -> PreIncrementExpression .

    MUL             reduce using rule 233 (UnaryExpression -> PreIncrementExpression .)
    DIV             reduce using rule 233 (UnaryExpression -> PreIncrementExpression .)
    MOD             reduce using rule 233 (UnaryExpression -> PreIncrementExpression .)
    ADD             reduce using rule 233 (UnaryExpression -> PreIncrementExpression .)
    SUB             reduce using rule 233 (UnaryExpression -> PreIncrementExpression .)
    LSHIFT          reduce using rule 233 (UnaryExpression -> PreIncrementExpression .)
    RSHIFT          reduce using rule 233 (UnaryExpression -> PreIncrementExpression .)
    URSHIFT         reduce using rule 233 (UnaryExpression -> PreIncrementExpression .)
    LT              reduce using rule 233 (UnaryExpression -> PreIncrementExpression .)
    GT              reduce using rule 233 (UnaryExpression -> PreIncrementExpression .)
    LE              reduce using rule 233 (UnaryExpression -> PreIncrementExpression .)
    GE              reduce using rule 233 (UnaryExpression -> PreIncrementExpression .)
    EQUAL           reduce using rule 233 (UnaryExpression -> PreIncrementExpression .)
    NOTEQUAL        reduce using rule 233 (UnaryExpression -> PreIncrementExpression .)
    BITAND          reduce using rule 233 (UnaryExpression -> PreIncrementExpression .)
    CARET           reduce using rule 233 (UnaryExpression -> PreIncrementExpression .)
    BITOR           reduce using rule 233 (UnaryExpression -> PreIncrementExpression .)
    AND             reduce using rule 233 (UnaryExpression -> PreIncrementExpression .)
    QUESTION        reduce using rule 233 (UnaryExpression -> PreIncrementExpression .)
    OR              reduce using rule 233 (UnaryExpression -> PreIncrementExpression .)
    RPAREN          reduce using rule 233 (UnaryExpression -> PreIncrementExpression .)
    SEMI            reduce using rule 233 (UnaryExpression -> PreIncrementExpression .)
    COMMA           reduce using rule 233 (UnaryExpression -> PreIncrementExpression .)
    RBRACK          reduce using rule 233 (UnaryExpression -> PreIncrementExpression .)
    COLON           reduce using rule 233 (UnaryExpression -> PreIncrementExpression .)


state 217

    (234) UnaryExpression -> PreDecrementExpression .

    MUL             reduce using rule 234 (UnaryExpression -> PreDecrementExpression .)
    DIV             reduce using rule 234 (UnaryExpression -> PreDecrementExpression .)
    MOD             reduce using rule 234 (UnaryExpression -> PreDecrementExpression .)
    ADD             reduce using rule 234 (UnaryExpression -> PreDecrementExpression .)
    SUB             reduce using rule 234 (UnaryExpression -> PreDecrementExpression .)
    LSHIFT          reduce using rule 234 (UnaryExpression -> PreDecrementExpression .)
    RSHIFT          reduce using rule 234 (UnaryExpression -> PreDecrementExpression .)
    URSHIFT         reduce using rule 234 (UnaryExpression -> PreDecrementExpression .)
    LT              reduce using rule 234 (UnaryExpression -> PreDecrementExpression .)
    GT              reduce using rule 234 (UnaryExpression -> PreDecrementExpression .)
    LE              reduce using rule 234 (UnaryExpression -> PreDecrementExpression .)
    GE              reduce using rule 234 (UnaryExpression -> PreDecrementExpression .)
    EQUAL           reduce using rule 234 (UnaryExpression -> PreDecrementExpression .)
    NOTEQUAL        reduce using rule 234 (UnaryExpression -> PreDecrementExpression .)
    BITAND          reduce using rule 234 (UnaryExpression -> PreDecrementExpression .)
    CARET           reduce using rule 234 (UnaryExpression -> PreDecrementExpression .)
    BITOR           reduce using rule 234 (UnaryExpression -> PreDecrementExpression .)
    AND             reduce using rule 234 (UnaryExpression -> PreDecrementExpression .)
    QUESTION        reduce using rule 234 (UnaryExpression -> PreDecrementExpression .)
    OR              reduce using rule 234 (UnaryExpression -> PreDecrementExpression .)
    RPAREN          reduce using rule 234 (UnaryExpression -> PreDecrementExpression .)
    SEMI            reduce using rule 234 (UnaryExpression -> PreDecrementExpression .)
    COMMA           reduce using rule 234 (UnaryExpression -> PreDecrementExpression .)
    RBRACK          reduce using rule 234 (UnaryExpression -> PreDecrementExpression .)
    COLON           reduce using rule 234 (UnaryExpression -> PreDecrementExpression .)


state 218

    (237) UnaryExpression -> UnaryExpressionNotAddSub .

    MUL             reduce using rule 237 (UnaryExpression -> UnaryExpressionNotAddSub .)
    DIV             reduce using rule 237 (UnaryExpression -> UnaryExpressionNotAddSub .)
    MOD             reduce using rule 237 (UnaryExpression -> UnaryExpressionNotAddSub .)
    ADD             reduce using rule 237 (UnaryExpression -> UnaryExpressionNotAddSub .)
    SUB             reduce using rule 237 (UnaryExpression -> UnaryExpressionNotAddSub .)
    LSHIFT          reduce using rule 237 (UnaryExpression -> UnaryExpressionNotAddSub .)
    RSHIFT          reduce using rule 237 (UnaryExpression -> UnaryExpressionNotAddSub .)
    URSHIFT         reduce using rule 237 (UnaryExpression -> UnaryExpressionNotAddSub .)
    LT              reduce using rule 237 (UnaryExpression -> UnaryExpressionNotAddSub .)
    GT              reduce using rule 237 (UnaryExpression -> UnaryExpressionNotAddSub .)
    LE              reduce using rule 237 (UnaryExpression -> UnaryExpressionNotAddSub .)
    GE              reduce using rule 237 (UnaryExpression -> UnaryExpressionNotAddSub .)
    EQUAL           reduce using rule 237 (UnaryExpression -> UnaryExpressionNotAddSub .)
    NOTEQUAL        reduce using rule 237 (UnaryExpression -> UnaryExpressionNotAddSub .)
    BITAND          reduce using rule 237 (UnaryExpression -> UnaryExpressionNotAddSub .)
    CARET           reduce using rule 237 (UnaryExpression -> UnaryExpressionNotAddSub .)
    BITOR           reduce using rule 237 (UnaryExpression -> UnaryExpressionNotAddSub .)
    AND             reduce using rule 237 (UnaryExpression -> UnaryExpressionNotAddSub .)
    QUESTION        reduce using rule 237 (UnaryExpression -> UnaryExpressionNotAddSub .)
    OR              reduce using rule 237 (UnaryExpression -> UnaryExpressionNotAddSub .)
    RPAREN          reduce using rule 237 (UnaryExpression -> UnaryExpressionNotAddSub .)
    SEMI            reduce using rule 237 (UnaryExpression -> UnaryExpressionNotAddSub .)
    COMMA           reduce using rule 237 (UnaryExpression -> UnaryExpressionNotAddSub .)
    RBRACK          reduce using rule 237 (UnaryExpression -> UnaryExpressionNotAddSub .)
    COLON           reduce using rule 237 (UnaryExpression -> UnaryExpressionNotAddSub .)


state 219

    (240) UnaryExpressionNotAddSub -> PostfixExpression .
    (231) PostIncrementExpression -> PostfixExpression . INC
    (232) PostDecrementExpression -> PostfixExpression . DEC

    MUL             reduce using rule 240 (UnaryExpressionNotAddSub -> PostfixExpression .)
    DIV             reduce using rule 240 (UnaryExpressionNotAddSub -> PostfixExpression .)
    MOD             reduce using rule 240 (UnaryExpressionNotAddSub -> PostfixExpression .)
    ADD             reduce using rule 240 (UnaryExpressionNotAddSub -> PostfixExpression .)
    SUB             reduce using rule 240 (UnaryExpressionNotAddSub -> PostfixExpression .)
    LSHIFT          reduce using rule 240 (UnaryExpressionNotAddSub -> PostfixExpression .)
    RSHIFT          reduce using rule 240 (UnaryExpressionNotAddSub -> PostfixExpression .)
    URSHIFT         reduce using rule 240 (UnaryExpressionNotAddSub -> PostfixExpression .)
    LT              reduce using rule 240 (UnaryExpressionNotAddSub -> PostfixExpression .)
    GT              reduce using rule 240 (UnaryExpressionNotAddSub -> PostfixExpression .)
    LE              reduce using rule 240 (UnaryExpressionNotAddSub -> PostfixExpression .)
    GE              reduce using rule 240 (UnaryExpressionNotAddSub -> PostfixExpression .)
    EQUAL           reduce using rule 240 (UnaryExpressionNotAddSub -> PostfixExpression .)
    NOTEQUAL        reduce using rule 240 (UnaryExpressionNotAddSub -> PostfixExpression .)
    BITAND          reduce using rule 240 (UnaryExpressionNotAddSub -> PostfixExpression .)
    CARET           reduce using rule 240 (UnaryExpressionNotAddSub -> PostfixExpression .)
    BITOR           reduce using rule 240 (UnaryExpressionNotAddSub -> PostfixExpression .)
    AND             reduce using rule 240 (UnaryExpressionNotAddSub -> PostfixExpression .)
    QUESTION        reduce using rule 240 (UnaryExpressionNotAddSub -> PostfixExpression .)
    OR              reduce using rule 240 (UnaryExpressionNotAddSub -> PostfixExpression .)
    RPAREN          reduce using rule 240 (UnaryExpressionNotAddSub -> PostfixExpression .)
    SEMI            reduce using rule 240 (UnaryExpressionNotAddSub -> PostfixExpression .)
    COMMA           reduce using rule 240 (UnaryExpressionNotAddSub -> PostfixExpression .)
    RBRACK          reduce using rule 240 (UnaryExpressionNotAddSub -> PostfixExpression .)
    COLON           reduce using rule 240 (UnaryExpressionNotAddSub -> PostfixExpression .)
    INC             shift and go to state 258
    DEC             shift and go to state 259


state 220

    (241) UnaryExpressionNotAddSub -> BANG . UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    UnaryExpression                shift and go to state 310
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 221

    (242) UnaryExpressionNotAddSub -> TILDE . UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    UnaryExpression                shift and go to state 311
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 222

    (243) UnaryExpressionNotAddSub -> CastExpression .

    MUL             reduce using rule 243 (UnaryExpressionNotAddSub -> CastExpression .)
    DIV             reduce using rule 243 (UnaryExpressionNotAddSub -> CastExpression .)
    MOD             reduce using rule 243 (UnaryExpressionNotAddSub -> CastExpression .)
    ADD             reduce using rule 243 (UnaryExpressionNotAddSub -> CastExpression .)
    SUB             reduce using rule 243 (UnaryExpressionNotAddSub -> CastExpression .)
    LSHIFT          reduce using rule 243 (UnaryExpressionNotAddSub -> CastExpression .)
    RSHIFT          reduce using rule 243 (UnaryExpressionNotAddSub -> CastExpression .)
    URSHIFT         reduce using rule 243 (UnaryExpressionNotAddSub -> CastExpression .)
    LT              reduce using rule 243 (UnaryExpressionNotAddSub -> CastExpression .)
    GT              reduce using rule 243 (UnaryExpressionNotAddSub -> CastExpression .)
    LE              reduce using rule 243 (UnaryExpressionNotAddSub -> CastExpression .)
    GE              reduce using rule 243 (UnaryExpressionNotAddSub -> CastExpression .)
    EQUAL           reduce using rule 243 (UnaryExpressionNotAddSub -> CastExpression .)
    NOTEQUAL        reduce using rule 243 (UnaryExpressionNotAddSub -> CastExpression .)
    BITAND          reduce using rule 243 (UnaryExpressionNotAddSub -> CastExpression .)
    CARET           reduce using rule 243 (UnaryExpressionNotAddSub -> CastExpression .)
    BITOR           reduce using rule 243 (UnaryExpressionNotAddSub -> CastExpression .)
    AND             reduce using rule 243 (UnaryExpressionNotAddSub -> CastExpression .)
    QUESTION        reduce using rule 243 (UnaryExpressionNotAddSub -> CastExpression .)
    OR              reduce using rule 243 (UnaryExpressionNotAddSub -> CastExpression .)
    RPAREN          reduce using rule 243 (UnaryExpressionNotAddSub -> CastExpression .)
    SEMI            reduce using rule 243 (UnaryExpressionNotAddSub -> CastExpression .)
    COMMA           reduce using rule 243 (UnaryExpressionNotAddSub -> CastExpression .)
    RBRACK          reduce using rule 243 (UnaryExpressionNotAddSub -> CastExpression .)
    COLON           reduce using rule 243 (UnaryExpressionNotAddSub -> CastExpression .)


state 223

    (229) PostfixExpression -> PostIncrementExpression .

    INC             reduce using rule 229 (PostfixExpression -> PostIncrementExpression .)
    DEC             reduce using rule 229 (PostfixExpression -> PostIncrementExpression .)
    MUL             reduce using rule 229 (PostfixExpression -> PostIncrementExpression .)
    DIV             reduce using rule 229 (PostfixExpression -> PostIncrementExpression .)
    MOD             reduce using rule 229 (PostfixExpression -> PostIncrementExpression .)
    ADD             reduce using rule 229 (PostfixExpression -> PostIncrementExpression .)
    SUB             reduce using rule 229 (PostfixExpression -> PostIncrementExpression .)
    LSHIFT          reduce using rule 229 (PostfixExpression -> PostIncrementExpression .)
    RSHIFT          reduce using rule 229 (PostfixExpression -> PostIncrementExpression .)
    URSHIFT         reduce using rule 229 (PostfixExpression -> PostIncrementExpression .)
    LT              reduce using rule 229 (PostfixExpression -> PostIncrementExpression .)
    GT              reduce using rule 229 (PostfixExpression -> PostIncrementExpression .)
    LE              reduce using rule 229 (PostfixExpression -> PostIncrementExpression .)
    GE              reduce using rule 229 (PostfixExpression -> PostIncrementExpression .)
    EQUAL           reduce using rule 229 (PostfixExpression -> PostIncrementExpression .)
    NOTEQUAL        reduce using rule 229 (PostfixExpression -> PostIncrementExpression .)
    BITAND          reduce using rule 229 (PostfixExpression -> PostIncrementExpression .)
    CARET           reduce using rule 229 (PostfixExpression -> PostIncrementExpression .)
    BITOR           reduce using rule 229 (PostfixExpression -> PostIncrementExpression .)
    AND             reduce using rule 229 (PostfixExpression -> PostIncrementExpression .)
    QUESTION        reduce using rule 229 (PostfixExpression -> PostIncrementExpression .)
    OR              reduce using rule 229 (PostfixExpression -> PostIncrementExpression .)
    RPAREN          reduce using rule 229 (PostfixExpression -> PostIncrementExpression .)
    SEMI            reduce using rule 229 (PostfixExpression -> PostIncrementExpression .)
    COMMA           reduce using rule 229 (PostfixExpression -> PostIncrementExpression .)
    RBRACK          reduce using rule 229 (PostfixExpression -> PostIncrementExpression .)
    COLON           reduce using rule 229 (PostfixExpression -> PostIncrementExpression .)


state 224

    (230) PostfixExpression -> PostDecrementExpression .

    INC             reduce using rule 230 (PostfixExpression -> PostDecrementExpression .)
    DEC             reduce using rule 230 (PostfixExpression -> PostDecrementExpression .)
    MUL             reduce using rule 230 (PostfixExpression -> PostDecrementExpression .)
    DIV             reduce using rule 230 (PostfixExpression -> PostDecrementExpression .)
    MOD             reduce using rule 230 (PostfixExpression -> PostDecrementExpression .)
    ADD             reduce using rule 230 (PostfixExpression -> PostDecrementExpression .)
    SUB             reduce using rule 230 (PostfixExpression -> PostDecrementExpression .)
    LSHIFT          reduce using rule 230 (PostfixExpression -> PostDecrementExpression .)
    RSHIFT          reduce using rule 230 (PostfixExpression -> PostDecrementExpression .)
    URSHIFT         reduce using rule 230 (PostfixExpression -> PostDecrementExpression .)
    LT              reduce using rule 230 (PostfixExpression -> PostDecrementExpression .)
    GT              reduce using rule 230 (PostfixExpression -> PostDecrementExpression .)
    LE              reduce using rule 230 (PostfixExpression -> PostDecrementExpression .)
    GE              reduce using rule 230 (PostfixExpression -> PostDecrementExpression .)
    EQUAL           reduce using rule 230 (PostfixExpression -> PostDecrementExpression .)
    NOTEQUAL        reduce using rule 230 (PostfixExpression -> PostDecrementExpression .)
    BITAND          reduce using rule 230 (PostfixExpression -> PostDecrementExpression .)
    CARET           reduce using rule 230 (PostfixExpression -> PostDecrementExpression .)
    BITOR           reduce using rule 230 (PostfixExpression -> PostDecrementExpression .)
    AND             reduce using rule 230 (PostfixExpression -> PostDecrementExpression .)
    QUESTION        reduce using rule 230 (PostfixExpression -> PostDecrementExpression .)
    OR              reduce using rule 230 (PostfixExpression -> PostDecrementExpression .)
    RPAREN          reduce using rule 230 (PostfixExpression -> PostDecrementExpression .)
    SEMI            reduce using rule 230 (PostfixExpression -> PostDecrementExpression .)
    COMMA           reduce using rule 230 (PostfixExpression -> PostDecrementExpression .)
    RBRACK          reduce using rule 230 (PostfixExpression -> PostDecrementExpression .)
    COLON           reduce using rule 230 (PostfixExpression -> PostDecrementExpression .)


state 225

    (159) WhileStatement -> WHILE prep_fw_stack . LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2

    LPAREN          shift and go to state 312


state 226

    (167) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2

    LPAREN          shift and go to state 313


state 227

    (133) ExpressionStatement -> StatementExpression SEMI .

    RBRACE          reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    IDENTIFIER      reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    IF              reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    WHILE           reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    FOR             reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    LBRACE          reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    SEMI            reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    SWITCH          reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    DO              reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    BREAK           reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    CONTINUE        reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    RETURN          reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    BOOLEAN         reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    INC             reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    DEC             reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    NEW             reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    BYTE            reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    SHORT           reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    INT             reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    LONG            reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    CHAR            reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    FLOAT           reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    DOUBLE          reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    SUPER           reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    THIS            reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    LPAREN          reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    DECIMAL_LITERAL reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    HEX_LITERAL     reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    BINARY_LITERAL  reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    FLOAT_LITERAL   reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    BOOL_LITERAL    reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    CHAR_LITERAL    reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    STRING_LITERAL  reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    NULL            reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    CASE            reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    DEFAULT         reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)
    ELSE            reduce using rule 133 (ExpressionStatement -> StatementExpression SEMI .)


state 228

    (147) SwitchStatement -> SWITCH LPAREN . Expression RPAREN SwitchBlock
    (298) Expression -> . AssignmentExpression
    (280) AssignmentExpression -> . ConditionalExpression
    (281) AssignmentExpression -> . Assignment
    (278) ConditionalExpression -> . ConditionalOrExpression
    (279) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (275) ConditionalOrExpression -> . ConditionalAndExpression
    (276) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (273) ConditionalAndExpression -> . InclusiveOrExpression
    (274) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC

    SUPER           shift and go to state 160
    IDENTIFIER      shift and go to state 63
    THIS            shift and go to state 162
    LPAREN          shift and go to state 192
    NEW             shift and go to state 207
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221

    Expression                     shift and go to state 314
    AssignmentExpression           shift and go to state 194
    ConditionalExpression          shift and go to state 195
    Assignment                     shift and go to state 196
    ConditionalOrExpression        shift and go to state 197
    LeftHandSide                   shift and go to state 149
    ConditionalAndExpression       shift and go to state 198
    Name                           shift and go to state 199
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    InclusiveOrExpression          shift and go to state 200
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Primary                        shift and go to state 201
    PrimaryNoNewArray              shift and go to state 202
    ExclusiveOrExpression          shift and go to state 203
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    MethodInvocation               shift and go to state 205
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224

state 229

    (164) DoStatement -> DO prep_fw_stack . begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (302) begin_scope -> .

    IDENTIFIER      reduce using rule 302 (begin_scope -> .)
    IF              reduce using rule 302 (begin_scope -> .)
    WHILE           reduce using rule 302 (begin_scope -> .)
    FOR             reduce using rule 302 (begin_scope -> .)
    LBRACE          reduce using rule 302 (begin_scope -> .)
    SEMI            reduce using rule 302 (begin_scope -> .)
    SWITCH          reduce using rule 302 (begin_scope -> .)
    DO              reduce using rule 302 (begin_scope -> .)
    BREAK           reduce using rule 302 (begin_scope -> .)
    CONTINUE        reduce using rule 302 (begin_scope -> .)
    RETURN          reduce using rule 302 (begin_scope -> .)
    INC             reduce using rule 302 (begin_scope -> .)
    DEC             reduce using rule 302 (begin_scope -> .)
    NEW             reduce using rule 302 (begin_scope -> .)
    SUPER           reduce using rule 302 (begin_scope -> .)
    THIS            reduce using rule 302 (begin_scope -> .)
    LPAREN          reduce using rule 302 (begin_scope -> .)
    DECIMAL_LITERAL reduce using rule 302 (begin_scope -> .)
    HEX_LITERAL     reduce using rule 302 (begin_scope -> .)
    BINARY_LITERAL  reduce using rule 302 (begin_scope -> .)
    FLOAT_LITERAL   reduce using rule 302 (begin_scope -> .)
    BOOL_LITERAL    reduce using rule 302 (begin_scope -> .)
    CHAR_LITERAL    reduce using rule 302 (begin_scope -> .)
    STRING_LITERAL  reduce using rule 302 (begin_scope -> .)
    NULL            reduce using rule 302 (begin_scope -> .)

    begin_scope                    shift and go to state 315

state 230

    (191) BreakStatement -> BREAK IDENTIFIER . SEMI

    SEMI            shift and go to state 316


state 231

    (192) BreakStatement -> BREAK SEMI .

    RBRACE          reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    IDENTIFIER      reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    IF              reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    WHILE           reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    FOR             reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    LBRACE          reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    SEMI            reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    SWITCH          reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    DO              reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    BREAK           reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    CONTINUE        reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    RETURN          reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    BOOLEAN         reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    INC             reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    DEC             reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    NEW             reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    BYTE            reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    SHORT           reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    INT             reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    LONG            reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    CHAR            reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    FLOAT           reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    DOUBLE          reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    SUPER           reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    THIS            reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    LPAREN          reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    DECIMAL_LITERAL reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    HEX_LITERAL     reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    BINARY_LITERAL  reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    FLOAT_LITERAL   reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    BOOL_LITERAL    reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    CHAR_LITERAL    reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    STRING_LITERAL  reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    NULL            reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    CASE            reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    DEFAULT         reduce using rule 192 (BreakStatement -> BREAK SEMI .)
    ELSE            reduce using rule 192 (BreakStatement -> BREAK SEMI .)


state 232

    (193) ContinueStatement -> CONTINUE IDENTIFIER . SEMI

    SEMI            shift and go to state 317


state 233

    (194) ContinueStatement -> CONTINUE SEMI .

    RBRACE          reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    IDENTIFIER      reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    IF              reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    WHILE           reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    FOR             reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    LBRACE          reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    SEMI            reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    SWITCH          reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    DO              reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    BREAK           reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    RETURN          reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    BOOLEAN         reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    INC             reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    DEC             reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    NEW             reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    BYTE            reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    SHORT           reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    INT             reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    LONG            reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    CHAR            reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    FLOAT           reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    DOUBLE          reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    SUPER           reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    THIS            reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    LPAREN          reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    DECIMAL_LITERAL reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    HEX_LITERAL     reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    BINARY_LITERAL  reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    FLOAT_LITERAL   reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    BOOL_LITERAL    reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    CHAR_LITERAL    reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    STRING_LITERAL  reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    NULL            reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    CASE            reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    DEFAULT         reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)
    ELSE            reduce using rule 194 (ContinueStatement -> CONTINUE SEMI .)


state 234

    (195) ReturnStatement -> RETURN Expression . SEMI

    SEMI            shift and go to state 318


state 235

    (196) ReturnStatement -> RETURN SEMI .

    RBRACE          reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    IDENTIFIER      reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    IF              reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    WHILE           reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    FOR             reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    LBRACE          reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    SEMI            reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    SWITCH          reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    DO              reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    BREAK           reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    CONTINUE        reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    RETURN          reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    BOOLEAN         reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    INC             reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    DEC             reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    NEW             reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    BYTE            reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    SHORT           reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    INT             reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    LONG            reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    CHAR            reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    FLOAT           reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    DOUBLE          reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    SUPER           reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    THIS            reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    LPAREN          reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    DECIMAL_LITERAL reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    HEX_LITERAL     reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    BINARY_LITERAL  reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    FLOAT_LITERAL   reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    BOOL_LITERAL    reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    CHAR_LITERAL    reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    STRING_LITERAL  reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    NULL            reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    CASE            reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    DEFAULT         reduce using rule 196 (ReturnStatement -> RETURN SEMI .)
    ELSE            reduce using rule 196 (ReturnStatement -> RETURN SEMI .)


state 236

    (222) MethodInvocation -> Name LPAREN . ArgumentList RPAREN
    (224) MethodInvocation -> Name LPAREN . RPAREN
    (208) ArgumentList -> . Expression
    (209) ArgumentList -> . ArgumentList COMMA Expression
    (298) Expression -> . AssignmentExpression
    (280) AssignmentExpression -> . ConditionalExpression
    (281) AssignmentExpression -> . Assignment
    (278) ConditionalExpression -> . ConditionalOrExpression
    (279) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (275) ConditionalOrExpression -> . ConditionalAndExpression
    (276) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (273) ConditionalAndExpression -> . InclusiveOrExpression
    (274) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC

    RPAREN          shift and go to state 320
    SUPER           shift and go to state 160
    IDENTIFIER      shift and go to state 63
    THIS            shift and go to state 162
    LPAREN          shift and go to state 192
    NEW             shift and go to state 207
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221

    Name                           shift and go to state 199
    ArgumentList                   shift and go to state 319
    Expression                     shift and go to state 321
    AssignmentExpression           shift and go to state 194
    ConditionalExpression          shift and go to state 195
    Assignment                     shift and go to state 196
    ConditionalOrExpression        shift and go to state 197
    LeftHandSide                   shift and go to state 149
    ConditionalAndExpression       shift and go to state 198
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    InclusiveOrExpression          shift and go to state 200
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Primary                        shift and go to state 201
    PrimaryNoNewArray              shift and go to state 202
    ExclusiveOrExpression          shift and go to state 203
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    MethodInvocation               shift and go to state 205
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224

state 237

    (225) ArrayAccess -> Name LBRACK . Expression RBRACK
    (217) Dims -> LBRACK . RBRACK
    (298) Expression -> . AssignmentExpression
    (280) AssignmentExpression -> . ConditionalExpression
    (281) AssignmentExpression -> . Assignment
    (278) ConditionalExpression -> . ConditionalOrExpression
    (279) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (275) ConditionalOrExpression -> . ConditionalAndExpression
    (276) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (273) ConditionalAndExpression -> . InclusiveOrExpression
    (274) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC

    RBRACK          shift and go to state 182
    SUPER           shift and go to state 160
    IDENTIFIER      shift and go to state 63
    THIS            shift and go to state 162
    LPAREN          shift and go to state 192
    NEW             shift and go to state 207
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221

    Name                           shift and go to state 199
    Expression                     shift and go to state 322
    AssignmentExpression           shift and go to state 194
    ConditionalExpression          shift and go to state 195
    Assignment                     shift and go to state 196
    ConditionalOrExpression        shift and go to state 197
    LeftHandSide                   shift and go to state 149
    ConditionalAndExpression       shift and go to state 198
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    InclusiveOrExpression          shift and go to state 200
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Primary                        shift and go to state 201
    PrimaryNoNewArray              shift and go to state 202
    ExclusiveOrExpression          shift and go to state 203
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    MethodInvocation               shift and go to state 205
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224

state 238

    (282) Assignment -> LeftHandSide AssignmentOperator . AssignmentExpression
    (280) AssignmentExpression -> . ConditionalExpression
    (281) AssignmentExpression -> . Assignment
    (278) ConditionalExpression -> . ConditionalOrExpression
    (279) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (275) ConditionalOrExpression -> . ConditionalAndExpression
    (276) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (273) ConditionalAndExpression -> . InclusiveOrExpression
    (274) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC

    SUPER           shift and go to state 160
    IDENTIFIER      shift and go to state 63
    THIS            shift and go to state 162
    LPAREN          shift and go to state 192
    NEW             shift and go to state 207
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221

    LeftHandSide                   shift and go to state 149
    AssignmentExpression           shift and go to state 323
    ConditionalExpression          shift and go to state 195
    Assignment                     shift and go to state 196
    ConditionalOrExpression        shift and go to state 197
    ConditionalAndExpression       shift and go to state 198
    Name                           shift and go to state 199
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    InclusiveOrExpression          shift and go to state 200
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Primary                        shift and go to state 201
    PrimaryNoNewArray              shift and go to state 202
    ExclusiveOrExpression          shift and go to state 203
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    MethodInvocation               shift and go to state 205
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224

state 239

    (286) AssignmentOperator -> ASSIGN .

    SUPER           reduce using rule 286 (AssignmentOperator -> ASSIGN .)
    IDENTIFIER      reduce using rule 286 (AssignmentOperator -> ASSIGN .)
    THIS            reduce using rule 286 (AssignmentOperator -> ASSIGN .)
    LPAREN          reduce using rule 286 (AssignmentOperator -> ASSIGN .)
    NEW             reduce using rule 286 (AssignmentOperator -> ASSIGN .)
    DECIMAL_LITERAL reduce using rule 286 (AssignmentOperator -> ASSIGN .)
    HEX_LITERAL     reduce using rule 286 (AssignmentOperator -> ASSIGN .)
    BINARY_LITERAL  reduce using rule 286 (AssignmentOperator -> ASSIGN .)
    FLOAT_LITERAL   reduce using rule 286 (AssignmentOperator -> ASSIGN .)
    BOOL_LITERAL    reduce using rule 286 (AssignmentOperator -> ASSIGN .)
    CHAR_LITERAL    reduce using rule 286 (AssignmentOperator -> ASSIGN .)
    STRING_LITERAL  reduce using rule 286 (AssignmentOperator -> ASSIGN .)
    NULL            reduce using rule 286 (AssignmentOperator -> ASSIGN .)
    ADD             reduce using rule 286 (AssignmentOperator -> ASSIGN .)
    SUB             reduce using rule 286 (AssignmentOperator -> ASSIGN .)
    INC             reduce using rule 286 (AssignmentOperator -> ASSIGN .)
    DEC             reduce using rule 286 (AssignmentOperator -> ASSIGN .)
    BANG            reduce using rule 286 (AssignmentOperator -> ASSIGN .)
    TILDE           reduce using rule 286 (AssignmentOperator -> ASSIGN .)


state 240

    (287) AssignmentOperator -> ADD_ASSIGN .

    SUPER           reduce using rule 287 (AssignmentOperator -> ADD_ASSIGN .)
    IDENTIFIER      reduce using rule 287 (AssignmentOperator -> ADD_ASSIGN .)
    THIS            reduce using rule 287 (AssignmentOperator -> ADD_ASSIGN .)
    LPAREN          reduce using rule 287 (AssignmentOperator -> ADD_ASSIGN .)
    NEW             reduce using rule 287 (AssignmentOperator -> ADD_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 287 (AssignmentOperator -> ADD_ASSIGN .)
    HEX_LITERAL     reduce using rule 287 (AssignmentOperator -> ADD_ASSIGN .)
    BINARY_LITERAL  reduce using rule 287 (AssignmentOperator -> ADD_ASSIGN .)
    FLOAT_LITERAL   reduce using rule 287 (AssignmentOperator -> ADD_ASSIGN .)
    BOOL_LITERAL    reduce using rule 287 (AssignmentOperator -> ADD_ASSIGN .)
    CHAR_LITERAL    reduce using rule 287 (AssignmentOperator -> ADD_ASSIGN .)
    STRING_LITERAL  reduce using rule 287 (AssignmentOperator -> ADD_ASSIGN .)
    NULL            reduce using rule 287 (AssignmentOperator -> ADD_ASSIGN .)
    ADD             reduce using rule 287 (AssignmentOperator -> ADD_ASSIGN .)
    SUB             reduce using rule 287 (AssignmentOperator -> ADD_ASSIGN .)
    INC             reduce using rule 287 (AssignmentOperator -> ADD_ASSIGN .)
    DEC             reduce using rule 287 (AssignmentOperator -> ADD_ASSIGN .)
    BANG            reduce using rule 287 (AssignmentOperator -> ADD_ASSIGN .)
    TILDE           reduce using rule 287 (AssignmentOperator -> ADD_ASSIGN .)


state 241

    (288) AssignmentOperator -> SUB_ASSIGN .

    SUPER           reduce using rule 288 (AssignmentOperator -> SUB_ASSIGN .)
    IDENTIFIER      reduce using rule 288 (AssignmentOperator -> SUB_ASSIGN .)
    THIS            reduce using rule 288 (AssignmentOperator -> SUB_ASSIGN .)
    LPAREN          reduce using rule 288 (AssignmentOperator -> SUB_ASSIGN .)
    NEW             reduce using rule 288 (AssignmentOperator -> SUB_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 288 (AssignmentOperator -> SUB_ASSIGN .)
    HEX_LITERAL     reduce using rule 288 (AssignmentOperator -> SUB_ASSIGN .)
    BINARY_LITERAL  reduce using rule 288 (AssignmentOperator -> SUB_ASSIGN .)
    FLOAT_LITERAL   reduce using rule 288 (AssignmentOperator -> SUB_ASSIGN .)
    BOOL_LITERAL    reduce using rule 288 (AssignmentOperator -> SUB_ASSIGN .)
    CHAR_LITERAL    reduce using rule 288 (AssignmentOperator -> SUB_ASSIGN .)
    STRING_LITERAL  reduce using rule 288 (AssignmentOperator -> SUB_ASSIGN .)
    NULL            reduce using rule 288 (AssignmentOperator -> SUB_ASSIGN .)
    ADD             reduce using rule 288 (AssignmentOperator -> SUB_ASSIGN .)
    SUB             reduce using rule 288 (AssignmentOperator -> SUB_ASSIGN .)
    INC             reduce using rule 288 (AssignmentOperator -> SUB_ASSIGN .)
    DEC             reduce using rule 288 (AssignmentOperator -> SUB_ASSIGN .)
    BANG            reduce using rule 288 (AssignmentOperator -> SUB_ASSIGN .)
    TILDE           reduce using rule 288 (AssignmentOperator -> SUB_ASSIGN .)


state 242

    (289) AssignmentOperator -> MUL_ASSIGN .

    SUPER           reduce using rule 289 (AssignmentOperator -> MUL_ASSIGN .)
    IDENTIFIER      reduce using rule 289 (AssignmentOperator -> MUL_ASSIGN .)
    THIS            reduce using rule 289 (AssignmentOperator -> MUL_ASSIGN .)
    LPAREN          reduce using rule 289 (AssignmentOperator -> MUL_ASSIGN .)
    NEW             reduce using rule 289 (AssignmentOperator -> MUL_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 289 (AssignmentOperator -> MUL_ASSIGN .)
    HEX_LITERAL     reduce using rule 289 (AssignmentOperator -> MUL_ASSIGN .)
    BINARY_LITERAL  reduce using rule 289 (AssignmentOperator -> MUL_ASSIGN .)
    FLOAT_LITERAL   reduce using rule 289 (AssignmentOperator -> MUL_ASSIGN .)
    BOOL_LITERAL    reduce using rule 289 (AssignmentOperator -> MUL_ASSIGN .)
    CHAR_LITERAL    reduce using rule 289 (AssignmentOperator -> MUL_ASSIGN .)
    STRING_LITERAL  reduce using rule 289 (AssignmentOperator -> MUL_ASSIGN .)
    NULL            reduce using rule 289 (AssignmentOperator -> MUL_ASSIGN .)
    ADD             reduce using rule 289 (AssignmentOperator -> MUL_ASSIGN .)
    SUB             reduce using rule 289 (AssignmentOperator -> MUL_ASSIGN .)
    INC             reduce using rule 289 (AssignmentOperator -> MUL_ASSIGN .)
    DEC             reduce using rule 289 (AssignmentOperator -> MUL_ASSIGN .)
    BANG            reduce using rule 289 (AssignmentOperator -> MUL_ASSIGN .)
    TILDE           reduce using rule 289 (AssignmentOperator -> MUL_ASSIGN .)


state 243

    (290) AssignmentOperator -> DIV_ASSIGN .

    SUPER           reduce using rule 290 (AssignmentOperator -> DIV_ASSIGN .)
    IDENTIFIER      reduce using rule 290 (AssignmentOperator -> DIV_ASSIGN .)
    THIS            reduce using rule 290 (AssignmentOperator -> DIV_ASSIGN .)
    LPAREN          reduce using rule 290 (AssignmentOperator -> DIV_ASSIGN .)
    NEW             reduce using rule 290 (AssignmentOperator -> DIV_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 290 (AssignmentOperator -> DIV_ASSIGN .)
    HEX_LITERAL     reduce using rule 290 (AssignmentOperator -> DIV_ASSIGN .)
    BINARY_LITERAL  reduce using rule 290 (AssignmentOperator -> DIV_ASSIGN .)
    FLOAT_LITERAL   reduce using rule 290 (AssignmentOperator -> DIV_ASSIGN .)
    BOOL_LITERAL    reduce using rule 290 (AssignmentOperator -> DIV_ASSIGN .)
    CHAR_LITERAL    reduce using rule 290 (AssignmentOperator -> DIV_ASSIGN .)
    STRING_LITERAL  reduce using rule 290 (AssignmentOperator -> DIV_ASSIGN .)
    NULL            reduce using rule 290 (AssignmentOperator -> DIV_ASSIGN .)
    ADD             reduce using rule 290 (AssignmentOperator -> DIV_ASSIGN .)
    SUB             reduce using rule 290 (AssignmentOperator -> DIV_ASSIGN .)
    INC             reduce using rule 290 (AssignmentOperator -> DIV_ASSIGN .)
    DEC             reduce using rule 290 (AssignmentOperator -> DIV_ASSIGN .)
    BANG            reduce using rule 290 (AssignmentOperator -> DIV_ASSIGN .)
    TILDE           reduce using rule 290 (AssignmentOperator -> DIV_ASSIGN .)


state 244

    (291) AssignmentOperator -> AND_ASSIGN .

    SUPER           reduce using rule 291 (AssignmentOperator -> AND_ASSIGN .)
    IDENTIFIER      reduce using rule 291 (AssignmentOperator -> AND_ASSIGN .)
    THIS            reduce using rule 291 (AssignmentOperator -> AND_ASSIGN .)
    LPAREN          reduce using rule 291 (AssignmentOperator -> AND_ASSIGN .)
    NEW             reduce using rule 291 (AssignmentOperator -> AND_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 291 (AssignmentOperator -> AND_ASSIGN .)
    HEX_LITERAL     reduce using rule 291 (AssignmentOperator -> AND_ASSIGN .)
    BINARY_LITERAL  reduce using rule 291 (AssignmentOperator -> AND_ASSIGN .)
    FLOAT_LITERAL   reduce using rule 291 (AssignmentOperator -> AND_ASSIGN .)
    BOOL_LITERAL    reduce using rule 291 (AssignmentOperator -> AND_ASSIGN .)
    CHAR_LITERAL    reduce using rule 291 (AssignmentOperator -> AND_ASSIGN .)
    STRING_LITERAL  reduce using rule 291 (AssignmentOperator -> AND_ASSIGN .)
    NULL            reduce using rule 291 (AssignmentOperator -> AND_ASSIGN .)
    ADD             reduce using rule 291 (AssignmentOperator -> AND_ASSIGN .)
    SUB             reduce using rule 291 (AssignmentOperator -> AND_ASSIGN .)
    INC             reduce using rule 291 (AssignmentOperator -> AND_ASSIGN .)
    DEC             reduce using rule 291 (AssignmentOperator -> AND_ASSIGN .)
    BANG            reduce using rule 291 (AssignmentOperator -> AND_ASSIGN .)
    TILDE           reduce using rule 291 (AssignmentOperator -> AND_ASSIGN .)


state 245

    (292) AssignmentOperator -> OR_ASSIGN .

    SUPER           reduce using rule 292 (AssignmentOperator -> OR_ASSIGN .)
    IDENTIFIER      reduce using rule 292 (AssignmentOperator -> OR_ASSIGN .)
    THIS            reduce using rule 292 (AssignmentOperator -> OR_ASSIGN .)
    LPAREN          reduce using rule 292 (AssignmentOperator -> OR_ASSIGN .)
    NEW             reduce using rule 292 (AssignmentOperator -> OR_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 292 (AssignmentOperator -> OR_ASSIGN .)
    HEX_LITERAL     reduce using rule 292 (AssignmentOperator -> OR_ASSIGN .)
    BINARY_LITERAL  reduce using rule 292 (AssignmentOperator -> OR_ASSIGN .)
    FLOAT_LITERAL   reduce using rule 292 (AssignmentOperator -> OR_ASSIGN .)
    BOOL_LITERAL    reduce using rule 292 (AssignmentOperator -> OR_ASSIGN .)
    CHAR_LITERAL    reduce using rule 292 (AssignmentOperator -> OR_ASSIGN .)
    STRING_LITERAL  reduce using rule 292 (AssignmentOperator -> OR_ASSIGN .)
    NULL            reduce using rule 292 (AssignmentOperator -> OR_ASSIGN .)
    ADD             reduce using rule 292 (AssignmentOperator -> OR_ASSIGN .)
    SUB             reduce using rule 292 (AssignmentOperator -> OR_ASSIGN .)
    INC             reduce using rule 292 (AssignmentOperator -> OR_ASSIGN .)
    DEC             reduce using rule 292 (AssignmentOperator -> OR_ASSIGN .)
    BANG            reduce using rule 292 (AssignmentOperator -> OR_ASSIGN .)
    TILDE           reduce using rule 292 (AssignmentOperator -> OR_ASSIGN .)


state 246

    (293) AssignmentOperator -> XOR_ASSIGN .

    SUPER           reduce using rule 293 (AssignmentOperator -> XOR_ASSIGN .)
    IDENTIFIER      reduce using rule 293 (AssignmentOperator -> XOR_ASSIGN .)
    THIS            reduce using rule 293 (AssignmentOperator -> XOR_ASSIGN .)
    LPAREN          reduce using rule 293 (AssignmentOperator -> XOR_ASSIGN .)
    NEW             reduce using rule 293 (AssignmentOperator -> XOR_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 293 (AssignmentOperator -> XOR_ASSIGN .)
    HEX_LITERAL     reduce using rule 293 (AssignmentOperator -> XOR_ASSIGN .)
    BINARY_LITERAL  reduce using rule 293 (AssignmentOperator -> XOR_ASSIGN .)
    FLOAT_LITERAL   reduce using rule 293 (AssignmentOperator -> XOR_ASSIGN .)
    BOOL_LITERAL    reduce using rule 293 (AssignmentOperator -> XOR_ASSIGN .)
    CHAR_LITERAL    reduce using rule 293 (AssignmentOperator -> XOR_ASSIGN .)
    STRING_LITERAL  reduce using rule 293 (AssignmentOperator -> XOR_ASSIGN .)
    NULL            reduce using rule 293 (AssignmentOperator -> XOR_ASSIGN .)
    ADD             reduce using rule 293 (AssignmentOperator -> XOR_ASSIGN .)
    SUB             reduce using rule 293 (AssignmentOperator -> XOR_ASSIGN .)
    INC             reduce using rule 293 (AssignmentOperator -> XOR_ASSIGN .)
    DEC             reduce using rule 293 (AssignmentOperator -> XOR_ASSIGN .)
    BANG            reduce using rule 293 (AssignmentOperator -> XOR_ASSIGN .)
    TILDE           reduce using rule 293 (AssignmentOperator -> XOR_ASSIGN .)


state 247

    (294) AssignmentOperator -> MOD_ASSIGN .

    SUPER           reduce using rule 294 (AssignmentOperator -> MOD_ASSIGN .)
    IDENTIFIER      reduce using rule 294 (AssignmentOperator -> MOD_ASSIGN .)
    THIS            reduce using rule 294 (AssignmentOperator -> MOD_ASSIGN .)
    LPAREN          reduce using rule 294 (AssignmentOperator -> MOD_ASSIGN .)
    NEW             reduce using rule 294 (AssignmentOperator -> MOD_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 294 (AssignmentOperator -> MOD_ASSIGN .)
    HEX_LITERAL     reduce using rule 294 (AssignmentOperator -> MOD_ASSIGN .)
    BINARY_LITERAL  reduce using rule 294 (AssignmentOperator -> MOD_ASSIGN .)
    FLOAT_LITERAL   reduce using rule 294 (AssignmentOperator -> MOD_ASSIGN .)
    BOOL_LITERAL    reduce using rule 294 (AssignmentOperator -> MOD_ASSIGN .)
    CHAR_LITERAL    reduce using rule 294 (AssignmentOperator -> MOD_ASSIGN .)
    STRING_LITERAL  reduce using rule 294 (AssignmentOperator -> MOD_ASSIGN .)
    NULL            reduce using rule 294 (AssignmentOperator -> MOD_ASSIGN .)
    ADD             reduce using rule 294 (AssignmentOperator -> MOD_ASSIGN .)
    SUB             reduce using rule 294 (AssignmentOperator -> MOD_ASSIGN .)
    INC             reduce using rule 294 (AssignmentOperator -> MOD_ASSIGN .)
    DEC             reduce using rule 294 (AssignmentOperator -> MOD_ASSIGN .)
    BANG            reduce using rule 294 (AssignmentOperator -> MOD_ASSIGN .)
    TILDE           reduce using rule 294 (AssignmentOperator -> MOD_ASSIGN .)


state 248

    (295) AssignmentOperator -> LSHIFT_ASSIGN .

    SUPER           reduce using rule 295 (AssignmentOperator -> LSHIFT_ASSIGN .)
    IDENTIFIER      reduce using rule 295 (AssignmentOperator -> LSHIFT_ASSIGN .)
    THIS            reduce using rule 295 (AssignmentOperator -> LSHIFT_ASSIGN .)
    LPAREN          reduce using rule 295 (AssignmentOperator -> LSHIFT_ASSIGN .)
    NEW             reduce using rule 295 (AssignmentOperator -> LSHIFT_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 295 (AssignmentOperator -> LSHIFT_ASSIGN .)
    HEX_LITERAL     reduce using rule 295 (AssignmentOperator -> LSHIFT_ASSIGN .)
    BINARY_LITERAL  reduce using rule 295 (AssignmentOperator -> LSHIFT_ASSIGN .)
    FLOAT_LITERAL   reduce using rule 295 (AssignmentOperator -> LSHIFT_ASSIGN .)
    BOOL_LITERAL    reduce using rule 295 (AssignmentOperator -> LSHIFT_ASSIGN .)
    CHAR_LITERAL    reduce using rule 295 (AssignmentOperator -> LSHIFT_ASSIGN .)
    STRING_LITERAL  reduce using rule 295 (AssignmentOperator -> LSHIFT_ASSIGN .)
    NULL            reduce using rule 295 (AssignmentOperator -> LSHIFT_ASSIGN .)
    ADD             reduce using rule 295 (AssignmentOperator -> LSHIFT_ASSIGN .)
    SUB             reduce using rule 295 (AssignmentOperator -> LSHIFT_ASSIGN .)
    INC             reduce using rule 295 (AssignmentOperator -> LSHIFT_ASSIGN .)
    DEC             reduce using rule 295 (AssignmentOperator -> LSHIFT_ASSIGN .)
    BANG            reduce using rule 295 (AssignmentOperator -> LSHIFT_ASSIGN .)
    TILDE           reduce using rule 295 (AssignmentOperator -> LSHIFT_ASSIGN .)


state 249

    (296) AssignmentOperator -> RSHIFT_ASSIGN .

    SUPER           reduce using rule 296 (AssignmentOperator -> RSHIFT_ASSIGN .)
    IDENTIFIER      reduce using rule 296 (AssignmentOperator -> RSHIFT_ASSIGN .)
    THIS            reduce using rule 296 (AssignmentOperator -> RSHIFT_ASSIGN .)
    LPAREN          reduce using rule 296 (AssignmentOperator -> RSHIFT_ASSIGN .)
    NEW             reduce using rule 296 (AssignmentOperator -> RSHIFT_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 296 (AssignmentOperator -> RSHIFT_ASSIGN .)
    HEX_LITERAL     reduce using rule 296 (AssignmentOperator -> RSHIFT_ASSIGN .)
    BINARY_LITERAL  reduce using rule 296 (AssignmentOperator -> RSHIFT_ASSIGN .)
    FLOAT_LITERAL   reduce using rule 296 (AssignmentOperator -> RSHIFT_ASSIGN .)
    BOOL_LITERAL    reduce using rule 296 (AssignmentOperator -> RSHIFT_ASSIGN .)
    CHAR_LITERAL    reduce using rule 296 (AssignmentOperator -> RSHIFT_ASSIGN .)
    STRING_LITERAL  reduce using rule 296 (AssignmentOperator -> RSHIFT_ASSIGN .)
    NULL            reduce using rule 296 (AssignmentOperator -> RSHIFT_ASSIGN .)
    ADD             reduce using rule 296 (AssignmentOperator -> RSHIFT_ASSIGN .)
    SUB             reduce using rule 296 (AssignmentOperator -> RSHIFT_ASSIGN .)
    INC             reduce using rule 296 (AssignmentOperator -> RSHIFT_ASSIGN .)
    DEC             reduce using rule 296 (AssignmentOperator -> RSHIFT_ASSIGN .)
    BANG            reduce using rule 296 (AssignmentOperator -> RSHIFT_ASSIGN .)
    TILDE           reduce using rule 296 (AssignmentOperator -> RSHIFT_ASSIGN .)


state 250

    (297) AssignmentOperator -> URSHIFT_ASSIGN .

    SUPER           reduce using rule 297 (AssignmentOperator -> URSHIFT_ASSIGN .)
    IDENTIFIER      reduce using rule 297 (AssignmentOperator -> URSHIFT_ASSIGN .)
    THIS            reduce using rule 297 (AssignmentOperator -> URSHIFT_ASSIGN .)
    LPAREN          reduce using rule 297 (AssignmentOperator -> URSHIFT_ASSIGN .)
    NEW             reduce using rule 297 (AssignmentOperator -> URSHIFT_ASSIGN .)
    DECIMAL_LITERAL reduce using rule 297 (AssignmentOperator -> URSHIFT_ASSIGN .)
    HEX_LITERAL     reduce using rule 297 (AssignmentOperator -> URSHIFT_ASSIGN .)
    BINARY_LITERAL  reduce using rule 297 (AssignmentOperator -> URSHIFT_ASSIGN .)
    FLOAT_LITERAL   reduce using rule 297 (AssignmentOperator -> URSHIFT_ASSIGN .)
    BOOL_LITERAL    reduce using rule 297 (AssignmentOperator -> URSHIFT_ASSIGN .)
    CHAR_LITERAL    reduce using rule 297 (AssignmentOperator -> URSHIFT_ASSIGN .)
    STRING_LITERAL  reduce using rule 297 (AssignmentOperator -> URSHIFT_ASSIGN .)
    NULL            reduce using rule 297 (AssignmentOperator -> URSHIFT_ASSIGN .)
    ADD             reduce using rule 297 (AssignmentOperator -> URSHIFT_ASSIGN .)
    SUB             reduce using rule 297 (AssignmentOperator -> URSHIFT_ASSIGN .)
    INC             reduce using rule 297 (AssignmentOperator -> URSHIFT_ASSIGN .)
    DEC             reduce using rule 297 (AssignmentOperator -> URSHIFT_ASSIGN .)
    BANG            reduce using rule 297 (AssignmentOperator -> URSHIFT_ASSIGN .)
    TILDE           reduce using rule 297 (AssignmentOperator -> URSHIFT_ASSIGN .)


state 251

    (238) PreIncrementExpression -> INC UnaryExpression .

    SEMI            reduce using rule 238 (PreIncrementExpression -> INC UnaryExpression .)
    MUL             reduce using rule 238 (PreIncrementExpression -> INC UnaryExpression .)
    DIV             reduce using rule 238 (PreIncrementExpression -> INC UnaryExpression .)
    MOD             reduce using rule 238 (PreIncrementExpression -> INC UnaryExpression .)
    ADD             reduce using rule 238 (PreIncrementExpression -> INC UnaryExpression .)
    SUB             reduce using rule 238 (PreIncrementExpression -> INC UnaryExpression .)
    LSHIFT          reduce using rule 238 (PreIncrementExpression -> INC UnaryExpression .)
    RSHIFT          reduce using rule 238 (PreIncrementExpression -> INC UnaryExpression .)
    URSHIFT         reduce using rule 238 (PreIncrementExpression -> INC UnaryExpression .)
    LT              reduce using rule 238 (PreIncrementExpression -> INC UnaryExpression .)
    GT              reduce using rule 238 (PreIncrementExpression -> INC UnaryExpression .)
    LE              reduce using rule 238 (PreIncrementExpression -> INC UnaryExpression .)
    GE              reduce using rule 238 (PreIncrementExpression -> INC UnaryExpression .)
    EQUAL           reduce using rule 238 (PreIncrementExpression -> INC UnaryExpression .)
    NOTEQUAL        reduce using rule 238 (PreIncrementExpression -> INC UnaryExpression .)
    BITAND          reduce using rule 238 (PreIncrementExpression -> INC UnaryExpression .)
    CARET           reduce using rule 238 (PreIncrementExpression -> INC UnaryExpression .)
    BITOR           reduce using rule 238 (PreIncrementExpression -> INC UnaryExpression .)
    AND             reduce using rule 238 (PreIncrementExpression -> INC UnaryExpression .)
    QUESTION        reduce using rule 238 (PreIncrementExpression -> INC UnaryExpression .)
    OR              reduce using rule 238 (PreIncrementExpression -> INC UnaryExpression .)
    RPAREN          reduce using rule 238 (PreIncrementExpression -> INC UnaryExpression .)
    COMMA           reduce using rule 238 (PreIncrementExpression -> INC UnaryExpression .)
    RBRACK          reduce using rule 238 (PreIncrementExpression -> INC UnaryExpression .)
    COLON           reduce using rule 238 (PreIncrementExpression -> INC UnaryExpression .)


state 252

    (227) PostfixExpression -> Primary .
    (219) FieldAccess -> Primary . DOT Name
    (221) MethodInvocation -> Primary . DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> Primary . DOT IDENTIFIER LPAREN RPAREN

    INC             reduce using rule 227 (PostfixExpression -> Primary .)
    DEC             reduce using rule 227 (PostfixExpression -> Primary .)
    SEMI            reduce using rule 227 (PostfixExpression -> Primary .)
    MUL             reduce using rule 227 (PostfixExpression -> Primary .)
    DIV             reduce using rule 227 (PostfixExpression -> Primary .)
    MOD             reduce using rule 227 (PostfixExpression -> Primary .)
    ADD             reduce using rule 227 (PostfixExpression -> Primary .)
    SUB             reduce using rule 227 (PostfixExpression -> Primary .)
    LSHIFT          reduce using rule 227 (PostfixExpression -> Primary .)
    RSHIFT          reduce using rule 227 (PostfixExpression -> Primary .)
    URSHIFT         reduce using rule 227 (PostfixExpression -> Primary .)
    LT              reduce using rule 227 (PostfixExpression -> Primary .)
    GT              reduce using rule 227 (PostfixExpression -> Primary .)
    LE              reduce using rule 227 (PostfixExpression -> Primary .)
    GE              reduce using rule 227 (PostfixExpression -> Primary .)
    EQUAL           reduce using rule 227 (PostfixExpression -> Primary .)
    NOTEQUAL        reduce using rule 227 (PostfixExpression -> Primary .)
    BITAND          reduce using rule 227 (PostfixExpression -> Primary .)
    CARET           reduce using rule 227 (PostfixExpression -> Primary .)
    BITOR           reduce using rule 227 (PostfixExpression -> Primary .)
    AND             reduce using rule 227 (PostfixExpression -> Primary .)
    QUESTION        reduce using rule 227 (PostfixExpression -> Primary .)
    OR              reduce using rule 227 (PostfixExpression -> Primary .)
    RPAREN          reduce using rule 227 (PostfixExpression -> Primary .)
    COMMA           reduce using rule 227 (PostfixExpression -> Primary .)
    RBRACK          reduce using rule 227 (PostfixExpression -> Primary .)
    COLON           reduce using rule 227 (PostfixExpression -> Primary .)
    DOT             shift and go to state 290


state 253

    (228) PostfixExpression -> Name .
    (31) QualifiedName -> Name . DOT IDENTIFIER
    (222) MethodInvocation -> Name . LPAREN ArgumentList RPAREN
    (224) MethodInvocation -> Name . LPAREN RPAREN
    (225) ArrayAccess -> Name . LBRACK Expression RBRACK

    INC             reduce using rule 228 (PostfixExpression -> Name .)
    DEC             reduce using rule 228 (PostfixExpression -> Name .)
    SEMI            reduce using rule 228 (PostfixExpression -> Name .)
    MUL             reduce using rule 228 (PostfixExpression -> Name .)
    DIV             reduce using rule 228 (PostfixExpression -> Name .)
    MOD             reduce using rule 228 (PostfixExpression -> Name .)
    ADD             reduce using rule 228 (PostfixExpression -> Name .)
    SUB             reduce using rule 228 (PostfixExpression -> Name .)
    LSHIFT          reduce using rule 228 (PostfixExpression -> Name .)
    RSHIFT          reduce using rule 228 (PostfixExpression -> Name .)
    URSHIFT         reduce using rule 228 (PostfixExpression -> Name .)
    LT              reduce using rule 228 (PostfixExpression -> Name .)
    GT              reduce using rule 228 (PostfixExpression -> Name .)
    LE              reduce using rule 228 (PostfixExpression -> Name .)
    GE              reduce using rule 228 (PostfixExpression -> Name .)
    EQUAL           reduce using rule 228 (PostfixExpression -> Name .)
    NOTEQUAL        reduce using rule 228 (PostfixExpression -> Name .)
    BITAND          reduce using rule 228 (PostfixExpression -> Name .)
    CARET           reduce using rule 228 (PostfixExpression -> Name .)
    BITOR           reduce using rule 228 (PostfixExpression -> Name .)
    AND             reduce using rule 228 (PostfixExpression -> Name .)
    QUESTION        reduce using rule 228 (PostfixExpression -> Name .)
    OR              reduce using rule 228 (PostfixExpression -> Name .)
    RPAREN          reduce using rule 228 (PostfixExpression -> Name .)
    COMMA           reduce using rule 228 (PostfixExpression -> Name .)
    RBRACK          reduce using rule 228 (PostfixExpression -> Name .)
    COLON           reduce using rule 228 (PostfixExpression -> Name .)
    DOT             shift and go to state 103
    LPAREN          shift and go to state 236
    LBRACK          shift and go to state 288


state 254

    (244) CastExpression -> LPAREN . PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> LPAREN . PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> LPAREN . Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> LPAREN . Name Dims RPAREN UnaryExpressionNotAddSub
    (201) PrimaryNoNewArray -> LPAREN . Expression RPAREN
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (298) Expression -> . AssignmentExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (280) AssignmentExpression -> . ConditionalExpression
    (281) AssignmentExpression -> . Assignment
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (278) ConditionalExpression -> . ConditionalOrExpression
    (279) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (275) ConditionalOrExpression -> . ConditionalAndExpression
    (276) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (273) ConditionalAndExpression -> . InclusiveOrExpression
    (274) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC

    BOOLEAN         shift and go to state 65
    IDENTIFIER      shift and go to state 63
    BYTE            shift and go to state 71
    SHORT           shift and go to state 72
    INT             shift and go to state 73
    LONG            shift and go to state 74
    CHAR            shift and go to state 75
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 77
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 192
    NEW             shift and go to state 207
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221

    PrimitiveType                  shift and go to state 282
    UnaryExpression                shift and go to state 215
    Expression                     shift and go to state 324
    UnaryExpressionNotAddSub       shift and go to state 218
    Name                           shift and go to state 283
    NumericType                    shift and go to state 64
    AssignmentExpression           shift and go to state 194
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    IntegralType                   shift and go to state 68
    FloatingPointType              shift and go to state 69
    ConditionalExpression          shift and go to state 195
    Assignment                     shift and go to state 196
    ConditionalOrExpression        shift and go to state 197
    LeftHandSide                   shift and go to state 149
    ConditionalAndExpression       shift and go to state 198
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    InclusiveOrExpression          shift and go to state 200
    Primary                        shift and go to state 201
    PrimaryNoNewArray              shift and go to state 202
    ExclusiveOrExpression          shift and go to state 203
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    MethodInvocation               shift and go to state 205
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224

state 255

    (203) PrimaryNoNewArray -> FieldAccess .

    LBRACK          reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    DOT             reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    INC             reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    DEC             reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    SEMI            reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    MUL             reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    DIV             reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    MOD             reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    ADD             reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    SUB             reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    LSHIFT          reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    RSHIFT          reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    URSHIFT         reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    LT              reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    GT              reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    LE              reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    GE              reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    EQUAL           reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    NOTEQUAL        reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    BITAND          reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    CARET           reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    BITOR           reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    AND             reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    QUESTION        reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    OR              reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    RPAREN          reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    COMMA           reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    RBRACK          reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)
    COLON           reduce using rule 203 (PrimaryNoNewArray -> FieldAccess .)


state 256

    (205) PrimaryNoNewArray -> ArrayAccess .

    LBRACK          reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    DOT             reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    INC             reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    DEC             reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    SEMI            reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    MUL             reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    DIV             reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    MOD             reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    ADD             reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    SUB             reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    LSHIFT          reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    RSHIFT          reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    URSHIFT         reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    LT              reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    GT              reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    LE              reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    GE              reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    EQUAL           reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    NOTEQUAL        reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    BITAND          reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    CARET           reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    BITOR           reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    AND             reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    QUESTION        reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    OR              reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    RPAREN          reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    COMMA           reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    RBRACK          reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)
    COLON           reduce using rule 205 (PrimaryNoNewArray -> ArrayAccess .)


state 257

    (239) PreDecrementExpression -> DEC UnaryExpression .

    SEMI            reduce using rule 239 (PreDecrementExpression -> DEC UnaryExpression .)
    MUL             reduce using rule 239 (PreDecrementExpression -> DEC UnaryExpression .)
    DIV             reduce using rule 239 (PreDecrementExpression -> DEC UnaryExpression .)
    MOD             reduce using rule 239 (PreDecrementExpression -> DEC UnaryExpression .)
    ADD             reduce using rule 239 (PreDecrementExpression -> DEC UnaryExpression .)
    SUB             reduce using rule 239 (PreDecrementExpression -> DEC UnaryExpression .)
    LSHIFT          reduce using rule 239 (PreDecrementExpression -> DEC UnaryExpression .)
    RSHIFT          reduce using rule 239 (PreDecrementExpression -> DEC UnaryExpression .)
    URSHIFT         reduce using rule 239 (PreDecrementExpression -> DEC UnaryExpression .)
    LT              reduce using rule 239 (PreDecrementExpression -> DEC UnaryExpression .)
    GT              reduce using rule 239 (PreDecrementExpression -> DEC UnaryExpression .)
    LE              reduce using rule 239 (PreDecrementExpression -> DEC UnaryExpression .)
    GE              reduce using rule 239 (PreDecrementExpression -> DEC UnaryExpression .)
    EQUAL           reduce using rule 239 (PreDecrementExpression -> DEC UnaryExpression .)
    NOTEQUAL        reduce using rule 239 (PreDecrementExpression -> DEC UnaryExpression .)
    BITAND          reduce using rule 239 (PreDecrementExpression -> DEC UnaryExpression .)
    CARET           reduce using rule 239 (PreDecrementExpression -> DEC UnaryExpression .)
    BITOR           reduce using rule 239 (PreDecrementExpression -> DEC UnaryExpression .)
    AND             reduce using rule 239 (PreDecrementExpression -> DEC UnaryExpression .)
    QUESTION        reduce using rule 239 (PreDecrementExpression -> DEC UnaryExpression .)
    OR              reduce using rule 239 (PreDecrementExpression -> DEC UnaryExpression .)
    RPAREN          reduce using rule 239 (PreDecrementExpression -> DEC UnaryExpression .)
    COMMA           reduce using rule 239 (PreDecrementExpression -> DEC UnaryExpression .)
    RBRACK          reduce using rule 239 (PreDecrementExpression -> DEC UnaryExpression .)
    COLON           reduce using rule 239 (PreDecrementExpression -> DEC UnaryExpression .)


state 258

    (231) PostIncrementExpression -> PostfixExpression INC .

    SEMI            reduce using rule 231 (PostIncrementExpression -> PostfixExpression INC .)
    INC             reduce using rule 231 (PostIncrementExpression -> PostfixExpression INC .)
    DEC             reduce using rule 231 (PostIncrementExpression -> PostfixExpression INC .)
    MUL             reduce using rule 231 (PostIncrementExpression -> PostfixExpression INC .)
    DIV             reduce using rule 231 (PostIncrementExpression -> PostfixExpression INC .)
    MOD             reduce using rule 231 (PostIncrementExpression -> PostfixExpression INC .)
    ADD             reduce using rule 231 (PostIncrementExpression -> PostfixExpression INC .)
    SUB             reduce using rule 231 (PostIncrementExpression -> PostfixExpression INC .)
    LSHIFT          reduce using rule 231 (PostIncrementExpression -> PostfixExpression INC .)
    RSHIFT          reduce using rule 231 (PostIncrementExpression -> PostfixExpression INC .)
    URSHIFT         reduce using rule 231 (PostIncrementExpression -> PostfixExpression INC .)
    LT              reduce using rule 231 (PostIncrementExpression -> PostfixExpression INC .)
    GT              reduce using rule 231 (PostIncrementExpression -> PostfixExpression INC .)
    LE              reduce using rule 231 (PostIncrementExpression -> PostfixExpression INC .)
    GE              reduce using rule 231 (PostIncrementExpression -> PostfixExpression INC .)
    EQUAL           reduce using rule 231 (PostIncrementExpression -> PostfixExpression INC .)
    NOTEQUAL        reduce using rule 231 (PostIncrementExpression -> PostfixExpression INC .)
    BITAND          reduce using rule 231 (PostIncrementExpression -> PostfixExpression INC .)
    CARET           reduce using rule 231 (PostIncrementExpression -> PostfixExpression INC .)
    BITOR           reduce using rule 231 (PostIncrementExpression -> PostfixExpression INC .)
    AND             reduce using rule 231 (PostIncrementExpression -> PostfixExpression INC .)
    QUESTION        reduce using rule 231 (PostIncrementExpression -> PostfixExpression INC .)
    OR              reduce using rule 231 (PostIncrementExpression -> PostfixExpression INC .)
    RPAREN          reduce using rule 231 (PostIncrementExpression -> PostfixExpression INC .)
    COMMA           reduce using rule 231 (PostIncrementExpression -> PostfixExpression INC .)
    RBRACK          reduce using rule 231 (PostIncrementExpression -> PostfixExpression INC .)
    COLON           reduce using rule 231 (PostIncrementExpression -> PostfixExpression INC .)


state 259

    (232) PostDecrementExpression -> PostfixExpression DEC .

    SEMI            reduce using rule 232 (PostDecrementExpression -> PostfixExpression DEC .)
    INC             reduce using rule 232 (PostDecrementExpression -> PostfixExpression DEC .)
    DEC             reduce using rule 232 (PostDecrementExpression -> PostfixExpression DEC .)
    MUL             reduce using rule 232 (PostDecrementExpression -> PostfixExpression DEC .)
    DIV             reduce using rule 232 (PostDecrementExpression -> PostfixExpression DEC .)
    MOD             reduce using rule 232 (PostDecrementExpression -> PostfixExpression DEC .)
    ADD             reduce using rule 232 (PostDecrementExpression -> PostfixExpression DEC .)
    SUB             reduce using rule 232 (PostDecrementExpression -> PostfixExpression DEC .)
    LSHIFT          reduce using rule 232 (PostDecrementExpression -> PostfixExpression DEC .)
    RSHIFT          reduce using rule 232 (PostDecrementExpression -> PostfixExpression DEC .)
    URSHIFT         reduce using rule 232 (PostDecrementExpression -> PostfixExpression DEC .)
    LT              reduce using rule 232 (PostDecrementExpression -> PostfixExpression DEC .)
    GT              reduce using rule 232 (PostDecrementExpression -> PostfixExpression DEC .)
    LE              reduce using rule 232 (PostDecrementExpression -> PostfixExpression DEC .)
    GE              reduce using rule 232 (PostDecrementExpression -> PostfixExpression DEC .)
    EQUAL           reduce using rule 232 (PostDecrementExpression -> PostfixExpression DEC .)
    NOTEQUAL        reduce using rule 232 (PostDecrementExpression -> PostfixExpression DEC .)
    BITAND          reduce using rule 232 (PostDecrementExpression -> PostfixExpression DEC .)
    CARET           reduce using rule 232 (PostDecrementExpression -> PostfixExpression DEC .)
    BITOR           reduce using rule 232 (PostDecrementExpression -> PostfixExpression DEC .)
    AND             reduce using rule 232 (PostDecrementExpression -> PostfixExpression DEC .)
    QUESTION        reduce using rule 232 (PostDecrementExpression -> PostfixExpression DEC .)
    OR              reduce using rule 232 (PostDecrementExpression -> PostfixExpression DEC .)
    RPAREN          reduce using rule 232 (PostDecrementExpression -> PostfixExpression DEC .)
    COMMA           reduce using rule 232 (PostDecrementExpression -> PostfixExpression DEC .)
    RBRACK          reduce using rule 232 (PostDecrementExpression -> PostfixExpression DEC .)
    COLON           reduce using rule 232 (PostDecrementExpression -> PostfixExpression DEC .)


state 260

    (221) MethodInvocation -> Primary DOT . IDENTIFIER LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> Primary DOT . IDENTIFIER LPAREN RPAREN
    (219) FieldAccess -> Primary DOT . Name
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER

    IDENTIFIER      shift and go to state 325

    Name                           shift and go to state 326
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78

state 261

    (206) ClassInstanceCreationExpression -> NEW ClassType . LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> NEW ClassType . LPAREN ArgumentList RPAREN
    (212) ArrayCreationExpression -> NEW ClassType . DimExprs Dims
    (213) ArrayCreationExpression -> NEW ClassType . DimExprs
    (214) DimExprs -> . DimExpr
    (215) DimExprs -> . DimExprs DimExpr
    (216) DimExpr -> . LBRACK Expression RBRACK

    LPAREN          shift and go to state 327
    LBRACK          shift and go to state 330

    DimExprs                       shift and go to state 328
    DimExpr                        shift and go to state 329

state 262

    (210) ArrayCreationExpression -> NEW PrimitiveType . DimExprs Dims
    (211) ArrayCreationExpression -> NEW PrimitiveType . DimExprs
    (214) DimExprs -> . DimExpr
    (215) DimExprs -> . DimExprs DimExpr
    (216) DimExpr -> . LBRACK Expression RBRACK

    LBRACK          shift and go to state 330

    DimExprs                       shift and go to state 331
    DimExpr                        shift and go to state 329

state 263

    (25) ClassType -> Name .
    (31) QualifiedName -> Name . DOT IDENTIFIER

    LPAREN          reduce using rule 25 (ClassType -> Name .)
    LBRACK          reduce using rule 25 (ClassType -> Name .)
    DOT             shift and go to state 103


state 264

    (226) ArrayAccess -> PrimaryNoNewArray LBRACK . Expression RBRACK
    (298) Expression -> . AssignmentExpression
    (280) AssignmentExpression -> . ConditionalExpression
    (281) AssignmentExpression -> . Assignment
    (278) ConditionalExpression -> . ConditionalOrExpression
    (279) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (275) ConditionalOrExpression -> . ConditionalAndExpression
    (276) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (273) ConditionalAndExpression -> . InclusiveOrExpression
    (274) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC

    SUPER           shift and go to state 160
    IDENTIFIER      shift and go to state 63
    THIS            shift and go to state 162
    LPAREN          shift and go to state 192
    NEW             shift and go to state 207
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221

    PrimaryNoNewArray              shift and go to state 202
    Expression                     shift and go to state 332
    AssignmentExpression           shift and go to state 194
    ConditionalExpression          shift and go to state 195
    Assignment                     shift and go to state 196
    ConditionalOrExpression        shift and go to state 197
    LeftHandSide                   shift and go to state 149
    ConditionalAndExpression       shift and go to state 198
    Name                           shift and go to state 199
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    InclusiveOrExpression          shift and go to state 200
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Primary                        shift and go to state 201
    ExclusiveOrExpression          shift and go to state 203
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    MethodInvocation               shift and go to state 205
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224

state 265

    (220) FieldAccess -> SUPER DOT . Name
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER

    IDENTIFIER      shift and go to state 63

    Name                           shift and go to state 333
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78

state 266

    (91) StaticInitializer -> begin_scope STATIC Block end_scope .

    RBRACE          reduce using rule 91 (StaticInitializer -> begin_scope STATIC Block end_scope .)
    VOID            reduce using rule 91 (StaticInitializer -> begin_scope STATIC Block end_scope .)
    STATIC          reduce using rule 91 (StaticInitializer -> begin_scope STATIC Block end_scope .)
    FINAL           reduce using rule 91 (StaticInitializer -> begin_scope STATIC Block end_scope .)
    PRIVATE         reduce using rule 91 (StaticInitializer -> begin_scope STATIC Block end_scope .)
    PROTECTED       reduce using rule 91 (StaticInitializer -> begin_scope STATIC Block end_scope .)
    PUBLIC          reduce using rule 91 (StaticInitializer -> begin_scope STATIC Block end_scope .)
    IDENTIFIER      reduce using rule 91 (StaticInitializer -> begin_scope STATIC Block end_scope .)
    BOOLEAN         reduce using rule 91 (StaticInitializer -> begin_scope STATIC Block end_scope .)
    BYTE            reduce using rule 91 (StaticInitializer -> begin_scope STATIC Block end_scope .)
    SHORT           reduce using rule 91 (StaticInitializer -> begin_scope STATIC Block end_scope .)
    INT             reduce using rule 91 (StaticInitializer -> begin_scope STATIC Block end_scope .)
    LONG            reduce using rule 91 (StaticInitializer -> begin_scope STATIC Block end_scope .)
    CHAR            reduce using rule 91 (StaticInitializer -> begin_scope STATIC Block end_scope .)
    FLOAT           reduce using rule 91 (StaticInitializer -> begin_scope STATIC Block end_scope .)
    DOUBLE          reduce using rule 91 (StaticInitializer -> begin_scope STATIC Block end_scope .)


state 267

    (73) VariableDeclarators -> VariableDeclarators COMMA VariableDeclarator .

    SEMI            reduce using rule 73 (VariableDeclarators -> VariableDeclarators COMMA VariableDeclarator .)
    COMMA           reduce using rule 73 (VariableDeclarators -> VariableDeclarators COMMA VariableDeclarator .)


state 268

    (84) MethodDeclarator -> IDENTIFIER LPAREN RPAREN .

    SEMI            reduce using rule 84 (MethodDeclarator -> IDENTIFIER LPAREN RPAREN .)
    LBRACE          reduce using rule 84 (MethodDeclarator -> IDENTIFIER LPAREN RPAREN .)


state 269

    (85) MethodDeclarator -> IDENTIFIER LPAREN FormalParameterList . RPAREN
    (87) FormalParameterList -> FormalParameterList . COMMA FormalParameter

    RPAREN          shift and go to state 334
    COMMA           shift and go to state 335


state 270

    (86) FormalParameterList -> FormalParameter .

    RPAREN          reduce using rule 86 (FormalParameterList -> FormalParameter .)
    COMMA           reduce using rule 86 (FormalParameterList -> FormalParameter .)


state 271

    (88) FormalParameter -> Type . VariableDeclaratorId
    (76) VariableDeclaratorId -> . IDENTIFIER
    (77) VariableDeclaratorId -> . IDENTIFIER Dims

    IDENTIFIER      shift and go to state 189

    VariableDeclaratorId           shift and go to state 336

state 272

    (75) VariableDeclarator -> VariableDeclaratorId ASSIGN VariableInitializer .

    SEMI            reduce using rule 75 (VariableDeclarator -> VariableDeclaratorId ASSIGN VariableInitializer .)
    COMMA           reduce using rule 75 (VariableDeclarator -> VariableDeclaratorId ASSIGN VariableInitializer .)


state 273

    (78) VariableInitializer -> Expression .

    SEMI            reduce using rule 78 (VariableInitializer -> Expression .)
    COMMA           reduce using rule 78 (VariableInitializer -> Expression .)


state 274

    (104) Block -> LBRACE BlockStatements RBRACE .

    RBRACE          reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    VOID            reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    STATIC          reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    FINAL           reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    PRIVATE         reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    PROTECTED       reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    PUBLIC          reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    IDENTIFIER      reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    BOOLEAN         reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    BYTE            reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    SHORT           reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    INT             reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    LONG            reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    CHAR            reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    FLOAT           reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    DOUBLE          reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    IF              reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    WHILE           reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    FOR             reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    LBRACE          reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    SEMI            reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    SWITCH          reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    DO              reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    BREAK           reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    CONTINUE        reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    RETURN          reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    INC             reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    DEC             reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    NEW             reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    SUPER           reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    THIS            reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    LPAREN          reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    DECIMAL_LITERAL reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    HEX_LITERAL     reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    BINARY_LITERAL  reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    FLOAT_LITERAL   reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    BOOL_LITERAL    reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    CHAR_LITERAL    reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    STRING_LITERAL  reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    NULL            reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    CASE            reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    DEFAULT         reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)
    ELSE            reduce using rule 104 (Block -> LBRACE BlockStatements RBRACE .)


state 275

    (94) ConstructorDeclarator -> SimpleName LPAREN decl_mark FormalParameterList . RPAREN
    (87) FormalParameterList -> FormalParameterList . COMMA FormalParameter

    RPAREN          shift and go to state 337
    COMMA           shift and go to state 335


state 276

    (95) ConstructorDeclarator -> SimpleName decl_mark LPAREN RPAREN .

    LBRACE          reduce using rule 95 (ConstructorDeclarator -> SimpleName decl_mark LPAREN RPAREN .)
    RBRACE          reduce using rule 95 (ConstructorDeclarator -> SimpleName decl_mark LPAREN RPAREN .)
    VOID            reduce using rule 95 (ConstructorDeclarator -> SimpleName decl_mark LPAREN RPAREN .)
    STATIC          reduce using rule 95 (ConstructorDeclarator -> SimpleName decl_mark LPAREN RPAREN .)
    FINAL           reduce using rule 95 (ConstructorDeclarator -> SimpleName decl_mark LPAREN RPAREN .)
    PRIVATE         reduce using rule 95 (ConstructorDeclarator -> SimpleName decl_mark LPAREN RPAREN .)
    PROTECTED       reduce using rule 95 (ConstructorDeclarator -> SimpleName decl_mark LPAREN RPAREN .)
    PUBLIC          reduce using rule 95 (ConstructorDeclarator -> SimpleName decl_mark LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 95 (ConstructorDeclarator -> SimpleName decl_mark LPAREN RPAREN .)
    BOOLEAN         reduce using rule 95 (ConstructorDeclarator -> SimpleName decl_mark LPAREN RPAREN .)
    BYTE            reduce using rule 95 (ConstructorDeclarator -> SimpleName decl_mark LPAREN RPAREN .)
    SHORT           reduce using rule 95 (ConstructorDeclarator -> SimpleName decl_mark LPAREN RPAREN .)
    INT             reduce using rule 95 (ConstructorDeclarator -> SimpleName decl_mark LPAREN RPAREN .)
    LONG            reduce using rule 95 (ConstructorDeclarator -> SimpleName decl_mark LPAREN RPAREN .)
    CHAR            reduce using rule 95 (ConstructorDeclarator -> SimpleName decl_mark LPAREN RPAREN .)
    FLOAT           reduce using rule 95 (ConstructorDeclarator -> SimpleName decl_mark LPAREN RPAREN .)
    DOUBLE          reduce using rule 95 (ConstructorDeclarator -> SimpleName decl_mark LPAREN RPAREN .)


state 277

    (218) Dims -> Dims LBRACK RBRACK .

    LBRACK          reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    IDENTIFIER      reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    ASSIGN          reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    SEMI            reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    COMMA           reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    RPAREN          reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    DOT             reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    INC             reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    DEC             reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    MUL             reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    DIV             reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    MOD             reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    ADD             reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    SUB             reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    LSHIFT          reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    RSHIFT          reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    URSHIFT         reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    LT              reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    GT              reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    LE              reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    GE              reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    EQUAL           reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    NOTEQUAL        reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    BITAND          reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    CARET           reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    BITOR           reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    AND             reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    QUESTION        reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    OR              reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    RBRACK          reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)
    COLON           reduce using rule 218 (Dims -> Dims LBRACK RBRACK .)


state 278

    (131) LabeledStatement -> IDENTIFIER COLON Statement .

    RBRACE          reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    IDENTIFIER      reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    IF              reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    WHILE           reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    FOR             reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    LBRACE          reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    SEMI            reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    SWITCH          reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    DO              reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    BREAK           reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    CONTINUE        reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    RETURN          reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    BOOLEAN         reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    INC             reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    DEC             reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    NEW             reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    BYTE            reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    SHORT           reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    INT             reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    LONG            reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    CHAR            reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    FLOAT           reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    DOUBLE          reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    SUPER           reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    THIS            reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    LPAREN          reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    DECIMAL_LITERAL reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    HEX_LITERAL     reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    BINARY_LITERAL  reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    FLOAT_LITERAL   reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    BOOL_LITERAL    reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    CHAR_LITERAL    reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    STRING_LITERAL  reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    NULL            reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    CASE            reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)
    DEFAULT         reduce using rule 131 (LabeledStatement -> IDENTIFIER COLON Statement .)


state 279

    (222) MethodInvocation -> Name . LPAREN ArgumentList RPAREN
    (224) MethodInvocation -> Name . LPAREN RPAREN
    (283) LeftHandSide -> Name .
    (228) PostfixExpression -> Name .
    (225) ArrayAccess -> Name . LBRACK Expression RBRACK
    (31) QualifiedName -> Name . DOT IDENTIFIER

    LPAREN          shift and go to state 236
    ASSIGN          reduce using rule 283 (LeftHandSide -> Name .)
    ADD_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    SUB_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    MUL_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    DIV_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    AND_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    OR_ASSIGN       reduce using rule 283 (LeftHandSide -> Name .)
    XOR_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    MOD_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    LSHIFT_ASSIGN   reduce using rule 283 (LeftHandSide -> Name .)
    RSHIFT_ASSIGN   reduce using rule 283 (LeftHandSide -> Name .)
    URSHIFT_ASSIGN  reduce using rule 283 (LeftHandSide -> Name .)
    INC             reduce using rule 228 (PostfixExpression -> Name .)
    DEC             reduce using rule 228 (PostfixExpression -> Name .)
    LBRACK          shift and go to state 288
    DOT             shift and go to state 103


state 280

    (141) IfThenStatement -> IF begin_scope LPAREN . Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> IF begin_scope LPAREN . Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (298) Expression -> . AssignmentExpression
    (280) AssignmentExpression -> . ConditionalExpression
    (281) AssignmentExpression -> . Assignment
    (278) ConditionalExpression -> . ConditionalOrExpression
    (279) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (275) ConditionalOrExpression -> . ConditionalAndExpression
    (276) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (273) ConditionalAndExpression -> . InclusiveOrExpression
    (274) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC

    SUPER           shift and go to state 160
    IDENTIFIER      shift and go to state 63
    THIS            shift and go to state 162
    LPAREN          shift and go to state 192
    NEW             shift and go to state 207
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221

    Expression                     shift and go to state 338
    AssignmentExpression           shift and go to state 194
    ConditionalExpression          shift and go to state 195
    Assignment                     shift and go to state 196
    ConditionalOrExpression        shift and go to state 197
    LeftHandSide                   shift and go to state 149
    ConditionalAndExpression       shift and go to state 198
    Name                           shift and go to state 199
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    InclusiveOrExpression          shift and go to state 200
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Primary                        shift and go to state 201
    PrimaryNoNewArray              shift and go to state 202
    ExclusiveOrExpression          shift and go to state 203
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    MethodInvocation               shift and go to state 205
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224

state 281

    (201) PrimaryNoNewArray -> LPAREN Expression . RPAREN
    (246) CastExpression -> LPAREN Expression . RPAREN UnaryExpressionNotAddSub

    RPAREN          shift and go to state 339


state 282

    (244) CastExpression -> LPAREN PrimitiveType . Dims RPAREN UnaryExpression
    (245) CastExpression -> LPAREN PrimitiveType . RPAREN UnaryExpression
    (217) Dims -> . LBRACK RBRACK
    (218) Dims -> . Dims LBRACK RBRACK

    RPAREN          shift and go to state 341
    LBRACK          shift and go to state 99

    Dims                           shift and go to state 340

state 283

    (247) CastExpression -> LPAREN Name . Dims RPAREN UnaryExpressionNotAddSub
    (31) QualifiedName -> Name . DOT IDENTIFIER
    (283) LeftHandSide -> Name .
    (225) ArrayAccess -> Name . LBRACK Expression RBRACK
    (222) MethodInvocation -> Name . LPAREN ArgumentList RPAREN
    (224) MethodInvocation -> Name . LPAREN RPAREN
    (228) PostfixExpression -> Name .
    (217) Dims -> . LBRACK RBRACK
    (218) Dims -> . Dims LBRACK RBRACK

    DOT             shift and go to state 103
    ASSIGN          reduce using rule 283 (LeftHandSide -> Name .)
    ADD_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    SUB_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    MUL_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    DIV_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    AND_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    OR_ASSIGN       reduce using rule 283 (LeftHandSide -> Name .)
    XOR_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    MOD_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    LSHIFT_ASSIGN   reduce using rule 283 (LeftHandSide -> Name .)
    RSHIFT_ASSIGN   reduce using rule 283 (LeftHandSide -> Name .)
    URSHIFT_ASSIGN  reduce using rule 283 (LeftHandSide -> Name .)
    LBRACK          shift and go to state 237
    LPAREN          shift and go to state 236
    INC             reduce using rule 228 (PostfixExpression -> Name .)
    DEC             reduce using rule 228 (PostfixExpression -> Name .)
    MUL             reduce using rule 228 (PostfixExpression -> Name .)
    DIV             reduce using rule 228 (PostfixExpression -> Name .)
    MOD             reduce using rule 228 (PostfixExpression -> Name .)
    ADD             reduce using rule 228 (PostfixExpression -> Name .)
    SUB             reduce using rule 228 (PostfixExpression -> Name .)
    LSHIFT          reduce using rule 228 (PostfixExpression -> Name .)
    RSHIFT          reduce using rule 228 (PostfixExpression -> Name .)
    URSHIFT         reduce using rule 228 (PostfixExpression -> Name .)
    LT              reduce using rule 228 (PostfixExpression -> Name .)
    GT              reduce using rule 228 (PostfixExpression -> Name .)
    LE              reduce using rule 228 (PostfixExpression -> Name .)
    GE              reduce using rule 228 (PostfixExpression -> Name .)
    EQUAL           reduce using rule 228 (PostfixExpression -> Name .)
    NOTEQUAL        reduce using rule 228 (PostfixExpression -> Name .)
    BITAND          reduce using rule 228 (PostfixExpression -> Name .)
    CARET           reduce using rule 228 (PostfixExpression -> Name .)
    BITOR           reduce using rule 228 (PostfixExpression -> Name .)
    AND             reduce using rule 228 (PostfixExpression -> Name .)
    QUESTION        reduce using rule 228 (PostfixExpression -> Name .)
    OR              reduce using rule 228 (PostfixExpression -> Name .)
    RPAREN          reduce using rule 228 (PostfixExpression -> Name .)

    Dims                           shift and go to state 342

state 284

    (201) PrimaryNoNewArray -> LPAREN Expression RPAREN .

    LBRACK          reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    DOT             reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    INC             reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    DEC             reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)


state 285

    (279) ConditionalExpression -> ConditionalOrExpression QUESTION . Expression COLON ConditionalExpression
    (298) Expression -> . AssignmentExpression
    (280) AssignmentExpression -> . ConditionalExpression
    (281) AssignmentExpression -> . Assignment
    (278) ConditionalExpression -> . ConditionalOrExpression
    (279) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (275) ConditionalOrExpression -> . ConditionalAndExpression
    (276) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (273) ConditionalAndExpression -> . InclusiveOrExpression
    (274) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC

    SUPER           shift and go to state 160
    IDENTIFIER      shift and go to state 63
    THIS            shift and go to state 162
    LPAREN          shift and go to state 192
    NEW             shift and go to state 207
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221

    ConditionalOrExpression        shift and go to state 197
    Expression                     shift and go to state 343
    ConditionalExpression          shift and go to state 195
    AssignmentExpression           shift and go to state 194
    Assignment                     shift and go to state 196
    LeftHandSide                   shift and go to state 149
    ConditionalAndExpression       shift and go to state 198
    Name                           shift and go to state 199
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    InclusiveOrExpression          shift and go to state 200
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Primary                        shift and go to state 201
    PrimaryNoNewArray              shift and go to state 202
    ExclusiveOrExpression          shift and go to state 203
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    MethodInvocation               shift and go to state 205
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224

state 286

    (276) ConditionalOrExpression -> ConditionalOrExpression OR . ConMarker ConditionalAndExpression
    (277) ConMarker -> .

    ADD             reduce using rule 277 (ConMarker -> .)
    SUB             reduce using rule 277 (ConMarker -> .)
    INC             reduce using rule 277 (ConMarker -> .)
    DEC             reduce using rule 277 (ConMarker -> .)
    BANG            reduce using rule 277 (ConMarker -> .)
    TILDE           reduce using rule 277 (ConMarker -> .)
    LPAREN          reduce using rule 277 (ConMarker -> .)
    THIS            reduce using rule 277 (ConMarker -> .)
    NEW             reduce using rule 277 (ConMarker -> .)
    IDENTIFIER      reduce using rule 277 (ConMarker -> .)
    DECIMAL_LITERAL reduce using rule 277 (ConMarker -> .)
    HEX_LITERAL     reduce using rule 277 (ConMarker -> .)
    BINARY_LITERAL  reduce using rule 277 (ConMarker -> .)
    FLOAT_LITERAL   reduce using rule 277 (ConMarker -> .)
    BOOL_LITERAL    reduce using rule 277 (ConMarker -> .)
    CHAR_LITERAL    reduce using rule 277 (ConMarker -> .)
    STRING_LITERAL  reduce using rule 277 (ConMarker -> .)
    NULL            reduce using rule 277 (ConMarker -> .)
    SUPER           reduce using rule 277 (ConMarker -> .)

    ConMarker                      shift and go to state 344

state 287

    (274) ConditionalAndExpression -> ConditionalAndExpression AND . ConMarker InclusiveOrExpression
    (277) ConMarker -> .

    ADD             reduce using rule 277 (ConMarker -> .)
    SUB             reduce using rule 277 (ConMarker -> .)
    INC             reduce using rule 277 (ConMarker -> .)
    DEC             reduce using rule 277 (ConMarker -> .)
    BANG            reduce using rule 277 (ConMarker -> .)
    TILDE           reduce using rule 277 (ConMarker -> .)
    LPAREN          reduce using rule 277 (ConMarker -> .)
    THIS            reduce using rule 277 (ConMarker -> .)
    NEW             reduce using rule 277 (ConMarker -> .)
    IDENTIFIER      reduce using rule 277 (ConMarker -> .)
    DECIMAL_LITERAL reduce using rule 277 (ConMarker -> .)
    HEX_LITERAL     reduce using rule 277 (ConMarker -> .)
    BINARY_LITERAL  reduce using rule 277 (ConMarker -> .)
    FLOAT_LITERAL   reduce using rule 277 (ConMarker -> .)
    BOOL_LITERAL    reduce using rule 277 (ConMarker -> .)
    CHAR_LITERAL    reduce using rule 277 (ConMarker -> .)
    STRING_LITERAL  reduce using rule 277 (ConMarker -> .)
    NULL            reduce using rule 277 (ConMarker -> .)
    SUPER           reduce using rule 277 (ConMarker -> .)

    ConMarker                      shift and go to state 345

state 288

    (225) ArrayAccess -> Name LBRACK . Expression RBRACK
    (298) Expression -> . AssignmentExpression
    (280) AssignmentExpression -> . ConditionalExpression
    (281) AssignmentExpression -> . Assignment
    (278) ConditionalExpression -> . ConditionalOrExpression
    (279) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (275) ConditionalOrExpression -> . ConditionalAndExpression
    (276) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (273) ConditionalAndExpression -> . InclusiveOrExpression
    (274) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC

    SUPER           shift and go to state 160
    IDENTIFIER      shift and go to state 63
    THIS            shift and go to state 162
    LPAREN          shift and go to state 192
    NEW             shift and go to state 207
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221

    Name                           shift and go to state 199
    Expression                     shift and go to state 322
    AssignmentExpression           shift and go to state 194
    ConditionalExpression          shift and go to state 195
    Assignment                     shift and go to state 196
    ConditionalOrExpression        shift and go to state 197
    LeftHandSide                   shift and go to state 149
    ConditionalAndExpression       shift and go to state 198
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    InclusiveOrExpression          shift and go to state 200
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Primary                        shift and go to state 201
    PrimaryNoNewArray              shift and go to state 202
    ExclusiveOrExpression          shift and go to state 203
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    MethodInvocation               shift and go to state 205
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224

state 289

    (272) InclusiveOrExpression -> InclusiveOrExpression BITOR . ExclusiveOrExpression
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    ExclusiveOrExpression          shift and go to state 346
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 290

    (219) FieldAccess -> Primary DOT . Name
    (221) MethodInvocation -> Primary DOT . IDENTIFIER LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> Primary DOT . IDENTIFIER LPAREN RPAREN
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER

    IDENTIFIER      shift and go to state 325

    Name                           shift and go to state 326
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78

state 291

    (270) ExclusiveOrExpression -> ExclusiveOrExpression CARET . AndExpression
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    AndExpression                  shift and go to state 347
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 292

    (268) AndExpression -> AndExpression BITAND . EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    EqualityExpression             shift and go to state 348
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 293

    (212) ArrayCreationExpression -> NEW ClassType . DimExprs Dims
    (213) ArrayCreationExpression -> NEW ClassType . DimExprs
    (206) ClassInstanceCreationExpression -> NEW ClassType . LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> NEW ClassType . LPAREN ArgumentList RPAREN
    (214) DimExprs -> . DimExpr
    (215) DimExprs -> . DimExprs DimExpr
    (216) DimExpr -> . LBRACK Expression RBRACK

    LPAREN          shift and go to state 327
    LBRACK          shift and go to state 330

    DimExprs                       shift and go to state 328
    DimExpr                        shift and go to state 329

state 294

    (265) EqualityExpression -> EqualityExpression EQUAL . RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    RelationalExpression           shift and go to state 349
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 295

    (266) EqualityExpression -> EqualityExpression NOTEQUAL . RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    RelationalExpression           shift and go to state 350
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 296

    (260) RelationalExpression -> RelationalExpression LT . ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    ShiftExpression                shift and go to state 351
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 297

    (261) RelationalExpression -> RelationalExpression GT . ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    ShiftExpression                shift and go to state 352
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 298

    (262) RelationalExpression -> RelationalExpression LE . ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    ShiftExpression                shift and go to state 353
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 299

    (263) RelationalExpression -> RelationalExpression GE . ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    ShiftExpression                shift and go to state 354
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 300

    (256) ShiftExpression -> ShiftExpression LSHIFT . AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    AdditiveExpression             shift and go to state 355
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 301

    (257) ShiftExpression -> ShiftExpression RSHIFT . AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    AdditiveExpression             shift and go to state 356
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 302

    (258) ShiftExpression -> ShiftExpression URSHIFT . AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    AdditiveExpression             shift and go to state 357
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 303

    (253) AdditiveExpression -> AdditiveExpression ADD . MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    MultiplicativeExpression       shift and go to state 358
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 304

    (254) AdditiveExpression -> AdditiveExpression SUB . MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    MultiplicativeExpression       shift and go to state 359
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 305

    (249) MultiplicativeExpression -> MultiplicativeExpression MUL . UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    UnaryExpression                shift and go to state 360
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 306

    (250) MultiplicativeExpression -> MultiplicativeExpression DIV . UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    UnaryExpression                shift and go to state 361
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 307

    (251) MultiplicativeExpression -> MultiplicativeExpression MOD . UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    UnaryExpression                shift and go to state 362
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 308

    (235) UnaryExpression -> ADD UnaryExpression .

    MUL             reduce using rule 235 (UnaryExpression -> ADD UnaryExpression .)
    DIV             reduce using rule 235 (UnaryExpression -> ADD UnaryExpression .)
    MOD             reduce using rule 235 (UnaryExpression -> ADD UnaryExpression .)
    ADD             reduce using rule 235 (UnaryExpression -> ADD UnaryExpression .)
    SUB             reduce using rule 235 (UnaryExpression -> ADD UnaryExpression .)
    LSHIFT          reduce using rule 235 (UnaryExpression -> ADD UnaryExpression .)
    RSHIFT          reduce using rule 235 (UnaryExpression -> ADD UnaryExpression .)
    URSHIFT         reduce using rule 235 (UnaryExpression -> ADD UnaryExpression .)
    LT              reduce using rule 235 (UnaryExpression -> ADD UnaryExpression .)
    GT              reduce using rule 235 (UnaryExpression -> ADD UnaryExpression .)
    LE              reduce using rule 235 (UnaryExpression -> ADD UnaryExpression .)
    GE              reduce using rule 235 (UnaryExpression -> ADD UnaryExpression .)
    EQUAL           reduce using rule 235 (UnaryExpression -> ADD UnaryExpression .)
    NOTEQUAL        reduce using rule 235 (UnaryExpression -> ADD UnaryExpression .)
    BITAND          reduce using rule 235 (UnaryExpression -> ADD UnaryExpression .)
    CARET           reduce using rule 235 (UnaryExpression -> ADD UnaryExpression .)
    BITOR           reduce using rule 235 (UnaryExpression -> ADD UnaryExpression .)
    AND             reduce using rule 235 (UnaryExpression -> ADD UnaryExpression .)
    QUESTION        reduce using rule 235 (UnaryExpression -> ADD UnaryExpression .)
    OR              reduce using rule 235 (UnaryExpression -> ADD UnaryExpression .)
    RPAREN          reduce using rule 235 (UnaryExpression -> ADD UnaryExpression .)
    SEMI            reduce using rule 235 (UnaryExpression -> ADD UnaryExpression .)
    COMMA           reduce using rule 235 (UnaryExpression -> ADD UnaryExpression .)
    RBRACK          reduce using rule 235 (UnaryExpression -> ADD UnaryExpression .)
    COLON           reduce using rule 235 (UnaryExpression -> ADD UnaryExpression .)


state 309

    (236) UnaryExpression -> SUB UnaryExpression .

    MUL             reduce using rule 236 (UnaryExpression -> SUB UnaryExpression .)
    DIV             reduce using rule 236 (UnaryExpression -> SUB UnaryExpression .)
    MOD             reduce using rule 236 (UnaryExpression -> SUB UnaryExpression .)
    ADD             reduce using rule 236 (UnaryExpression -> SUB UnaryExpression .)
    SUB             reduce using rule 236 (UnaryExpression -> SUB UnaryExpression .)
    LSHIFT          reduce using rule 236 (UnaryExpression -> SUB UnaryExpression .)
    RSHIFT          reduce using rule 236 (UnaryExpression -> SUB UnaryExpression .)
    URSHIFT         reduce using rule 236 (UnaryExpression -> SUB UnaryExpression .)
    LT              reduce using rule 236 (UnaryExpression -> SUB UnaryExpression .)
    GT              reduce using rule 236 (UnaryExpression -> SUB UnaryExpression .)
    LE              reduce using rule 236 (UnaryExpression -> SUB UnaryExpression .)
    GE              reduce using rule 236 (UnaryExpression -> SUB UnaryExpression .)
    EQUAL           reduce using rule 236 (UnaryExpression -> SUB UnaryExpression .)
    NOTEQUAL        reduce using rule 236 (UnaryExpression -> SUB UnaryExpression .)
    BITAND          reduce using rule 236 (UnaryExpression -> SUB UnaryExpression .)
    CARET           reduce using rule 236 (UnaryExpression -> SUB UnaryExpression .)
    BITOR           reduce using rule 236 (UnaryExpression -> SUB UnaryExpression .)
    AND             reduce using rule 236 (UnaryExpression -> SUB UnaryExpression .)
    QUESTION        reduce using rule 236 (UnaryExpression -> SUB UnaryExpression .)
    OR              reduce using rule 236 (UnaryExpression -> SUB UnaryExpression .)
    RPAREN          reduce using rule 236 (UnaryExpression -> SUB UnaryExpression .)
    SEMI            reduce using rule 236 (UnaryExpression -> SUB UnaryExpression .)
    COMMA           reduce using rule 236 (UnaryExpression -> SUB UnaryExpression .)
    RBRACK          reduce using rule 236 (UnaryExpression -> SUB UnaryExpression .)
    COLON           reduce using rule 236 (UnaryExpression -> SUB UnaryExpression .)


state 310

    (241) UnaryExpressionNotAddSub -> BANG UnaryExpression .

    MUL             reduce using rule 241 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    DIV             reduce using rule 241 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    MOD             reduce using rule 241 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    ADD             reduce using rule 241 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    SUB             reduce using rule 241 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    LSHIFT          reduce using rule 241 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    RSHIFT          reduce using rule 241 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    URSHIFT         reduce using rule 241 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    LT              reduce using rule 241 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    GT              reduce using rule 241 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    LE              reduce using rule 241 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    GE              reduce using rule 241 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    EQUAL           reduce using rule 241 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    NOTEQUAL        reduce using rule 241 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    BITAND          reduce using rule 241 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    CARET           reduce using rule 241 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    BITOR           reduce using rule 241 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    AND             reduce using rule 241 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    QUESTION        reduce using rule 241 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    OR              reduce using rule 241 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    RPAREN          reduce using rule 241 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    SEMI            reduce using rule 241 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    COMMA           reduce using rule 241 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    RBRACK          reduce using rule 241 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)
    COLON           reduce using rule 241 (UnaryExpressionNotAddSub -> BANG UnaryExpression .)


state 311

    (242) UnaryExpressionNotAddSub -> TILDE UnaryExpression .

    MUL             reduce using rule 242 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    DIV             reduce using rule 242 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    MOD             reduce using rule 242 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    ADD             reduce using rule 242 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    SUB             reduce using rule 242 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    LSHIFT          reduce using rule 242 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    RSHIFT          reduce using rule 242 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    URSHIFT         reduce using rule 242 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    LT              reduce using rule 242 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    GT              reduce using rule 242 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    LE              reduce using rule 242 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    GE              reduce using rule 242 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    EQUAL           reduce using rule 242 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    NOTEQUAL        reduce using rule 242 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    BITAND          reduce using rule 242 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    CARET           reduce using rule 242 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    BITOR           reduce using rule 242 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    AND             reduce using rule 242 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    QUESTION        reduce using rule 242 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    OR              reduce using rule 242 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    RPAREN          reduce using rule 242 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    SEMI            reduce using rule 242 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    COMMA           reduce using rule 242 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    RBRACK          reduce using rule 242 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)
    COLON           reduce using rule 242 (UnaryExpressionNotAddSub -> TILDE UnaryExpression .)


state 312

    (159) WhileStatement -> WHILE prep_fw_stack LPAREN . begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (302) begin_scope -> .

    SUPER           reduce using rule 302 (begin_scope -> .)
    IDENTIFIER      reduce using rule 302 (begin_scope -> .)
    THIS            reduce using rule 302 (begin_scope -> .)
    LPAREN          reduce using rule 302 (begin_scope -> .)
    NEW             reduce using rule 302 (begin_scope -> .)
    DECIMAL_LITERAL reduce using rule 302 (begin_scope -> .)
    HEX_LITERAL     reduce using rule 302 (begin_scope -> .)
    BINARY_LITERAL  reduce using rule 302 (begin_scope -> .)
    FLOAT_LITERAL   reduce using rule 302 (begin_scope -> .)
    BOOL_LITERAL    reduce using rule 302 (begin_scope -> .)
    CHAR_LITERAL    reduce using rule 302 (begin_scope -> .)
    STRING_LITERAL  reduce using rule 302 (begin_scope -> .)
    NULL            reduce using rule 302 (begin_scope -> .)
    ADD             reduce using rule 302 (begin_scope -> .)
    SUB             reduce using rule 302 (begin_scope -> .)
    INC             reduce using rule 302 (begin_scope -> .)
    DEC             reduce using rule 302 (begin_scope -> .)
    BANG            reduce using rule 302 (begin_scope -> .)
    TILDE           reduce using rule 302 (begin_scope -> .)

    begin_scope                    shift and go to state 363

state 313

    (167) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (302) begin_scope -> .

    SEMI            reduce using rule 302 (begin_scope -> .)
    INC             reduce using rule 302 (begin_scope -> .)
    DEC             reduce using rule 302 (begin_scope -> .)
    NEW             reduce using rule 302 (begin_scope -> .)
    BOOLEAN         reduce using rule 302 (begin_scope -> .)
    SUPER           reduce using rule 302 (begin_scope -> .)
    THIS            reduce using rule 302 (begin_scope -> .)
    LPAREN          reduce using rule 302 (begin_scope -> .)
    IDENTIFIER      reduce using rule 302 (begin_scope -> .)
    BYTE            reduce using rule 302 (begin_scope -> .)
    SHORT           reduce using rule 302 (begin_scope -> .)
    INT             reduce using rule 302 (begin_scope -> .)
    LONG            reduce using rule 302 (begin_scope -> .)
    CHAR            reduce using rule 302 (begin_scope -> .)
    FLOAT           reduce using rule 302 (begin_scope -> .)
    DOUBLE          reduce using rule 302 (begin_scope -> .)
    DECIMAL_LITERAL reduce using rule 302 (begin_scope -> .)
    HEX_LITERAL     reduce using rule 302 (begin_scope -> .)
    BINARY_LITERAL  reduce using rule 302 (begin_scope -> .)
    FLOAT_LITERAL   reduce using rule 302 (begin_scope -> .)
    BOOL_LITERAL    reduce using rule 302 (begin_scope -> .)
    CHAR_LITERAL    reduce using rule 302 (begin_scope -> .)
    STRING_LITERAL  reduce using rule 302 (begin_scope -> .)
    NULL            reduce using rule 302 (begin_scope -> .)

    begin_scope                    shift and go to state 364

state 314

    (147) SwitchStatement -> SWITCH LPAREN Expression . RPAREN SwitchBlock

    RPAREN          shift and go to state 365


state 315

    (164) DoStatement -> DO prep_fw_stack begin_scope . dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (165) dwhile_l1 -> .

    IDENTIFIER      reduce using rule 165 (dwhile_l1 -> .)
    IF              reduce using rule 165 (dwhile_l1 -> .)
    WHILE           reduce using rule 165 (dwhile_l1 -> .)
    FOR             reduce using rule 165 (dwhile_l1 -> .)
    LBRACE          reduce using rule 165 (dwhile_l1 -> .)
    SEMI            reduce using rule 165 (dwhile_l1 -> .)
    SWITCH          reduce using rule 165 (dwhile_l1 -> .)
    DO              reduce using rule 165 (dwhile_l1 -> .)
    BREAK           reduce using rule 165 (dwhile_l1 -> .)
    CONTINUE        reduce using rule 165 (dwhile_l1 -> .)
    RETURN          reduce using rule 165 (dwhile_l1 -> .)
    INC             reduce using rule 165 (dwhile_l1 -> .)
    DEC             reduce using rule 165 (dwhile_l1 -> .)
    NEW             reduce using rule 165 (dwhile_l1 -> .)
    SUPER           reduce using rule 165 (dwhile_l1 -> .)
    THIS            reduce using rule 165 (dwhile_l1 -> .)
    LPAREN          reduce using rule 165 (dwhile_l1 -> .)
    DECIMAL_LITERAL reduce using rule 165 (dwhile_l1 -> .)
    HEX_LITERAL     reduce using rule 165 (dwhile_l1 -> .)
    BINARY_LITERAL  reduce using rule 165 (dwhile_l1 -> .)
    FLOAT_LITERAL   reduce using rule 165 (dwhile_l1 -> .)
    BOOL_LITERAL    reduce using rule 165 (dwhile_l1 -> .)
    CHAR_LITERAL    reduce using rule 165 (dwhile_l1 -> .)
    STRING_LITERAL  reduce using rule 165 (dwhile_l1 -> .)
    NULL            reduce using rule 165 (dwhile_l1 -> .)

    dwhile_l1                      shift and go to state 366

state 316

    (191) BreakStatement -> BREAK IDENTIFIER SEMI .

    RBRACE          reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    IDENTIFIER      reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    IF              reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    WHILE           reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    FOR             reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    LBRACE          reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    SEMI            reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    SWITCH          reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    DO              reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    BREAK           reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    CONTINUE        reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    RETURN          reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    BOOLEAN         reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    INC             reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    DEC             reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    NEW             reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    BYTE            reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    SHORT           reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    INT             reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    LONG            reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    CHAR            reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    FLOAT           reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    DOUBLE          reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    SUPER           reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    THIS            reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    LPAREN          reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    DECIMAL_LITERAL reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    HEX_LITERAL     reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    BINARY_LITERAL  reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    FLOAT_LITERAL   reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    BOOL_LITERAL    reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    CHAR_LITERAL    reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    STRING_LITERAL  reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    NULL            reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    CASE            reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    DEFAULT         reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)
    ELSE            reduce using rule 191 (BreakStatement -> BREAK IDENTIFIER SEMI .)


state 317

    (193) ContinueStatement -> CONTINUE IDENTIFIER SEMI .

    RBRACE          reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    IDENTIFIER      reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    IF              reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    WHILE           reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    FOR             reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    LBRACE          reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    SEMI            reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    SWITCH          reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    DO              reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    BREAK           reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    CONTINUE        reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    RETURN          reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    BOOLEAN         reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    INC             reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    DEC             reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    NEW             reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    BYTE            reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    SHORT           reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    INT             reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    LONG            reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    CHAR            reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    FLOAT           reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    DOUBLE          reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    SUPER           reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    THIS            reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    LPAREN          reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    DECIMAL_LITERAL reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    HEX_LITERAL     reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    BINARY_LITERAL  reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    FLOAT_LITERAL   reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    BOOL_LITERAL    reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    CHAR_LITERAL    reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    STRING_LITERAL  reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    NULL            reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    CASE            reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    DEFAULT         reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)
    ELSE            reduce using rule 193 (ContinueStatement -> CONTINUE IDENTIFIER SEMI .)


state 318

    (195) ReturnStatement -> RETURN Expression SEMI .

    RBRACE          reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    IDENTIFIER      reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    IF              reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    WHILE           reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    FOR             reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    LBRACE          reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    SEMI            reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    SWITCH          reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    DO              reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    BREAK           reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    CONTINUE        reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    RETURN          reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    BOOLEAN         reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    INC             reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    DEC             reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    NEW             reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    BYTE            reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    SHORT           reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    INT             reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    LONG            reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    CHAR            reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    FLOAT           reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    DOUBLE          reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    SUPER           reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    THIS            reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    LPAREN          reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    DECIMAL_LITERAL reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    HEX_LITERAL     reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    BINARY_LITERAL  reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    FLOAT_LITERAL   reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    BOOL_LITERAL    reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    CHAR_LITERAL    reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    STRING_LITERAL  reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    NULL            reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    CASE            reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    DEFAULT         reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)
    ELSE            reduce using rule 195 (ReturnStatement -> RETURN Expression SEMI .)


state 319

    (222) MethodInvocation -> Name LPAREN ArgumentList . RPAREN
    (209) ArgumentList -> ArgumentList . COMMA Expression

    RPAREN          shift and go to state 367
    COMMA           shift and go to state 368


state 320

    (224) MethodInvocation -> Name LPAREN RPAREN .

    SEMI            reduce using rule 224 (MethodInvocation -> Name LPAREN RPAREN .)
    LBRACK          reduce using rule 224 (MethodInvocation -> Name LPAREN RPAREN .)
    DOT             reduce using rule 224 (MethodInvocation -> Name LPAREN RPAREN .)
    INC             reduce using rule 224 (MethodInvocation -> Name LPAREN RPAREN .)
    DEC             reduce using rule 224 (MethodInvocation -> Name LPAREN RPAREN .)
    MUL             reduce using rule 224 (MethodInvocation -> Name LPAREN RPAREN .)
    DIV             reduce using rule 224 (MethodInvocation -> Name LPAREN RPAREN .)
    MOD             reduce using rule 224 (MethodInvocation -> Name LPAREN RPAREN .)
    ADD             reduce using rule 224 (MethodInvocation -> Name LPAREN RPAREN .)
    SUB             reduce using rule 224 (MethodInvocation -> Name LPAREN RPAREN .)
    LSHIFT          reduce using rule 224 (MethodInvocation -> Name LPAREN RPAREN .)
    RSHIFT          reduce using rule 224 (MethodInvocation -> Name LPAREN RPAREN .)
    URSHIFT         reduce using rule 224 (MethodInvocation -> Name LPAREN RPAREN .)
    LT              reduce using rule 224 (MethodInvocation -> Name LPAREN RPAREN .)
    GT              reduce using rule 224 (MethodInvocation -> Name LPAREN RPAREN .)
    LE              reduce using rule 224 (MethodInvocation -> Name LPAREN RPAREN .)
    GE              reduce using rule 224 (MethodInvocation -> Name LPAREN RPAREN .)
    EQUAL           reduce using rule 224 (MethodInvocation -> Name LPAREN RPAREN .)
    NOTEQUAL        reduce using rule 224 (MethodInvocation -> Name LPAREN RPAREN .)
    BITAND          reduce using rule 224 (MethodInvocation -> Name LPAREN RPAREN .)
    CARET           reduce using rule 224 (MethodInvocation -> Name LPAREN RPAREN .)
    BITOR           reduce using rule 224 (MethodInvocation -> Name LPAREN RPAREN .)
    AND             reduce using rule 224 (MethodInvocation -> Name LPAREN RPAREN .)
    QUESTION        reduce using rule 224 (MethodInvocation -> Name LPAREN RPAREN .)
    OR              reduce using rule 224 (MethodInvocation -> Name LPAREN RPAREN .)
    RPAREN          reduce using rule 224 (MethodInvocation -> Name LPAREN RPAREN .)
    COMMA           reduce using rule 224 (MethodInvocation -> Name LPAREN RPAREN .)
    RBRACK          reduce using rule 224 (MethodInvocation -> Name LPAREN RPAREN .)
    COLON           reduce using rule 224 (MethodInvocation -> Name LPAREN RPAREN .)


state 321

    (208) ArgumentList -> Expression .

    RPAREN          reduce using rule 208 (ArgumentList -> Expression .)
    COMMA           reduce using rule 208 (ArgumentList -> Expression .)


state 322

    (225) ArrayAccess -> Name LBRACK Expression . RBRACK

    RBRACK          shift and go to state 369


state 323

    (282) Assignment -> LeftHandSide AssignmentOperator AssignmentExpression .

    SEMI            reduce using rule 282 (Assignment -> LeftHandSide AssignmentOperator AssignmentExpression .)
    RPAREN          reduce using rule 282 (Assignment -> LeftHandSide AssignmentOperator AssignmentExpression .)
    COMMA           reduce using rule 282 (Assignment -> LeftHandSide AssignmentOperator AssignmentExpression .)
    RBRACK          reduce using rule 282 (Assignment -> LeftHandSide AssignmentOperator AssignmentExpression .)
    COLON           reduce using rule 282 (Assignment -> LeftHandSide AssignmentOperator AssignmentExpression .)


state 324

    (246) CastExpression -> LPAREN Expression . RPAREN UnaryExpressionNotAddSub
    (201) PrimaryNoNewArray -> LPAREN Expression . RPAREN

    RPAREN          shift and go to state 370


state 325

    (221) MethodInvocation -> Primary DOT IDENTIFIER . LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> Primary DOT IDENTIFIER . LPAREN RPAREN
    (30) SimpleName -> IDENTIFIER .

    LPAREN          shift and go to state 371
    DOT             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    ASSIGN          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 30 (SimpleName -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 30 (SimpleName -> IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 30 (SimpleName -> IDENTIFIER .)
    URSHIFT_ASSIGN  reduce using rule 30 (SimpleName -> IDENTIFIER .)
    LBRACK          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    INC             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    DEC             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    MUL             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    DIV             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    MOD             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    ADD             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    SUB             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    LSHIFT          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    RSHIFT          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    URSHIFT         reduce using rule 30 (SimpleName -> IDENTIFIER .)
    LT              reduce using rule 30 (SimpleName -> IDENTIFIER .)
    GT              reduce using rule 30 (SimpleName -> IDENTIFIER .)
    LE              reduce using rule 30 (SimpleName -> IDENTIFIER .)
    GE              reduce using rule 30 (SimpleName -> IDENTIFIER .)
    EQUAL           reduce using rule 30 (SimpleName -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 30 (SimpleName -> IDENTIFIER .)
    BITAND          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    CARET           reduce using rule 30 (SimpleName -> IDENTIFIER .)
    BITOR           reduce using rule 30 (SimpleName -> IDENTIFIER .)
    AND             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    QUESTION        reduce using rule 30 (SimpleName -> IDENTIFIER .)
    OR              reduce using rule 30 (SimpleName -> IDENTIFIER .)
    RPAREN          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    SEMI            reduce using rule 30 (SimpleName -> IDENTIFIER .)
    COMMA           reduce using rule 30 (SimpleName -> IDENTIFIER .)
    RBRACK          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    COLON           reduce using rule 30 (SimpleName -> IDENTIFIER .)


state 326

    (219) FieldAccess -> Primary DOT Name .
    (31) QualifiedName -> Name . DOT IDENTIFIER

  ! shift/reduce conflict for DOT resolved as shift
    ASSIGN          reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    ADD_ASSIGN      reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    SUB_ASSIGN      reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    MUL_ASSIGN      reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    DIV_ASSIGN      reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    AND_ASSIGN      reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    OR_ASSIGN       reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    XOR_ASSIGN      reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    MOD_ASSIGN      reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    LSHIFT_ASSIGN   reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    RSHIFT_ASSIGN   reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    URSHIFT_ASSIGN  reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    LBRACK          reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    INC             reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    DEC             reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    MUL             reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    DIV             reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    MOD             reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    ADD             reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    SUB             reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    LSHIFT          reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    RSHIFT          reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    URSHIFT         reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    LT              reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    GT              reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    LE              reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    GE              reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    EQUAL           reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    NOTEQUAL        reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    BITAND          reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    CARET           reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    BITOR           reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    AND             reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    QUESTION        reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    OR              reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    RPAREN          reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    SEMI            reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    COMMA           reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    RBRACK          reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    COLON           reduce using rule 219 (FieldAccess -> Primary DOT Name .)
    DOT             shift and go to state 103

  ! DOT             [ reduce using rule 219 (FieldAccess -> Primary DOT Name .) ]


state 327

    (206) ClassInstanceCreationExpression -> NEW ClassType LPAREN . RPAREN
    (207) ClassInstanceCreationExpression -> NEW ClassType LPAREN . ArgumentList RPAREN
    (208) ArgumentList -> . Expression
    (209) ArgumentList -> . ArgumentList COMMA Expression
    (298) Expression -> . AssignmentExpression
    (280) AssignmentExpression -> . ConditionalExpression
    (281) AssignmentExpression -> . Assignment
    (278) ConditionalExpression -> . ConditionalOrExpression
    (279) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (275) ConditionalOrExpression -> . ConditionalAndExpression
    (276) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (273) ConditionalAndExpression -> . InclusiveOrExpression
    (274) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC

    RPAREN          shift and go to state 372
    SUPER           shift and go to state 160
    IDENTIFIER      shift and go to state 63
    THIS            shift and go to state 162
    LPAREN          shift and go to state 192
    NEW             shift and go to state 207
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221

    ArgumentList                   shift and go to state 373
    Expression                     shift and go to state 321
    AssignmentExpression           shift and go to state 194
    ConditionalExpression          shift and go to state 195
    Assignment                     shift and go to state 196
    ConditionalOrExpression        shift and go to state 197
    LeftHandSide                   shift and go to state 149
    ConditionalAndExpression       shift and go to state 198
    Name                           shift and go to state 199
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    InclusiveOrExpression          shift and go to state 200
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Primary                        shift and go to state 201
    PrimaryNoNewArray              shift and go to state 202
    ExclusiveOrExpression          shift and go to state 203
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    MethodInvocation               shift and go to state 205
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224

state 328

    (212) ArrayCreationExpression -> NEW ClassType DimExprs . Dims
    (213) ArrayCreationExpression -> NEW ClassType DimExprs .
    (215) DimExprs -> DimExprs . DimExpr
    (217) Dims -> . LBRACK RBRACK
    (218) Dims -> . Dims LBRACK RBRACK
    (216) DimExpr -> . LBRACK Expression RBRACK

    DOT             reduce using rule 213 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    INC             reduce using rule 213 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    DEC             reduce using rule 213 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    MUL             reduce using rule 213 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    DIV             reduce using rule 213 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    MOD             reduce using rule 213 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    ADD             reduce using rule 213 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    SUB             reduce using rule 213 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    LSHIFT          reduce using rule 213 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    RSHIFT          reduce using rule 213 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    URSHIFT         reduce using rule 213 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    LT              reduce using rule 213 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    GT              reduce using rule 213 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    LE              reduce using rule 213 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    GE              reduce using rule 213 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    EQUAL           reduce using rule 213 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    NOTEQUAL        reduce using rule 213 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    BITAND          reduce using rule 213 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    CARET           reduce using rule 213 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    BITOR           reduce using rule 213 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    AND             reduce using rule 213 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    QUESTION        reduce using rule 213 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    OR              reduce using rule 213 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    RPAREN          reduce using rule 213 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    SEMI            reduce using rule 213 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    COMMA           reduce using rule 213 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    RBRACK          reduce using rule 213 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    COLON           reduce using rule 213 (ArrayCreationExpression -> NEW ClassType DimExprs .)
    LBRACK          shift and go to state 376

    Dims                           shift and go to state 374
    DimExpr                        shift and go to state 375

state 329

    (214) DimExprs -> DimExpr .

    LBRACK          reduce using rule 214 (DimExprs -> DimExpr .)
    DOT             reduce using rule 214 (DimExprs -> DimExpr .)
    INC             reduce using rule 214 (DimExprs -> DimExpr .)
    DEC             reduce using rule 214 (DimExprs -> DimExpr .)
    MUL             reduce using rule 214 (DimExprs -> DimExpr .)
    DIV             reduce using rule 214 (DimExprs -> DimExpr .)
    MOD             reduce using rule 214 (DimExprs -> DimExpr .)
    ADD             reduce using rule 214 (DimExprs -> DimExpr .)
    SUB             reduce using rule 214 (DimExprs -> DimExpr .)
    LSHIFT          reduce using rule 214 (DimExprs -> DimExpr .)
    RSHIFT          reduce using rule 214 (DimExprs -> DimExpr .)
    URSHIFT         reduce using rule 214 (DimExprs -> DimExpr .)
    LT              reduce using rule 214 (DimExprs -> DimExpr .)
    GT              reduce using rule 214 (DimExprs -> DimExpr .)
    LE              reduce using rule 214 (DimExprs -> DimExpr .)
    GE              reduce using rule 214 (DimExprs -> DimExpr .)
    EQUAL           reduce using rule 214 (DimExprs -> DimExpr .)
    NOTEQUAL        reduce using rule 214 (DimExprs -> DimExpr .)
    BITAND          reduce using rule 214 (DimExprs -> DimExpr .)
    CARET           reduce using rule 214 (DimExprs -> DimExpr .)
    BITOR           reduce using rule 214 (DimExprs -> DimExpr .)
    AND             reduce using rule 214 (DimExprs -> DimExpr .)
    QUESTION        reduce using rule 214 (DimExprs -> DimExpr .)
    OR              reduce using rule 214 (DimExprs -> DimExpr .)
    RPAREN          reduce using rule 214 (DimExprs -> DimExpr .)
    SEMI            reduce using rule 214 (DimExprs -> DimExpr .)
    COMMA           reduce using rule 214 (DimExprs -> DimExpr .)
    RBRACK          reduce using rule 214 (DimExprs -> DimExpr .)
    COLON           reduce using rule 214 (DimExprs -> DimExpr .)


state 330

    (216) DimExpr -> LBRACK . Expression RBRACK
    (298) Expression -> . AssignmentExpression
    (280) AssignmentExpression -> . ConditionalExpression
    (281) AssignmentExpression -> . Assignment
    (278) ConditionalExpression -> . ConditionalOrExpression
    (279) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (275) ConditionalOrExpression -> . ConditionalAndExpression
    (276) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (273) ConditionalAndExpression -> . InclusiveOrExpression
    (274) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC

    SUPER           shift and go to state 160
    IDENTIFIER      shift and go to state 63
    THIS            shift and go to state 162
    LPAREN          shift and go to state 192
    NEW             shift and go to state 207
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221

    Expression                     shift and go to state 377
    AssignmentExpression           shift and go to state 194
    ConditionalExpression          shift and go to state 195
    Assignment                     shift and go to state 196
    ConditionalOrExpression        shift and go to state 197
    LeftHandSide                   shift and go to state 149
    ConditionalAndExpression       shift and go to state 198
    Name                           shift and go to state 199
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    InclusiveOrExpression          shift and go to state 200
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Primary                        shift and go to state 201
    PrimaryNoNewArray              shift and go to state 202
    ExclusiveOrExpression          shift and go to state 203
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    MethodInvocation               shift and go to state 205
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224

state 331

    (210) ArrayCreationExpression -> NEW PrimitiveType DimExprs . Dims
    (211) ArrayCreationExpression -> NEW PrimitiveType DimExprs .
    (215) DimExprs -> DimExprs . DimExpr
    (217) Dims -> . LBRACK RBRACK
    (218) Dims -> . Dims LBRACK RBRACK
    (216) DimExpr -> . LBRACK Expression RBRACK

    DOT             reduce using rule 211 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    INC             reduce using rule 211 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    DEC             reduce using rule 211 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    MUL             reduce using rule 211 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    DIV             reduce using rule 211 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    MOD             reduce using rule 211 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    ADD             reduce using rule 211 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    SUB             reduce using rule 211 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    LSHIFT          reduce using rule 211 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    RSHIFT          reduce using rule 211 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    URSHIFT         reduce using rule 211 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    LT              reduce using rule 211 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    GT              reduce using rule 211 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    LE              reduce using rule 211 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    GE              reduce using rule 211 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    EQUAL           reduce using rule 211 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    NOTEQUAL        reduce using rule 211 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    BITAND          reduce using rule 211 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    CARET           reduce using rule 211 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    BITOR           reduce using rule 211 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    AND             reduce using rule 211 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    QUESTION        reduce using rule 211 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    OR              reduce using rule 211 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    RPAREN          reduce using rule 211 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    SEMI            reduce using rule 211 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    COMMA           reduce using rule 211 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    RBRACK          reduce using rule 211 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    COLON           reduce using rule 211 (ArrayCreationExpression -> NEW PrimitiveType DimExprs .)
    LBRACK          shift and go to state 376

    Dims                           shift and go to state 378
    DimExpr                        shift and go to state 375

state 332

    (226) ArrayAccess -> PrimaryNoNewArray LBRACK Expression . RBRACK

    RBRACK          shift and go to state 379


state 333

    (220) FieldAccess -> SUPER DOT Name .
    (31) QualifiedName -> Name . DOT IDENTIFIER

  ! shift/reduce conflict for DOT resolved as shift
    ASSIGN          reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    ADD_ASSIGN      reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    SUB_ASSIGN      reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    MUL_ASSIGN      reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    DIV_ASSIGN      reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    AND_ASSIGN      reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    OR_ASSIGN       reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    XOR_ASSIGN      reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    MOD_ASSIGN      reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    LSHIFT_ASSIGN   reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    RSHIFT_ASSIGN   reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    URSHIFT_ASSIGN  reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    LBRACK          reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    INC             reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    DEC             reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    MUL             reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    DIV             reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    MOD             reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    ADD             reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    SUB             reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    LSHIFT          reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    RSHIFT          reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    URSHIFT         reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    LT              reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    GT              reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    LE              reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    GE              reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    EQUAL           reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    NOTEQUAL        reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    BITAND          reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    CARET           reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    BITOR           reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    AND             reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    QUESTION        reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    OR              reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    RPAREN          reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    SEMI            reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    COMMA           reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    RBRACK          reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    COLON           reduce using rule 220 (FieldAccess -> SUPER DOT Name .)
    DOT             shift and go to state 103

  ! DOT             [ reduce using rule 220 (FieldAccess -> SUPER DOT Name .) ]


state 334

    (85) MethodDeclarator -> IDENTIFIER LPAREN FormalParameterList RPAREN .

    SEMI            reduce using rule 85 (MethodDeclarator -> IDENTIFIER LPAREN FormalParameterList RPAREN .)
    LBRACE          reduce using rule 85 (MethodDeclarator -> IDENTIFIER LPAREN FormalParameterList RPAREN .)


state 335

    (87) FormalParameterList -> FormalParameterList COMMA . FormalParameter
    (88) FormalParameter -> . Type VariableDeclaratorId
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER

    BOOLEAN         shift and go to state 65
    BYTE            shift and go to state 71
    SHORT           shift and go to state 72
    INT             shift and go to state 73
    LONG            shift and go to state 74
    CHAR            shift and go to state 75
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 77
    IDENTIFIER      shift and go to state 63

    FormalParameter                shift and go to state 380
    Type                           shift and go to state 271
    PrimitiveType                  shift and go to state 60
    ReferenceType                  shift and go to state 61
    NumericType                    shift and go to state 64
    ArrayType                      shift and go to state 66
    ClassType                      shift and go to state 67
    IntegralType                   shift and go to state 68
    FloatingPointType              shift and go to state 69
    Name                           shift and go to state 70
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78

state 336

    (88) FormalParameter -> Type VariableDeclaratorId .

    RPAREN          reduce using rule 88 (FormalParameter -> Type VariableDeclaratorId .)
    COMMA           reduce using rule 88 (FormalParameter -> Type VariableDeclaratorId .)


state 337

    (94) ConstructorDeclarator -> SimpleName LPAREN decl_mark FormalParameterList RPAREN .

    LBRACE          reduce using rule 94 (ConstructorDeclarator -> SimpleName LPAREN decl_mark FormalParameterList RPAREN .)
    RBRACE          reduce using rule 94 (ConstructorDeclarator -> SimpleName LPAREN decl_mark FormalParameterList RPAREN .)
    VOID            reduce using rule 94 (ConstructorDeclarator -> SimpleName LPAREN decl_mark FormalParameterList RPAREN .)
    STATIC          reduce using rule 94 (ConstructorDeclarator -> SimpleName LPAREN decl_mark FormalParameterList RPAREN .)
    FINAL           reduce using rule 94 (ConstructorDeclarator -> SimpleName LPAREN decl_mark FormalParameterList RPAREN .)
    PRIVATE         reduce using rule 94 (ConstructorDeclarator -> SimpleName LPAREN decl_mark FormalParameterList RPAREN .)
    PROTECTED       reduce using rule 94 (ConstructorDeclarator -> SimpleName LPAREN decl_mark FormalParameterList RPAREN .)
    PUBLIC          reduce using rule 94 (ConstructorDeclarator -> SimpleName LPAREN decl_mark FormalParameterList RPAREN .)
    IDENTIFIER      reduce using rule 94 (ConstructorDeclarator -> SimpleName LPAREN decl_mark FormalParameterList RPAREN .)
    BOOLEAN         reduce using rule 94 (ConstructorDeclarator -> SimpleName LPAREN decl_mark FormalParameterList RPAREN .)
    BYTE            reduce using rule 94 (ConstructorDeclarator -> SimpleName LPAREN decl_mark FormalParameterList RPAREN .)
    SHORT           reduce using rule 94 (ConstructorDeclarator -> SimpleName LPAREN decl_mark FormalParameterList RPAREN .)
    INT             reduce using rule 94 (ConstructorDeclarator -> SimpleName LPAREN decl_mark FormalParameterList RPAREN .)
    LONG            reduce using rule 94 (ConstructorDeclarator -> SimpleName LPAREN decl_mark FormalParameterList RPAREN .)
    CHAR            reduce using rule 94 (ConstructorDeclarator -> SimpleName LPAREN decl_mark FormalParameterList RPAREN .)
    FLOAT           reduce using rule 94 (ConstructorDeclarator -> SimpleName LPAREN decl_mark FormalParameterList RPAREN .)
    DOUBLE          reduce using rule 94 (ConstructorDeclarator -> SimpleName LPAREN decl_mark FormalParameterList RPAREN .)


state 338

    (141) IfThenStatement -> IF begin_scope LPAREN Expression . RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> IF begin_scope LPAREN Expression . RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2

    RPAREN          shift and go to state 381


state 339

    (201) PrimaryNoNewArray -> LPAREN Expression RPAREN .
    (246) CastExpression -> LPAREN Expression RPAREN . UnaryExpressionNotAddSub
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    LBRACK          reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    DOT             reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    INC             reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    DEC             reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    MUL             reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    DIV             reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    MOD             reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    ADD             reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    SUB             reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    LSHIFT          reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    RSHIFT          reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    URSHIFT         reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    LT              reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    GT              reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    LE              reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    GE              reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    EQUAL           reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    NOTEQUAL        reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    BITAND          reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    CARET           reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    BITOR           reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    AND             reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    QUESTION        reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    OR              reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    RPAREN          reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    SEMI            reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    COMMA           reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    RBRACK          reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    COLON           reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    UnaryExpressionNotAddSub       shift and go to state 382
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 340

    (244) CastExpression -> LPAREN PrimitiveType Dims . RPAREN UnaryExpression
    (218) Dims -> Dims . LBRACK RBRACK

    RPAREN          shift and go to state 383
    LBRACK          shift and go to state 181


state 341

    (245) CastExpression -> LPAREN PrimitiveType RPAREN . UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    UnaryExpression                shift and go to state 384
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 342

    (247) CastExpression -> LPAREN Name Dims . RPAREN UnaryExpressionNotAddSub
    (218) Dims -> Dims . LBRACK RBRACK

    RPAREN          shift and go to state 385
    LBRACK          shift and go to state 181


state 343

    (279) ConditionalExpression -> ConditionalOrExpression QUESTION Expression . COLON ConditionalExpression

    COLON           shift and go to state 386


state 344

    (276) ConditionalOrExpression -> ConditionalOrExpression OR ConMarker . ConditionalAndExpression
    (273) ConditionalAndExpression -> . InclusiveOrExpression
    (274) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    ConditionalAndExpression       shift and go to state 387
    InclusiveOrExpression          shift and go to state 200
    ExclusiveOrExpression          shift and go to state 203
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 345

    (274) ConditionalAndExpression -> ConditionalAndExpression AND ConMarker . InclusiveOrExpression
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    InclusiveOrExpression          shift and go to state 388
    ExclusiveOrExpression          shift and go to state 203
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 346

    (272) InclusiveOrExpression -> InclusiveOrExpression BITOR ExclusiveOrExpression .
    (270) ExclusiveOrExpression -> ExclusiveOrExpression . CARET AndExpression

    BITOR           reduce using rule 272 (InclusiveOrExpression -> InclusiveOrExpression BITOR ExclusiveOrExpression .)
    AND             reduce using rule 272 (InclusiveOrExpression -> InclusiveOrExpression BITOR ExclusiveOrExpression .)
    QUESTION        reduce using rule 272 (InclusiveOrExpression -> InclusiveOrExpression BITOR ExclusiveOrExpression .)
    OR              reduce using rule 272 (InclusiveOrExpression -> InclusiveOrExpression BITOR ExclusiveOrExpression .)
    RPAREN          reduce using rule 272 (InclusiveOrExpression -> InclusiveOrExpression BITOR ExclusiveOrExpression .)
    SEMI            reduce using rule 272 (InclusiveOrExpression -> InclusiveOrExpression BITOR ExclusiveOrExpression .)
    COMMA           reduce using rule 272 (InclusiveOrExpression -> InclusiveOrExpression BITOR ExclusiveOrExpression .)
    RBRACK          reduce using rule 272 (InclusiveOrExpression -> InclusiveOrExpression BITOR ExclusiveOrExpression .)
    COLON           reduce using rule 272 (InclusiveOrExpression -> InclusiveOrExpression BITOR ExclusiveOrExpression .)
    CARET           shift and go to state 291


state 347

    (270) ExclusiveOrExpression -> ExclusiveOrExpression CARET AndExpression .
    (268) AndExpression -> AndExpression . BITAND EqualityExpression

    CARET           reduce using rule 270 (ExclusiveOrExpression -> ExclusiveOrExpression CARET AndExpression .)
    BITOR           reduce using rule 270 (ExclusiveOrExpression -> ExclusiveOrExpression CARET AndExpression .)
    AND             reduce using rule 270 (ExclusiveOrExpression -> ExclusiveOrExpression CARET AndExpression .)
    QUESTION        reduce using rule 270 (ExclusiveOrExpression -> ExclusiveOrExpression CARET AndExpression .)
    OR              reduce using rule 270 (ExclusiveOrExpression -> ExclusiveOrExpression CARET AndExpression .)
    RPAREN          reduce using rule 270 (ExclusiveOrExpression -> ExclusiveOrExpression CARET AndExpression .)
    SEMI            reduce using rule 270 (ExclusiveOrExpression -> ExclusiveOrExpression CARET AndExpression .)
    COMMA           reduce using rule 270 (ExclusiveOrExpression -> ExclusiveOrExpression CARET AndExpression .)
    RBRACK          reduce using rule 270 (ExclusiveOrExpression -> ExclusiveOrExpression CARET AndExpression .)
    COLON           reduce using rule 270 (ExclusiveOrExpression -> ExclusiveOrExpression CARET AndExpression .)
    BITAND          shift and go to state 292


state 348

    (268) AndExpression -> AndExpression BITAND EqualityExpression .
    (265) EqualityExpression -> EqualityExpression . EQUAL RelationalExpression
    (266) EqualityExpression -> EqualityExpression . NOTEQUAL RelationalExpression

    BITAND          reduce using rule 268 (AndExpression -> AndExpression BITAND EqualityExpression .)
    CARET           reduce using rule 268 (AndExpression -> AndExpression BITAND EqualityExpression .)
    BITOR           reduce using rule 268 (AndExpression -> AndExpression BITAND EqualityExpression .)
    AND             reduce using rule 268 (AndExpression -> AndExpression BITAND EqualityExpression .)
    QUESTION        reduce using rule 268 (AndExpression -> AndExpression BITAND EqualityExpression .)
    OR              reduce using rule 268 (AndExpression -> AndExpression BITAND EqualityExpression .)
    RPAREN          reduce using rule 268 (AndExpression -> AndExpression BITAND EqualityExpression .)
    SEMI            reduce using rule 268 (AndExpression -> AndExpression BITAND EqualityExpression .)
    COMMA           reduce using rule 268 (AndExpression -> AndExpression BITAND EqualityExpression .)
    RBRACK          reduce using rule 268 (AndExpression -> AndExpression BITAND EqualityExpression .)
    COLON           reduce using rule 268 (AndExpression -> AndExpression BITAND EqualityExpression .)
    EQUAL           shift and go to state 294
    NOTEQUAL        shift and go to state 295


state 349

    (265) EqualityExpression -> EqualityExpression EQUAL RelationalExpression .
    (260) RelationalExpression -> RelationalExpression . LT ShiftExpression
    (261) RelationalExpression -> RelationalExpression . GT ShiftExpression
    (262) RelationalExpression -> RelationalExpression . LE ShiftExpression
    (263) RelationalExpression -> RelationalExpression . GE ShiftExpression

    EQUAL           reduce using rule 265 (EqualityExpression -> EqualityExpression EQUAL RelationalExpression .)
    NOTEQUAL        reduce using rule 265 (EqualityExpression -> EqualityExpression EQUAL RelationalExpression .)
    BITAND          reduce using rule 265 (EqualityExpression -> EqualityExpression EQUAL RelationalExpression .)
    CARET           reduce using rule 265 (EqualityExpression -> EqualityExpression EQUAL RelationalExpression .)
    BITOR           reduce using rule 265 (EqualityExpression -> EqualityExpression EQUAL RelationalExpression .)
    AND             reduce using rule 265 (EqualityExpression -> EqualityExpression EQUAL RelationalExpression .)
    QUESTION        reduce using rule 265 (EqualityExpression -> EqualityExpression EQUAL RelationalExpression .)
    OR              reduce using rule 265 (EqualityExpression -> EqualityExpression EQUAL RelationalExpression .)
    RPAREN          reduce using rule 265 (EqualityExpression -> EqualityExpression EQUAL RelationalExpression .)
    SEMI            reduce using rule 265 (EqualityExpression -> EqualityExpression EQUAL RelationalExpression .)
    COMMA           reduce using rule 265 (EqualityExpression -> EqualityExpression EQUAL RelationalExpression .)
    RBRACK          reduce using rule 265 (EqualityExpression -> EqualityExpression EQUAL RelationalExpression .)
    COLON           reduce using rule 265 (EqualityExpression -> EqualityExpression EQUAL RelationalExpression .)
    LT              shift and go to state 296
    GT              shift and go to state 297
    LE              shift and go to state 298
    GE              shift and go to state 299


state 350

    (266) EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression .
    (260) RelationalExpression -> RelationalExpression . LT ShiftExpression
    (261) RelationalExpression -> RelationalExpression . GT ShiftExpression
    (262) RelationalExpression -> RelationalExpression . LE ShiftExpression
    (263) RelationalExpression -> RelationalExpression . GE ShiftExpression

    EQUAL           reduce using rule 266 (EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression .)
    NOTEQUAL        reduce using rule 266 (EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression .)
    BITAND          reduce using rule 266 (EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression .)
    CARET           reduce using rule 266 (EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression .)
    BITOR           reduce using rule 266 (EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression .)
    AND             reduce using rule 266 (EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression .)
    QUESTION        reduce using rule 266 (EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression .)
    OR              reduce using rule 266 (EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression .)
    RPAREN          reduce using rule 266 (EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression .)
    SEMI            reduce using rule 266 (EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression .)
    COMMA           reduce using rule 266 (EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression .)
    RBRACK          reduce using rule 266 (EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression .)
    COLON           reduce using rule 266 (EqualityExpression -> EqualityExpression NOTEQUAL RelationalExpression .)
    LT              shift and go to state 296
    GT              shift and go to state 297
    LE              shift and go to state 298
    GE              shift and go to state 299


state 351

    (260) RelationalExpression -> RelationalExpression LT ShiftExpression .
    (256) ShiftExpression -> ShiftExpression . LSHIFT AdditiveExpression
    (257) ShiftExpression -> ShiftExpression . RSHIFT AdditiveExpression
    (258) ShiftExpression -> ShiftExpression . URSHIFT AdditiveExpression

    LT              reduce using rule 260 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    GT              reduce using rule 260 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    LE              reduce using rule 260 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    GE              reduce using rule 260 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    EQUAL           reduce using rule 260 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    NOTEQUAL        reduce using rule 260 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    BITAND          reduce using rule 260 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    CARET           reduce using rule 260 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    BITOR           reduce using rule 260 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    AND             reduce using rule 260 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    QUESTION        reduce using rule 260 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    OR              reduce using rule 260 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    RPAREN          reduce using rule 260 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    SEMI            reduce using rule 260 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    COMMA           reduce using rule 260 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    RBRACK          reduce using rule 260 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    COLON           reduce using rule 260 (RelationalExpression -> RelationalExpression LT ShiftExpression .)
    LSHIFT          shift and go to state 300
    RSHIFT          shift and go to state 301
    URSHIFT         shift and go to state 302


state 352

    (261) RelationalExpression -> RelationalExpression GT ShiftExpression .
    (256) ShiftExpression -> ShiftExpression . LSHIFT AdditiveExpression
    (257) ShiftExpression -> ShiftExpression . RSHIFT AdditiveExpression
    (258) ShiftExpression -> ShiftExpression . URSHIFT AdditiveExpression

    LT              reduce using rule 261 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    GT              reduce using rule 261 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    LE              reduce using rule 261 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    GE              reduce using rule 261 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    EQUAL           reduce using rule 261 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    NOTEQUAL        reduce using rule 261 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    BITAND          reduce using rule 261 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    CARET           reduce using rule 261 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    BITOR           reduce using rule 261 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    AND             reduce using rule 261 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    QUESTION        reduce using rule 261 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    OR              reduce using rule 261 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    RPAREN          reduce using rule 261 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    SEMI            reduce using rule 261 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    COMMA           reduce using rule 261 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    RBRACK          reduce using rule 261 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    COLON           reduce using rule 261 (RelationalExpression -> RelationalExpression GT ShiftExpression .)
    LSHIFT          shift and go to state 300
    RSHIFT          shift and go to state 301
    URSHIFT         shift and go to state 302


state 353

    (262) RelationalExpression -> RelationalExpression LE ShiftExpression .
    (256) ShiftExpression -> ShiftExpression . LSHIFT AdditiveExpression
    (257) ShiftExpression -> ShiftExpression . RSHIFT AdditiveExpression
    (258) ShiftExpression -> ShiftExpression . URSHIFT AdditiveExpression

    LT              reduce using rule 262 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    GT              reduce using rule 262 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    LE              reduce using rule 262 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    GE              reduce using rule 262 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    EQUAL           reduce using rule 262 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    NOTEQUAL        reduce using rule 262 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    BITAND          reduce using rule 262 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    CARET           reduce using rule 262 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    BITOR           reduce using rule 262 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    AND             reduce using rule 262 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    QUESTION        reduce using rule 262 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    OR              reduce using rule 262 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    RPAREN          reduce using rule 262 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    SEMI            reduce using rule 262 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    COMMA           reduce using rule 262 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    RBRACK          reduce using rule 262 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    COLON           reduce using rule 262 (RelationalExpression -> RelationalExpression LE ShiftExpression .)
    LSHIFT          shift and go to state 300
    RSHIFT          shift and go to state 301
    URSHIFT         shift and go to state 302


state 354

    (263) RelationalExpression -> RelationalExpression GE ShiftExpression .
    (256) ShiftExpression -> ShiftExpression . LSHIFT AdditiveExpression
    (257) ShiftExpression -> ShiftExpression . RSHIFT AdditiveExpression
    (258) ShiftExpression -> ShiftExpression . URSHIFT AdditiveExpression

    LT              reduce using rule 263 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    GT              reduce using rule 263 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    LE              reduce using rule 263 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    GE              reduce using rule 263 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    EQUAL           reduce using rule 263 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    NOTEQUAL        reduce using rule 263 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    BITAND          reduce using rule 263 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    CARET           reduce using rule 263 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    BITOR           reduce using rule 263 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    AND             reduce using rule 263 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    QUESTION        reduce using rule 263 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    OR              reduce using rule 263 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    RPAREN          reduce using rule 263 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    SEMI            reduce using rule 263 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    COMMA           reduce using rule 263 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    RBRACK          reduce using rule 263 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    COLON           reduce using rule 263 (RelationalExpression -> RelationalExpression GE ShiftExpression .)
    LSHIFT          shift and go to state 300
    RSHIFT          shift and go to state 301
    URSHIFT         shift and go to state 302


state 355

    (256) ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .
    (253) AdditiveExpression -> AdditiveExpression . ADD MultiplicativeExpression
    (254) AdditiveExpression -> AdditiveExpression . SUB MultiplicativeExpression

    LSHIFT          reduce using rule 256 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    RSHIFT          reduce using rule 256 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    URSHIFT         reduce using rule 256 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    LT              reduce using rule 256 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    GT              reduce using rule 256 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    LE              reduce using rule 256 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    GE              reduce using rule 256 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    EQUAL           reduce using rule 256 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    NOTEQUAL        reduce using rule 256 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    BITAND          reduce using rule 256 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    CARET           reduce using rule 256 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    BITOR           reduce using rule 256 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    AND             reduce using rule 256 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    QUESTION        reduce using rule 256 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    OR              reduce using rule 256 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    RPAREN          reduce using rule 256 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    SEMI            reduce using rule 256 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    COMMA           reduce using rule 256 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    RBRACK          reduce using rule 256 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    COLON           reduce using rule 256 (ShiftExpression -> ShiftExpression LSHIFT AdditiveExpression .)
    ADD             shift and go to state 303
    SUB             shift and go to state 304


state 356

    (257) ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .
    (253) AdditiveExpression -> AdditiveExpression . ADD MultiplicativeExpression
    (254) AdditiveExpression -> AdditiveExpression . SUB MultiplicativeExpression

    LSHIFT          reduce using rule 257 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    RSHIFT          reduce using rule 257 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    URSHIFT         reduce using rule 257 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    LT              reduce using rule 257 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    GT              reduce using rule 257 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    LE              reduce using rule 257 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    GE              reduce using rule 257 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    EQUAL           reduce using rule 257 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    NOTEQUAL        reduce using rule 257 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    BITAND          reduce using rule 257 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    CARET           reduce using rule 257 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    BITOR           reduce using rule 257 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    AND             reduce using rule 257 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    QUESTION        reduce using rule 257 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    OR              reduce using rule 257 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    RPAREN          reduce using rule 257 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    SEMI            reduce using rule 257 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    COMMA           reduce using rule 257 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    RBRACK          reduce using rule 257 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    COLON           reduce using rule 257 (ShiftExpression -> ShiftExpression RSHIFT AdditiveExpression .)
    ADD             shift and go to state 303
    SUB             shift and go to state 304


state 357

    (258) ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .
    (253) AdditiveExpression -> AdditiveExpression . ADD MultiplicativeExpression
    (254) AdditiveExpression -> AdditiveExpression . SUB MultiplicativeExpression

    LSHIFT          reduce using rule 258 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    RSHIFT          reduce using rule 258 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    URSHIFT         reduce using rule 258 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    LT              reduce using rule 258 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    GT              reduce using rule 258 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    LE              reduce using rule 258 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    GE              reduce using rule 258 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    EQUAL           reduce using rule 258 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    NOTEQUAL        reduce using rule 258 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    BITAND          reduce using rule 258 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    CARET           reduce using rule 258 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    BITOR           reduce using rule 258 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    AND             reduce using rule 258 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    QUESTION        reduce using rule 258 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    OR              reduce using rule 258 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    RPAREN          reduce using rule 258 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    SEMI            reduce using rule 258 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    COMMA           reduce using rule 258 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    RBRACK          reduce using rule 258 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    COLON           reduce using rule 258 (ShiftExpression -> ShiftExpression URSHIFT AdditiveExpression .)
    ADD             shift and go to state 303
    SUB             shift and go to state 304


state 358

    (253) AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .
    (249) MultiplicativeExpression -> MultiplicativeExpression . MUL UnaryExpression
    (250) MultiplicativeExpression -> MultiplicativeExpression . DIV UnaryExpression
    (251) MultiplicativeExpression -> MultiplicativeExpression . MOD UnaryExpression

    ADD             reduce using rule 253 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    SUB             reduce using rule 253 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    LSHIFT          reduce using rule 253 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    RSHIFT          reduce using rule 253 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    URSHIFT         reduce using rule 253 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    LT              reduce using rule 253 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    GT              reduce using rule 253 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    LE              reduce using rule 253 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    GE              reduce using rule 253 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    EQUAL           reduce using rule 253 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    NOTEQUAL        reduce using rule 253 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    BITAND          reduce using rule 253 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    CARET           reduce using rule 253 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    BITOR           reduce using rule 253 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    AND             reduce using rule 253 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    QUESTION        reduce using rule 253 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    OR              reduce using rule 253 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    RPAREN          reduce using rule 253 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    SEMI            reduce using rule 253 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    COMMA           reduce using rule 253 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    RBRACK          reduce using rule 253 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    COLON           reduce using rule 253 (AdditiveExpression -> AdditiveExpression ADD MultiplicativeExpression .)
    MUL             shift and go to state 305
    DIV             shift and go to state 306
    MOD             shift and go to state 307


state 359

    (254) AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .
    (249) MultiplicativeExpression -> MultiplicativeExpression . MUL UnaryExpression
    (250) MultiplicativeExpression -> MultiplicativeExpression . DIV UnaryExpression
    (251) MultiplicativeExpression -> MultiplicativeExpression . MOD UnaryExpression

    ADD             reduce using rule 254 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    SUB             reduce using rule 254 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    LSHIFT          reduce using rule 254 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    RSHIFT          reduce using rule 254 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    URSHIFT         reduce using rule 254 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    LT              reduce using rule 254 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    GT              reduce using rule 254 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    LE              reduce using rule 254 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    GE              reduce using rule 254 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    EQUAL           reduce using rule 254 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    NOTEQUAL        reduce using rule 254 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    BITAND          reduce using rule 254 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    CARET           reduce using rule 254 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    BITOR           reduce using rule 254 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    AND             reduce using rule 254 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    QUESTION        reduce using rule 254 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    OR              reduce using rule 254 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    RPAREN          reduce using rule 254 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    SEMI            reduce using rule 254 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    COMMA           reduce using rule 254 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    RBRACK          reduce using rule 254 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    COLON           reduce using rule 254 (AdditiveExpression -> AdditiveExpression SUB MultiplicativeExpression .)
    MUL             shift and go to state 305
    DIV             shift and go to state 306
    MOD             shift and go to state 307


state 360

    (249) MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .

    MUL             reduce using rule 249 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    DIV             reduce using rule 249 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    MOD             reduce using rule 249 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    ADD             reduce using rule 249 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    SUB             reduce using rule 249 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    LSHIFT          reduce using rule 249 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    RSHIFT          reduce using rule 249 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    URSHIFT         reduce using rule 249 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    LT              reduce using rule 249 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    GT              reduce using rule 249 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    LE              reduce using rule 249 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    GE              reduce using rule 249 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    EQUAL           reduce using rule 249 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    NOTEQUAL        reduce using rule 249 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    BITAND          reduce using rule 249 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    CARET           reduce using rule 249 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    BITOR           reduce using rule 249 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    AND             reduce using rule 249 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    QUESTION        reduce using rule 249 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    OR              reduce using rule 249 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    RPAREN          reduce using rule 249 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    SEMI            reduce using rule 249 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    COMMA           reduce using rule 249 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    RBRACK          reduce using rule 249 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)
    COLON           reduce using rule 249 (MultiplicativeExpression -> MultiplicativeExpression MUL UnaryExpression .)


state 361

    (250) MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .

    MUL             reduce using rule 250 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    DIV             reduce using rule 250 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    MOD             reduce using rule 250 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    ADD             reduce using rule 250 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    SUB             reduce using rule 250 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    LSHIFT          reduce using rule 250 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    RSHIFT          reduce using rule 250 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    URSHIFT         reduce using rule 250 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    LT              reduce using rule 250 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    GT              reduce using rule 250 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    LE              reduce using rule 250 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    GE              reduce using rule 250 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    EQUAL           reduce using rule 250 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    NOTEQUAL        reduce using rule 250 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    BITAND          reduce using rule 250 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    CARET           reduce using rule 250 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    BITOR           reduce using rule 250 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    AND             reduce using rule 250 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    QUESTION        reduce using rule 250 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    OR              reduce using rule 250 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    RPAREN          reduce using rule 250 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    SEMI            reduce using rule 250 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    COMMA           reduce using rule 250 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    RBRACK          reduce using rule 250 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)
    COLON           reduce using rule 250 (MultiplicativeExpression -> MultiplicativeExpression DIV UnaryExpression .)


state 362

    (251) MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .

    MUL             reduce using rule 251 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    DIV             reduce using rule 251 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    MOD             reduce using rule 251 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    ADD             reduce using rule 251 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    SUB             reduce using rule 251 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    LSHIFT          reduce using rule 251 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    RSHIFT          reduce using rule 251 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    URSHIFT         reduce using rule 251 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    LT              reduce using rule 251 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    GT              reduce using rule 251 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    LE              reduce using rule 251 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    GE              reduce using rule 251 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    EQUAL           reduce using rule 251 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    NOTEQUAL        reduce using rule 251 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    BITAND          reduce using rule 251 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    CARET           reduce using rule 251 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    BITOR           reduce using rule 251 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    AND             reduce using rule 251 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    QUESTION        reduce using rule 251 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    OR              reduce using rule 251 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    RPAREN          reduce using rule 251 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    SEMI            reduce using rule 251 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    COMMA           reduce using rule 251 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    RBRACK          reduce using rule 251 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)
    COLON           reduce using rule 251 (MultiplicativeExpression -> MultiplicativeExpression MOD UnaryExpression .)


state 363

    (159) WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope . while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (162) while_l1 -> .

    SUPER           reduce using rule 162 (while_l1 -> .)
    IDENTIFIER      reduce using rule 162 (while_l1 -> .)
    THIS            reduce using rule 162 (while_l1 -> .)
    LPAREN          reduce using rule 162 (while_l1 -> .)
    NEW             reduce using rule 162 (while_l1 -> .)
    DECIMAL_LITERAL reduce using rule 162 (while_l1 -> .)
    HEX_LITERAL     reduce using rule 162 (while_l1 -> .)
    BINARY_LITERAL  reduce using rule 162 (while_l1 -> .)
    FLOAT_LITERAL   reduce using rule 162 (while_l1 -> .)
    BOOL_LITERAL    reduce using rule 162 (while_l1 -> .)
    CHAR_LITERAL    reduce using rule 162 (while_l1 -> .)
    STRING_LITERAL  reduce using rule 162 (while_l1 -> .)
    NULL            reduce using rule 162 (while_l1 -> .)
    ADD             reduce using rule 162 (while_l1 -> .)
    SUB             reduce using rule 162 (while_l1 -> .)
    INC             reduce using rule 162 (while_l1 -> .)
    DEC             reduce using rule 162 (while_l1 -> .)
    BANG            reduce using rule 162 (while_l1 -> .)
    TILDE           reduce using rule 162 (while_l1 -> .)

    while_l1                       shift and go to state 389

state 364

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (186) ForInit -> . StatementExpressionList
    (187) ForInit -> . LocalVariableDeclaration
    (189) StatementExpressionList -> . StatementExpression
    (190) StatementExpressionList -> . StatementExpressionList COMMA StatementExpression
    (110) LocalVariableDeclaration -> . Type VariableDeclarators
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    SEMI            shift and go to state 391
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    BOOLEAN         shift and go to state 65
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    IDENTIFIER      shift and go to state 63
    BYTE            shift and go to state 71
    SHORT           shift and go to state 72
    INT             shift and go to state 73
    LONG            shift and go to state 74
    CHAR            shift and go to state 75
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 77
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    ForInit                        shift and go to state 390
    StatementExpressionList        shift and go to state 392
    LocalVariableDeclaration       shift and go to state 393
    StatementExpression            shift and go to state 394
    Type                           shift and go to state 121
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    PrimitiveType                  shift and go to state 60
    ReferenceType                  shift and go to state 61
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 395
    ClassType                      shift and go to state 67
    NumericType                    shift and go to state 64
    ArrayType                      shift and go to state 66
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    IntegralType                   shift and go to state 68
    FloatingPointType              shift and go to state 69
    Literal                        shift and go to state 161

state 365

    (147) SwitchStatement -> SWITCH LPAREN Expression RPAREN . SwitchBlock
    (148) SwitchBlock -> . LBRACE RBRACE
    (149) SwitchBlock -> . LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE
    (150) SwitchBlock -> . LBRACE SwitchBlockStatementGroups RBRACE
    (151) SwitchBlock -> . LBRACE begin_scope SwitchLabels end_scope RBRACE

    LBRACE          shift and go to state 397

    SwitchBlock                    shift and go to state 396

state 366

    (164) DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 . Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 130
    IF              shift and go to state 131
    WHILE           shift and go to state 133
    FOR             shift and go to state 134
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    Statement                      shift and go to state 398
    StatementWithoutTrailingSubstatement shift and go to state 115
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    StatementExpression            shift and go to state 135
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 367

    (222) MethodInvocation -> Name LPAREN ArgumentList RPAREN .

    SEMI            reduce using rule 222 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    LBRACK          reduce using rule 222 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    DOT             reduce using rule 222 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    INC             reduce using rule 222 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    DEC             reduce using rule 222 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    MUL             reduce using rule 222 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    DIV             reduce using rule 222 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    MOD             reduce using rule 222 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    ADD             reduce using rule 222 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    SUB             reduce using rule 222 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    LSHIFT          reduce using rule 222 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    RSHIFT          reduce using rule 222 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    URSHIFT         reduce using rule 222 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    LT              reduce using rule 222 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    GT              reduce using rule 222 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    LE              reduce using rule 222 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    GE              reduce using rule 222 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    EQUAL           reduce using rule 222 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    NOTEQUAL        reduce using rule 222 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    BITAND          reduce using rule 222 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    CARET           reduce using rule 222 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    BITOR           reduce using rule 222 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    AND             reduce using rule 222 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    QUESTION        reduce using rule 222 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    OR              reduce using rule 222 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    RPAREN          reduce using rule 222 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    COMMA           reduce using rule 222 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    RBRACK          reduce using rule 222 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)
    COLON           reduce using rule 222 (MethodInvocation -> Name LPAREN ArgumentList RPAREN .)


state 368

    (209) ArgumentList -> ArgumentList COMMA . Expression
    (298) Expression -> . AssignmentExpression
    (280) AssignmentExpression -> . ConditionalExpression
    (281) AssignmentExpression -> . Assignment
    (278) ConditionalExpression -> . ConditionalOrExpression
    (279) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (275) ConditionalOrExpression -> . ConditionalAndExpression
    (276) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (273) ConditionalAndExpression -> . InclusiveOrExpression
    (274) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC

    SUPER           shift and go to state 160
    IDENTIFIER      shift and go to state 63
    THIS            shift and go to state 162
    LPAREN          shift and go to state 192
    NEW             shift and go to state 207
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221

    Expression                     shift and go to state 399
    AssignmentExpression           shift and go to state 194
    ConditionalExpression          shift and go to state 195
    Assignment                     shift and go to state 196
    ConditionalOrExpression        shift and go to state 197
    LeftHandSide                   shift and go to state 149
    ConditionalAndExpression       shift and go to state 198
    Name                           shift and go to state 199
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    InclusiveOrExpression          shift and go to state 200
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Primary                        shift and go to state 201
    PrimaryNoNewArray              shift and go to state 202
    ExclusiveOrExpression          shift and go to state 203
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    MethodInvocation               shift and go to state 205
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224

state 369

    (225) ArrayAccess -> Name LBRACK Expression RBRACK .

    ASSIGN          reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    ADD_ASSIGN      reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    SUB_ASSIGN      reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    MUL_ASSIGN      reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    DIV_ASSIGN      reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    AND_ASSIGN      reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    OR_ASSIGN       reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    XOR_ASSIGN      reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    MOD_ASSIGN      reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    LSHIFT_ASSIGN   reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    RSHIFT_ASSIGN   reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    URSHIFT_ASSIGN  reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    LBRACK          reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    DOT             reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    INC             reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    DEC             reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    MUL             reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    DIV             reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    MOD             reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    ADD             reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    SUB             reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    LSHIFT          reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    RSHIFT          reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    URSHIFT         reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    LT              reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    GT              reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    LE              reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    GE              reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    EQUAL           reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    NOTEQUAL        reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    BITAND          reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    CARET           reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    BITOR           reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    AND             reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    QUESTION        reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    OR              reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    RPAREN          reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    SEMI            reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    COMMA           reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    RBRACK          reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)
    COLON           reduce using rule 225 (ArrayAccess -> Name LBRACK Expression RBRACK .)


state 370

    (246) CastExpression -> LPAREN Expression RPAREN . UnaryExpressionNotAddSub
    (201) PrimaryNoNewArray -> LPAREN Expression RPAREN .
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    LBRACK          reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    DOT             reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    INC             reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    DEC             reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    SEMI            reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    MUL             reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    DIV             reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    MOD             reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    ADD             reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    SUB             reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    LSHIFT          reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    RSHIFT          reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    URSHIFT         reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    LT              reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    GT              reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    LE              reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    GE              reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    EQUAL           reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    NOTEQUAL        reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    BITAND          reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    CARET           reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    BITOR           reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    AND             reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    QUESTION        reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    OR              reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    RPAREN          reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    COMMA           reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    RBRACK          reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    COLON           reduce using rule 201 (PrimaryNoNewArray -> LPAREN Expression RPAREN .)
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    UnaryExpressionNotAddSub       shift and go to state 382
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 371

    (221) MethodInvocation -> Primary DOT IDENTIFIER LPAREN . ArgumentList RPAREN
    (223) MethodInvocation -> Primary DOT IDENTIFIER LPAREN . RPAREN
    (208) ArgumentList -> . Expression
    (209) ArgumentList -> . ArgumentList COMMA Expression
    (298) Expression -> . AssignmentExpression
    (280) AssignmentExpression -> . ConditionalExpression
    (281) AssignmentExpression -> . Assignment
    (278) ConditionalExpression -> . ConditionalOrExpression
    (279) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (275) ConditionalOrExpression -> . ConditionalAndExpression
    (276) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (273) ConditionalAndExpression -> . InclusiveOrExpression
    (274) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC

    RPAREN          shift and go to state 401
    SUPER           shift and go to state 160
    IDENTIFIER      shift and go to state 63
    THIS            shift and go to state 162
    LPAREN          shift and go to state 192
    NEW             shift and go to state 207
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221

    Primary                        shift and go to state 201
    ArgumentList                   shift and go to state 400
    Expression                     shift and go to state 321
    AssignmentExpression           shift and go to state 194
    ConditionalExpression          shift and go to state 195
    Assignment                     shift and go to state 196
    ConditionalOrExpression        shift and go to state 197
    LeftHandSide                   shift and go to state 149
    ConditionalAndExpression       shift and go to state 198
    Name                           shift and go to state 199
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    InclusiveOrExpression          shift and go to state 200
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    PrimaryNoNewArray              shift and go to state 202
    ExclusiveOrExpression          shift and go to state 203
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    MethodInvocation               shift and go to state 205
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224

state 372

    (206) ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .

    SEMI            reduce using rule 206 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    LBRACK          reduce using rule 206 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    DOT             reduce using rule 206 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    INC             reduce using rule 206 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    DEC             reduce using rule 206 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    MUL             reduce using rule 206 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    DIV             reduce using rule 206 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    MOD             reduce using rule 206 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    ADD             reduce using rule 206 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    SUB             reduce using rule 206 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    LSHIFT          reduce using rule 206 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    RSHIFT          reduce using rule 206 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    URSHIFT         reduce using rule 206 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    LT              reduce using rule 206 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    GT              reduce using rule 206 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    LE              reduce using rule 206 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    GE              reduce using rule 206 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    EQUAL           reduce using rule 206 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    NOTEQUAL        reduce using rule 206 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    BITAND          reduce using rule 206 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    CARET           reduce using rule 206 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    BITOR           reduce using rule 206 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    AND             reduce using rule 206 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    QUESTION        reduce using rule 206 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    OR              reduce using rule 206 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    RPAREN          reduce using rule 206 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    COMMA           reduce using rule 206 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    RBRACK          reduce using rule 206 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)
    COLON           reduce using rule 206 (ClassInstanceCreationExpression -> NEW ClassType LPAREN RPAREN .)


state 373

    (207) ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList . RPAREN
    (209) ArgumentList -> ArgumentList . COMMA Expression

    RPAREN          shift and go to state 402
    COMMA           shift and go to state 368


state 374

    (212) ArrayCreationExpression -> NEW ClassType DimExprs Dims .
    (218) Dims -> Dims . LBRACK RBRACK

    DOT             reduce using rule 212 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    INC             reduce using rule 212 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    DEC             reduce using rule 212 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    MUL             reduce using rule 212 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    DIV             reduce using rule 212 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    MOD             reduce using rule 212 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    ADD             reduce using rule 212 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    SUB             reduce using rule 212 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    LSHIFT          reduce using rule 212 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    RSHIFT          reduce using rule 212 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    URSHIFT         reduce using rule 212 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    LT              reduce using rule 212 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    GT              reduce using rule 212 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    LE              reduce using rule 212 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    GE              reduce using rule 212 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    EQUAL           reduce using rule 212 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    NOTEQUAL        reduce using rule 212 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    BITAND          reduce using rule 212 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    CARET           reduce using rule 212 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    BITOR           reduce using rule 212 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    AND             reduce using rule 212 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    QUESTION        reduce using rule 212 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    OR              reduce using rule 212 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    RPAREN          reduce using rule 212 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    SEMI            reduce using rule 212 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    COMMA           reduce using rule 212 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    RBRACK          reduce using rule 212 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    COLON           reduce using rule 212 (ArrayCreationExpression -> NEW ClassType DimExprs Dims .)
    LBRACK          shift and go to state 181


state 375

    (215) DimExprs -> DimExprs DimExpr .

    LBRACK          reduce using rule 215 (DimExprs -> DimExprs DimExpr .)
    DOT             reduce using rule 215 (DimExprs -> DimExprs DimExpr .)
    INC             reduce using rule 215 (DimExprs -> DimExprs DimExpr .)
    DEC             reduce using rule 215 (DimExprs -> DimExprs DimExpr .)
    MUL             reduce using rule 215 (DimExprs -> DimExprs DimExpr .)
    DIV             reduce using rule 215 (DimExprs -> DimExprs DimExpr .)
    MOD             reduce using rule 215 (DimExprs -> DimExprs DimExpr .)
    ADD             reduce using rule 215 (DimExprs -> DimExprs DimExpr .)
    SUB             reduce using rule 215 (DimExprs -> DimExprs DimExpr .)
    LSHIFT          reduce using rule 215 (DimExprs -> DimExprs DimExpr .)
    RSHIFT          reduce using rule 215 (DimExprs -> DimExprs DimExpr .)
    URSHIFT         reduce using rule 215 (DimExprs -> DimExprs DimExpr .)
    LT              reduce using rule 215 (DimExprs -> DimExprs DimExpr .)
    GT              reduce using rule 215 (DimExprs -> DimExprs DimExpr .)
    LE              reduce using rule 215 (DimExprs -> DimExprs DimExpr .)
    GE              reduce using rule 215 (DimExprs -> DimExprs DimExpr .)
    EQUAL           reduce using rule 215 (DimExprs -> DimExprs DimExpr .)
    NOTEQUAL        reduce using rule 215 (DimExprs -> DimExprs DimExpr .)
    BITAND          reduce using rule 215 (DimExprs -> DimExprs DimExpr .)
    CARET           reduce using rule 215 (DimExprs -> DimExprs DimExpr .)
    BITOR           reduce using rule 215 (DimExprs -> DimExprs DimExpr .)
    AND             reduce using rule 215 (DimExprs -> DimExprs DimExpr .)
    QUESTION        reduce using rule 215 (DimExprs -> DimExprs DimExpr .)
    OR              reduce using rule 215 (DimExprs -> DimExprs DimExpr .)
    RPAREN          reduce using rule 215 (DimExprs -> DimExprs DimExpr .)
    SEMI            reduce using rule 215 (DimExprs -> DimExprs DimExpr .)
    COMMA           reduce using rule 215 (DimExprs -> DimExprs DimExpr .)
    RBRACK          reduce using rule 215 (DimExprs -> DimExprs DimExpr .)
    COLON           reduce using rule 215 (DimExprs -> DimExprs DimExpr .)


state 376

    (217) Dims -> LBRACK . RBRACK
    (216) DimExpr -> LBRACK . Expression RBRACK
    (298) Expression -> . AssignmentExpression
    (280) AssignmentExpression -> . ConditionalExpression
    (281) AssignmentExpression -> . Assignment
    (278) ConditionalExpression -> . ConditionalOrExpression
    (279) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (275) ConditionalOrExpression -> . ConditionalAndExpression
    (276) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (273) ConditionalAndExpression -> . InclusiveOrExpression
    (274) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC

    RBRACK          shift and go to state 182
    SUPER           shift and go to state 160
    IDENTIFIER      shift and go to state 63
    THIS            shift and go to state 162
    LPAREN          shift and go to state 192
    NEW             shift and go to state 207
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221

    Expression                     shift and go to state 377
    AssignmentExpression           shift and go to state 194
    ConditionalExpression          shift and go to state 195
    Assignment                     shift and go to state 196
    ConditionalOrExpression        shift and go to state 197
    LeftHandSide                   shift and go to state 149
    ConditionalAndExpression       shift and go to state 198
    Name                           shift and go to state 199
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    InclusiveOrExpression          shift and go to state 200
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Primary                        shift and go to state 201
    PrimaryNoNewArray              shift and go to state 202
    ExclusiveOrExpression          shift and go to state 203
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    MethodInvocation               shift and go to state 205
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224

state 377

    (216) DimExpr -> LBRACK Expression . RBRACK

    RBRACK          shift and go to state 403


state 378

    (210) ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .
    (218) Dims -> Dims . LBRACK RBRACK

    DOT             reduce using rule 210 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    INC             reduce using rule 210 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    DEC             reduce using rule 210 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    MUL             reduce using rule 210 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    DIV             reduce using rule 210 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    MOD             reduce using rule 210 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    ADD             reduce using rule 210 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    SUB             reduce using rule 210 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    LSHIFT          reduce using rule 210 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    RSHIFT          reduce using rule 210 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    URSHIFT         reduce using rule 210 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    LT              reduce using rule 210 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    GT              reduce using rule 210 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    LE              reduce using rule 210 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    GE              reduce using rule 210 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    EQUAL           reduce using rule 210 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    NOTEQUAL        reduce using rule 210 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    BITAND          reduce using rule 210 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    CARET           reduce using rule 210 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    BITOR           reduce using rule 210 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    AND             reduce using rule 210 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    QUESTION        reduce using rule 210 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    OR              reduce using rule 210 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    RPAREN          reduce using rule 210 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    SEMI            reduce using rule 210 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    COMMA           reduce using rule 210 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    RBRACK          reduce using rule 210 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    COLON           reduce using rule 210 (ArrayCreationExpression -> NEW PrimitiveType DimExprs Dims .)
    LBRACK          shift and go to state 181


state 379

    (226) ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .

    ASSIGN          reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    ADD_ASSIGN      reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    SUB_ASSIGN      reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    MUL_ASSIGN      reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    DIV_ASSIGN      reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    AND_ASSIGN      reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    OR_ASSIGN       reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    XOR_ASSIGN      reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    MOD_ASSIGN      reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    LSHIFT_ASSIGN   reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    RSHIFT_ASSIGN   reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    URSHIFT_ASSIGN  reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    LBRACK          reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    DOT             reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    INC             reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    DEC             reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    MUL             reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    DIV             reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    MOD             reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    ADD             reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    SUB             reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    LSHIFT          reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    RSHIFT          reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    URSHIFT         reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    LT              reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    GT              reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    LE              reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    GE              reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    EQUAL           reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    NOTEQUAL        reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    BITAND          reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    CARET           reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    BITOR           reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    AND             reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    QUESTION        reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    OR              reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    RPAREN          reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    SEMI            reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    COMMA           reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    RBRACK          reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)
    COLON           reduce using rule 226 (ArrayAccess -> PrimaryNoNewArray LBRACK Expression RBRACK .)


state 380

    (87) FormalParameterList -> FormalParameterList COMMA FormalParameter .

    RPAREN          reduce using rule 87 (FormalParameterList -> FormalParameterList COMMA FormalParameter .)
    COMMA           reduce using rule 87 (FormalParameterList -> FormalParameterList COMMA FormalParameter .)


state 381

    (141) IfThenStatement -> IF begin_scope LPAREN Expression RPAREN . ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN . ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (142) ifMark1 -> .

    IDENTIFIER      reduce using rule 142 (ifMark1 -> .)
    IF              reduce using rule 142 (ifMark1 -> .)
    WHILE           reduce using rule 142 (ifMark1 -> .)
    FOR             reduce using rule 142 (ifMark1 -> .)
    LBRACE          reduce using rule 142 (ifMark1 -> .)
    SEMI            reduce using rule 142 (ifMark1 -> .)
    SWITCH          reduce using rule 142 (ifMark1 -> .)
    DO              reduce using rule 142 (ifMark1 -> .)
    BREAK           reduce using rule 142 (ifMark1 -> .)
    CONTINUE        reduce using rule 142 (ifMark1 -> .)
    RETURN          reduce using rule 142 (ifMark1 -> .)
    INC             reduce using rule 142 (ifMark1 -> .)
    DEC             reduce using rule 142 (ifMark1 -> .)
    NEW             reduce using rule 142 (ifMark1 -> .)
    SUPER           reduce using rule 142 (ifMark1 -> .)
    THIS            reduce using rule 142 (ifMark1 -> .)
    LPAREN          reduce using rule 142 (ifMark1 -> .)
    DECIMAL_LITERAL reduce using rule 142 (ifMark1 -> .)
    HEX_LITERAL     reduce using rule 142 (ifMark1 -> .)
    BINARY_LITERAL  reduce using rule 142 (ifMark1 -> .)
    FLOAT_LITERAL   reduce using rule 142 (ifMark1 -> .)
    BOOL_LITERAL    reduce using rule 142 (ifMark1 -> .)
    CHAR_LITERAL    reduce using rule 142 (ifMark1 -> .)
    STRING_LITERAL  reduce using rule 142 (ifMark1 -> .)
    NULL            reduce using rule 142 (ifMark1 -> .)

    ifMark1                        shift and go to state 404

state 382

    (246) CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .

    MUL             reduce using rule 246 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    DIV             reduce using rule 246 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    MOD             reduce using rule 246 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    ADD             reduce using rule 246 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    SUB             reduce using rule 246 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    LSHIFT          reduce using rule 246 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    RSHIFT          reduce using rule 246 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    URSHIFT         reduce using rule 246 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    LT              reduce using rule 246 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    GT              reduce using rule 246 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    LE              reduce using rule 246 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    GE              reduce using rule 246 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    EQUAL           reduce using rule 246 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    NOTEQUAL        reduce using rule 246 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    BITAND          reduce using rule 246 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    CARET           reduce using rule 246 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    BITOR           reduce using rule 246 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    AND             reduce using rule 246 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    QUESTION        reduce using rule 246 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    OR              reduce using rule 246 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    RPAREN          reduce using rule 246 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    SEMI            reduce using rule 246 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    COMMA           reduce using rule 246 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    RBRACK          reduce using rule 246 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)
    COLON           reduce using rule 246 (CastExpression -> LPAREN Expression RPAREN UnaryExpressionNotAddSub .)


state 383

    (244) CastExpression -> LPAREN PrimitiveType Dims RPAREN . UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    UnaryExpression                shift and go to state 405
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 384

    (245) CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .

    MUL             reduce using rule 245 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    DIV             reduce using rule 245 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    MOD             reduce using rule 245 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    ADD             reduce using rule 245 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    SUB             reduce using rule 245 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    LSHIFT          reduce using rule 245 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    RSHIFT          reduce using rule 245 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    URSHIFT         reduce using rule 245 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    LT              reduce using rule 245 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    GT              reduce using rule 245 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    LE              reduce using rule 245 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    GE              reduce using rule 245 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    EQUAL           reduce using rule 245 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    NOTEQUAL        reduce using rule 245 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    BITAND          reduce using rule 245 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    CARET           reduce using rule 245 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    BITOR           reduce using rule 245 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    AND             reduce using rule 245 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    QUESTION        reduce using rule 245 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    OR              reduce using rule 245 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    RPAREN          reduce using rule 245 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    SEMI            reduce using rule 245 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    COMMA           reduce using rule 245 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    RBRACK          reduce using rule 245 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)
    COLON           reduce using rule 245 (CastExpression -> LPAREN PrimitiveType RPAREN UnaryExpression .)


state 385

    (247) CastExpression -> LPAREN Name Dims RPAREN . UnaryExpressionNotAddSub
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    Name                           shift and go to state 253
    UnaryExpressionNotAddSub       shift and go to state 406
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 386

    (279) ConditionalExpression -> ConditionalOrExpression QUESTION Expression COLON . ConditionalExpression
    (278) ConditionalExpression -> . ConditionalOrExpression
    (279) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (275) ConditionalOrExpression -> . ConditionalAndExpression
    (276) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (273) ConditionalAndExpression -> . InclusiveOrExpression
    (274) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK

    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221
    LPAREN          shift and go to state 254
    THIS            shift and go to state 162
    NEW             shift and go to state 207
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    SUPER           shift and go to state 160

    ConditionalOrExpression        shift and go to state 197
    ConditionalExpression          shift and go to state 407
    ConditionalAndExpression       shift and go to state 198
    InclusiveOrExpression          shift and go to state 200
    ExclusiveOrExpression          shift and go to state 203
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    Primary                        shift and go to state 252
    Name                           shift and go to state 253
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    FieldAccess                    shift and go to state 255
    MethodInvocation               shift and go to state 205
    ArrayAccess                    shift and go to state 256

state 387

    (276) ConditionalOrExpression -> ConditionalOrExpression OR ConMarker ConditionalAndExpression .
    (274) ConditionalAndExpression -> ConditionalAndExpression . AND ConMarker InclusiveOrExpression

    QUESTION        reduce using rule 276 (ConditionalOrExpression -> ConditionalOrExpression OR ConMarker ConditionalAndExpression .)
    OR              reduce using rule 276 (ConditionalOrExpression -> ConditionalOrExpression OR ConMarker ConditionalAndExpression .)
    RPAREN          reduce using rule 276 (ConditionalOrExpression -> ConditionalOrExpression OR ConMarker ConditionalAndExpression .)
    SEMI            reduce using rule 276 (ConditionalOrExpression -> ConditionalOrExpression OR ConMarker ConditionalAndExpression .)
    COMMA           reduce using rule 276 (ConditionalOrExpression -> ConditionalOrExpression OR ConMarker ConditionalAndExpression .)
    RBRACK          reduce using rule 276 (ConditionalOrExpression -> ConditionalOrExpression OR ConMarker ConditionalAndExpression .)
    COLON           reduce using rule 276 (ConditionalOrExpression -> ConditionalOrExpression OR ConMarker ConditionalAndExpression .)
    AND             shift and go to state 287


state 388

    (274) ConditionalAndExpression -> ConditionalAndExpression AND ConMarker InclusiveOrExpression .
    (272) InclusiveOrExpression -> InclusiveOrExpression . BITOR ExclusiveOrExpression

    AND             reduce using rule 274 (ConditionalAndExpression -> ConditionalAndExpression AND ConMarker InclusiveOrExpression .)
    QUESTION        reduce using rule 274 (ConditionalAndExpression -> ConditionalAndExpression AND ConMarker InclusiveOrExpression .)
    OR              reduce using rule 274 (ConditionalAndExpression -> ConditionalAndExpression AND ConMarker InclusiveOrExpression .)
    RPAREN          reduce using rule 274 (ConditionalAndExpression -> ConditionalAndExpression AND ConMarker InclusiveOrExpression .)
    SEMI            reduce using rule 274 (ConditionalAndExpression -> ConditionalAndExpression AND ConMarker InclusiveOrExpression .)
    COMMA           reduce using rule 274 (ConditionalAndExpression -> ConditionalAndExpression AND ConMarker InclusiveOrExpression .)
    RBRACK          reduce using rule 274 (ConditionalAndExpression -> ConditionalAndExpression AND ConMarker InclusiveOrExpression .)
    COLON           reduce using rule 274 (ConditionalAndExpression -> ConditionalAndExpression AND ConMarker InclusiveOrExpression .)
    BITOR           shift and go to state 289


state 389

    (159) WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 . Expression RPAREN while_l1 Statement end_scope while_l2
    (298) Expression -> . AssignmentExpression
    (280) AssignmentExpression -> . ConditionalExpression
    (281) AssignmentExpression -> . Assignment
    (278) ConditionalExpression -> . ConditionalOrExpression
    (279) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (275) ConditionalOrExpression -> . ConditionalAndExpression
    (276) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (273) ConditionalAndExpression -> . InclusiveOrExpression
    (274) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC

    SUPER           shift and go to state 160
    IDENTIFIER      shift and go to state 63
    THIS            shift and go to state 162
    LPAREN          shift and go to state 192
    NEW             shift and go to state 207
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221

    Expression                     shift and go to state 408
    AssignmentExpression           shift and go to state 194
    ConditionalExpression          shift and go to state 195
    Assignment                     shift and go to state 196
    ConditionalOrExpression        shift and go to state 197
    LeftHandSide                   shift and go to state 149
    ConditionalAndExpression       shift and go to state 198
    Name                           shift and go to state 199
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    InclusiveOrExpression          shift and go to state 200
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Primary                        shift and go to state 201
    PrimaryNoNewArray              shift and go to state 202
    ExclusiveOrExpression          shift and go to state 203
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    MethodInvocation               shift and go to state 205
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224

state 390

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit . SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit . SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit . SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit . SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2

    SEMI            shift and go to state 409


state 391

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI . for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI . for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI . for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI . for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (183) for_l1 -> .

    SEMI            reduce using rule 183 (for_l1 -> .)
    SUPER           reduce using rule 183 (for_l1 -> .)
    IDENTIFIER      reduce using rule 183 (for_l1 -> .)
    THIS            reduce using rule 183 (for_l1 -> .)
    LPAREN          reduce using rule 183 (for_l1 -> .)
    NEW             reduce using rule 183 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 183 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 183 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 183 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 183 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 183 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 183 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 183 (for_l1 -> .)
    NULL            reduce using rule 183 (for_l1 -> .)
    ADD             reduce using rule 183 (for_l1 -> .)
    SUB             reduce using rule 183 (for_l1 -> .)
    INC             reduce using rule 183 (for_l1 -> .)
    DEC             reduce using rule 183 (for_l1 -> .)
    BANG            reduce using rule 183 (for_l1 -> .)
    TILDE           reduce using rule 183 (for_l1 -> .)

    for_l1                         shift and go to state 410

state 392

    (186) ForInit -> StatementExpressionList .
    (190) StatementExpressionList -> StatementExpressionList . COMMA StatementExpression

    SEMI            reduce using rule 186 (ForInit -> StatementExpressionList .)
    COMMA           shift and go to state 411


state 393

    (187) ForInit -> LocalVariableDeclaration .

    SEMI            reduce using rule 187 (ForInit -> LocalVariableDeclaration .)


state 394

    (189) StatementExpressionList -> StatementExpression .

    COMMA           reduce using rule 189 (StatementExpressionList -> StatementExpression .)
    SEMI            reduce using rule 189 (StatementExpressionList -> StatementExpression .)
    RPAREN          reduce using rule 189 (StatementExpressionList -> StatementExpression .)


state 395

    (222) MethodInvocation -> Name . LPAREN ArgumentList RPAREN
    (224) MethodInvocation -> Name . LPAREN RPAREN
    (283) LeftHandSide -> Name .
    (228) PostfixExpression -> Name .
    (27) ArrayType -> Name . Dims
    (25) ClassType -> Name .
    (225) ArrayAccess -> Name . LBRACK Expression RBRACK
    (31) QualifiedName -> Name . DOT IDENTIFIER
    (217) Dims -> . LBRACK RBRACK
    (218) Dims -> . Dims LBRACK RBRACK

    LPAREN          shift and go to state 236
    ASSIGN          reduce using rule 283 (LeftHandSide -> Name .)
    ADD_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    SUB_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    MUL_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    DIV_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    AND_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    OR_ASSIGN       reduce using rule 283 (LeftHandSide -> Name .)
    XOR_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    MOD_ASSIGN      reduce using rule 283 (LeftHandSide -> Name .)
    LSHIFT_ASSIGN   reduce using rule 283 (LeftHandSide -> Name .)
    RSHIFT_ASSIGN   reduce using rule 283 (LeftHandSide -> Name .)
    URSHIFT_ASSIGN  reduce using rule 283 (LeftHandSide -> Name .)
    INC             reduce using rule 228 (PostfixExpression -> Name .)
    DEC             reduce using rule 228 (PostfixExpression -> Name .)
    IDENTIFIER      reduce using rule 25 (ClassType -> Name .)
    LBRACK          shift and go to state 237
    DOT             shift and go to state 103

    Dims                           shift and go to state 102

state 396

    (147) SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .

    RBRACE          reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    IDENTIFIER      reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    IF              reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    WHILE           reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    FOR             reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    LBRACE          reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    SEMI            reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    SWITCH          reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    DO              reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    BREAK           reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    CONTINUE        reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    RETURN          reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    BOOLEAN         reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    INC             reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    DEC             reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    NEW             reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    BYTE            reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    SHORT           reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    INT             reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    LONG            reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    CHAR            reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    FLOAT           reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    DOUBLE          reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    SUPER           reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    THIS            reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    LPAREN          reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    DECIMAL_LITERAL reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    HEX_LITERAL     reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    BINARY_LITERAL  reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    FLOAT_LITERAL   reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    BOOL_LITERAL    reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    CHAR_LITERAL    reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    STRING_LITERAL  reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    NULL            reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    CASE            reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    DEFAULT         reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)
    ELSE            reduce using rule 147 (SwitchStatement -> SWITCH LPAREN Expression RPAREN SwitchBlock .)


state 397

    (148) SwitchBlock -> LBRACE . RBRACE
    (149) SwitchBlock -> LBRACE . SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE
    (150) SwitchBlock -> LBRACE . SwitchBlockStatementGroups RBRACE
    (151) SwitchBlock -> LBRACE . begin_scope SwitchLabels end_scope RBRACE
    (152) SwitchBlockStatementGroups -> . SwitchBlockStatementGroup
    (153) SwitchBlockStatementGroups -> . SwitchBlockStatementGroups SwitchBlockStatementGroup
    (302) begin_scope -> .
    (154) SwitchBlockStatementGroup -> . begin_scope SwitchLabels BlockStatements end_scope

    RBRACE          shift and go to state 412
    CASE            reduce using rule 302 (begin_scope -> .)
    DEFAULT         reduce using rule 302 (begin_scope -> .)

    SwitchBlockStatementGroups     shift and go to state 413
    begin_scope                    shift and go to state 414
    SwitchBlockStatementGroup      shift and go to state 415

state 398

    (164) DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement . WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2

    WHILE           shift and go to state 416


state 399

    (209) ArgumentList -> ArgumentList COMMA Expression .

    RPAREN          reduce using rule 209 (ArgumentList -> ArgumentList COMMA Expression .)
    COMMA           reduce using rule 209 (ArgumentList -> ArgumentList COMMA Expression .)


state 400

    (221) MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList . RPAREN
    (209) ArgumentList -> ArgumentList . COMMA Expression

    RPAREN          shift and go to state 417
    COMMA           shift and go to state 368


state 401

    (223) MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .

    SEMI            reduce using rule 223 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    LBRACK          reduce using rule 223 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    DOT             reduce using rule 223 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    INC             reduce using rule 223 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    DEC             reduce using rule 223 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    MUL             reduce using rule 223 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    DIV             reduce using rule 223 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    MOD             reduce using rule 223 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    ADD             reduce using rule 223 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    SUB             reduce using rule 223 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    LSHIFT          reduce using rule 223 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    RSHIFT          reduce using rule 223 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    URSHIFT         reduce using rule 223 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    LT              reduce using rule 223 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    GT              reduce using rule 223 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    LE              reduce using rule 223 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    GE              reduce using rule 223 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    EQUAL           reduce using rule 223 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    NOTEQUAL        reduce using rule 223 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    BITAND          reduce using rule 223 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    CARET           reduce using rule 223 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    BITOR           reduce using rule 223 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    AND             reduce using rule 223 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    QUESTION        reduce using rule 223 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    OR              reduce using rule 223 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    RPAREN          reduce using rule 223 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    COMMA           reduce using rule 223 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    RBRACK          reduce using rule 223 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)
    COLON           reduce using rule 223 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN RPAREN .)


state 402

    (207) ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .

    SEMI            reduce using rule 207 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    LBRACK          reduce using rule 207 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    DOT             reduce using rule 207 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    INC             reduce using rule 207 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    DEC             reduce using rule 207 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    MUL             reduce using rule 207 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    DIV             reduce using rule 207 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    MOD             reduce using rule 207 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    ADD             reduce using rule 207 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    SUB             reduce using rule 207 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    LSHIFT          reduce using rule 207 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    RSHIFT          reduce using rule 207 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    URSHIFT         reduce using rule 207 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    LT              reduce using rule 207 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    GT              reduce using rule 207 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    LE              reduce using rule 207 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    GE              reduce using rule 207 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    EQUAL           reduce using rule 207 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    NOTEQUAL        reduce using rule 207 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    BITAND          reduce using rule 207 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    CARET           reduce using rule 207 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    BITOR           reduce using rule 207 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    AND             reduce using rule 207 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    QUESTION        reduce using rule 207 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    OR              reduce using rule 207 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    RPAREN          reduce using rule 207 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    COMMA           reduce using rule 207 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    RBRACK          reduce using rule 207 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)
    COLON           reduce using rule 207 (ClassInstanceCreationExpression -> NEW ClassType LPAREN ArgumentList RPAREN .)


state 403

    (216) DimExpr -> LBRACK Expression RBRACK .

    LBRACK          reduce using rule 216 (DimExpr -> LBRACK Expression RBRACK .)
    DOT             reduce using rule 216 (DimExpr -> LBRACK Expression RBRACK .)
    INC             reduce using rule 216 (DimExpr -> LBRACK Expression RBRACK .)
    DEC             reduce using rule 216 (DimExpr -> LBRACK Expression RBRACK .)
    MUL             reduce using rule 216 (DimExpr -> LBRACK Expression RBRACK .)
    DIV             reduce using rule 216 (DimExpr -> LBRACK Expression RBRACK .)
    MOD             reduce using rule 216 (DimExpr -> LBRACK Expression RBRACK .)
    ADD             reduce using rule 216 (DimExpr -> LBRACK Expression RBRACK .)
    SUB             reduce using rule 216 (DimExpr -> LBRACK Expression RBRACK .)
    LSHIFT          reduce using rule 216 (DimExpr -> LBRACK Expression RBRACK .)
    RSHIFT          reduce using rule 216 (DimExpr -> LBRACK Expression RBRACK .)
    URSHIFT         reduce using rule 216 (DimExpr -> LBRACK Expression RBRACK .)
    LT              reduce using rule 216 (DimExpr -> LBRACK Expression RBRACK .)
    GT              reduce using rule 216 (DimExpr -> LBRACK Expression RBRACK .)
    LE              reduce using rule 216 (DimExpr -> LBRACK Expression RBRACK .)
    GE              reduce using rule 216 (DimExpr -> LBRACK Expression RBRACK .)
    EQUAL           reduce using rule 216 (DimExpr -> LBRACK Expression RBRACK .)
    NOTEQUAL        reduce using rule 216 (DimExpr -> LBRACK Expression RBRACK .)
    BITAND          reduce using rule 216 (DimExpr -> LBRACK Expression RBRACK .)
    CARET           reduce using rule 216 (DimExpr -> LBRACK Expression RBRACK .)
    BITOR           reduce using rule 216 (DimExpr -> LBRACK Expression RBRACK .)
    AND             reduce using rule 216 (DimExpr -> LBRACK Expression RBRACK .)
    QUESTION        reduce using rule 216 (DimExpr -> LBRACK Expression RBRACK .)
    OR              reduce using rule 216 (DimExpr -> LBRACK Expression RBRACK .)
    RPAREN          reduce using rule 216 (DimExpr -> LBRACK Expression RBRACK .)
    SEMI            reduce using rule 216 (DimExpr -> LBRACK Expression RBRACK .)
    COMMA           reduce using rule 216 (DimExpr -> LBRACK Expression RBRACK .)
    RBRACK          reduce using rule 216 (DimExpr -> LBRACK Expression RBRACK .)
    COLON           reduce using rule 216 (DimExpr -> LBRACK Expression RBRACK .)


state 404

    (141) IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 . Statement ifMark1 end_scope
    (145) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 . StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (117) StatementNoShortIf -> . StatementWithoutTrailingSubstatement
    (118) StatementNoShortIf -> . LabeledStatementNoShortIf
    (119) StatementNoShortIf -> . IfThenElseStatementNoShortIf
    (120) StatementNoShortIf -> . WhileStatementNoShortIf
    (121) StatementNoShortIf -> . ForStatementNoShortIf
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (132) LabeledStatementNoShortIf -> . IDENTIFIER COLON StatementNoShortIf
    (146) IfThenElseStatementNoShortIf -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (160) WhileStatementNoShortIf -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (175) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (181) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (182) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 426
    IF              shift and go to state 418
    WHILE           shift and go to state 427
    FOR             shift and go to state 428
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    Statement                      shift and go to state 419
    StatementNoShortIf             shift and go to state 420
    StatementWithoutTrailingSubstatement shift and go to state 421
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    LabeledStatementNoShortIf      shift and go to state 422
    IfThenElseStatementNoShortIf   shift and go to state 423
    WhileStatementNoShortIf        shift and go to state 424
    ForStatementNoShortIf          shift and go to state 425
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    StatementExpression            shift and go to state 135
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 405

    (244) CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .

    MUL             reduce using rule 244 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    DIV             reduce using rule 244 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    MOD             reduce using rule 244 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    ADD             reduce using rule 244 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    SUB             reduce using rule 244 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    LSHIFT          reduce using rule 244 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    RSHIFT          reduce using rule 244 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    URSHIFT         reduce using rule 244 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    LT              reduce using rule 244 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    GT              reduce using rule 244 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    LE              reduce using rule 244 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    GE              reduce using rule 244 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    EQUAL           reduce using rule 244 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    NOTEQUAL        reduce using rule 244 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    BITAND          reduce using rule 244 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    CARET           reduce using rule 244 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    BITOR           reduce using rule 244 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    AND             reduce using rule 244 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    QUESTION        reduce using rule 244 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    OR              reduce using rule 244 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    RPAREN          reduce using rule 244 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    SEMI            reduce using rule 244 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    COMMA           reduce using rule 244 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    RBRACK          reduce using rule 244 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)
    COLON           reduce using rule 244 (CastExpression -> LPAREN PrimitiveType Dims RPAREN UnaryExpression .)


state 406

    (247) CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .

    MUL             reduce using rule 247 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    DIV             reduce using rule 247 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    MOD             reduce using rule 247 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    ADD             reduce using rule 247 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    SUB             reduce using rule 247 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    LSHIFT          reduce using rule 247 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    RSHIFT          reduce using rule 247 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    URSHIFT         reduce using rule 247 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    LT              reduce using rule 247 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    GT              reduce using rule 247 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    LE              reduce using rule 247 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    GE              reduce using rule 247 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    EQUAL           reduce using rule 247 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    NOTEQUAL        reduce using rule 247 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    BITAND          reduce using rule 247 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    CARET           reduce using rule 247 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    BITOR           reduce using rule 247 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    AND             reduce using rule 247 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    QUESTION        reduce using rule 247 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    OR              reduce using rule 247 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    RPAREN          reduce using rule 247 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    SEMI            reduce using rule 247 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    COMMA           reduce using rule 247 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    RBRACK          reduce using rule 247 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)
    COLON           reduce using rule 247 (CastExpression -> LPAREN Name Dims RPAREN UnaryExpressionNotAddSub .)


state 407

    (279) ConditionalExpression -> ConditionalOrExpression QUESTION Expression COLON ConditionalExpression .

    RPAREN          reduce using rule 279 (ConditionalExpression -> ConditionalOrExpression QUESTION Expression COLON ConditionalExpression .)
    SEMI            reduce using rule 279 (ConditionalExpression -> ConditionalOrExpression QUESTION Expression COLON ConditionalExpression .)
    COMMA           reduce using rule 279 (ConditionalExpression -> ConditionalOrExpression QUESTION Expression COLON ConditionalExpression .)
    RBRACK          reduce using rule 279 (ConditionalExpression -> ConditionalOrExpression QUESTION Expression COLON ConditionalExpression .)
    COLON           reduce using rule 279 (ConditionalExpression -> ConditionalOrExpression QUESTION Expression COLON ConditionalExpression .)


state 408

    (159) WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression . RPAREN while_l1 Statement end_scope while_l2

    RPAREN          shift and go to state 429


state 409

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI . for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI . for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI . for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI . for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (183) for_l1 -> .

    SEMI            reduce using rule 183 (for_l1 -> .)
    SUPER           reduce using rule 183 (for_l1 -> .)
    IDENTIFIER      reduce using rule 183 (for_l1 -> .)
    THIS            reduce using rule 183 (for_l1 -> .)
    LPAREN          reduce using rule 183 (for_l1 -> .)
    NEW             reduce using rule 183 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 183 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 183 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 183 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 183 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 183 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 183 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 183 (for_l1 -> .)
    NULL            reduce using rule 183 (for_l1 -> .)
    ADD             reduce using rule 183 (for_l1 -> .)
    SUB             reduce using rule 183 (for_l1 -> .)
    INC             reduce using rule 183 (for_l1 -> .)
    DEC             reduce using rule 183 (for_l1 -> .)
    BANG            reduce using rule 183 (for_l1 -> .)
    TILDE           reduce using rule 183 (for_l1 -> .)

    for_l1                         shift and go to state 430

state 410

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 . Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 . Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 . SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 . SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (298) Expression -> . AssignmentExpression
    (280) AssignmentExpression -> . ConditionalExpression
    (281) AssignmentExpression -> . Assignment
    (278) ConditionalExpression -> . ConditionalOrExpression
    (279) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (275) ConditionalOrExpression -> . ConditionalAndExpression
    (276) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (273) ConditionalAndExpression -> . InclusiveOrExpression
    (274) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC

    SEMI            shift and go to state 431
    SUPER           shift and go to state 160
    IDENTIFIER      shift and go to state 63
    THIS            shift and go to state 162
    LPAREN          shift and go to state 192
    NEW             shift and go to state 207
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221

    Expression                     shift and go to state 432
    AssignmentExpression           shift and go to state 194
    ConditionalExpression          shift and go to state 195
    Assignment                     shift and go to state 196
    ConditionalOrExpression        shift and go to state 197
    LeftHandSide                   shift and go to state 149
    ConditionalAndExpression       shift and go to state 198
    Name                           shift and go to state 199
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    InclusiveOrExpression          shift and go to state 200
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Primary                        shift and go to state 201
    PrimaryNoNewArray              shift and go to state 202
    ExclusiveOrExpression          shift and go to state 203
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    MethodInvocation               shift and go to state 205
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224

state 411

    (190) StatementExpressionList -> StatementExpressionList COMMA . StatementExpression
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    StatementExpression            shift and go to state 433
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 412

    (148) SwitchBlock -> LBRACE RBRACE .

    RBRACE          reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    IF              reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    WHILE           reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    FOR             reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    LBRACE          reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    SEMI            reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    SWITCH          reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    DO              reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    BREAK           reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    CONTINUE        reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    RETURN          reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    BOOLEAN         reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    INC             reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    DEC             reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    NEW             reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    BYTE            reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    SHORT           reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    INT             reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    LONG            reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    CHAR            reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    FLOAT           reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    DOUBLE          reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    SUPER           reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    THIS            reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    LPAREN          reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    DECIMAL_LITERAL reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    HEX_LITERAL     reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    BINARY_LITERAL  reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    FLOAT_LITERAL   reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    BOOL_LITERAL    reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    CHAR_LITERAL    reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    STRING_LITERAL  reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    NULL            reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    CASE            reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)
    ELSE            reduce using rule 148 (SwitchBlock -> LBRACE RBRACE .)


state 413

    (149) SwitchBlock -> LBRACE SwitchBlockStatementGroups . begin_scope SwitchLabels end_scope RBRACE
    (150) SwitchBlock -> LBRACE SwitchBlockStatementGroups . RBRACE
    (153) SwitchBlockStatementGroups -> SwitchBlockStatementGroups . SwitchBlockStatementGroup
    (302) begin_scope -> .
    (154) SwitchBlockStatementGroup -> . begin_scope SwitchLabels BlockStatements end_scope

    RBRACE          shift and go to state 435
    CASE            reduce using rule 302 (begin_scope -> .)
    DEFAULT         reduce using rule 302 (begin_scope -> .)

    begin_scope                    shift and go to state 434
    SwitchBlockStatementGroup      shift and go to state 436

state 414

    (151) SwitchBlock -> LBRACE begin_scope . SwitchLabels end_scope RBRACE
    (154) SwitchBlockStatementGroup -> begin_scope . SwitchLabels BlockStatements end_scope
    (155) SwitchLabels -> . SwitchLabel
    (156) SwitchLabels -> . SwitchLabels SwitchLabel
    (157) SwitchLabel -> . CASE ConstantExpression COLON
    (158) SwitchLabel -> . DEFAULT COLON

    CASE            shift and go to state 439
    DEFAULT         shift and go to state 440

    SwitchLabels                   shift and go to state 437
    SwitchLabel                    shift and go to state 438

state 415

    (152) SwitchBlockStatementGroups -> SwitchBlockStatementGroup .

    RBRACE          reduce using rule 152 (SwitchBlockStatementGroups -> SwitchBlockStatementGroup .)
    CASE            reduce using rule 152 (SwitchBlockStatementGroups -> SwitchBlockStatementGroup .)
    DEFAULT         reduce using rule 152 (SwitchBlockStatementGroups -> SwitchBlockStatementGroup .)


state 416

    (164) DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE . LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2

    LPAREN          shift and go to state 441


state 417

    (221) MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .

    SEMI            reduce using rule 221 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    LBRACK          reduce using rule 221 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    DOT             reduce using rule 221 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    INC             reduce using rule 221 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    DEC             reduce using rule 221 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    MUL             reduce using rule 221 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    DIV             reduce using rule 221 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    MOD             reduce using rule 221 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    ADD             reduce using rule 221 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    SUB             reduce using rule 221 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    LSHIFT          reduce using rule 221 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    RSHIFT          reduce using rule 221 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    URSHIFT         reduce using rule 221 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    LT              reduce using rule 221 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    GT              reduce using rule 221 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    LE              reduce using rule 221 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    GE              reduce using rule 221 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    EQUAL           reduce using rule 221 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    NOTEQUAL        reduce using rule 221 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    BITAND          reduce using rule 221 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    CARET           reduce using rule 221 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    BITOR           reduce using rule 221 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    AND             reduce using rule 221 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    QUESTION        reduce using rule 221 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    OR              reduce using rule 221 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    RPAREN          reduce using rule 221 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    COMMA           reduce using rule 221 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    RBRACK          reduce using rule 221 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)
    COLON           reduce using rule 221 (MethodInvocation -> Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN .)


state 418

    (141) IfThenStatement -> IF . begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> IF . begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (146) IfThenElseStatementNoShortIf -> IF . begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (302) begin_scope -> .

    LPAREN          reduce using rule 302 (begin_scope -> .)

    begin_scope                    shift and go to state 442

state 419

    (141) IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement . ifMark1 end_scope
    (142) ifMark1 -> .

    RBRACE          reduce using rule 142 (ifMark1 -> .)
    IDENTIFIER      reduce using rule 142 (ifMark1 -> .)
    IF              reduce using rule 142 (ifMark1 -> .)
    WHILE           reduce using rule 142 (ifMark1 -> .)
    FOR             reduce using rule 142 (ifMark1 -> .)
    LBRACE          reduce using rule 142 (ifMark1 -> .)
    SEMI            reduce using rule 142 (ifMark1 -> .)
    SWITCH          reduce using rule 142 (ifMark1 -> .)
    DO              reduce using rule 142 (ifMark1 -> .)
    BREAK           reduce using rule 142 (ifMark1 -> .)
    CONTINUE        reduce using rule 142 (ifMark1 -> .)
    RETURN          reduce using rule 142 (ifMark1 -> .)
    BOOLEAN         reduce using rule 142 (ifMark1 -> .)
    INC             reduce using rule 142 (ifMark1 -> .)
    DEC             reduce using rule 142 (ifMark1 -> .)
    NEW             reduce using rule 142 (ifMark1 -> .)
    BYTE            reduce using rule 142 (ifMark1 -> .)
    SHORT           reduce using rule 142 (ifMark1 -> .)
    INT             reduce using rule 142 (ifMark1 -> .)
    LONG            reduce using rule 142 (ifMark1 -> .)
    CHAR            reduce using rule 142 (ifMark1 -> .)
    FLOAT           reduce using rule 142 (ifMark1 -> .)
    DOUBLE          reduce using rule 142 (ifMark1 -> .)
    SUPER           reduce using rule 142 (ifMark1 -> .)
    THIS            reduce using rule 142 (ifMark1 -> .)
    LPAREN          reduce using rule 142 (ifMark1 -> .)
    DECIMAL_LITERAL reduce using rule 142 (ifMark1 -> .)
    HEX_LITERAL     reduce using rule 142 (ifMark1 -> .)
    BINARY_LITERAL  reduce using rule 142 (ifMark1 -> .)
    FLOAT_LITERAL   reduce using rule 142 (ifMark1 -> .)
    BOOL_LITERAL    reduce using rule 142 (ifMark1 -> .)
    CHAR_LITERAL    reduce using rule 142 (ifMark1 -> .)
    STRING_LITERAL  reduce using rule 142 (ifMark1 -> .)
    NULL            reduce using rule 142 (ifMark1 -> .)
    CASE            reduce using rule 142 (ifMark1 -> .)
    DEFAULT         reduce using rule 142 (ifMark1 -> .)

    ifMark1                        shift and go to state 443

state 420

    (145) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf . end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (303) end_scope -> .

    ELSE            reduce using rule 303 (end_scope -> .)

    end_scope                      shift and go to state 444

state 421

    (111) Statement -> StatementWithoutTrailingSubstatement .
    (117) StatementNoShortIf -> StatementWithoutTrailingSubstatement .

    RBRACE          reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    IDENTIFIER      reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    IF              reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    WHILE           reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    FOR             reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    LBRACE          reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    SEMI            reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    SWITCH          reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    DO              reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    BREAK           reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    CONTINUE        reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    RETURN          reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    BOOLEAN         reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    INC             reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    DEC             reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    NEW             reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    BYTE            reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    SHORT           reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    INT             reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    LONG            reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    CHAR            reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    FLOAT           reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    DOUBLE          reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    SUPER           reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    THIS            reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    LPAREN          reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    DECIMAL_LITERAL reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    HEX_LITERAL     reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    BINARY_LITERAL  reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    FLOAT_LITERAL   reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    BOOL_LITERAL    reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    CHAR_LITERAL    reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    STRING_LITERAL  reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    NULL            reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    CASE            reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    DEFAULT         reduce using rule 111 (Statement -> StatementWithoutTrailingSubstatement .)
    ELSE            reduce using rule 117 (StatementNoShortIf -> StatementWithoutTrailingSubstatement .)


state 422

    (118) StatementNoShortIf -> LabeledStatementNoShortIf .

    ELSE            reduce using rule 118 (StatementNoShortIf -> LabeledStatementNoShortIf .)


state 423

    (119) StatementNoShortIf -> IfThenElseStatementNoShortIf .

    ELSE            reduce using rule 119 (StatementNoShortIf -> IfThenElseStatementNoShortIf .)


state 424

    (120) StatementNoShortIf -> WhileStatementNoShortIf .

    ELSE            reduce using rule 120 (StatementNoShortIf -> WhileStatementNoShortIf .)


state 425

    (121) StatementNoShortIf -> ForStatementNoShortIf .

    ELSE            reduce using rule 121 (StatementNoShortIf -> ForStatementNoShortIf .)


state 426

    (131) LabeledStatement -> IDENTIFIER . COLON Statement
    (132) LabeledStatementNoShortIf -> IDENTIFIER . COLON StatementNoShortIf
    (30) SimpleName -> IDENTIFIER .

    COLON           shift and go to state 445
    LPAREN          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    LBRACK          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    DOT             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    ASSIGN          reduce using rule 30 (SimpleName -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 30 (SimpleName -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 30 (SimpleName -> IDENTIFIER .)
    LSHIFT_ASSIGN   reduce using rule 30 (SimpleName -> IDENTIFIER .)
    RSHIFT_ASSIGN   reduce using rule 30 (SimpleName -> IDENTIFIER .)
    URSHIFT_ASSIGN  reduce using rule 30 (SimpleName -> IDENTIFIER .)
    INC             reduce using rule 30 (SimpleName -> IDENTIFIER .)
    DEC             reduce using rule 30 (SimpleName -> IDENTIFIER .)


state 427

    (159) WhileStatement -> WHILE . prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (160) WhileStatementNoShortIf -> WHILE . prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (161) prep_fw_stack -> .

    LPAREN          reduce using rule 161 (prep_fw_stack -> .)

    prep_fw_stack                  shift and go to state 446

state 428

    (167) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> FOR . prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (175) ForStatementNoShortIf -> FOR . prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> FOR . prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> FOR . prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> FOR . prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> FOR . prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> FOR . prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (181) ForStatementNoShortIf -> FOR . prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (182) ForStatementNoShortIf -> FOR . prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (161) prep_fw_stack -> .

    LPAREN          reduce using rule 161 (prep_fw_stack -> .)

    prep_fw_stack                  shift and go to state 447

state 429

    (159) WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN . while_l1 Statement end_scope while_l2
    (162) while_l1 -> .

    IDENTIFIER      reduce using rule 162 (while_l1 -> .)
    IF              reduce using rule 162 (while_l1 -> .)
    WHILE           reduce using rule 162 (while_l1 -> .)
    FOR             reduce using rule 162 (while_l1 -> .)
    LBRACE          reduce using rule 162 (while_l1 -> .)
    SEMI            reduce using rule 162 (while_l1 -> .)
    SWITCH          reduce using rule 162 (while_l1 -> .)
    DO              reduce using rule 162 (while_l1 -> .)
    BREAK           reduce using rule 162 (while_l1 -> .)
    CONTINUE        reduce using rule 162 (while_l1 -> .)
    RETURN          reduce using rule 162 (while_l1 -> .)
    INC             reduce using rule 162 (while_l1 -> .)
    DEC             reduce using rule 162 (while_l1 -> .)
    NEW             reduce using rule 162 (while_l1 -> .)
    SUPER           reduce using rule 162 (while_l1 -> .)
    THIS            reduce using rule 162 (while_l1 -> .)
    LPAREN          reduce using rule 162 (while_l1 -> .)
    DECIMAL_LITERAL reduce using rule 162 (while_l1 -> .)
    HEX_LITERAL     reduce using rule 162 (while_l1 -> .)
    BINARY_LITERAL  reduce using rule 162 (while_l1 -> .)
    FLOAT_LITERAL   reduce using rule 162 (while_l1 -> .)
    BOOL_LITERAL    reduce using rule 162 (while_l1 -> .)
    CHAR_LITERAL    reduce using rule 162 (while_l1 -> .)
    STRING_LITERAL  reduce using rule 162 (while_l1 -> .)
    NULL            reduce using rule 162 (while_l1 -> .)

    while_l1                       shift and go to state 448

state 430

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 . Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 . SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 . Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 . SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (298) Expression -> . AssignmentExpression
    (280) AssignmentExpression -> . ConditionalExpression
    (281) AssignmentExpression -> . Assignment
    (278) ConditionalExpression -> . ConditionalOrExpression
    (279) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (275) ConditionalOrExpression -> . ConditionalAndExpression
    (276) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (273) ConditionalAndExpression -> . InclusiveOrExpression
    (274) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC

    SEMI            shift and go to state 449
    SUPER           shift and go to state 160
    IDENTIFIER      shift and go to state 63
    THIS            shift and go to state 162
    LPAREN          shift and go to state 192
    NEW             shift and go to state 207
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221

    Expression                     shift and go to state 450
    AssignmentExpression           shift and go to state 194
    ConditionalExpression          shift and go to state 195
    Assignment                     shift and go to state 196
    ConditionalOrExpression        shift and go to state 197
    LeftHandSide                   shift and go to state 149
    ConditionalAndExpression       shift and go to state 198
    Name                           shift and go to state 199
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    InclusiveOrExpression          shift and go to state 200
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Primary                        shift and go to state 201
    PrimaryNoNewArray              shift and go to state 202
    ExclusiveOrExpression          shift and go to state 203
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    MethodInvocation               shift and go to state 205
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224

state 431

    (173) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI . for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI . for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (183) for_l1 -> .

    INC             reduce using rule 183 (for_l1 -> .)
    DEC             reduce using rule 183 (for_l1 -> .)
    NEW             reduce using rule 183 (for_l1 -> .)
    SUPER           reduce using rule 183 (for_l1 -> .)
    THIS            reduce using rule 183 (for_l1 -> .)
    LPAREN          reduce using rule 183 (for_l1 -> .)
    IDENTIFIER      reduce using rule 183 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 183 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 183 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 183 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 183 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 183 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 183 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 183 (for_l1 -> .)
    NULL            reduce using rule 183 (for_l1 -> .)
    RPAREN          reduce using rule 183 (for_l1 -> .)

    for_l1                         shift and go to state 451

state 432

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression . SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression . SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2

    SEMI            shift and go to state 452


state 433

    (190) StatementExpressionList -> StatementExpressionList COMMA StatementExpression .

    COMMA           reduce using rule 190 (StatementExpressionList -> StatementExpressionList COMMA StatementExpression .)
    SEMI            reduce using rule 190 (StatementExpressionList -> StatementExpressionList COMMA StatementExpression .)
    RPAREN          reduce using rule 190 (StatementExpressionList -> StatementExpressionList COMMA StatementExpression .)


state 434

    (149) SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope . SwitchLabels end_scope RBRACE
    (154) SwitchBlockStatementGroup -> begin_scope . SwitchLabels BlockStatements end_scope
    (155) SwitchLabels -> . SwitchLabel
    (156) SwitchLabels -> . SwitchLabels SwitchLabel
    (157) SwitchLabel -> . CASE ConstantExpression COLON
    (158) SwitchLabel -> . DEFAULT COLON

    CASE            shift and go to state 439
    DEFAULT         shift and go to state 440

    SwitchLabels                   shift and go to state 453
    SwitchLabel                    shift and go to state 438

state 435

    (150) SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .

    RBRACE          reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    IDENTIFIER      reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    IF              reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    WHILE           reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    FOR             reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    LBRACE          reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    SEMI            reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    SWITCH          reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    DO              reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    BREAK           reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    CONTINUE        reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    RETURN          reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    BOOLEAN         reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    INC             reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    DEC             reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    NEW             reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    BYTE            reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    SHORT           reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    INT             reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    LONG            reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    CHAR            reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    FLOAT           reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    DOUBLE          reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    SUPER           reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    THIS            reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    LPAREN          reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    DECIMAL_LITERAL reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    HEX_LITERAL     reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    BINARY_LITERAL  reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    FLOAT_LITERAL   reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    BOOL_LITERAL    reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    CHAR_LITERAL    reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    STRING_LITERAL  reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    NULL            reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    CASE            reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    DEFAULT         reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)
    ELSE            reduce using rule 150 (SwitchBlock -> LBRACE SwitchBlockStatementGroups RBRACE .)


state 436

    (153) SwitchBlockStatementGroups -> SwitchBlockStatementGroups SwitchBlockStatementGroup .

    RBRACE          reduce using rule 153 (SwitchBlockStatementGroups -> SwitchBlockStatementGroups SwitchBlockStatementGroup .)
    CASE            reduce using rule 153 (SwitchBlockStatementGroups -> SwitchBlockStatementGroups SwitchBlockStatementGroup .)
    DEFAULT         reduce using rule 153 (SwitchBlockStatementGroups -> SwitchBlockStatementGroups SwitchBlockStatementGroup .)


state 437

    (151) SwitchBlock -> LBRACE begin_scope SwitchLabels . end_scope RBRACE
    (154) SwitchBlockStatementGroup -> begin_scope SwitchLabels . BlockStatements end_scope
    (156) SwitchLabels -> SwitchLabels . SwitchLabel
    (303) end_scope -> .
    (105) BlockStatements -> . BlockStatement
    (106) BlockStatements -> . BlockStatements BlockStatement
    (157) SwitchLabel -> . CASE ConstantExpression COLON
    (158) SwitchLabel -> . DEFAULT COLON
    (107) BlockStatement -> . LocalVariableDeclarationStatement
    (108) BlockStatement -> . Statement
    (109) LocalVariableDeclarationStatement -> . LocalVariableDeclaration SEMI
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (110) LocalVariableDeclaration -> . Type VariableDeclarators
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RBRACE          reduce using rule 303 (end_scope -> .)
    CASE            shift and go to state 439
    DEFAULT         shift and go to state 440
    IDENTIFIER      shift and go to state 130
    IF              shift and go to state 131
    WHILE           shift and go to state 133
    FOR             shift and go to state 134
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    BOOLEAN         shift and go to state 65
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    BYTE            shift and go to state 71
    SHORT           shift and go to state 72
    INT             shift and go to state 73
    LONG            shift and go to state 74
    CHAR            shift and go to state 75
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 77
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    end_scope                      shift and go to state 454
    BlockStatements                shift and go to state 455
    SwitchLabel                    shift and go to state 456
    BlockStatement                 shift and go to state 110
    LocalVariableDeclarationStatement shift and go to state 111
    Statement                      shift and go to state 112
    LocalVariableDeclaration       shift and go to state 113
    StatementWithoutTrailingSubstatement shift and go to state 115
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    Type                           shift and go to state 121
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    PrimitiveType                  shift and go to state 60
    ReferenceType                  shift and go to state 61
    StatementExpression            shift and go to state 135
    NumericType                    shift and go to state 64
    ArrayType                      shift and go to state 66
    ClassType                      shift and go to state 67
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    IntegralType                   shift and go to state 68
    FloatingPointType              shift and go to state 69
    Name                           shift and go to state 148
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161

state 438

    (155) SwitchLabels -> SwitchLabel .

    CASE            reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    DEFAULT         reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    IDENTIFIER      reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    IF              reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    WHILE           reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    FOR             reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    LBRACE          reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    SEMI            reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    SWITCH          reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    DO              reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    BREAK           reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    CONTINUE        reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    RETURN          reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    BOOLEAN         reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    INC             reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    DEC             reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    NEW             reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    BYTE            reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    SHORT           reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    INT             reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    LONG            reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    CHAR            reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    FLOAT           reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    DOUBLE          reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    SUPER           reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    THIS            reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    LPAREN          reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    DECIMAL_LITERAL reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    HEX_LITERAL     reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    BINARY_LITERAL  reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    FLOAT_LITERAL   reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    BOOL_LITERAL    reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    CHAR_LITERAL    reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    STRING_LITERAL  reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    NULL            reduce using rule 155 (SwitchLabels -> SwitchLabel .)
    RBRACE          reduce using rule 155 (SwitchLabels -> SwitchLabel .)


state 439

    (157) SwitchLabel -> CASE . ConstantExpression COLON
    (299) ConstantExpression -> . Expression
    (298) Expression -> . AssignmentExpression
    (280) AssignmentExpression -> . ConditionalExpression
    (281) AssignmentExpression -> . Assignment
    (278) ConditionalExpression -> . ConditionalOrExpression
    (279) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (275) ConditionalOrExpression -> . ConditionalAndExpression
    (276) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (273) ConditionalAndExpression -> . InclusiveOrExpression
    (274) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC

    SUPER           shift and go to state 160
    IDENTIFIER      shift and go to state 63
    THIS            shift and go to state 162
    LPAREN          shift and go to state 192
    NEW             shift and go to state 207
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221

    ConstantExpression             shift and go to state 457
    Expression                     shift and go to state 458
    AssignmentExpression           shift and go to state 194
    ConditionalExpression          shift and go to state 195
    Assignment                     shift and go to state 196
    ConditionalOrExpression        shift and go to state 197
    LeftHandSide                   shift and go to state 149
    ConditionalAndExpression       shift and go to state 198
    Name                           shift and go to state 199
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    InclusiveOrExpression          shift and go to state 200
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Primary                        shift and go to state 201
    PrimaryNoNewArray              shift and go to state 202
    ExclusiveOrExpression          shift and go to state 203
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    MethodInvocation               shift and go to state 205
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224

state 440

    (158) SwitchLabel -> DEFAULT . COLON

    COLON           shift and go to state 459


state 441

    (164) DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN . dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (165) dwhile_l1 -> .

    SUPER           reduce using rule 165 (dwhile_l1 -> .)
    IDENTIFIER      reduce using rule 165 (dwhile_l1 -> .)
    THIS            reduce using rule 165 (dwhile_l1 -> .)
    LPAREN          reduce using rule 165 (dwhile_l1 -> .)
    NEW             reduce using rule 165 (dwhile_l1 -> .)
    DECIMAL_LITERAL reduce using rule 165 (dwhile_l1 -> .)
    HEX_LITERAL     reduce using rule 165 (dwhile_l1 -> .)
    BINARY_LITERAL  reduce using rule 165 (dwhile_l1 -> .)
    FLOAT_LITERAL   reduce using rule 165 (dwhile_l1 -> .)
    BOOL_LITERAL    reduce using rule 165 (dwhile_l1 -> .)
    CHAR_LITERAL    reduce using rule 165 (dwhile_l1 -> .)
    STRING_LITERAL  reduce using rule 165 (dwhile_l1 -> .)
    NULL            reduce using rule 165 (dwhile_l1 -> .)
    ADD             reduce using rule 165 (dwhile_l1 -> .)
    SUB             reduce using rule 165 (dwhile_l1 -> .)
    INC             reduce using rule 165 (dwhile_l1 -> .)
    DEC             reduce using rule 165 (dwhile_l1 -> .)
    BANG            reduce using rule 165 (dwhile_l1 -> .)
    TILDE           reduce using rule 165 (dwhile_l1 -> .)

    dwhile_l1                      shift and go to state 460

state 442

    (141) IfThenStatement -> IF begin_scope . LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> IF begin_scope . LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (146) IfThenElseStatementNoShortIf -> IF begin_scope . LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2

    LPAREN          shift and go to state 461


state 443

    (141) IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 . end_scope
    (303) end_scope -> .

    RBRACE          reduce using rule 303 (end_scope -> .)
    IDENTIFIER      reduce using rule 303 (end_scope -> .)
    IF              reduce using rule 303 (end_scope -> .)
    WHILE           reduce using rule 303 (end_scope -> .)
    FOR             reduce using rule 303 (end_scope -> .)
    LBRACE          reduce using rule 303 (end_scope -> .)
    SEMI            reduce using rule 303 (end_scope -> .)
    SWITCH          reduce using rule 303 (end_scope -> .)
    DO              reduce using rule 303 (end_scope -> .)
    BREAK           reduce using rule 303 (end_scope -> .)
    CONTINUE        reduce using rule 303 (end_scope -> .)
    RETURN          reduce using rule 303 (end_scope -> .)
    BOOLEAN         reduce using rule 303 (end_scope -> .)
    INC             reduce using rule 303 (end_scope -> .)
    DEC             reduce using rule 303 (end_scope -> .)
    NEW             reduce using rule 303 (end_scope -> .)
    BYTE            reduce using rule 303 (end_scope -> .)
    SHORT           reduce using rule 303 (end_scope -> .)
    INT             reduce using rule 303 (end_scope -> .)
    LONG            reduce using rule 303 (end_scope -> .)
    CHAR            reduce using rule 303 (end_scope -> .)
    FLOAT           reduce using rule 303 (end_scope -> .)
    DOUBLE          reduce using rule 303 (end_scope -> .)
    SUPER           reduce using rule 303 (end_scope -> .)
    THIS            reduce using rule 303 (end_scope -> .)
    LPAREN          reduce using rule 303 (end_scope -> .)
    DECIMAL_LITERAL reduce using rule 303 (end_scope -> .)
    HEX_LITERAL     reduce using rule 303 (end_scope -> .)
    BINARY_LITERAL  reduce using rule 303 (end_scope -> .)
    FLOAT_LITERAL   reduce using rule 303 (end_scope -> .)
    BOOL_LITERAL    reduce using rule 303 (end_scope -> .)
    CHAR_LITERAL    reduce using rule 303 (end_scope -> .)
    STRING_LITERAL  reduce using rule 303 (end_scope -> .)
    NULL            reduce using rule 303 (end_scope -> .)
    CASE            reduce using rule 303 (end_scope -> .)
    DEFAULT         reduce using rule 303 (end_scope -> .)

    end_scope                      shift and go to state 462

state 444

    (145) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope . ELSE ifMark3 begin_scope Statement end_scope ifMark2

    ELSE            shift and go to state 463


state 445

    (131) LabeledStatement -> IDENTIFIER COLON . Statement
    (132) LabeledStatementNoShortIf -> IDENTIFIER COLON . StatementNoShortIf
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (117) StatementNoShortIf -> . StatementWithoutTrailingSubstatement
    (118) StatementNoShortIf -> . LabeledStatementNoShortIf
    (119) StatementNoShortIf -> . IfThenElseStatementNoShortIf
    (120) StatementNoShortIf -> . WhileStatementNoShortIf
    (121) StatementNoShortIf -> . ForStatementNoShortIf
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (132) LabeledStatementNoShortIf -> . IDENTIFIER COLON StatementNoShortIf
    (146) IfThenElseStatementNoShortIf -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (160) WhileStatementNoShortIf -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (175) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (181) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (182) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 426
    IF              shift and go to state 418
    WHILE           shift and go to state 427
    FOR             shift and go to state 428
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    Statement                      shift and go to state 278
    StatementNoShortIf             shift and go to state 464
    StatementWithoutTrailingSubstatement shift and go to state 421
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    LabeledStatementNoShortIf      shift and go to state 422
    IfThenElseStatementNoShortIf   shift and go to state 423
    WhileStatementNoShortIf        shift and go to state 424
    ForStatementNoShortIf          shift and go to state 425
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    StatementExpression            shift and go to state 135
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 446

    (159) WhileStatement -> WHILE prep_fw_stack . LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (160) WhileStatementNoShortIf -> WHILE prep_fw_stack . LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2

    LPAREN          shift and go to state 465


state 447

    (167) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> FOR prep_fw_stack . LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (175) ForStatementNoShortIf -> FOR prep_fw_stack . LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> FOR prep_fw_stack . LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> FOR prep_fw_stack . LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> FOR prep_fw_stack . LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> FOR prep_fw_stack . LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> FOR prep_fw_stack . LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (181) ForStatementNoShortIf -> FOR prep_fw_stack . LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (182) ForStatementNoShortIf -> FOR prep_fw_stack . LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2

    LPAREN          shift and go to state 466


state 448

    (159) WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 . Statement end_scope while_l2
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 130
    IF              shift and go to state 131
    WHILE           shift and go to state 133
    FOR             shift and go to state 134
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    Statement                      shift and go to state 467
    StatementWithoutTrailingSubstatement shift and go to state 115
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    StatementExpression            shift and go to state 135
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 449

    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI . for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI . for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (183) for_l1 -> .

    INC             reduce using rule 183 (for_l1 -> .)
    DEC             reduce using rule 183 (for_l1 -> .)
    NEW             reduce using rule 183 (for_l1 -> .)
    SUPER           reduce using rule 183 (for_l1 -> .)
    THIS            reduce using rule 183 (for_l1 -> .)
    LPAREN          reduce using rule 183 (for_l1 -> .)
    IDENTIFIER      reduce using rule 183 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 183 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 183 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 183 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 183 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 183 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 183 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 183 (for_l1 -> .)
    NULL            reduce using rule 183 (for_l1 -> .)
    RPAREN          reduce using rule 183 (for_l1 -> .)

    for_l1                         shift and go to state 468

state 450

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression . SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression . SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2

    SEMI            shift and go to state 469


state 451

    (173) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 . ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (188) ForUpdate -> . StatementExpressionList
    (185) for_l3 -> .
    (189) StatementExpressionList -> . StatementExpression
    (190) StatementExpressionList -> . StatementExpressionList COMMA StatementExpression
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RPAREN          reduce using rule 185 (for_l3 -> .)
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    ForUpdate                      shift and go to state 470
    for_l3                         shift and go to state 471
    StatementExpressionList        shift and go to state 472
    StatementExpression            shift and go to state 394
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 452

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI . for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI . for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (183) for_l1 -> .

    INC             reduce using rule 183 (for_l1 -> .)
    DEC             reduce using rule 183 (for_l1 -> .)
    NEW             reduce using rule 183 (for_l1 -> .)
    SUPER           reduce using rule 183 (for_l1 -> .)
    THIS            reduce using rule 183 (for_l1 -> .)
    LPAREN          reduce using rule 183 (for_l1 -> .)
    IDENTIFIER      reduce using rule 183 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 183 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 183 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 183 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 183 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 183 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 183 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 183 (for_l1 -> .)
    NULL            reduce using rule 183 (for_l1 -> .)
    RPAREN          reduce using rule 183 (for_l1 -> .)

    for_l1                         shift and go to state 473

state 453

    (149) SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels . end_scope RBRACE
    (154) SwitchBlockStatementGroup -> begin_scope SwitchLabels . BlockStatements end_scope
    (156) SwitchLabels -> SwitchLabels . SwitchLabel
    (303) end_scope -> .
    (105) BlockStatements -> . BlockStatement
    (106) BlockStatements -> . BlockStatements BlockStatement
    (157) SwitchLabel -> . CASE ConstantExpression COLON
    (158) SwitchLabel -> . DEFAULT COLON
    (107) BlockStatement -> . LocalVariableDeclarationStatement
    (108) BlockStatement -> . Statement
    (109) LocalVariableDeclarationStatement -> . LocalVariableDeclaration SEMI
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (110) LocalVariableDeclaration -> . Type VariableDeclarators
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RBRACE          reduce using rule 303 (end_scope -> .)
    CASE            shift and go to state 439
    DEFAULT         shift and go to state 440
    IDENTIFIER      shift and go to state 130
    IF              shift and go to state 131
    WHILE           shift and go to state 133
    FOR             shift and go to state 134
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    BOOLEAN         shift and go to state 65
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    BYTE            shift and go to state 71
    SHORT           shift and go to state 72
    INT             shift and go to state 73
    LONG            shift and go to state 74
    CHAR            shift and go to state 75
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 77
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    end_scope                      shift and go to state 474
    BlockStatements                shift and go to state 455
    SwitchLabel                    shift and go to state 456
    BlockStatement                 shift and go to state 110
    LocalVariableDeclarationStatement shift and go to state 111
    Statement                      shift and go to state 112
    LocalVariableDeclaration       shift and go to state 113
    StatementWithoutTrailingSubstatement shift and go to state 115
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    Type                           shift and go to state 121
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    PrimitiveType                  shift and go to state 60
    ReferenceType                  shift and go to state 61
    StatementExpression            shift and go to state 135
    NumericType                    shift and go to state 64
    ArrayType                      shift and go to state 66
    ClassType                      shift and go to state 67
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    IntegralType                   shift and go to state 68
    FloatingPointType              shift and go to state 69
    Name                           shift and go to state 148
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161

state 454

    (151) SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope . RBRACE

    RBRACE          shift and go to state 475


state 455

    (154) SwitchBlockStatementGroup -> begin_scope SwitchLabels BlockStatements . end_scope
    (106) BlockStatements -> BlockStatements . BlockStatement
    (303) end_scope -> .
    (107) BlockStatement -> . LocalVariableDeclarationStatement
    (108) BlockStatement -> . Statement
    (109) LocalVariableDeclarationStatement -> . LocalVariableDeclaration SEMI
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (110) LocalVariableDeclaration -> . Type VariableDeclarators
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RBRACE          reduce using rule 303 (end_scope -> .)
    CASE            reduce using rule 303 (end_scope -> .)
    DEFAULT         reduce using rule 303 (end_scope -> .)
    IDENTIFIER      shift and go to state 130
    IF              shift and go to state 131
    WHILE           shift and go to state 133
    FOR             shift and go to state 134
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    BOOLEAN         shift and go to state 65
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    BYTE            shift and go to state 71
    SHORT           shift and go to state 72
    INT             shift and go to state 73
    LONG            shift and go to state 74
    CHAR            shift and go to state 75
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 77
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    end_scope                      shift and go to state 476
    BlockStatement                 shift and go to state 186
    LocalVariableDeclarationStatement shift and go to state 111
    Statement                      shift and go to state 112
    LocalVariableDeclaration       shift and go to state 113
    StatementWithoutTrailingSubstatement shift and go to state 115
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    Type                           shift and go to state 121
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    PrimitiveType                  shift and go to state 60
    ReferenceType                  shift and go to state 61
    StatementExpression            shift and go to state 135
    NumericType                    shift and go to state 64
    ArrayType                      shift and go to state 66
    ClassType                      shift and go to state 67
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    IntegralType                   shift and go to state 68
    FloatingPointType              shift and go to state 69
    Name                           shift and go to state 148
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161

state 456

    (156) SwitchLabels -> SwitchLabels SwitchLabel .

    CASE            reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    DEFAULT         reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    IDENTIFIER      reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    IF              reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    WHILE           reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    FOR             reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    LBRACE          reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    SEMI            reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    SWITCH          reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    DO              reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    BREAK           reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    CONTINUE        reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    RETURN          reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    BOOLEAN         reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    INC             reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    DEC             reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    NEW             reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    BYTE            reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    SHORT           reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    INT             reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    LONG            reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    CHAR            reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    FLOAT           reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    DOUBLE          reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    SUPER           reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    THIS            reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    LPAREN          reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    DECIMAL_LITERAL reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    HEX_LITERAL     reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    BINARY_LITERAL  reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    FLOAT_LITERAL   reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    BOOL_LITERAL    reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    CHAR_LITERAL    reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    STRING_LITERAL  reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    NULL            reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)
    RBRACE          reduce using rule 156 (SwitchLabels -> SwitchLabels SwitchLabel .)


state 457

    (157) SwitchLabel -> CASE ConstantExpression . COLON

    COLON           shift and go to state 477


state 458

    (299) ConstantExpression -> Expression .

    COLON           reduce using rule 299 (ConstantExpression -> Expression .)


state 459

    (158) SwitchLabel -> DEFAULT COLON .

    CASE            reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    DEFAULT         reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    IDENTIFIER      reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    IF              reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    WHILE           reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    FOR             reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    LBRACE          reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    SEMI            reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    SWITCH          reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    DO              reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    BREAK           reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    CONTINUE        reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    RETURN          reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    BOOLEAN         reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    INC             reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    DEC             reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    NEW             reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    BYTE            reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    SHORT           reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    INT             reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    LONG            reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    CHAR            reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    FLOAT           reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    DOUBLE          reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    SUPER           reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    THIS            reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    LPAREN          reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    DECIMAL_LITERAL reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    HEX_LITERAL     reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    BINARY_LITERAL  reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    FLOAT_LITERAL   reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    BOOL_LITERAL    reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    CHAR_LITERAL    reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    STRING_LITERAL  reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    NULL            reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)
    RBRACE          reduce using rule 158 (SwitchLabel -> DEFAULT COLON .)


state 460

    (164) DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 . Expression RPAREN SEMI end_scope dwhile_l2
    (298) Expression -> . AssignmentExpression
    (280) AssignmentExpression -> . ConditionalExpression
    (281) AssignmentExpression -> . Assignment
    (278) ConditionalExpression -> . ConditionalOrExpression
    (279) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (275) ConditionalOrExpression -> . ConditionalAndExpression
    (276) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (273) ConditionalAndExpression -> . InclusiveOrExpression
    (274) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC

    SUPER           shift and go to state 160
    IDENTIFIER      shift and go to state 63
    THIS            shift and go to state 162
    LPAREN          shift and go to state 192
    NEW             shift and go to state 207
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221

    Expression                     shift and go to state 478
    AssignmentExpression           shift and go to state 194
    ConditionalExpression          shift and go to state 195
    Assignment                     shift and go to state 196
    ConditionalOrExpression        shift and go to state 197
    LeftHandSide                   shift and go to state 149
    ConditionalAndExpression       shift and go to state 198
    Name                           shift and go to state 199
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    InclusiveOrExpression          shift and go to state 200
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Primary                        shift and go to state 201
    PrimaryNoNewArray              shift and go to state 202
    ExclusiveOrExpression          shift and go to state 203
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    MethodInvocation               shift and go to state 205
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224

state 461

    (141) IfThenStatement -> IF begin_scope LPAREN . Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> IF begin_scope LPAREN . Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (146) IfThenElseStatementNoShortIf -> IF begin_scope LPAREN . Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (298) Expression -> . AssignmentExpression
    (280) AssignmentExpression -> . ConditionalExpression
    (281) AssignmentExpression -> . Assignment
    (278) ConditionalExpression -> . ConditionalOrExpression
    (279) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (275) ConditionalOrExpression -> . ConditionalAndExpression
    (276) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (273) ConditionalAndExpression -> . InclusiveOrExpression
    (274) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC

    SUPER           shift and go to state 160
    IDENTIFIER      shift and go to state 63
    THIS            shift and go to state 162
    LPAREN          shift and go to state 192
    NEW             shift and go to state 207
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221

    Expression                     shift and go to state 479
    AssignmentExpression           shift and go to state 194
    ConditionalExpression          shift and go to state 195
    Assignment                     shift and go to state 196
    ConditionalOrExpression        shift and go to state 197
    LeftHandSide                   shift and go to state 149
    ConditionalAndExpression       shift and go to state 198
    Name                           shift and go to state 199
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    InclusiveOrExpression          shift and go to state 200
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Primary                        shift and go to state 201
    PrimaryNoNewArray              shift and go to state 202
    ExclusiveOrExpression          shift and go to state 203
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    MethodInvocation               shift and go to state 205
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224

state 462

    (141) IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .

    RBRACE          reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    IDENTIFIER      reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    IF              reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    WHILE           reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    FOR             reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    LBRACE          reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    SEMI            reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    SWITCH          reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    DO              reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    BREAK           reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    CONTINUE        reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    RETURN          reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    BOOLEAN         reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    INC             reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    DEC             reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    NEW             reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    BYTE            reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    SHORT           reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    INT             reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    LONG            reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    CHAR            reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    FLOAT           reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    DOUBLE          reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    SUPER           reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    THIS            reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    LPAREN          reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    DECIMAL_LITERAL reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    HEX_LITERAL     reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    BINARY_LITERAL  reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    FLOAT_LITERAL   reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    BOOL_LITERAL    reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    CHAR_LITERAL    reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    STRING_LITERAL  reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    NULL            reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    CASE            reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)
    DEFAULT         reduce using rule 141 (IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope .)


state 463

    (145) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE . ifMark3 begin_scope Statement end_scope ifMark2
    (144) ifMark3 -> .

    IDENTIFIER      reduce using rule 144 (ifMark3 -> .)
    IF              reduce using rule 144 (ifMark3 -> .)
    WHILE           reduce using rule 144 (ifMark3 -> .)
    FOR             reduce using rule 144 (ifMark3 -> .)
    LBRACE          reduce using rule 144 (ifMark3 -> .)
    SEMI            reduce using rule 144 (ifMark3 -> .)
    SWITCH          reduce using rule 144 (ifMark3 -> .)
    DO              reduce using rule 144 (ifMark3 -> .)
    BREAK           reduce using rule 144 (ifMark3 -> .)
    CONTINUE        reduce using rule 144 (ifMark3 -> .)
    RETURN          reduce using rule 144 (ifMark3 -> .)
    INC             reduce using rule 144 (ifMark3 -> .)
    DEC             reduce using rule 144 (ifMark3 -> .)
    NEW             reduce using rule 144 (ifMark3 -> .)
    SUPER           reduce using rule 144 (ifMark3 -> .)
    THIS            reduce using rule 144 (ifMark3 -> .)
    LPAREN          reduce using rule 144 (ifMark3 -> .)
    DECIMAL_LITERAL reduce using rule 144 (ifMark3 -> .)
    HEX_LITERAL     reduce using rule 144 (ifMark3 -> .)
    BINARY_LITERAL  reduce using rule 144 (ifMark3 -> .)
    FLOAT_LITERAL   reduce using rule 144 (ifMark3 -> .)
    BOOL_LITERAL    reduce using rule 144 (ifMark3 -> .)
    CHAR_LITERAL    reduce using rule 144 (ifMark3 -> .)
    STRING_LITERAL  reduce using rule 144 (ifMark3 -> .)
    NULL            reduce using rule 144 (ifMark3 -> .)

    ifMark3                        shift and go to state 480

state 464

    (132) LabeledStatementNoShortIf -> IDENTIFIER COLON StatementNoShortIf .

    ELSE            reduce using rule 132 (LabeledStatementNoShortIf -> IDENTIFIER COLON StatementNoShortIf .)


state 465

    (159) WhileStatement -> WHILE prep_fw_stack LPAREN . begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (160) WhileStatementNoShortIf -> WHILE prep_fw_stack LPAREN . begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (302) begin_scope -> .

    SUPER           reduce using rule 302 (begin_scope -> .)
    IDENTIFIER      reduce using rule 302 (begin_scope -> .)
    THIS            reduce using rule 302 (begin_scope -> .)
    LPAREN          reduce using rule 302 (begin_scope -> .)
    NEW             reduce using rule 302 (begin_scope -> .)
    DECIMAL_LITERAL reduce using rule 302 (begin_scope -> .)
    HEX_LITERAL     reduce using rule 302 (begin_scope -> .)
    BINARY_LITERAL  reduce using rule 302 (begin_scope -> .)
    FLOAT_LITERAL   reduce using rule 302 (begin_scope -> .)
    BOOL_LITERAL    reduce using rule 302 (begin_scope -> .)
    CHAR_LITERAL    reduce using rule 302 (begin_scope -> .)
    STRING_LITERAL  reduce using rule 302 (begin_scope -> .)
    NULL            reduce using rule 302 (begin_scope -> .)
    ADD             reduce using rule 302 (begin_scope -> .)
    SUB             reduce using rule 302 (begin_scope -> .)
    INC             reduce using rule 302 (begin_scope -> .)
    DEC             reduce using rule 302 (begin_scope -> .)
    BANG            reduce using rule 302 (begin_scope -> .)
    TILDE           reduce using rule 302 (begin_scope -> .)

    begin_scope                    shift and go to state 481

state 466

    (167) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> FOR prep_fw_stack LPAREN . begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (175) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN . begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN . begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN . begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN . begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN . begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN . begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (181) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN . begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (182) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN . begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (302) begin_scope -> .

    SEMI            reduce using rule 302 (begin_scope -> .)
    INC             reduce using rule 302 (begin_scope -> .)
    DEC             reduce using rule 302 (begin_scope -> .)
    NEW             reduce using rule 302 (begin_scope -> .)
    BOOLEAN         reduce using rule 302 (begin_scope -> .)
    SUPER           reduce using rule 302 (begin_scope -> .)
    THIS            reduce using rule 302 (begin_scope -> .)
    LPAREN          reduce using rule 302 (begin_scope -> .)
    IDENTIFIER      reduce using rule 302 (begin_scope -> .)
    BYTE            reduce using rule 302 (begin_scope -> .)
    SHORT           reduce using rule 302 (begin_scope -> .)
    INT             reduce using rule 302 (begin_scope -> .)
    LONG            reduce using rule 302 (begin_scope -> .)
    CHAR            reduce using rule 302 (begin_scope -> .)
    FLOAT           reduce using rule 302 (begin_scope -> .)
    DOUBLE          reduce using rule 302 (begin_scope -> .)
    DECIMAL_LITERAL reduce using rule 302 (begin_scope -> .)
    HEX_LITERAL     reduce using rule 302 (begin_scope -> .)
    BINARY_LITERAL  reduce using rule 302 (begin_scope -> .)
    FLOAT_LITERAL   reduce using rule 302 (begin_scope -> .)
    BOOL_LITERAL    reduce using rule 302 (begin_scope -> .)
    CHAR_LITERAL    reduce using rule 302 (begin_scope -> .)
    STRING_LITERAL  reduce using rule 302 (begin_scope -> .)
    NULL            reduce using rule 302 (begin_scope -> .)

    begin_scope                    shift and go to state 482

state 467

    (159) WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement . end_scope while_l2
    (303) end_scope -> .

    RBRACE          reduce using rule 303 (end_scope -> .)
    IDENTIFIER      reduce using rule 303 (end_scope -> .)
    IF              reduce using rule 303 (end_scope -> .)
    WHILE           reduce using rule 303 (end_scope -> .)
    FOR             reduce using rule 303 (end_scope -> .)
    LBRACE          reduce using rule 303 (end_scope -> .)
    SEMI            reduce using rule 303 (end_scope -> .)
    SWITCH          reduce using rule 303 (end_scope -> .)
    DO              reduce using rule 303 (end_scope -> .)
    BREAK           reduce using rule 303 (end_scope -> .)
    CONTINUE        reduce using rule 303 (end_scope -> .)
    RETURN          reduce using rule 303 (end_scope -> .)
    BOOLEAN         reduce using rule 303 (end_scope -> .)
    INC             reduce using rule 303 (end_scope -> .)
    DEC             reduce using rule 303 (end_scope -> .)
    NEW             reduce using rule 303 (end_scope -> .)
    BYTE            reduce using rule 303 (end_scope -> .)
    SHORT           reduce using rule 303 (end_scope -> .)
    INT             reduce using rule 303 (end_scope -> .)
    LONG            reduce using rule 303 (end_scope -> .)
    CHAR            reduce using rule 303 (end_scope -> .)
    FLOAT           reduce using rule 303 (end_scope -> .)
    DOUBLE          reduce using rule 303 (end_scope -> .)
    SUPER           reduce using rule 303 (end_scope -> .)
    THIS            reduce using rule 303 (end_scope -> .)
    LPAREN          reduce using rule 303 (end_scope -> .)
    DECIMAL_LITERAL reduce using rule 303 (end_scope -> .)
    HEX_LITERAL     reduce using rule 303 (end_scope -> .)
    BINARY_LITERAL  reduce using rule 303 (end_scope -> .)
    FLOAT_LITERAL   reduce using rule 303 (end_scope -> .)
    BOOL_LITERAL    reduce using rule 303 (end_scope -> .)
    CHAR_LITERAL    reduce using rule 303 (end_scope -> .)
    STRING_LITERAL  reduce using rule 303 (end_scope -> .)
    NULL            reduce using rule 303 (end_scope -> .)
    CASE            reduce using rule 303 (end_scope -> .)
    DEFAULT         reduce using rule 303 (end_scope -> .)

    end_scope                      shift and go to state 483

state 468

    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 . ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (188) ForUpdate -> . StatementExpressionList
    (185) for_l3 -> .
    (189) StatementExpressionList -> . StatementExpression
    (190) StatementExpressionList -> . StatementExpressionList COMMA StatementExpression
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RPAREN          reduce using rule 185 (for_l3 -> .)
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    ForUpdate                      shift and go to state 484
    for_l3                         shift and go to state 485
    StatementExpressionList        shift and go to state 472
    StatementExpression            shift and go to state 394
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 469

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI . for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI . for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (183) for_l1 -> .

    INC             reduce using rule 183 (for_l1 -> .)
    DEC             reduce using rule 183 (for_l1 -> .)
    NEW             reduce using rule 183 (for_l1 -> .)
    SUPER           reduce using rule 183 (for_l1 -> .)
    THIS            reduce using rule 183 (for_l1 -> .)
    LPAREN          reduce using rule 183 (for_l1 -> .)
    IDENTIFIER      reduce using rule 183 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 183 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 183 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 183 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 183 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 183 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 183 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 183 (for_l1 -> .)
    NULL            reduce using rule 183 (for_l1 -> .)
    RPAREN          reduce using rule 183 (for_l1 -> .)

    for_l1                         shift and go to state 486

state 470

    (173) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (185) for_l3 -> .

    RPAREN          reduce using rule 185 (for_l3 -> .)

    for_l3                         shift and go to state 487

state 471

    (174) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 . RPAREN for_l1 Statement end_scope for_l2

    RPAREN          shift and go to state 488


state 472

    (188) ForUpdate -> StatementExpressionList .
    (190) StatementExpressionList -> StatementExpressionList . COMMA StatementExpression

    RPAREN          reduce using rule 188 (ForUpdate -> StatementExpressionList .)
    COMMA           shift and go to state 411


state 473

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 . ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (188) ForUpdate -> . StatementExpressionList
    (185) for_l3 -> .
    (189) StatementExpressionList -> . StatementExpression
    (190) StatementExpressionList -> . StatementExpressionList COMMA StatementExpression
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RPAREN          reduce using rule 185 (for_l3 -> .)
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    ForUpdate                      shift and go to state 489
    for_l3                         shift and go to state 490
    StatementExpressionList        shift and go to state 472
    StatementExpression            shift and go to state 394
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 474

    (149) SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope . RBRACE

    RBRACE          shift and go to state 491


state 475

    (151) SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .

    RBRACE          reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    IDENTIFIER      reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    IF              reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    WHILE           reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    FOR             reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    LBRACE          reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    SEMI            reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    SWITCH          reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    DO              reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    BREAK           reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    CONTINUE        reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    RETURN          reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    BOOLEAN         reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    INC             reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    DEC             reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    NEW             reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    BYTE            reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    SHORT           reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    INT             reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    LONG            reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    CHAR            reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    FLOAT           reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    DOUBLE          reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    SUPER           reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    THIS            reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    LPAREN          reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    DECIMAL_LITERAL reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    HEX_LITERAL     reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    BINARY_LITERAL  reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    FLOAT_LITERAL   reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    BOOL_LITERAL    reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    CHAR_LITERAL    reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    STRING_LITERAL  reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    NULL            reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    CASE            reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    DEFAULT         reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)
    ELSE            reduce using rule 151 (SwitchBlock -> LBRACE begin_scope SwitchLabels end_scope RBRACE .)


state 476

    (154) SwitchBlockStatementGroup -> begin_scope SwitchLabels BlockStatements end_scope .

    RBRACE          reduce using rule 154 (SwitchBlockStatementGroup -> begin_scope SwitchLabels BlockStatements end_scope .)
    CASE            reduce using rule 154 (SwitchBlockStatementGroup -> begin_scope SwitchLabels BlockStatements end_scope .)
    DEFAULT         reduce using rule 154 (SwitchBlockStatementGroup -> begin_scope SwitchLabels BlockStatements end_scope .)


state 477

    (157) SwitchLabel -> CASE ConstantExpression COLON .

    CASE            reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    DEFAULT         reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    IDENTIFIER      reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    IF              reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    WHILE           reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    FOR             reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    LBRACE          reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    SEMI            reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    SWITCH          reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    DO              reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    BREAK           reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    CONTINUE        reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    RETURN          reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    BOOLEAN         reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    INC             reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    DEC             reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    NEW             reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    BYTE            reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    SHORT           reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    INT             reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    LONG            reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    CHAR            reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    FLOAT           reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    DOUBLE          reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    SUPER           reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    THIS            reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    LPAREN          reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    DECIMAL_LITERAL reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    HEX_LITERAL     reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    BINARY_LITERAL  reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    FLOAT_LITERAL   reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    BOOL_LITERAL    reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    CHAR_LITERAL    reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    STRING_LITERAL  reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    NULL            reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)
    RBRACE          reduce using rule 157 (SwitchLabel -> CASE ConstantExpression COLON .)


state 478

    (164) DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression . RPAREN SEMI end_scope dwhile_l2

    RPAREN          shift and go to state 492


state 479

    (141) IfThenStatement -> IF begin_scope LPAREN Expression . RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> IF begin_scope LPAREN Expression . RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (146) IfThenElseStatementNoShortIf -> IF begin_scope LPAREN Expression . RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2

    RPAREN          shift and go to state 493


state 480

    (145) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 . begin_scope Statement end_scope ifMark2
    (302) begin_scope -> .

    IDENTIFIER      reduce using rule 302 (begin_scope -> .)
    IF              reduce using rule 302 (begin_scope -> .)
    WHILE           reduce using rule 302 (begin_scope -> .)
    FOR             reduce using rule 302 (begin_scope -> .)
    LBRACE          reduce using rule 302 (begin_scope -> .)
    SEMI            reduce using rule 302 (begin_scope -> .)
    SWITCH          reduce using rule 302 (begin_scope -> .)
    DO              reduce using rule 302 (begin_scope -> .)
    BREAK           reduce using rule 302 (begin_scope -> .)
    CONTINUE        reduce using rule 302 (begin_scope -> .)
    RETURN          reduce using rule 302 (begin_scope -> .)
    INC             reduce using rule 302 (begin_scope -> .)
    DEC             reduce using rule 302 (begin_scope -> .)
    NEW             reduce using rule 302 (begin_scope -> .)
    SUPER           reduce using rule 302 (begin_scope -> .)
    THIS            reduce using rule 302 (begin_scope -> .)
    LPAREN          reduce using rule 302 (begin_scope -> .)
    DECIMAL_LITERAL reduce using rule 302 (begin_scope -> .)
    HEX_LITERAL     reduce using rule 302 (begin_scope -> .)
    BINARY_LITERAL  reduce using rule 302 (begin_scope -> .)
    FLOAT_LITERAL   reduce using rule 302 (begin_scope -> .)
    BOOL_LITERAL    reduce using rule 302 (begin_scope -> .)
    CHAR_LITERAL    reduce using rule 302 (begin_scope -> .)
    STRING_LITERAL  reduce using rule 302 (begin_scope -> .)
    NULL            reduce using rule 302 (begin_scope -> .)

    begin_scope                    shift and go to state 494

state 481

    (159) WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope . while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (160) WhileStatementNoShortIf -> WHILE prep_fw_stack LPAREN begin_scope . while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (162) while_l1 -> .

    SUPER           reduce using rule 162 (while_l1 -> .)
    IDENTIFIER      reduce using rule 162 (while_l1 -> .)
    THIS            reduce using rule 162 (while_l1 -> .)
    LPAREN          reduce using rule 162 (while_l1 -> .)
    NEW             reduce using rule 162 (while_l1 -> .)
    DECIMAL_LITERAL reduce using rule 162 (while_l1 -> .)
    HEX_LITERAL     reduce using rule 162 (while_l1 -> .)
    BINARY_LITERAL  reduce using rule 162 (while_l1 -> .)
    FLOAT_LITERAL   reduce using rule 162 (while_l1 -> .)
    BOOL_LITERAL    reduce using rule 162 (while_l1 -> .)
    CHAR_LITERAL    reduce using rule 162 (while_l1 -> .)
    STRING_LITERAL  reduce using rule 162 (while_l1 -> .)
    NULL            reduce using rule 162 (while_l1 -> .)
    ADD             reduce using rule 162 (while_l1 -> .)
    SUB             reduce using rule 162 (while_l1 -> .)
    INC             reduce using rule 162 (while_l1 -> .)
    DEC             reduce using rule 162 (while_l1 -> .)
    BANG            reduce using rule 162 (while_l1 -> .)
    TILDE           reduce using rule 162 (while_l1 -> .)

    while_l1                       shift and go to state 495

state 482

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> FOR prep_fw_stack LPAREN begin_scope . SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (175) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope . ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope . SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope . ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope . ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope . ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope . SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (181) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope . SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (182) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope . SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (186) ForInit -> . StatementExpressionList
    (187) ForInit -> . LocalVariableDeclaration
    (189) StatementExpressionList -> . StatementExpression
    (190) StatementExpressionList -> . StatementExpressionList COMMA StatementExpression
    (110) LocalVariableDeclaration -> . Type VariableDeclarators
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (10) Type -> . PrimitiveType
    (11) Type -> . ReferenceType
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (12) PrimitiveType -> . NumericType
    (13) PrimitiveType -> . BOOLEAN
    (23) ReferenceType -> . ArrayType
    (24) ReferenceType -> . ClassType
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (14) NumericType -> . IntegralType
    (15) NumericType -> . FloatingPointType
    (26) ArrayType -> . PrimitiveType Dims
    (27) ArrayType -> . Name Dims
    (25) ClassType -> . Name
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (16) IntegralType -> . BYTE
    (17) IntegralType -> . SHORT
    (18) IntegralType -> . INT
    (19) IntegralType -> . LONG
    (20) IntegralType -> . CHAR
    (21) FloatingPointType -> . FLOAT
    (22) FloatingPointType -> . DOUBLE
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    SEMI            shift and go to state 497
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    BOOLEAN         shift and go to state 65
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    IDENTIFIER      shift and go to state 63
    BYTE            shift and go to state 71
    SHORT           shift and go to state 72
    INT             shift and go to state 73
    LONG            shift and go to state 74
    CHAR            shift and go to state 75
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 77
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    ForInit                        shift and go to state 496
    StatementExpressionList        shift and go to state 392
    LocalVariableDeclaration       shift and go to state 393
    StatementExpression            shift and go to state 394
    Type                           shift and go to state 121
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    PrimitiveType                  shift and go to state 60
    ReferenceType                  shift and go to state 61
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 395
    ClassType                      shift and go to state 67
    NumericType                    shift and go to state 64
    ArrayType                      shift and go to state 66
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    IntegralType                   shift and go to state 68
    FloatingPointType              shift and go to state 69
    Literal                        shift and go to state 161

state 483

    (159) WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope . while_l2
    (163) while_l2 -> .

    RBRACE          reduce using rule 163 (while_l2 -> .)
    IDENTIFIER      reduce using rule 163 (while_l2 -> .)
    IF              reduce using rule 163 (while_l2 -> .)
    WHILE           reduce using rule 163 (while_l2 -> .)
    FOR             reduce using rule 163 (while_l2 -> .)
    LBRACE          reduce using rule 163 (while_l2 -> .)
    SEMI            reduce using rule 163 (while_l2 -> .)
    SWITCH          reduce using rule 163 (while_l2 -> .)
    DO              reduce using rule 163 (while_l2 -> .)
    BREAK           reduce using rule 163 (while_l2 -> .)
    CONTINUE        reduce using rule 163 (while_l2 -> .)
    RETURN          reduce using rule 163 (while_l2 -> .)
    BOOLEAN         reduce using rule 163 (while_l2 -> .)
    INC             reduce using rule 163 (while_l2 -> .)
    DEC             reduce using rule 163 (while_l2 -> .)
    NEW             reduce using rule 163 (while_l2 -> .)
    BYTE            reduce using rule 163 (while_l2 -> .)
    SHORT           reduce using rule 163 (while_l2 -> .)
    INT             reduce using rule 163 (while_l2 -> .)
    LONG            reduce using rule 163 (while_l2 -> .)
    CHAR            reduce using rule 163 (while_l2 -> .)
    FLOAT           reduce using rule 163 (while_l2 -> .)
    DOUBLE          reduce using rule 163 (while_l2 -> .)
    SUPER           reduce using rule 163 (while_l2 -> .)
    THIS            reduce using rule 163 (while_l2 -> .)
    LPAREN          reduce using rule 163 (while_l2 -> .)
    DECIMAL_LITERAL reduce using rule 163 (while_l2 -> .)
    HEX_LITERAL     reduce using rule 163 (while_l2 -> .)
    BINARY_LITERAL  reduce using rule 163 (while_l2 -> .)
    FLOAT_LITERAL   reduce using rule 163 (while_l2 -> .)
    BOOL_LITERAL    reduce using rule 163 (while_l2 -> .)
    CHAR_LITERAL    reduce using rule 163 (while_l2 -> .)
    STRING_LITERAL  reduce using rule 163 (while_l2 -> .)
    NULL            reduce using rule 163 (while_l2 -> .)
    CASE            reduce using rule 163 (while_l2 -> .)
    DEFAULT         reduce using rule 163 (while_l2 -> .)

    while_l2                       shift and go to state 498

state 484

    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (185) for_l3 -> .

    RPAREN          reduce using rule 185 (for_l3 -> .)

    for_l3                         shift and go to state 499

state 485

    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 . RPAREN for_l1 Statement end_scope for_l2

    RPAREN          shift and go to state 500


state 486

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 . ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (188) ForUpdate -> . StatementExpressionList
    (185) for_l3 -> .
    (189) StatementExpressionList -> . StatementExpression
    (190) StatementExpressionList -> . StatementExpressionList COMMA StatementExpression
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RPAREN          reduce using rule 185 (for_l3 -> .)
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    ForUpdate                      shift and go to state 501
    for_l3                         shift and go to state 502
    StatementExpressionList        shift and go to state 472
    StatementExpression            shift and go to state 394
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 487

    (173) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 . RPAREN for_l1 Statement end_scope for_l2

    RPAREN          shift and go to state 503


state 488

    (174) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (183) for_l1 -> .

    IDENTIFIER      reduce using rule 183 (for_l1 -> .)
    IF              reduce using rule 183 (for_l1 -> .)
    WHILE           reduce using rule 183 (for_l1 -> .)
    FOR             reduce using rule 183 (for_l1 -> .)
    LBRACE          reduce using rule 183 (for_l1 -> .)
    SEMI            reduce using rule 183 (for_l1 -> .)
    SWITCH          reduce using rule 183 (for_l1 -> .)
    DO              reduce using rule 183 (for_l1 -> .)
    BREAK           reduce using rule 183 (for_l1 -> .)
    CONTINUE        reduce using rule 183 (for_l1 -> .)
    RETURN          reduce using rule 183 (for_l1 -> .)
    INC             reduce using rule 183 (for_l1 -> .)
    DEC             reduce using rule 183 (for_l1 -> .)
    NEW             reduce using rule 183 (for_l1 -> .)
    SUPER           reduce using rule 183 (for_l1 -> .)
    THIS            reduce using rule 183 (for_l1 -> .)
    LPAREN          reduce using rule 183 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 183 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 183 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 183 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 183 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 183 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 183 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 183 (for_l1 -> .)
    NULL            reduce using rule 183 (for_l1 -> .)

    for_l1                         shift and go to state 504

state 489

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (185) for_l3 -> .

    RPAREN          reduce using rule 185 (for_l3 -> .)

    for_l3                         shift and go to state 505

state 490

    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 . RPAREN for_l1 Statement end_scope for_l2

    RPAREN          shift and go to state 506


state 491

    (149) SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .

    RBRACE          reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    IDENTIFIER      reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    IF              reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    WHILE           reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    FOR             reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    LBRACE          reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    SEMI            reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    SWITCH          reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    DO              reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    BREAK           reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    CONTINUE        reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    RETURN          reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    BOOLEAN         reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    INC             reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    DEC             reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    NEW             reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    BYTE            reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    SHORT           reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    INT             reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    LONG            reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    CHAR            reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    FLOAT           reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    DOUBLE          reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    SUPER           reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    THIS            reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    LPAREN          reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    DECIMAL_LITERAL reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    HEX_LITERAL     reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    BINARY_LITERAL  reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    FLOAT_LITERAL   reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    BOOL_LITERAL    reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    CHAR_LITERAL    reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    STRING_LITERAL  reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    NULL            reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    CASE            reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    DEFAULT         reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)
    ELSE            reduce using rule 149 (SwitchBlock -> LBRACE SwitchBlockStatementGroups begin_scope SwitchLabels end_scope RBRACE .)


state 492

    (164) DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN . SEMI end_scope dwhile_l2

    SEMI            shift and go to state 507


state 493

    (141) IfThenStatement -> IF begin_scope LPAREN Expression RPAREN . ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN . ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (146) IfThenElseStatementNoShortIf -> IF begin_scope LPAREN Expression RPAREN . ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (142) ifMark1 -> .

    IDENTIFIER      reduce using rule 142 (ifMark1 -> .)
    IF              reduce using rule 142 (ifMark1 -> .)
    WHILE           reduce using rule 142 (ifMark1 -> .)
    FOR             reduce using rule 142 (ifMark1 -> .)
    LBRACE          reduce using rule 142 (ifMark1 -> .)
    SEMI            reduce using rule 142 (ifMark1 -> .)
    SWITCH          reduce using rule 142 (ifMark1 -> .)
    DO              reduce using rule 142 (ifMark1 -> .)
    BREAK           reduce using rule 142 (ifMark1 -> .)
    CONTINUE        reduce using rule 142 (ifMark1 -> .)
    RETURN          reduce using rule 142 (ifMark1 -> .)
    INC             reduce using rule 142 (ifMark1 -> .)
    DEC             reduce using rule 142 (ifMark1 -> .)
    NEW             reduce using rule 142 (ifMark1 -> .)
    SUPER           reduce using rule 142 (ifMark1 -> .)
    THIS            reduce using rule 142 (ifMark1 -> .)
    LPAREN          reduce using rule 142 (ifMark1 -> .)
    DECIMAL_LITERAL reduce using rule 142 (ifMark1 -> .)
    HEX_LITERAL     reduce using rule 142 (ifMark1 -> .)
    BINARY_LITERAL  reduce using rule 142 (ifMark1 -> .)
    FLOAT_LITERAL   reduce using rule 142 (ifMark1 -> .)
    BOOL_LITERAL    reduce using rule 142 (ifMark1 -> .)
    CHAR_LITERAL    reduce using rule 142 (ifMark1 -> .)
    STRING_LITERAL  reduce using rule 142 (ifMark1 -> .)
    NULL            reduce using rule 142 (ifMark1 -> .)

    ifMark1                        shift and go to state 508

state 494

    (145) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope . Statement end_scope ifMark2
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 130
    IF              shift and go to state 131
    WHILE           shift and go to state 133
    FOR             shift and go to state 134
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    Statement                      shift and go to state 509
    StatementWithoutTrailingSubstatement shift and go to state 115
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    StatementExpression            shift and go to state 135
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 495

    (159) WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 . Expression RPAREN while_l1 Statement end_scope while_l2
    (160) WhileStatementNoShortIf -> WHILE prep_fw_stack LPAREN begin_scope while_l1 . Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (298) Expression -> . AssignmentExpression
    (280) AssignmentExpression -> . ConditionalExpression
    (281) AssignmentExpression -> . Assignment
    (278) ConditionalExpression -> . ConditionalOrExpression
    (279) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (275) ConditionalOrExpression -> . ConditionalAndExpression
    (276) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (273) ConditionalAndExpression -> . InclusiveOrExpression
    (274) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC

    SUPER           shift and go to state 160
    IDENTIFIER      shift and go to state 63
    THIS            shift and go to state 162
    LPAREN          shift and go to state 192
    NEW             shift and go to state 207
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221

    Expression                     shift and go to state 510
    AssignmentExpression           shift and go to state 194
    ConditionalExpression          shift and go to state 195
    Assignment                     shift and go to state 196
    ConditionalOrExpression        shift and go to state 197
    LeftHandSide                   shift and go to state 149
    ConditionalAndExpression       shift and go to state 198
    Name                           shift and go to state 199
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    InclusiveOrExpression          shift and go to state 200
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Primary                        shift and go to state 201
    PrimaryNoNewArray              shift and go to state 202
    ExclusiveOrExpression          shift and go to state 203
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    MethodInvocation               shift and go to state 205
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224

state 496

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit . SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit . SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit . SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit . SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (175) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit . SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit . SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit . SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit . SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2

    SEMI            shift and go to state 511


state 497

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI . for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI . for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI . for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI . for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (176) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI . for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI . for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (181) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI . for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (182) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI . for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (183) for_l1 -> .

    SEMI            reduce using rule 183 (for_l1 -> .)
    SUPER           reduce using rule 183 (for_l1 -> .)
    IDENTIFIER      reduce using rule 183 (for_l1 -> .)
    THIS            reduce using rule 183 (for_l1 -> .)
    LPAREN          reduce using rule 183 (for_l1 -> .)
    NEW             reduce using rule 183 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 183 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 183 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 183 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 183 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 183 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 183 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 183 (for_l1 -> .)
    NULL            reduce using rule 183 (for_l1 -> .)
    ADD             reduce using rule 183 (for_l1 -> .)
    SUB             reduce using rule 183 (for_l1 -> .)
    INC             reduce using rule 183 (for_l1 -> .)
    DEC             reduce using rule 183 (for_l1 -> .)
    BANG            reduce using rule 183 (for_l1 -> .)
    TILDE           reduce using rule 183 (for_l1 -> .)

    for_l1                         shift and go to state 512

state 498

    (159) WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .

    RBRACE          reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    IDENTIFIER      reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    IF              reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    WHILE           reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    FOR             reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    LBRACE          reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    SEMI            reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    SWITCH          reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    DO              reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    BREAK           reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    CONTINUE        reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    RETURN          reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    BOOLEAN         reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    INC             reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    DEC             reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    NEW             reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    BYTE            reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    SHORT           reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    INT             reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    LONG            reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    CHAR            reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    FLOAT           reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    DOUBLE          reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    SUPER           reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    THIS            reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    LPAREN          reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    DECIMAL_LITERAL reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    HEX_LITERAL     reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    BINARY_LITERAL  reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    FLOAT_LITERAL   reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    BOOL_LITERAL    reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    CHAR_LITERAL    reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    STRING_LITERAL  reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    NULL            reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    CASE            reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)
    DEFAULT         reduce using rule 159 (WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2 .)


state 499

    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 . RPAREN for_l1 Statement end_scope for_l2

    RPAREN          shift and go to state 513


state 500

    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (183) for_l1 -> .

    IDENTIFIER      reduce using rule 183 (for_l1 -> .)
    IF              reduce using rule 183 (for_l1 -> .)
    WHILE           reduce using rule 183 (for_l1 -> .)
    FOR             reduce using rule 183 (for_l1 -> .)
    LBRACE          reduce using rule 183 (for_l1 -> .)
    SEMI            reduce using rule 183 (for_l1 -> .)
    SWITCH          reduce using rule 183 (for_l1 -> .)
    DO              reduce using rule 183 (for_l1 -> .)
    BREAK           reduce using rule 183 (for_l1 -> .)
    CONTINUE        reduce using rule 183 (for_l1 -> .)
    RETURN          reduce using rule 183 (for_l1 -> .)
    INC             reduce using rule 183 (for_l1 -> .)
    DEC             reduce using rule 183 (for_l1 -> .)
    NEW             reduce using rule 183 (for_l1 -> .)
    SUPER           reduce using rule 183 (for_l1 -> .)
    THIS            reduce using rule 183 (for_l1 -> .)
    LPAREN          reduce using rule 183 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 183 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 183 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 183 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 183 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 183 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 183 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 183 (for_l1 -> .)
    NULL            reduce using rule 183 (for_l1 -> .)

    for_l1                         shift and go to state 514

state 501

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (185) for_l3 -> .

    RPAREN          reduce using rule 185 (for_l3 -> .)

    for_l3                         shift and go to state 515

state 502

    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 . RPAREN for_l1 Statement end_scope for_l2

    RPAREN          shift and go to state 516


state 503

    (173) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (183) for_l1 -> .

    IDENTIFIER      reduce using rule 183 (for_l1 -> .)
    IF              reduce using rule 183 (for_l1 -> .)
    WHILE           reduce using rule 183 (for_l1 -> .)
    FOR             reduce using rule 183 (for_l1 -> .)
    LBRACE          reduce using rule 183 (for_l1 -> .)
    SEMI            reduce using rule 183 (for_l1 -> .)
    SWITCH          reduce using rule 183 (for_l1 -> .)
    DO              reduce using rule 183 (for_l1 -> .)
    BREAK           reduce using rule 183 (for_l1 -> .)
    CONTINUE        reduce using rule 183 (for_l1 -> .)
    RETURN          reduce using rule 183 (for_l1 -> .)
    INC             reduce using rule 183 (for_l1 -> .)
    DEC             reduce using rule 183 (for_l1 -> .)
    NEW             reduce using rule 183 (for_l1 -> .)
    SUPER           reduce using rule 183 (for_l1 -> .)
    THIS            reduce using rule 183 (for_l1 -> .)
    LPAREN          reduce using rule 183 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 183 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 183 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 183 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 183 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 183 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 183 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 183 (for_l1 -> .)
    NULL            reduce using rule 183 (for_l1 -> .)

    for_l1                         shift and go to state 517

state 504

    (174) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 130
    IF              shift and go to state 131
    WHILE           shift and go to state 133
    FOR             shift and go to state 134
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    Statement                      shift and go to state 518
    StatementWithoutTrailingSubstatement shift and go to state 115
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    StatementExpression            shift and go to state 135
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 505

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 . RPAREN for_l1 Statement end_scope for_l2

    RPAREN          shift and go to state 519


state 506

    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (183) for_l1 -> .

    IDENTIFIER      reduce using rule 183 (for_l1 -> .)
    IF              reduce using rule 183 (for_l1 -> .)
    WHILE           reduce using rule 183 (for_l1 -> .)
    FOR             reduce using rule 183 (for_l1 -> .)
    LBRACE          reduce using rule 183 (for_l1 -> .)
    SEMI            reduce using rule 183 (for_l1 -> .)
    SWITCH          reduce using rule 183 (for_l1 -> .)
    DO              reduce using rule 183 (for_l1 -> .)
    BREAK           reduce using rule 183 (for_l1 -> .)
    CONTINUE        reduce using rule 183 (for_l1 -> .)
    RETURN          reduce using rule 183 (for_l1 -> .)
    INC             reduce using rule 183 (for_l1 -> .)
    DEC             reduce using rule 183 (for_l1 -> .)
    NEW             reduce using rule 183 (for_l1 -> .)
    SUPER           reduce using rule 183 (for_l1 -> .)
    THIS            reduce using rule 183 (for_l1 -> .)
    LPAREN          reduce using rule 183 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 183 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 183 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 183 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 183 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 183 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 183 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 183 (for_l1 -> .)
    NULL            reduce using rule 183 (for_l1 -> .)

    for_l1                         shift and go to state 520

state 507

    (164) DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI . end_scope dwhile_l2
    (303) end_scope -> .

    RBRACE          reduce using rule 303 (end_scope -> .)
    IDENTIFIER      reduce using rule 303 (end_scope -> .)
    IF              reduce using rule 303 (end_scope -> .)
    WHILE           reduce using rule 303 (end_scope -> .)
    FOR             reduce using rule 303 (end_scope -> .)
    LBRACE          reduce using rule 303 (end_scope -> .)
    SEMI            reduce using rule 303 (end_scope -> .)
    SWITCH          reduce using rule 303 (end_scope -> .)
    DO              reduce using rule 303 (end_scope -> .)
    BREAK           reduce using rule 303 (end_scope -> .)
    CONTINUE        reduce using rule 303 (end_scope -> .)
    RETURN          reduce using rule 303 (end_scope -> .)
    BOOLEAN         reduce using rule 303 (end_scope -> .)
    INC             reduce using rule 303 (end_scope -> .)
    DEC             reduce using rule 303 (end_scope -> .)
    NEW             reduce using rule 303 (end_scope -> .)
    BYTE            reduce using rule 303 (end_scope -> .)
    SHORT           reduce using rule 303 (end_scope -> .)
    INT             reduce using rule 303 (end_scope -> .)
    LONG            reduce using rule 303 (end_scope -> .)
    CHAR            reduce using rule 303 (end_scope -> .)
    FLOAT           reduce using rule 303 (end_scope -> .)
    DOUBLE          reduce using rule 303 (end_scope -> .)
    SUPER           reduce using rule 303 (end_scope -> .)
    THIS            reduce using rule 303 (end_scope -> .)
    LPAREN          reduce using rule 303 (end_scope -> .)
    DECIMAL_LITERAL reduce using rule 303 (end_scope -> .)
    HEX_LITERAL     reduce using rule 303 (end_scope -> .)
    BINARY_LITERAL  reduce using rule 303 (end_scope -> .)
    FLOAT_LITERAL   reduce using rule 303 (end_scope -> .)
    BOOL_LITERAL    reduce using rule 303 (end_scope -> .)
    CHAR_LITERAL    reduce using rule 303 (end_scope -> .)
    STRING_LITERAL  reduce using rule 303 (end_scope -> .)
    NULL            reduce using rule 303 (end_scope -> .)
    CASE            reduce using rule 303 (end_scope -> .)
    DEFAULT         reduce using rule 303 (end_scope -> .)
    ELSE            reduce using rule 303 (end_scope -> .)

    end_scope                      shift and go to state 521

state 508

    (141) IfThenStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 . Statement ifMark1 end_scope
    (145) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 . StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (146) IfThenElseStatementNoShortIf -> IF begin_scope LPAREN Expression RPAREN ifMark1 . StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (117) StatementNoShortIf -> . StatementWithoutTrailingSubstatement
    (118) StatementNoShortIf -> . LabeledStatementNoShortIf
    (119) StatementNoShortIf -> . IfThenElseStatementNoShortIf
    (120) StatementNoShortIf -> . WhileStatementNoShortIf
    (121) StatementNoShortIf -> . ForStatementNoShortIf
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (132) LabeledStatementNoShortIf -> . IDENTIFIER COLON StatementNoShortIf
    (146) IfThenElseStatementNoShortIf -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (160) WhileStatementNoShortIf -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (175) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (181) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (182) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 426
    IF              shift and go to state 418
    WHILE           shift and go to state 427
    FOR             shift and go to state 428
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    Statement                      shift and go to state 419
    StatementNoShortIf             shift and go to state 522
    StatementWithoutTrailingSubstatement shift and go to state 421
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    LabeledStatementNoShortIf      shift and go to state 422
    IfThenElseStatementNoShortIf   shift and go to state 423
    WhileStatementNoShortIf        shift and go to state 424
    ForStatementNoShortIf          shift and go to state 425
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    StatementExpression            shift and go to state 135
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 509

    (145) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement . end_scope ifMark2
    (303) end_scope -> .

    RBRACE          reduce using rule 303 (end_scope -> .)
    IDENTIFIER      reduce using rule 303 (end_scope -> .)
    IF              reduce using rule 303 (end_scope -> .)
    WHILE           reduce using rule 303 (end_scope -> .)
    FOR             reduce using rule 303 (end_scope -> .)
    LBRACE          reduce using rule 303 (end_scope -> .)
    SEMI            reduce using rule 303 (end_scope -> .)
    SWITCH          reduce using rule 303 (end_scope -> .)
    DO              reduce using rule 303 (end_scope -> .)
    BREAK           reduce using rule 303 (end_scope -> .)
    CONTINUE        reduce using rule 303 (end_scope -> .)
    RETURN          reduce using rule 303 (end_scope -> .)
    BOOLEAN         reduce using rule 303 (end_scope -> .)
    INC             reduce using rule 303 (end_scope -> .)
    DEC             reduce using rule 303 (end_scope -> .)
    NEW             reduce using rule 303 (end_scope -> .)
    BYTE            reduce using rule 303 (end_scope -> .)
    SHORT           reduce using rule 303 (end_scope -> .)
    INT             reduce using rule 303 (end_scope -> .)
    LONG            reduce using rule 303 (end_scope -> .)
    CHAR            reduce using rule 303 (end_scope -> .)
    FLOAT           reduce using rule 303 (end_scope -> .)
    DOUBLE          reduce using rule 303 (end_scope -> .)
    SUPER           reduce using rule 303 (end_scope -> .)
    THIS            reduce using rule 303 (end_scope -> .)
    LPAREN          reduce using rule 303 (end_scope -> .)
    DECIMAL_LITERAL reduce using rule 303 (end_scope -> .)
    HEX_LITERAL     reduce using rule 303 (end_scope -> .)
    BINARY_LITERAL  reduce using rule 303 (end_scope -> .)
    FLOAT_LITERAL   reduce using rule 303 (end_scope -> .)
    BOOL_LITERAL    reduce using rule 303 (end_scope -> .)
    CHAR_LITERAL    reduce using rule 303 (end_scope -> .)
    STRING_LITERAL  reduce using rule 303 (end_scope -> .)
    NULL            reduce using rule 303 (end_scope -> .)
    CASE            reduce using rule 303 (end_scope -> .)
    DEFAULT         reduce using rule 303 (end_scope -> .)

    end_scope                      shift and go to state 523

state 510

    (159) WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression . RPAREN while_l1 Statement end_scope while_l2
    (160) WhileStatementNoShortIf -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression . RPAREN while_l1 StatementNoShortIf end_scope while_l2

    RPAREN          shift and go to state 524


state 511

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI . for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI . for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI . for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI . for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (175) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI . for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI . for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI . for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI . for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (183) for_l1 -> .

    SEMI            reduce using rule 183 (for_l1 -> .)
    SUPER           reduce using rule 183 (for_l1 -> .)
    IDENTIFIER      reduce using rule 183 (for_l1 -> .)
    THIS            reduce using rule 183 (for_l1 -> .)
    LPAREN          reduce using rule 183 (for_l1 -> .)
    NEW             reduce using rule 183 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 183 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 183 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 183 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 183 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 183 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 183 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 183 (for_l1 -> .)
    NULL            reduce using rule 183 (for_l1 -> .)
    ADD             reduce using rule 183 (for_l1 -> .)
    SUB             reduce using rule 183 (for_l1 -> .)
    INC             reduce using rule 183 (for_l1 -> .)
    DEC             reduce using rule 183 (for_l1 -> .)
    BANG            reduce using rule 183 (for_l1 -> .)
    TILDE           reduce using rule 183 (for_l1 -> .)

    for_l1                         shift and go to state 525

state 512

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 . Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 . Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 . SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 . SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (176) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 . Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 . Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (181) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 . SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (182) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 . SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (298) Expression -> . AssignmentExpression
    (280) AssignmentExpression -> . ConditionalExpression
    (281) AssignmentExpression -> . Assignment
    (278) ConditionalExpression -> . ConditionalOrExpression
    (279) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (275) ConditionalOrExpression -> . ConditionalAndExpression
    (276) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (273) ConditionalAndExpression -> . InclusiveOrExpression
    (274) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC

    SEMI            shift and go to state 526
    SUPER           shift and go to state 160
    IDENTIFIER      shift and go to state 63
    THIS            shift and go to state 162
    LPAREN          shift and go to state 192
    NEW             shift and go to state 207
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221

    Expression                     shift and go to state 527
    AssignmentExpression           shift and go to state 194
    ConditionalExpression          shift and go to state 195
    Assignment                     shift and go to state 196
    ConditionalOrExpression        shift and go to state 197
    LeftHandSide                   shift and go to state 149
    ConditionalAndExpression       shift and go to state 198
    Name                           shift and go to state 199
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    InclusiveOrExpression          shift and go to state 200
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Primary                        shift and go to state 201
    PrimaryNoNewArray              shift and go to state 202
    ExclusiveOrExpression          shift and go to state 203
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    MethodInvocation               shift and go to state 205
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224

state 513

    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (183) for_l1 -> .

    IDENTIFIER      reduce using rule 183 (for_l1 -> .)
    IF              reduce using rule 183 (for_l1 -> .)
    WHILE           reduce using rule 183 (for_l1 -> .)
    FOR             reduce using rule 183 (for_l1 -> .)
    LBRACE          reduce using rule 183 (for_l1 -> .)
    SEMI            reduce using rule 183 (for_l1 -> .)
    SWITCH          reduce using rule 183 (for_l1 -> .)
    DO              reduce using rule 183 (for_l1 -> .)
    BREAK           reduce using rule 183 (for_l1 -> .)
    CONTINUE        reduce using rule 183 (for_l1 -> .)
    RETURN          reduce using rule 183 (for_l1 -> .)
    INC             reduce using rule 183 (for_l1 -> .)
    DEC             reduce using rule 183 (for_l1 -> .)
    NEW             reduce using rule 183 (for_l1 -> .)
    SUPER           reduce using rule 183 (for_l1 -> .)
    THIS            reduce using rule 183 (for_l1 -> .)
    LPAREN          reduce using rule 183 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 183 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 183 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 183 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 183 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 183 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 183 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 183 (for_l1 -> .)
    NULL            reduce using rule 183 (for_l1 -> .)

    for_l1                         shift and go to state 528

state 514

    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 130
    IF              shift and go to state 131
    WHILE           shift and go to state 133
    FOR             shift and go to state 134
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    Statement                      shift and go to state 529
    StatementWithoutTrailingSubstatement shift and go to state 115
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    StatementExpression            shift and go to state 135
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 515

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 . RPAREN for_l1 Statement end_scope for_l2

    RPAREN          shift and go to state 530


state 516

    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (183) for_l1 -> .

    IDENTIFIER      reduce using rule 183 (for_l1 -> .)
    IF              reduce using rule 183 (for_l1 -> .)
    WHILE           reduce using rule 183 (for_l1 -> .)
    FOR             reduce using rule 183 (for_l1 -> .)
    LBRACE          reduce using rule 183 (for_l1 -> .)
    SEMI            reduce using rule 183 (for_l1 -> .)
    SWITCH          reduce using rule 183 (for_l1 -> .)
    DO              reduce using rule 183 (for_l1 -> .)
    BREAK           reduce using rule 183 (for_l1 -> .)
    CONTINUE        reduce using rule 183 (for_l1 -> .)
    RETURN          reduce using rule 183 (for_l1 -> .)
    INC             reduce using rule 183 (for_l1 -> .)
    DEC             reduce using rule 183 (for_l1 -> .)
    NEW             reduce using rule 183 (for_l1 -> .)
    SUPER           reduce using rule 183 (for_l1 -> .)
    THIS            reduce using rule 183 (for_l1 -> .)
    LPAREN          reduce using rule 183 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 183 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 183 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 183 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 183 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 183 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 183 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 183 (for_l1 -> .)
    NULL            reduce using rule 183 (for_l1 -> .)

    for_l1                         shift and go to state 531

state 517

    (173) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 130
    IF              shift and go to state 131
    WHILE           shift and go to state 133
    FOR             shift and go to state 134
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    Statement                      shift and go to state 532
    StatementWithoutTrailingSubstatement shift and go to state 115
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    StatementExpression            shift and go to state 135
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 518

    (174) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement . end_scope for_l2
    (303) end_scope -> .

    RBRACE          reduce using rule 303 (end_scope -> .)
    IDENTIFIER      reduce using rule 303 (end_scope -> .)
    IF              reduce using rule 303 (end_scope -> .)
    WHILE           reduce using rule 303 (end_scope -> .)
    FOR             reduce using rule 303 (end_scope -> .)
    LBRACE          reduce using rule 303 (end_scope -> .)
    SEMI            reduce using rule 303 (end_scope -> .)
    SWITCH          reduce using rule 303 (end_scope -> .)
    DO              reduce using rule 303 (end_scope -> .)
    BREAK           reduce using rule 303 (end_scope -> .)
    CONTINUE        reduce using rule 303 (end_scope -> .)
    RETURN          reduce using rule 303 (end_scope -> .)
    BOOLEAN         reduce using rule 303 (end_scope -> .)
    INC             reduce using rule 303 (end_scope -> .)
    DEC             reduce using rule 303 (end_scope -> .)
    NEW             reduce using rule 303 (end_scope -> .)
    BYTE            reduce using rule 303 (end_scope -> .)
    SHORT           reduce using rule 303 (end_scope -> .)
    INT             reduce using rule 303 (end_scope -> .)
    LONG            reduce using rule 303 (end_scope -> .)
    CHAR            reduce using rule 303 (end_scope -> .)
    FLOAT           reduce using rule 303 (end_scope -> .)
    DOUBLE          reduce using rule 303 (end_scope -> .)
    SUPER           reduce using rule 303 (end_scope -> .)
    THIS            reduce using rule 303 (end_scope -> .)
    LPAREN          reduce using rule 303 (end_scope -> .)
    DECIMAL_LITERAL reduce using rule 303 (end_scope -> .)
    HEX_LITERAL     reduce using rule 303 (end_scope -> .)
    BINARY_LITERAL  reduce using rule 303 (end_scope -> .)
    FLOAT_LITERAL   reduce using rule 303 (end_scope -> .)
    BOOL_LITERAL    reduce using rule 303 (end_scope -> .)
    CHAR_LITERAL    reduce using rule 303 (end_scope -> .)
    STRING_LITERAL  reduce using rule 303 (end_scope -> .)
    NULL            reduce using rule 303 (end_scope -> .)
    CASE            reduce using rule 303 (end_scope -> .)
    DEFAULT         reduce using rule 303 (end_scope -> .)

    end_scope                      shift and go to state 533

state 519

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (183) for_l1 -> .

    IDENTIFIER      reduce using rule 183 (for_l1 -> .)
    IF              reduce using rule 183 (for_l1 -> .)
    WHILE           reduce using rule 183 (for_l1 -> .)
    FOR             reduce using rule 183 (for_l1 -> .)
    LBRACE          reduce using rule 183 (for_l1 -> .)
    SEMI            reduce using rule 183 (for_l1 -> .)
    SWITCH          reduce using rule 183 (for_l1 -> .)
    DO              reduce using rule 183 (for_l1 -> .)
    BREAK           reduce using rule 183 (for_l1 -> .)
    CONTINUE        reduce using rule 183 (for_l1 -> .)
    RETURN          reduce using rule 183 (for_l1 -> .)
    INC             reduce using rule 183 (for_l1 -> .)
    DEC             reduce using rule 183 (for_l1 -> .)
    NEW             reduce using rule 183 (for_l1 -> .)
    SUPER           reduce using rule 183 (for_l1 -> .)
    THIS            reduce using rule 183 (for_l1 -> .)
    LPAREN          reduce using rule 183 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 183 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 183 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 183 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 183 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 183 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 183 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 183 (for_l1 -> .)
    NULL            reduce using rule 183 (for_l1 -> .)

    for_l1                         shift and go to state 534

state 520

    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 130
    IF              shift and go to state 131
    WHILE           shift and go to state 133
    FOR             shift and go to state 134
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    Statement                      shift and go to state 535
    StatementWithoutTrailingSubstatement shift and go to state 115
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    StatementExpression            shift and go to state 135
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 521

    (164) DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope . dwhile_l2
    (166) dwhile_l2 -> .

    RBRACE          reduce using rule 166 (dwhile_l2 -> .)
    IDENTIFIER      reduce using rule 166 (dwhile_l2 -> .)
    IF              reduce using rule 166 (dwhile_l2 -> .)
    WHILE           reduce using rule 166 (dwhile_l2 -> .)
    FOR             reduce using rule 166 (dwhile_l2 -> .)
    LBRACE          reduce using rule 166 (dwhile_l2 -> .)
    SEMI            reduce using rule 166 (dwhile_l2 -> .)
    SWITCH          reduce using rule 166 (dwhile_l2 -> .)
    DO              reduce using rule 166 (dwhile_l2 -> .)
    BREAK           reduce using rule 166 (dwhile_l2 -> .)
    CONTINUE        reduce using rule 166 (dwhile_l2 -> .)
    RETURN          reduce using rule 166 (dwhile_l2 -> .)
    BOOLEAN         reduce using rule 166 (dwhile_l2 -> .)
    INC             reduce using rule 166 (dwhile_l2 -> .)
    DEC             reduce using rule 166 (dwhile_l2 -> .)
    NEW             reduce using rule 166 (dwhile_l2 -> .)
    BYTE            reduce using rule 166 (dwhile_l2 -> .)
    SHORT           reduce using rule 166 (dwhile_l2 -> .)
    INT             reduce using rule 166 (dwhile_l2 -> .)
    LONG            reduce using rule 166 (dwhile_l2 -> .)
    CHAR            reduce using rule 166 (dwhile_l2 -> .)
    FLOAT           reduce using rule 166 (dwhile_l2 -> .)
    DOUBLE          reduce using rule 166 (dwhile_l2 -> .)
    SUPER           reduce using rule 166 (dwhile_l2 -> .)
    THIS            reduce using rule 166 (dwhile_l2 -> .)
    LPAREN          reduce using rule 166 (dwhile_l2 -> .)
    DECIMAL_LITERAL reduce using rule 166 (dwhile_l2 -> .)
    HEX_LITERAL     reduce using rule 166 (dwhile_l2 -> .)
    BINARY_LITERAL  reduce using rule 166 (dwhile_l2 -> .)
    FLOAT_LITERAL   reduce using rule 166 (dwhile_l2 -> .)
    BOOL_LITERAL    reduce using rule 166 (dwhile_l2 -> .)
    CHAR_LITERAL    reduce using rule 166 (dwhile_l2 -> .)
    STRING_LITERAL  reduce using rule 166 (dwhile_l2 -> .)
    NULL            reduce using rule 166 (dwhile_l2 -> .)
    CASE            reduce using rule 166 (dwhile_l2 -> .)
    DEFAULT         reduce using rule 166 (dwhile_l2 -> .)
    ELSE            reduce using rule 166 (dwhile_l2 -> .)

    dwhile_l2                      shift and go to state 536

state 522

    (145) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf . end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (146) IfThenElseStatementNoShortIf -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf . end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (303) end_scope -> .

    ELSE            reduce using rule 303 (end_scope -> .)

    end_scope                      shift and go to state 537

state 523

    (145) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope . ifMark2
    (143) ifMark2 -> .

    RBRACE          reduce using rule 143 (ifMark2 -> .)
    IDENTIFIER      reduce using rule 143 (ifMark2 -> .)
    IF              reduce using rule 143 (ifMark2 -> .)
    WHILE           reduce using rule 143 (ifMark2 -> .)
    FOR             reduce using rule 143 (ifMark2 -> .)
    LBRACE          reduce using rule 143 (ifMark2 -> .)
    SEMI            reduce using rule 143 (ifMark2 -> .)
    SWITCH          reduce using rule 143 (ifMark2 -> .)
    DO              reduce using rule 143 (ifMark2 -> .)
    BREAK           reduce using rule 143 (ifMark2 -> .)
    CONTINUE        reduce using rule 143 (ifMark2 -> .)
    RETURN          reduce using rule 143 (ifMark2 -> .)
    BOOLEAN         reduce using rule 143 (ifMark2 -> .)
    INC             reduce using rule 143 (ifMark2 -> .)
    DEC             reduce using rule 143 (ifMark2 -> .)
    NEW             reduce using rule 143 (ifMark2 -> .)
    BYTE            reduce using rule 143 (ifMark2 -> .)
    SHORT           reduce using rule 143 (ifMark2 -> .)
    INT             reduce using rule 143 (ifMark2 -> .)
    LONG            reduce using rule 143 (ifMark2 -> .)
    CHAR            reduce using rule 143 (ifMark2 -> .)
    FLOAT           reduce using rule 143 (ifMark2 -> .)
    DOUBLE          reduce using rule 143 (ifMark2 -> .)
    SUPER           reduce using rule 143 (ifMark2 -> .)
    THIS            reduce using rule 143 (ifMark2 -> .)
    LPAREN          reduce using rule 143 (ifMark2 -> .)
    DECIMAL_LITERAL reduce using rule 143 (ifMark2 -> .)
    HEX_LITERAL     reduce using rule 143 (ifMark2 -> .)
    BINARY_LITERAL  reduce using rule 143 (ifMark2 -> .)
    FLOAT_LITERAL   reduce using rule 143 (ifMark2 -> .)
    BOOL_LITERAL    reduce using rule 143 (ifMark2 -> .)
    CHAR_LITERAL    reduce using rule 143 (ifMark2 -> .)
    STRING_LITERAL  reduce using rule 143 (ifMark2 -> .)
    NULL            reduce using rule 143 (ifMark2 -> .)
    CASE            reduce using rule 143 (ifMark2 -> .)
    DEFAULT         reduce using rule 143 (ifMark2 -> .)

    ifMark2                        shift and go to state 538

state 524

    (159) WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN . while_l1 Statement end_scope while_l2
    (160) WhileStatementNoShortIf -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN . while_l1 StatementNoShortIf end_scope while_l2
    (162) while_l1 -> .

    IDENTIFIER      reduce using rule 162 (while_l1 -> .)
    IF              reduce using rule 162 (while_l1 -> .)
    WHILE           reduce using rule 162 (while_l1 -> .)
    FOR             reduce using rule 162 (while_l1 -> .)
    LBRACE          reduce using rule 162 (while_l1 -> .)
    SEMI            reduce using rule 162 (while_l1 -> .)
    SWITCH          reduce using rule 162 (while_l1 -> .)
    DO              reduce using rule 162 (while_l1 -> .)
    BREAK           reduce using rule 162 (while_l1 -> .)
    CONTINUE        reduce using rule 162 (while_l1 -> .)
    RETURN          reduce using rule 162 (while_l1 -> .)
    INC             reduce using rule 162 (while_l1 -> .)
    DEC             reduce using rule 162 (while_l1 -> .)
    NEW             reduce using rule 162 (while_l1 -> .)
    SUPER           reduce using rule 162 (while_l1 -> .)
    THIS            reduce using rule 162 (while_l1 -> .)
    LPAREN          reduce using rule 162 (while_l1 -> .)
    DECIMAL_LITERAL reduce using rule 162 (while_l1 -> .)
    HEX_LITERAL     reduce using rule 162 (while_l1 -> .)
    BINARY_LITERAL  reduce using rule 162 (while_l1 -> .)
    FLOAT_LITERAL   reduce using rule 162 (while_l1 -> .)
    BOOL_LITERAL    reduce using rule 162 (while_l1 -> .)
    CHAR_LITERAL    reduce using rule 162 (while_l1 -> .)
    STRING_LITERAL  reduce using rule 162 (while_l1 -> .)
    NULL            reduce using rule 162 (while_l1 -> .)

    while_l1                       shift and go to state 539

state 525

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 . Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 . SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 . Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 . SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (175) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 . Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 . SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 . Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 . SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (298) Expression -> . AssignmentExpression
    (280) AssignmentExpression -> . ConditionalExpression
    (281) AssignmentExpression -> . Assignment
    (278) ConditionalExpression -> . ConditionalOrExpression
    (279) ConditionalExpression -> . ConditionalOrExpression QUESTION Expression COLON ConditionalExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (275) ConditionalOrExpression -> . ConditionalAndExpression
    (276) ConditionalOrExpression -> . ConditionalOrExpression OR ConMarker ConditionalAndExpression
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (273) ConditionalAndExpression -> . InclusiveOrExpression
    (274) ConditionalAndExpression -> . ConditionalAndExpression AND ConMarker InclusiveOrExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (271) InclusiveOrExpression -> . ExclusiveOrExpression
    (272) InclusiveOrExpression -> . InclusiveOrExpression BITOR ExclusiveOrExpression
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (269) ExclusiveOrExpression -> . AndExpression
    (270) ExclusiveOrExpression -> . ExclusiveOrExpression CARET AndExpression
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (267) AndExpression -> . EqualityExpression
    (268) AndExpression -> . AndExpression BITAND EqualityExpression
    (264) EqualityExpression -> . RelationalExpression
    (265) EqualityExpression -> . EqualityExpression EQUAL RelationalExpression
    (266) EqualityExpression -> . EqualityExpression NOTEQUAL RelationalExpression
    (259) RelationalExpression -> . ShiftExpression
    (260) RelationalExpression -> . RelationalExpression LT ShiftExpression
    (261) RelationalExpression -> . RelationalExpression GT ShiftExpression
    (262) RelationalExpression -> . RelationalExpression LE ShiftExpression
    (263) RelationalExpression -> . RelationalExpression GE ShiftExpression
    (255) ShiftExpression -> . AdditiveExpression
    (256) ShiftExpression -> . ShiftExpression LSHIFT AdditiveExpression
    (257) ShiftExpression -> . ShiftExpression RSHIFT AdditiveExpression
    (258) ShiftExpression -> . ShiftExpression URSHIFT AdditiveExpression
    (252) AdditiveExpression -> . MultiplicativeExpression
    (253) AdditiveExpression -> . AdditiveExpression ADD MultiplicativeExpression
    (254) AdditiveExpression -> . AdditiveExpression SUB MultiplicativeExpression
    (248) MultiplicativeExpression -> . UnaryExpression
    (249) MultiplicativeExpression -> . MultiplicativeExpression MUL UnaryExpression
    (250) MultiplicativeExpression -> . MultiplicativeExpression DIV UnaryExpression
    (251) MultiplicativeExpression -> . MultiplicativeExpression MOD UnaryExpression
    (233) UnaryExpression -> . PreIncrementExpression
    (234) UnaryExpression -> . PreDecrementExpression
    (235) UnaryExpression -> . ADD UnaryExpression
    (236) UnaryExpression -> . SUB UnaryExpression
    (237) UnaryExpression -> . UnaryExpressionNotAddSub
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (240) UnaryExpressionNotAddSub -> . PostfixExpression
    (241) UnaryExpressionNotAddSub -> . BANG UnaryExpression
    (242) UnaryExpressionNotAddSub -> . TILDE UnaryExpression
    (243) UnaryExpressionNotAddSub -> . CastExpression
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (244) CastExpression -> . LPAREN PrimitiveType Dims RPAREN UnaryExpression
    (245) CastExpression -> . LPAREN PrimitiveType RPAREN UnaryExpression
    (246) CastExpression -> . LPAREN Expression RPAREN UnaryExpressionNotAddSub
    (247) CastExpression -> . LPAREN Name Dims RPAREN UnaryExpressionNotAddSub
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC

    SEMI            shift and go to state 540
    SUPER           shift and go to state 160
    IDENTIFIER      shift and go to state 63
    THIS            shift and go to state 162
    LPAREN          shift and go to state 192
    NEW             shift and go to state 207
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170
    ADD             shift and go to state 213
    SUB             shift and go to state 214
    INC             shift and go to state 150
    DEC             shift and go to state 151
    BANG            shift and go to state 220
    TILDE           shift and go to state 221

    Expression                     shift and go to state 541
    AssignmentExpression           shift and go to state 194
    ConditionalExpression          shift and go to state 195
    Assignment                     shift and go to state 196
    ConditionalOrExpression        shift and go to state 197
    LeftHandSide                   shift and go to state 149
    ConditionalAndExpression       shift and go to state 198
    Name                           shift and go to state 199
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    InclusiveOrExpression          shift and go to state 200
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Primary                        shift and go to state 201
    PrimaryNoNewArray              shift and go to state 202
    ExclusiveOrExpression          shift and go to state 203
    ArrayCreationExpression        shift and go to state 159
    Literal                        shift and go to state 161
    ClassInstanceCreationExpression shift and go to state 204
    MethodInvocation               shift and go to state 205
    AndExpression                  shift and go to state 206
    EqualityExpression             shift and go to state 208
    RelationalExpression           shift and go to state 209
    ShiftExpression                shift and go to state 210
    AdditiveExpression             shift and go to state 211
    MultiplicativeExpression       shift and go to state 212
    UnaryExpression                shift and go to state 215
    PreIncrementExpression         shift and go to state 216
    PreDecrementExpression         shift and go to state 217
    UnaryExpressionNotAddSub       shift and go to state 218
    PostfixExpression              shift and go to state 219
    CastExpression                 shift and go to state 222
    PostIncrementExpression        shift and go to state 223
    PostDecrementExpression        shift and go to state 224

state 526

    (173) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI . for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI . for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (181) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI . for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (182) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI . for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (183) for_l1 -> .

    INC             reduce using rule 183 (for_l1 -> .)
    DEC             reduce using rule 183 (for_l1 -> .)
    NEW             reduce using rule 183 (for_l1 -> .)
    SUPER           reduce using rule 183 (for_l1 -> .)
    THIS            reduce using rule 183 (for_l1 -> .)
    LPAREN          reduce using rule 183 (for_l1 -> .)
    IDENTIFIER      reduce using rule 183 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 183 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 183 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 183 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 183 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 183 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 183 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 183 (for_l1 -> .)
    NULL            reduce using rule 183 (for_l1 -> .)
    RPAREN          reduce using rule 183 (for_l1 -> .)

    for_l1                         shift and go to state 542

state 527

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression . SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression . SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (176) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression . SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression . SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2

    SEMI            shift and go to state 543


state 528

    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 130
    IF              shift and go to state 131
    WHILE           shift and go to state 133
    FOR             shift and go to state 134
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    Statement                      shift and go to state 544
    StatementWithoutTrailingSubstatement shift and go to state 115
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    StatementExpression            shift and go to state 135
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 529

    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement . end_scope for_l2
    (303) end_scope -> .

    RBRACE          reduce using rule 303 (end_scope -> .)
    IDENTIFIER      reduce using rule 303 (end_scope -> .)
    IF              reduce using rule 303 (end_scope -> .)
    WHILE           reduce using rule 303 (end_scope -> .)
    FOR             reduce using rule 303 (end_scope -> .)
    LBRACE          reduce using rule 303 (end_scope -> .)
    SEMI            reduce using rule 303 (end_scope -> .)
    SWITCH          reduce using rule 303 (end_scope -> .)
    DO              reduce using rule 303 (end_scope -> .)
    BREAK           reduce using rule 303 (end_scope -> .)
    CONTINUE        reduce using rule 303 (end_scope -> .)
    RETURN          reduce using rule 303 (end_scope -> .)
    BOOLEAN         reduce using rule 303 (end_scope -> .)
    INC             reduce using rule 303 (end_scope -> .)
    DEC             reduce using rule 303 (end_scope -> .)
    NEW             reduce using rule 303 (end_scope -> .)
    BYTE            reduce using rule 303 (end_scope -> .)
    SHORT           reduce using rule 303 (end_scope -> .)
    INT             reduce using rule 303 (end_scope -> .)
    LONG            reduce using rule 303 (end_scope -> .)
    CHAR            reduce using rule 303 (end_scope -> .)
    FLOAT           reduce using rule 303 (end_scope -> .)
    DOUBLE          reduce using rule 303 (end_scope -> .)
    SUPER           reduce using rule 303 (end_scope -> .)
    THIS            reduce using rule 303 (end_scope -> .)
    LPAREN          reduce using rule 303 (end_scope -> .)
    DECIMAL_LITERAL reduce using rule 303 (end_scope -> .)
    HEX_LITERAL     reduce using rule 303 (end_scope -> .)
    BINARY_LITERAL  reduce using rule 303 (end_scope -> .)
    FLOAT_LITERAL   reduce using rule 303 (end_scope -> .)
    BOOL_LITERAL    reduce using rule 303 (end_scope -> .)
    CHAR_LITERAL    reduce using rule 303 (end_scope -> .)
    STRING_LITERAL  reduce using rule 303 (end_scope -> .)
    NULL            reduce using rule 303 (end_scope -> .)
    CASE            reduce using rule 303 (end_scope -> .)
    DEFAULT         reduce using rule 303 (end_scope -> .)

    end_scope                      shift and go to state 545

state 530

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (183) for_l1 -> .

    IDENTIFIER      reduce using rule 183 (for_l1 -> .)
    IF              reduce using rule 183 (for_l1 -> .)
    WHILE           reduce using rule 183 (for_l1 -> .)
    FOR             reduce using rule 183 (for_l1 -> .)
    LBRACE          reduce using rule 183 (for_l1 -> .)
    SEMI            reduce using rule 183 (for_l1 -> .)
    SWITCH          reduce using rule 183 (for_l1 -> .)
    DO              reduce using rule 183 (for_l1 -> .)
    BREAK           reduce using rule 183 (for_l1 -> .)
    CONTINUE        reduce using rule 183 (for_l1 -> .)
    RETURN          reduce using rule 183 (for_l1 -> .)
    INC             reduce using rule 183 (for_l1 -> .)
    DEC             reduce using rule 183 (for_l1 -> .)
    NEW             reduce using rule 183 (for_l1 -> .)
    SUPER           reduce using rule 183 (for_l1 -> .)
    THIS            reduce using rule 183 (for_l1 -> .)
    LPAREN          reduce using rule 183 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 183 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 183 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 183 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 183 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 183 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 183 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 183 (for_l1 -> .)
    NULL            reduce using rule 183 (for_l1 -> .)

    for_l1                         shift and go to state 546

state 531

    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 130
    IF              shift and go to state 131
    WHILE           shift and go to state 133
    FOR             shift and go to state 134
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    Statement                      shift and go to state 547
    StatementWithoutTrailingSubstatement shift and go to state 115
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    StatementExpression            shift and go to state 135
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 532

    (173) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement . end_scope for_l2
    (303) end_scope -> .

    RBRACE          reduce using rule 303 (end_scope -> .)
    IDENTIFIER      reduce using rule 303 (end_scope -> .)
    IF              reduce using rule 303 (end_scope -> .)
    WHILE           reduce using rule 303 (end_scope -> .)
    FOR             reduce using rule 303 (end_scope -> .)
    LBRACE          reduce using rule 303 (end_scope -> .)
    SEMI            reduce using rule 303 (end_scope -> .)
    SWITCH          reduce using rule 303 (end_scope -> .)
    DO              reduce using rule 303 (end_scope -> .)
    BREAK           reduce using rule 303 (end_scope -> .)
    CONTINUE        reduce using rule 303 (end_scope -> .)
    RETURN          reduce using rule 303 (end_scope -> .)
    BOOLEAN         reduce using rule 303 (end_scope -> .)
    INC             reduce using rule 303 (end_scope -> .)
    DEC             reduce using rule 303 (end_scope -> .)
    NEW             reduce using rule 303 (end_scope -> .)
    BYTE            reduce using rule 303 (end_scope -> .)
    SHORT           reduce using rule 303 (end_scope -> .)
    INT             reduce using rule 303 (end_scope -> .)
    LONG            reduce using rule 303 (end_scope -> .)
    CHAR            reduce using rule 303 (end_scope -> .)
    FLOAT           reduce using rule 303 (end_scope -> .)
    DOUBLE          reduce using rule 303 (end_scope -> .)
    SUPER           reduce using rule 303 (end_scope -> .)
    THIS            reduce using rule 303 (end_scope -> .)
    LPAREN          reduce using rule 303 (end_scope -> .)
    DECIMAL_LITERAL reduce using rule 303 (end_scope -> .)
    HEX_LITERAL     reduce using rule 303 (end_scope -> .)
    BINARY_LITERAL  reduce using rule 303 (end_scope -> .)
    FLOAT_LITERAL   reduce using rule 303 (end_scope -> .)
    BOOL_LITERAL    reduce using rule 303 (end_scope -> .)
    CHAR_LITERAL    reduce using rule 303 (end_scope -> .)
    STRING_LITERAL  reduce using rule 303 (end_scope -> .)
    NULL            reduce using rule 303 (end_scope -> .)
    CASE            reduce using rule 303 (end_scope -> .)
    DEFAULT         reduce using rule 303 (end_scope -> .)

    end_scope                      shift and go to state 548

state 533

    (174) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope . for_l2
    (184) for_l2 -> .

    RBRACE          reduce using rule 184 (for_l2 -> .)
    IDENTIFIER      reduce using rule 184 (for_l2 -> .)
    IF              reduce using rule 184 (for_l2 -> .)
    WHILE           reduce using rule 184 (for_l2 -> .)
    FOR             reduce using rule 184 (for_l2 -> .)
    LBRACE          reduce using rule 184 (for_l2 -> .)
    SEMI            reduce using rule 184 (for_l2 -> .)
    SWITCH          reduce using rule 184 (for_l2 -> .)
    DO              reduce using rule 184 (for_l2 -> .)
    BREAK           reduce using rule 184 (for_l2 -> .)
    CONTINUE        reduce using rule 184 (for_l2 -> .)
    RETURN          reduce using rule 184 (for_l2 -> .)
    BOOLEAN         reduce using rule 184 (for_l2 -> .)
    INC             reduce using rule 184 (for_l2 -> .)
    DEC             reduce using rule 184 (for_l2 -> .)
    NEW             reduce using rule 184 (for_l2 -> .)
    BYTE            reduce using rule 184 (for_l2 -> .)
    SHORT           reduce using rule 184 (for_l2 -> .)
    INT             reduce using rule 184 (for_l2 -> .)
    LONG            reduce using rule 184 (for_l2 -> .)
    CHAR            reduce using rule 184 (for_l2 -> .)
    FLOAT           reduce using rule 184 (for_l2 -> .)
    DOUBLE          reduce using rule 184 (for_l2 -> .)
    SUPER           reduce using rule 184 (for_l2 -> .)
    THIS            reduce using rule 184 (for_l2 -> .)
    LPAREN          reduce using rule 184 (for_l2 -> .)
    DECIMAL_LITERAL reduce using rule 184 (for_l2 -> .)
    HEX_LITERAL     reduce using rule 184 (for_l2 -> .)
    BINARY_LITERAL  reduce using rule 184 (for_l2 -> .)
    FLOAT_LITERAL   reduce using rule 184 (for_l2 -> .)
    BOOL_LITERAL    reduce using rule 184 (for_l2 -> .)
    CHAR_LITERAL    reduce using rule 184 (for_l2 -> .)
    STRING_LITERAL  reduce using rule 184 (for_l2 -> .)
    NULL            reduce using rule 184 (for_l2 -> .)
    CASE            reduce using rule 184 (for_l2 -> .)
    DEFAULT         reduce using rule 184 (for_l2 -> .)

    for_l2                         shift and go to state 549

state 534

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 130
    IF              shift and go to state 131
    WHILE           shift and go to state 133
    FOR             shift and go to state 134
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    Statement                      shift and go to state 550
    StatementWithoutTrailingSubstatement shift and go to state 115
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    StatementExpression            shift and go to state 135
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 535

    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement . end_scope for_l2
    (303) end_scope -> .

    RBRACE          reduce using rule 303 (end_scope -> .)
    IDENTIFIER      reduce using rule 303 (end_scope -> .)
    IF              reduce using rule 303 (end_scope -> .)
    WHILE           reduce using rule 303 (end_scope -> .)
    FOR             reduce using rule 303 (end_scope -> .)
    LBRACE          reduce using rule 303 (end_scope -> .)
    SEMI            reduce using rule 303 (end_scope -> .)
    SWITCH          reduce using rule 303 (end_scope -> .)
    DO              reduce using rule 303 (end_scope -> .)
    BREAK           reduce using rule 303 (end_scope -> .)
    CONTINUE        reduce using rule 303 (end_scope -> .)
    RETURN          reduce using rule 303 (end_scope -> .)
    BOOLEAN         reduce using rule 303 (end_scope -> .)
    INC             reduce using rule 303 (end_scope -> .)
    DEC             reduce using rule 303 (end_scope -> .)
    NEW             reduce using rule 303 (end_scope -> .)
    BYTE            reduce using rule 303 (end_scope -> .)
    SHORT           reduce using rule 303 (end_scope -> .)
    INT             reduce using rule 303 (end_scope -> .)
    LONG            reduce using rule 303 (end_scope -> .)
    CHAR            reduce using rule 303 (end_scope -> .)
    FLOAT           reduce using rule 303 (end_scope -> .)
    DOUBLE          reduce using rule 303 (end_scope -> .)
    SUPER           reduce using rule 303 (end_scope -> .)
    THIS            reduce using rule 303 (end_scope -> .)
    LPAREN          reduce using rule 303 (end_scope -> .)
    DECIMAL_LITERAL reduce using rule 303 (end_scope -> .)
    HEX_LITERAL     reduce using rule 303 (end_scope -> .)
    BINARY_LITERAL  reduce using rule 303 (end_scope -> .)
    FLOAT_LITERAL   reduce using rule 303 (end_scope -> .)
    BOOL_LITERAL    reduce using rule 303 (end_scope -> .)
    CHAR_LITERAL    reduce using rule 303 (end_scope -> .)
    STRING_LITERAL  reduce using rule 303 (end_scope -> .)
    NULL            reduce using rule 303 (end_scope -> .)
    CASE            reduce using rule 303 (end_scope -> .)
    DEFAULT         reduce using rule 303 (end_scope -> .)

    end_scope                      shift and go to state 551

state 536

    (164) DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .

    RBRACE          reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    IDENTIFIER      reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    IF              reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    WHILE           reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    FOR             reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    LBRACE          reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    SEMI            reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    SWITCH          reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    DO              reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    BREAK           reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    CONTINUE        reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    RETURN          reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    BOOLEAN         reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    INC             reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    DEC             reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    NEW             reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    BYTE            reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    SHORT           reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    INT             reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    LONG            reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    CHAR            reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    FLOAT           reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    DOUBLE          reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    SUPER           reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    THIS            reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    LPAREN          reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    DECIMAL_LITERAL reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    HEX_LITERAL     reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    BINARY_LITERAL  reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    FLOAT_LITERAL   reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    BOOL_LITERAL    reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    CHAR_LITERAL    reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    STRING_LITERAL  reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    NULL            reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    CASE            reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    DEFAULT         reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)
    ELSE            reduce using rule 164 (DoStatement -> DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2 .)


state 537

    (145) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope . ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (146) IfThenElseStatementNoShortIf -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope . ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2

    ELSE            shift and go to state 552


state 538

    (145) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .

    RBRACE          reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    IDENTIFIER      reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    IF              reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    WHILE           reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    FOR             reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    LBRACE          reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    SEMI            reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    SWITCH          reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    DO              reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    BREAK           reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    CONTINUE        reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    RETURN          reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    BOOLEAN         reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    INC             reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    DEC             reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    NEW             reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    BYTE            reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    SHORT           reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    INT             reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    LONG            reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    CHAR            reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    FLOAT           reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    DOUBLE          reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    SUPER           reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    THIS            reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    LPAREN          reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    DECIMAL_LITERAL reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    HEX_LITERAL     reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    BINARY_LITERAL  reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    FLOAT_LITERAL   reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    BOOL_LITERAL    reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    CHAR_LITERAL    reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    STRING_LITERAL  reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    NULL            reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    CASE            reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)
    DEFAULT         reduce using rule 145 (IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2 .)


state 539

    (159) WhileStatement -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 . Statement end_scope while_l2
    (160) WhileStatementNoShortIf -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 . StatementNoShortIf end_scope while_l2
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (117) StatementNoShortIf -> . StatementWithoutTrailingSubstatement
    (118) StatementNoShortIf -> . LabeledStatementNoShortIf
    (119) StatementNoShortIf -> . IfThenElseStatementNoShortIf
    (120) StatementNoShortIf -> . WhileStatementNoShortIf
    (121) StatementNoShortIf -> . ForStatementNoShortIf
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (132) LabeledStatementNoShortIf -> . IDENTIFIER COLON StatementNoShortIf
    (146) IfThenElseStatementNoShortIf -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (160) WhileStatementNoShortIf -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (175) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (181) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (182) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 426
    IF              shift and go to state 418
    WHILE           shift and go to state 427
    FOR             shift and go to state 428
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    Statement                      shift and go to state 467
    StatementNoShortIf             shift and go to state 553
    StatementWithoutTrailingSubstatement shift and go to state 421
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    LabeledStatementNoShortIf      shift and go to state 422
    IfThenElseStatementNoShortIf   shift and go to state 423
    WhileStatementNoShortIf        shift and go to state 424
    ForStatementNoShortIf          shift and go to state 425
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    StatementExpression            shift and go to state 135
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 540

    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI . for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI . for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (177) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI . for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI . for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (183) for_l1 -> .

    INC             reduce using rule 183 (for_l1 -> .)
    DEC             reduce using rule 183 (for_l1 -> .)
    NEW             reduce using rule 183 (for_l1 -> .)
    SUPER           reduce using rule 183 (for_l1 -> .)
    THIS            reduce using rule 183 (for_l1 -> .)
    LPAREN          reduce using rule 183 (for_l1 -> .)
    IDENTIFIER      reduce using rule 183 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 183 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 183 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 183 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 183 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 183 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 183 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 183 (for_l1 -> .)
    NULL            reduce using rule 183 (for_l1 -> .)
    RPAREN          reduce using rule 183 (for_l1 -> .)

    for_l1                         shift and go to state 554

state 541

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression . SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression . SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (175) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression . SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression . SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2

    SEMI            shift and go to state 555


state 542

    (173) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 . ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (181) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 . ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (182) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 . for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (188) ForUpdate -> . StatementExpressionList
    (185) for_l3 -> .
    (189) StatementExpressionList -> . StatementExpression
    (190) StatementExpressionList -> . StatementExpressionList COMMA StatementExpression
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RPAREN          reduce using rule 185 (for_l3 -> .)
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    ForUpdate                      shift and go to state 556
    for_l3                         shift and go to state 557
    StatementExpressionList        shift and go to state 472
    StatementExpression            shift and go to state 394
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 543

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI . for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI . for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (176) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI . for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI . for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (183) for_l1 -> .

    INC             reduce using rule 183 (for_l1 -> .)
    DEC             reduce using rule 183 (for_l1 -> .)
    NEW             reduce using rule 183 (for_l1 -> .)
    SUPER           reduce using rule 183 (for_l1 -> .)
    THIS            reduce using rule 183 (for_l1 -> .)
    LPAREN          reduce using rule 183 (for_l1 -> .)
    IDENTIFIER      reduce using rule 183 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 183 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 183 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 183 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 183 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 183 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 183 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 183 (for_l1 -> .)
    NULL            reduce using rule 183 (for_l1 -> .)
    RPAREN          reduce using rule 183 (for_l1 -> .)

    for_l1                         shift and go to state 558

state 544

    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement . end_scope for_l2
    (303) end_scope -> .

    RBRACE          reduce using rule 303 (end_scope -> .)
    IDENTIFIER      reduce using rule 303 (end_scope -> .)
    IF              reduce using rule 303 (end_scope -> .)
    WHILE           reduce using rule 303 (end_scope -> .)
    FOR             reduce using rule 303 (end_scope -> .)
    LBRACE          reduce using rule 303 (end_scope -> .)
    SEMI            reduce using rule 303 (end_scope -> .)
    SWITCH          reduce using rule 303 (end_scope -> .)
    DO              reduce using rule 303 (end_scope -> .)
    BREAK           reduce using rule 303 (end_scope -> .)
    CONTINUE        reduce using rule 303 (end_scope -> .)
    RETURN          reduce using rule 303 (end_scope -> .)
    BOOLEAN         reduce using rule 303 (end_scope -> .)
    INC             reduce using rule 303 (end_scope -> .)
    DEC             reduce using rule 303 (end_scope -> .)
    NEW             reduce using rule 303 (end_scope -> .)
    BYTE            reduce using rule 303 (end_scope -> .)
    SHORT           reduce using rule 303 (end_scope -> .)
    INT             reduce using rule 303 (end_scope -> .)
    LONG            reduce using rule 303 (end_scope -> .)
    CHAR            reduce using rule 303 (end_scope -> .)
    FLOAT           reduce using rule 303 (end_scope -> .)
    DOUBLE          reduce using rule 303 (end_scope -> .)
    SUPER           reduce using rule 303 (end_scope -> .)
    THIS            reduce using rule 303 (end_scope -> .)
    LPAREN          reduce using rule 303 (end_scope -> .)
    DECIMAL_LITERAL reduce using rule 303 (end_scope -> .)
    HEX_LITERAL     reduce using rule 303 (end_scope -> .)
    BINARY_LITERAL  reduce using rule 303 (end_scope -> .)
    FLOAT_LITERAL   reduce using rule 303 (end_scope -> .)
    BOOL_LITERAL    reduce using rule 303 (end_scope -> .)
    CHAR_LITERAL    reduce using rule 303 (end_scope -> .)
    STRING_LITERAL  reduce using rule 303 (end_scope -> .)
    NULL            reduce using rule 303 (end_scope -> .)
    CASE            reduce using rule 303 (end_scope -> .)
    DEFAULT         reduce using rule 303 (end_scope -> .)

    end_scope                      shift and go to state 559

state 545

    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope . for_l2
    (184) for_l2 -> .

    RBRACE          reduce using rule 184 (for_l2 -> .)
    IDENTIFIER      reduce using rule 184 (for_l2 -> .)
    IF              reduce using rule 184 (for_l2 -> .)
    WHILE           reduce using rule 184 (for_l2 -> .)
    FOR             reduce using rule 184 (for_l2 -> .)
    LBRACE          reduce using rule 184 (for_l2 -> .)
    SEMI            reduce using rule 184 (for_l2 -> .)
    SWITCH          reduce using rule 184 (for_l2 -> .)
    DO              reduce using rule 184 (for_l2 -> .)
    BREAK           reduce using rule 184 (for_l2 -> .)
    CONTINUE        reduce using rule 184 (for_l2 -> .)
    RETURN          reduce using rule 184 (for_l2 -> .)
    BOOLEAN         reduce using rule 184 (for_l2 -> .)
    INC             reduce using rule 184 (for_l2 -> .)
    DEC             reduce using rule 184 (for_l2 -> .)
    NEW             reduce using rule 184 (for_l2 -> .)
    BYTE            reduce using rule 184 (for_l2 -> .)
    SHORT           reduce using rule 184 (for_l2 -> .)
    INT             reduce using rule 184 (for_l2 -> .)
    LONG            reduce using rule 184 (for_l2 -> .)
    CHAR            reduce using rule 184 (for_l2 -> .)
    FLOAT           reduce using rule 184 (for_l2 -> .)
    DOUBLE          reduce using rule 184 (for_l2 -> .)
    SUPER           reduce using rule 184 (for_l2 -> .)
    THIS            reduce using rule 184 (for_l2 -> .)
    LPAREN          reduce using rule 184 (for_l2 -> .)
    DECIMAL_LITERAL reduce using rule 184 (for_l2 -> .)
    HEX_LITERAL     reduce using rule 184 (for_l2 -> .)
    BINARY_LITERAL  reduce using rule 184 (for_l2 -> .)
    FLOAT_LITERAL   reduce using rule 184 (for_l2 -> .)
    BOOL_LITERAL    reduce using rule 184 (for_l2 -> .)
    CHAR_LITERAL    reduce using rule 184 (for_l2 -> .)
    STRING_LITERAL  reduce using rule 184 (for_l2 -> .)
    NULL            reduce using rule 184 (for_l2 -> .)
    CASE            reduce using rule 184 (for_l2 -> .)
    DEFAULT         reduce using rule 184 (for_l2 -> .)

    for_l2                         shift and go to state 560

state 546

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 130
    IF              shift and go to state 131
    WHILE           shift and go to state 133
    FOR             shift and go to state 134
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    Statement                      shift and go to state 561
    StatementWithoutTrailingSubstatement shift and go to state 115
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    StatementExpression            shift and go to state 135
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 547

    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement . end_scope for_l2
    (303) end_scope -> .

    RBRACE          reduce using rule 303 (end_scope -> .)
    IDENTIFIER      reduce using rule 303 (end_scope -> .)
    IF              reduce using rule 303 (end_scope -> .)
    WHILE           reduce using rule 303 (end_scope -> .)
    FOR             reduce using rule 303 (end_scope -> .)
    LBRACE          reduce using rule 303 (end_scope -> .)
    SEMI            reduce using rule 303 (end_scope -> .)
    SWITCH          reduce using rule 303 (end_scope -> .)
    DO              reduce using rule 303 (end_scope -> .)
    BREAK           reduce using rule 303 (end_scope -> .)
    CONTINUE        reduce using rule 303 (end_scope -> .)
    RETURN          reduce using rule 303 (end_scope -> .)
    BOOLEAN         reduce using rule 303 (end_scope -> .)
    INC             reduce using rule 303 (end_scope -> .)
    DEC             reduce using rule 303 (end_scope -> .)
    NEW             reduce using rule 303 (end_scope -> .)
    BYTE            reduce using rule 303 (end_scope -> .)
    SHORT           reduce using rule 303 (end_scope -> .)
    INT             reduce using rule 303 (end_scope -> .)
    LONG            reduce using rule 303 (end_scope -> .)
    CHAR            reduce using rule 303 (end_scope -> .)
    FLOAT           reduce using rule 303 (end_scope -> .)
    DOUBLE          reduce using rule 303 (end_scope -> .)
    SUPER           reduce using rule 303 (end_scope -> .)
    THIS            reduce using rule 303 (end_scope -> .)
    LPAREN          reduce using rule 303 (end_scope -> .)
    DECIMAL_LITERAL reduce using rule 303 (end_scope -> .)
    HEX_LITERAL     reduce using rule 303 (end_scope -> .)
    BINARY_LITERAL  reduce using rule 303 (end_scope -> .)
    FLOAT_LITERAL   reduce using rule 303 (end_scope -> .)
    BOOL_LITERAL    reduce using rule 303 (end_scope -> .)
    CHAR_LITERAL    reduce using rule 303 (end_scope -> .)
    STRING_LITERAL  reduce using rule 303 (end_scope -> .)
    NULL            reduce using rule 303 (end_scope -> .)
    CASE            reduce using rule 303 (end_scope -> .)
    DEFAULT         reduce using rule 303 (end_scope -> .)

    end_scope                      shift and go to state 562

state 548

    (173) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope . for_l2
    (184) for_l2 -> .

    RBRACE          reduce using rule 184 (for_l2 -> .)
    IDENTIFIER      reduce using rule 184 (for_l2 -> .)
    IF              reduce using rule 184 (for_l2 -> .)
    WHILE           reduce using rule 184 (for_l2 -> .)
    FOR             reduce using rule 184 (for_l2 -> .)
    LBRACE          reduce using rule 184 (for_l2 -> .)
    SEMI            reduce using rule 184 (for_l2 -> .)
    SWITCH          reduce using rule 184 (for_l2 -> .)
    DO              reduce using rule 184 (for_l2 -> .)
    BREAK           reduce using rule 184 (for_l2 -> .)
    CONTINUE        reduce using rule 184 (for_l2 -> .)
    RETURN          reduce using rule 184 (for_l2 -> .)
    BOOLEAN         reduce using rule 184 (for_l2 -> .)
    INC             reduce using rule 184 (for_l2 -> .)
    DEC             reduce using rule 184 (for_l2 -> .)
    NEW             reduce using rule 184 (for_l2 -> .)
    BYTE            reduce using rule 184 (for_l2 -> .)
    SHORT           reduce using rule 184 (for_l2 -> .)
    INT             reduce using rule 184 (for_l2 -> .)
    LONG            reduce using rule 184 (for_l2 -> .)
    CHAR            reduce using rule 184 (for_l2 -> .)
    FLOAT           reduce using rule 184 (for_l2 -> .)
    DOUBLE          reduce using rule 184 (for_l2 -> .)
    SUPER           reduce using rule 184 (for_l2 -> .)
    THIS            reduce using rule 184 (for_l2 -> .)
    LPAREN          reduce using rule 184 (for_l2 -> .)
    DECIMAL_LITERAL reduce using rule 184 (for_l2 -> .)
    HEX_LITERAL     reduce using rule 184 (for_l2 -> .)
    BINARY_LITERAL  reduce using rule 184 (for_l2 -> .)
    FLOAT_LITERAL   reduce using rule 184 (for_l2 -> .)
    BOOL_LITERAL    reduce using rule 184 (for_l2 -> .)
    CHAR_LITERAL    reduce using rule 184 (for_l2 -> .)
    STRING_LITERAL  reduce using rule 184 (for_l2 -> .)
    NULL            reduce using rule 184 (for_l2 -> .)
    CASE            reduce using rule 184 (for_l2 -> .)
    DEFAULT         reduce using rule 184 (for_l2 -> .)

    for_l2                         shift and go to state 563

state 549

    (174) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .

    RBRACE          reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IDENTIFIER      reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IF              reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    WHILE           reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FOR             reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LBRACE          reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SEMI            reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SWITCH          reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DO              reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BREAK           reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CONTINUE        reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    RETURN          reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOLEAN         reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INC             reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEC             reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NEW             reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BYTE            reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SHORT           reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INT             reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LONG            reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR            reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT           reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DOUBLE          reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SUPER           reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    THIS            reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LPAREN          reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DECIMAL_LITERAL reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    HEX_LITERAL     reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BINARY_LITERAL  reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT_LITERAL   reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOL_LITERAL    reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR_LITERAL    reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    STRING_LITERAL  reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NULL            reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CASE            reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEFAULT         reduce using rule 174 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)


state 550

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement . end_scope for_l2
    (303) end_scope -> .

    RBRACE          reduce using rule 303 (end_scope -> .)
    IDENTIFIER      reduce using rule 303 (end_scope -> .)
    IF              reduce using rule 303 (end_scope -> .)
    WHILE           reduce using rule 303 (end_scope -> .)
    FOR             reduce using rule 303 (end_scope -> .)
    LBRACE          reduce using rule 303 (end_scope -> .)
    SEMI            reduce using rule 303 (end_scope -> .)
    SWITCH          reduce using rule 303 (end_scope -> .)
    DO              reduce using rule 303 (end_scope -> .)
    BREAK           reduce using rule 303 (end_scope -> .)
    CONTINUE        reduce using rule 303 (end_scope -> .)
    RETURN          reduce using rule 303 (end_scope -> .)
    BOOLEAN         reduce using rule 303 (end_scope -> .)
    INC             reduce using rule 303 (end_scope -> .)
    DEC             reduce using rule 303 (end_scope -> .)
    NEW             reduce using rule 303 (end_scope -> .)
    BYTE            reduce using rule 303 (end_scope -> .)
    SHORT           reduce using rule 303 (end_scope -> .)
    INT             reduce using rule 303 (end_scope -> .)
    LONG            reduce using rule 303 (end_scope -> .)
    CHAR            reduce using rule 303 (end_scope -> .)
    FLOAT           reduce using rule 303 (end_scope -> .)
    DOUBLE          reduce using rule 303 (end_scope -> .)
    SUPER           reduce using rule 303 (end_scope -> .)
    THIS            reduce using rule 303 (end_scope -> .)
    LPAREN          reduce using rule 303 (end_scope -> .)
    DECIMAL_LITERAL reduce using rule 303 (end_scope -> .)
    HEX_LITERAL     reduce using rule 303 (end_scope -> .)
    BINARY_LITERAL  reduce using rule 303 (end_scope -> .)
    FLOAT_LITERAL   reduce using rule 303 (end_scope -> .)
    BOOL_LITERAL    reduce using rule 303 (end_scope -> .)
    CHAR_LITERAL    reduce using rule 303 (end_scope -> .)
    STRING_LITERAL  reduce using rule 303 (end_scope -> .)
    NULL            reduce using rule 303 (end_scope -> .)
    CASE            reduce using rule 303 (end_scope -> .)
    DEFAULT         reduce using rule 303 (end_scope -> .)

    end_scope                      shift and go to state 564

state 551

    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope . for_l2
    (184) for_l2 -> .

    RBRACE          reduce using rule 184 (for_l2 -> .)
    IDENTIFIER      reduce using rule 184 (for_l2 -> .)
    IF              reduce using rule 184 (for_l2 -> .)
    WHILE           reduce using rule 184 (for_l2 -> .)
    FOR             reduce using rule 184 (for_l2 -> .)
    LBRACE          reduce using rule 184 (for_l2 -> .)
    SEMI            reduce using rule 184 (for_l2 -> .)
    SWITCH          reduce using rule 184 (for_l2 -> .)
    DO              reduce using rule 184 (for_l2 -> .)
    BREAK           reduce using rule 184 (for_l2 -> .)
    CONTINUE        reduce using rule 184 (for_l2 -> .)
    RETURN          reduce using rule 184 (for_l2 -> .)
    BOOLEAN         reduce using rule 184 (for_l2 -> .)
    INC             reduce using rule 184 (for_l2 -> .)
    DEC             reduce using rule 184 (for_l2 -> .)
    NEW             reduce using rule 184 (for_l2 -> .)
    BYTE            reduce using rule 184 (for_l2 -> .)
    SHORT           reduce using rule 184 (for_l2 -> .)
    INT             reduce using rule 184 (for_l2 -> .)
    LONG            reduce using rule 184 (for_l2 -> .)
    CHAR            reduce using rule 184 (for_l2 -> .)
    FLOAT           reduce using rule 184 (for_l2 -> .)
    DOUBLE          reduce using rule 184 (for_l2 -> .)
    SUPER           reduce using rule 184 (for_l2 -> .)
    THIS            reduce using rule 184 (for_l2 -> .)
    LPAREN          reduce using rule 184 (for_l2 -> .)
    DECIMAL_LITERAL reduce using rule 184 (for_l2 -> .)
    HEX_LITERAL     reduce using rule 184 (for_l2 -> .)
    BINARY_LITERAL  reduce using rule 184 (for_l2 -> .)
    FLOAT_LITERAL   reduce using rule 184 (for_l2 -> .)
    BOOL_LITERAL    reduce using rule 184 (for_l2 -> .)
    CHAR_LITERAL    reduce using rule 184 (for_l2 -> .)
    STRING_LITERAL  reduce using rule 184 (for_l2 -> .)
    NULL            reduce using rule 184 (for_l2 -> .)
    CASE            reduce using rule 184 (for_l2 -> .)
    DEFAULT         reduce using rule 184 (for_l2 -> .)

    for_l2                         shift and go to state 565

state 552

    (145) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE . ifMark3 begin_scope Statement end_scope ifMark2
    (146) IfThenElseStatementNoShortIf -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE . ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (144) ifMark3 -> .

    IDENTIFIER      reduce using rule 144 (ifMark3 -> .)
    IF              reduce using rule 144 (ifMark3 -> .)
    WHILE           reduce using rule 144 (ifMark3 -> .)
    FOR             reduce using rule 144 (ifMark3 -> .)
    LBRACE          reduce using rule 144 (ifMark3 -> .)
    SEMI            reduce using rule 144 (ifMark3 -> .)
    SWITCH          reduce using rule 144 (ifMark3 -> .)
    DO              reduce using rule 144 (ifMark3 -> .)
    BREAK           reduce using rule 144 (ifMark3 -> .)
    CONTINUE        reduce using rule 144 (ifMark3 -> .)
    RETURN          reduce using rule 144 (ifMark3 -> .)
    INC             reduce using rule 144 (ifMark3 -> .)
    DEC             reduce using rule 144 (ifMark3 -> .)
    NEW             reduce using rule 144 (ifMark3 -> .)
    SUPER           reduce using rule 144 (ifMark3 -> .)
    THIS            reduce using rule 144 (ifMark3 -> .)
    LPAREN          reduce using rule 144 (ifMark3 -> .)
    DECIMAL_LITERAL reduce using rule 144 (ifMark3 -> .)
    HEX_LITERAL     reduce using rule 144 (ifMark3 -> .)
    BINARY_LITERAL  reduce using rule 144 (ifMark3 -> .)
    FLOAT_LITERAL   reduce using rule 144 (ifMark3 -> .)
    BOOL_LITERAL    reduce using rule 144 (ifMark3 -> .)
    CHAR_LITERAL    reduce using rule 144 (ifMark3 -> .)
    STRING_LITERAL  reduce using rule 144 (ifMark3 -> .)
    NULL            reduce using rule 144 (ifMark3 -> .)

    ifMark3                        shift and go to state 566

state 553

    (160) WhileStatementNoShortIf -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf . end_scope while_l2
    (303) end_scope -> .

    ELSE            reduce using rule 303 (end_scope -> .)

    end_scope                      shift and go to state 567

state 554

    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 . ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (177) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 . ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 . for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (188) ForUpdate -> . StatementExpressionList
    (185) for_l3 -> .
    (189) StatementExpressionList -> . StatementExpression
    (190) StatementExpressionList -> . StatementExpressionList COMMA StatementExpression
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RPAREN          reduce using rule 185 (for_l3 -> .)
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    ForUpdate                      shift and go to state 568
    for_l3                         shift and go to state 569
    StatementExpressionList        shift and go to state 472
    StatementExpression            shift and go to state 394
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 555

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI . for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI . for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (175) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI . for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI . for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (183) for_l1 -> .

    INC             reduce using rule 183 (for_l1 -> .)
    DEC             reduce using rule 183 (for_l1 -> .)
    NEW             reduce using rule 183 (for_l1 -> .)
    SUPER           reduce using rule 183 (for_l1 -> .)
    THIS            reduce using rule 183 (for_l1 -> .)
    LPAREN          reduce using rule 183 (for_l1 -> .)
    IDENTIFIER      reduce using rule 183 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 183 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 183 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 183 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 183 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 183 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 183 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 183 (for_l1 -> .)
    NULL            reduce using rule 183 (for_l1 -> .)
    RPAREN          reduce using rule 183 (for_l1 -> .)

    for_l1                         shift and go to state 570

state 556

    (173) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (181) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate . for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (185) for_l3 -> .

    RPAREN          reduce using rule 185 (for_l3 -> .)

    for_l3                         shift and go to state 571

state 557

    (174) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 . RPAREN for_l1 Statement end_scope for_l2
    (182) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 . RPAREN for_l1 StatementNoShortIf end_scope for_l2

    RPAREN          shift and go to state 572


state 558

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 . ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (176) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 . ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 . for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (188) ForUpdate -> . StatementExpressionList
    (185) for_l3 -> .
    (189) StatementExpressionList -> . StatementExpression
    (190) StatementExpressionList -> . StatementExpressionList COMMA StatementExpression
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RPAREN          reduce using rule 185 (for_l3 -> .)
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    ForUpdate                      shift and go to state 573
    for_l3                         shift and go to state 574
    StatementExpressionList        shift and go to state 472
    StatementExpression            shift and go to state 394
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 559

    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope . for_l2
    (184) for_l2 -> .

    RBRACE          reduce using rule 184 (for_l2 -> .)
    IDENTIFIER      reduce using rule 184 (for_l2 -> .)
    IF              reduce using rule 184 (for_l2 -> .)
    WHILE           reduce using rule 184 (for_l2 -> .)
    FOR             reduce using rule 184 (for_l2 -> .)
    LBRACE          reduce using rule 184 (for_l2 -> .)
    SEMI            reduce using rule 184 (for_l2 -> .)
    SWITCH          reduce using rule 184 (for_l2 -> .)
    DO              reduce using rule 184 (for_l2 -> .)
    BREAK           reduce using rule 184 (for_l2 -> .)
    CONTINUE        reduce using rule 184 (for_l2 -> .)
    RETURN          reduce using rule 184 (for_l2 -> .)
    BOOLEAN         reduce using rule 184 (for_l2 -> .)
    INC             reduce using rule 184 (for_l2 -> .)
    DEC             reduce using rule 184 (for_l2 -> .)
    NEW             reduce using rule 184 (for_l2 -> .)
    BYTE            reduce using rule 184 (for_l2 -> .)
    SHORT           reduce using rule 184 (for_l2 -> .)
    INT             reduce using rule 184 (for_l2 -> .)
    LONG            reduce using rule 184 (for_l2 -> .)
    CHAR            reduce using rule 184 (for_l2 -> .)
    FLOAT           reduce using rule 184 (for_l2 -> .)
    DOUBLE          reduce using rule 184 (for_l2 -> .)
    SUPER           reduce using rule 184 (for_l2 -> .)
    THIS            reduce using rule 184 (for_l2 -> .)
    LPAREN          reduce using rule 184 (for_l2 -> .)
    DECIMAL_LITERAL reduce using rule 184 (for_l2 -> .)
    HEX_LITERAL     reduce using rule 184 (for_l2 -> .)
    BINARY_LITERAL  reduce using rule 184 (for_l2 -> .)
    FLOAT_LITERAL   reduce using rule 184 (for_l2 -> .)
    BOOL_LITERAL    reduce using rule 184 (for_l2 -> .)
    CHAR_LITERAL    reduce using rule 184 (for_l2 -> .)
    STRING_LITERAL  reduce using rule 184 (for_l2 -> .)
    NULL            reduce using rule 184 (for_l2 -> .)
    CASE            reduce using rule 184 (for_l2 -> .)
    DEFAULT         reduce using rule 184 (for_l2 -> .)

    for_l2                         shift and go to state 575

state 560

    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .

    RBRACE          reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IDENTIFIER      reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IF              reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    WHILE           reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FOR             reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LBRACE          reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SEMI            reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SWITCH          reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DO              reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BREAK           reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CONTINUE        reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    RETURN          reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOLEAN         reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INC             reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEC             reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NEW             reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BYTE            reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SHORT           reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INT             reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LONG            reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR            reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT           reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DOUBLE          reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SUPER           reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    THIS            reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LPAREN          reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DECIMAL_LITERAL reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    HEX_LITERAL     reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BINARY_LITERAL  reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT_LITERAL   reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOL_LITERAL    reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR_LITERAL    reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    STRING_LITERAL  reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NULL            reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CASE            reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEFAULT         reduce using rule 171 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)


state 561

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement . end_scope for_l2
    (303) end_scope -> .

    RBRACE          reduce using rule 303 (end_scope -> .)
    IDENTIFIER      reduce using rule 303 (end_scope -> .)
    IF              reduce using rule 303 (end_scope -> .)
    WHILE           reduce using rule 303 (end_scope -> .)
    FOR             reduce using rule 303 (end_scope -> .)
    LBRACE          reduce using rule 303 (end_scope -> .)
    SEMI            reduce using rule 303 (end_scope -> .)
    SWITCH          reduce using rule 303 (end_scope -> .)
    DO              reduce using rule 303 (end_scope -> .)
    BREAK           reduce using rule 303 (end_scope -> .)
    CONTINUE        reduce using rule 303 (end_scope -> .)
    RETURN          reduce using rule 303 (end_scope -> .)
    BOOLEAN         reduce using rule 303 (end_scope -> .)
    INC             reduce using rule 303 (end_scope -> .)
    DEC             reduce using rule 303 (end_scope -> .)
    NEW             reduce using rule 303 (end_scope -> .)
    BYTE            reduce using rule 303 (end_scope -> .)
    SHORT           reduce using rule 303 (end_scope -> .)
    INT             reduce using rule 303 (end_scope -> .)
    LONG            reduce using rule 303 (end_scope -> .)
    CHAR            reduce using rule 303 (end_scope -> .)
    FLOAT           reduce using rule 303 (end_scope -> .)
    DOUBLE          reduce using rule 303 (end_scope -> .)
    SUPER           reduce using rule 303 (end_scope -> .)
    THIS            reduce using rule 303 (end_scope -> .)
    LPAREN          reduce using rule 303 (end_scope -> .)
    DECIMAL_LITERAL reduce using rule 303 (end_scope -> .)
    HEX_LITERAL     reduce using rule 303 (end_scope -> .)
    BINARY_LITERAL  reduce using rule 303 (end_scope -> .)
    FLOAT_LITERAL   reduce using rule 303 (end_scope -> .)
    BOOL_LITERAL    reduce using rule 303 (end_scope -> .)
    CHAR_LITERAL    reduce using rule 303 (end_scope -> .)
    STRING_LITERAL  reduce using rule 303 (end_scope -> .)
    NULL            reduce using rule 303 (end_scope -> .)
    CASE            reduce using rule 303 (end_scope -> .)
    DEFAULT         reduce using rule 303 (end_scope -> .)

    end_scope                      shift and go to state 576

state 562

    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope . for_l2
    (184) for_l2 -> .

    RBRACE          reduce using rule 184 (for_l2 -> .)
    IDENTIFIER      reduce using rule 184 (for_l2 -> .)
    IF              reduce using rule 184 (for_l2 -> .)
    WHILE           reduce using rule 184 (for_l2 -> .)
    FOR             reduce using rule 184 (for_l2 -> .)
    LBRACE          reduce using rule 184 (for_l2 -> .)
    SEMI            reduce using rule 184 (for_l2 -> .)
    SWITCH          reduce using rule 184 (for_l2 -> .)
    DO              reduce using rule 184 (for_l2 -> .)
    BREAK           reduce using rule 184 (for_l2 -> .)
    CONTINUE        reduce using rule 184 (for_l2 -> .)
    RETURN          reduce using rule 184 (for_l2 -> .)
    BOOLEAN         reduce using rule 184 (for_l2 -> .)
    INC             reduce using rule 184 (for_l2 -> .)
    DEC             reduce using rule 184 (for_l2 -> .)
    NEW             reduce using rule 184 (for_l2 -> .)
    BYTE            reduce using rule 184 (for_l2 -> .)
    SHORT           reduce using rule 184 (for_l2 -> .)
    INT             reduce using rule 184 (for_l2 -> .)
    LONG            reduce using rule 184 (for_l2 -> .)
    CHAR            reduce using rule 184 (for_l2 -> .)
    FLOAT           reduce using rule 184 (for_l2 -> .)
    DOUBLE          reduce using rule 184 (for_l2 -> .)
    SUPER           reduce using rule 184 (for_l2 -> .)
    THIS            reduce using rule 184 (for_l2 -> .)
    LPAREN          reduce using rule 184 (for_l2 -> .)
    DECIMAL_LITERAL reduce using rule 184 (for_l2 -> .)
    HEX_LITERAL     reduce using rule 184 (for_l2 -> .)
    BINARY_LITERAL  reduce using rule 184 (for_l2 -> .)
    FLOAT_LITERAL   reduce using rule 184 (for_l2 -> .)
    BOOL_LITERAL    reduce using rule 184 (for_l2 -> .)
    CHAR_LITERAL    reduce using rule 184 (for_l2 -> .)
    STRING_LITERAL  reduce using rule 184 (for_l2 -> .)
    NULL            reduce using rule 184 (for_l2 -> .)
    CASE            reduce using rule 184 (for_l2 -> .)
    DEFAULT         reduce using rule 184 (for_l2 -> .)

    for_l2                         shift and go to state 577

state 563

    (173) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .

    RBRACE          reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IDENTIFIER      reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IF              reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    WHILE           reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FOR             reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LBRACE          reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SEMI            reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SWITCH          reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DO              reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BREAK           reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CONTINUE        reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    RETURN          reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOLEAN         reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INC             reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEC             reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NEW             reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BYTE            reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SHORT           reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INT             reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LONG            reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR            reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT           reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DOUBLE          reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SUPER           reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    THIS            reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LPAREN          reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DECIMAL_LITERAL reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    HEX_LITERAL     reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BINARY_LITERAL  reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT_LITERAL   reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOL_LITERAL    reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR_LITERAL    reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    STRING_LITERAL  reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NULL            reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CASE            reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEFAULT         reduce using rule 173 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)


state 564

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope . for_l2
    (184) for_l2 -> .

    RBRACE          reduce using rule 184 (for_l2 -> .)
    IDENTIFIER      reduce using rule 184 (for_l2 -> .)
    IF              reduce using rule 184 (for_l2 -> .)
    WHILE           reduce using rule 184 (for_l2 -> .)
    FOR             reduce using rule 184 (for_l2 -> .)
    LBRACE          reduce using rule 184 (for_l2 -> .)
    SEMI            reduce using rule 184 (for_l2 -> .)
    SWITCH          reduce using rule 184 (for_l2 -> .)
    DO              reduce using rule 184 (for_l2 -> .)
    BREAK           reduce using rule 184 (for_l2 -> .)
    CONTINUE        reduce using rule 184 (for_l2 -> .)
    RETURN          reduce using rule 184 (for_l2 -> .)
    BOOLEAN         reduce using rule 184 (for_l2 -> .)
    INC             reduce using rule 184 (for_l2 -> .)
    DEC             reduce using rule 184 (for_l2 -> .)
    NEW             reduce using rule 184 (for_l2 -> .)
    BYTE            reduce using rule 184 (for_l2 -> .)
    SHORT           reduce using rule 184 (for_l2 -> .)
    INT             reduce using rule 184 (for_l2 -> .)
    LONG            reduce using rule 184 (for_l2 -> .)
    CHAR            reduce using rule 184 (for_l2 -> .)
    FLOAT           reduce using rule 184 (for_l2 -> .)
    DOUBLE          reduce using rule 184 (for_l2 -> .)
    SUPER           reduce using rule 184 (for_l2 -> .)
    THIS            reduce using rule 184 (for_l2 -> .)
    LPAREN          reduce using rule 184 (for_l2 -> .)
    DECIMAL_LITERAL reduce using rule 184 (for_l2 -> .)
    HEX_LITERAL     reduce using rule 184 (for_l2 -> .)
    BINARY_LITERAL  reduce using rule 184 (for_l2 -> .)
    FLOAT_LITERAL   reduce using rule 184 (for_l2 -> .)
    BOOL_LITERAL    reduce using rule 184 (for_l2 -> .)
    CHAR_LITERAL    reduce using rule 184 (for_l2 -> .)
    STRING_LITERAL  reduce using rule 184 (for_l2 -> .)
    NULL            reduce using rule 184 (for_l2 -> .)
    CASE            reduce using rule 184 (for_l2 -> .)
    DEFAULT         reduce using rule 184 (for_l2 -> .)

    for_l2                         shift and go to state 578

state 565

    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .

    RBRACE          reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IDENTIFIER      reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IF              reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    WHILE           reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FOR             reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LBRACE          reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SEMI            reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SWITCH          reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DO              reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BREAK           reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CONTINUE        reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    RETURN          reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOLEAN         reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INC             reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEC             reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NEW             reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BYTE            reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SHORT           reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INT             reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LONG            reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR            reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT           reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DOUBLE          reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SUPER           reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    THIS            reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LPAREN          reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DECIMAL_LITERAL reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    HEX_LITERAL     reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BINARY_LITERAL  reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT_LITERAL   reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOL_LITERAL    reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR_LITERAL    reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    STRING_LITERAL  reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NULL            reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CASE            reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEFAULT         reduce using rule 172 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)


state 566

    (145) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 . begin_scope Statement end_scope ifMark2
    (146) IfThenElseStatementNoShortIf -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 . begin_scope StatementNoShortIf end_scope ifMark2
    (302) begin_scope -> .

    IDENTIFIER      reduce using rule 302 (begin_scope -> .)
    IF              reduce using rule 302 (begin_scope -> .)
    WHILE           reduce using rule 302 (begin_scope -> .)
    FOR             reduce using rule 302 (begin_scope -> .)
    LBRACE          reduce using rule 302 (begin_scope -> .)
    SEMI            reduce using rule 302 (begin_scope -> .)
    SWITCH          reduce using rule 302 (begin_scope -> .)
    DO              reduce using rule 302 (begin_scope -> .)
    BREAK           reduce using rule 302 (begin_scope -> .)
    CONTINUE        reduce using rule 302 (begin_scope -> .)
    RETURN          reduce using rule 302 (begin_scope -> .)
    INC             reduce using rule 302 (begin_scope -> .)
    DEC             reduce using rule 302 (begin_scope -> .)
    NEW             reduce using rule 302 (begin_scope -> .)
    SUPER           reduce using rule 302 (begin_scope -> .)
    THIS            reduce using rule 302 (begin_scope -> .)
    LPAREN          reduce using rule 302 (begin_scope -> .)
    DECIMAL_LITERAL reduce using rule 302 (begin_scope -> .)
    HEX_LITERAL     reduce using rule 302 (begin_scope -> .)
    BINARY_LITERAL  reduce using rule 302 (begin_scope -> .)
    FLOAT_LITERAL   reduce using rule 302 (begin_scope -> .)
    BOOL_LITERAL    reduce using rule 302 (begin_scope -> .)
    CHAR_LITERAL    reduce using rule 302 (begin_scope -> .)
    STRING_LITERAL  reduce using rule 302 (begin_scope -> .)
    NULL            reduce using rule 302 (begin_scope -> .)

    begin_scope                    shift and go to state 579

state 567

    (160) WhileStatementNoShortIf -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope . while_l2
    (163) while_l2 -> .

    ELSE            reduce using rule 163 (while_l2 -> .)

    while_l2                       shift and go to state 580

state 568

    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (177) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate . for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (185) for_l3 -> .

    RPAREN          reduce using rule 185 (for_l3 -> .)

    for_l3                         shift and go to state 581

state 569

    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 . RPAREN for_l1 Statement end_scope for_l2
    (179) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 . RPAREN for_l1 StatementNoShortIf end_scope for_l2

    RPAREN          shift and go to state 582


state 570

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 . ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (175) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 . ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 . for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (188) ForUpdate -> . StatementExpressionList
    (185) for_l3 -> .
    (189) StatementExpressionList -> . StatementExpression
    (190) StatementExpressionList -> . StatementExpressionList COMMA StatementExpression
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    RPAREN          reduce using rule 185 (for_l3 -> .)
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    IDENTIFIER      shift and go to state 63
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    ForUpdate                      shift and go to state 583
    for_l3                         shift and go to state 584
    StatementExpressionList        shift and go to state 472
    StatementExpression            shift and go to state 394
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 571

    (173) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 . RPAREN for_l1 Statement end_scope for_l2
    (181) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 . RPAREN for_l1 StatementNoShortIf end_scope for_l2

    RPAREN          shift and go to state 585


state 572

    (174) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (182) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN . for_l1 StatementNoShortIf end_scope for_l2
    (183) for_l1 -> .

    IDENTIFIER      reduce using rule 183 (for_l1 -> .)
    IF              reduce using rule 183 (for_l1 -> .)
    WHILE           reduce using rule 183 (for_l1 -> .)
    FOR             reduce using rule 183 (for_l1 -> .)
    LBRACE          reduce using rule 183 (for_l1 -> .)
    SEMI            reduce using rule 183 (for_l1 -> .)
    SWITCH          reduce using rule 183 (for_l1 -> .)
    DO              reduce using rule 183 (for_l1 -> .)
    BREAK           reduce using rule 183 (for_l1 -> .)
    CONTINUE        reduce using rule 183 (for_l1 -> .)
    RETURN          reduce using rule 183 (for_l1 -> .)
    INC             reduce using rule 183 (for_l1 -> .)
    DEC             reduce using rule 183 (for_l1 -> .)
    NEW             reduce using rule 183 (for_l1 -> .)
    SUPER           reduce using rule 183 (for_l1 -> .)
    THIS            reduce using rule 183 (for_l1 -> .)
    LPAREN          reduce using rule 183 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 183 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 183 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 183 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 183 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 183 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 183 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 183 (for_l1 -> .)
    NULL            reduce using rule 183 (for_l1 -> .)

    for_l1                         shift and go to state 586

state 573

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (176) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate . for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (185) for_l3 -> .

    RPAREN          reduce using rule 185 (for_l3 -> .)

    for_l3                         shift and go to state 587

state 574

    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 . RPAREN for_l1 Statement end_scope for_l2
    (180) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 . RPAREN for_l1 StatementNoShortIf end_scope for_l2

    RPAREN          shift and go to state 588


state 575

    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .

    RBRACE          reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IDENTIFIER      reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IF              reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    WHILE           reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FOR             reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LBRACE          reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SEMI            reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SWITCH          reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DO              reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BREAK           reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CONTINUE        reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    RETURN          reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOLEAN         reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INC             reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEC             reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NEW             reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BYTE            reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SHORT           reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INT             reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LONG            reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR            reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT           reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DOUBLE          reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SUPER           reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    THIS            reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LPAREN          reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DECIMAL_LITERAL reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    HEX_LITERAL     reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BINARY_LITERAL  reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT_LITERAL   reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOL_LITERAL    reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR_LITERAL    reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    STRING_LITERAL  reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NULL            reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CASE            reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEFAULT         reduce using rule 169 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)


state 576

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope . for_l2
    (184) for_l2 -> .

    RBRACE          reduce using rule 184 (for_l2 -> .)
    IDENTIFIER      reduce using rule 184 (for_l2 -> .)
    IF              reduce using rule 184 (for_l2 -> .)
    WHILE           reduce using rule 184 (for_l2 -> .)
    FOR             reduce using rule 184 (for_l2 -> .)
    LBRACE          reduce using rule 184 (for_l2 -> .)
    SEMI            reduce using rule 184 (for_l2 -> .)
    SWITCH          reduce using rule 184 (for_l2 -> .)
    DO              reduce using rule 184 (for_l2 -> .)
    BREAK           reduce using rule 184 (for_l2 -> .)
    CONTINUE        reduce using rule 184 (for_l2 -> .)
    RETURN          reduce using rule 184 (for_l2 -> .)
    BOOLEAN         reduce using rule 184 (for_l2 -> .)
    INC             reduce using rule 184 (for_l2 -> .)
    DEC             reduce using rule 184 (for_l2 -> .)
    NEW             reduce using rule 184 (for_l2 -> .)
    BYTE            reduce using rule 184 (for_l2 -> .)
    SHORT           reduce using rule 184 (for_l2 -> .)
    INT             reduce using rule 184 (for_l2 -> .)
    LONG            reduce using rule 184 (for_l2 -> .)
    CHAR            reduce using rule 184 (for_l2 -> .)
    FLOAT           reduce using rule 184 (for_l2 -> .)
    DOUBLE          reduce using rule 184 (for_l2 -> .)
    SUPER           reduce using rule 184 (for_l2 -> .)
    THIS            reduce using rule 184 (for_l2 -> .)
    LPAREN          reduce using rule 184 (for_l2 -> .)
    DECIMAL_LITERAL reduce using rule 184 (for_l2 -> .)
    HEX_LITERAL     reduce using rule 184 (for_l2 -> .)
    BINARY_LITERAL  reduce using rule 184 (for_l2 -> .)
    FLOAT_LITERAL   reduce using rule 184 (for_l2 -> .)
    BOOL_LITERAL    reduce using rule 184 (for_l2 -> .)
    CHAR_LITERAL    reduce using rule 184 (for_l2 -> .)
    STRING_LITERAL  reduce using rule 184 (for_l2 -> .)
    NULL            reduce using rule 184 (for_l2 -> .)
    CASE            reduce using rule 184 (for_l2 -> .)
    DEFAULT         reduce using rule 184 (for_l2 -> .)

    for_l2                         shift and go to state 589

state 577

    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .

    RBRACE          reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IDENTIFIER      reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IF              reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    WHILE           reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FOR             reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LBRACE          reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SEMI            reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SWITCH          reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DO              reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BREAK           reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CONTINUE        reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    RETURN          reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOLEAN         reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INC             reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEC             reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NEW             reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BYTE            reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SHORT           reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INT             reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LONG            reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR            reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT           reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DOUBLE          reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SUPER           reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    THIS            reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LPAREN          reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DECIMAL_LITERAL reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    HEX_LITERAL     reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BINARY_LITERAL  reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT_LITERAL   reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOL_LITERAL    reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR_LITERAL    reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    STRING_LITERAL  reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NULL            reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CASE            reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEFAULT         reduce using rule 170 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2 .)


state 578

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .

    RBRACE          reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IDENTIFIER      reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IF              reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    WHILE           reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FOR             reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LBRACE          reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SEMI            reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SWITCH          reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DO              reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BREAK           reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CONTINUE        reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    RETURN          reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOLEAN         reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INC             reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEC             reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NEW             reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BYTE            reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SHORT           reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INT             reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LONG            reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR            reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT           reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DOUBLE          reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SUPER           reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    THIS            reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LPAREN          reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DECIMAL_LITERAL reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    HEX_LITERAL     reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BINARY_LITERAL  reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT_LITERAL   reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOL_LITERAL    reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR_LITERAL    reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    STRING_LITERAL  reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NULL            reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CASE            reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEFAULT         reduce using rule 168 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)


state 579

    (145) IfThenElseStatement -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope . Statement end_scope ifMark2
    (146) IfThenElseStatementNoShortIf -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope . StatementNoShortIf end_scope ifMark2
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (117) StatementNoShortIf -> . StatementWithoutTrailingSubstatement
    (118) StatementNoShortIf -> . LabeledStatementNoShortIf
    (119) StatementNoShortIf -> . IfThenElseStatementNoShortIf
    (120) StatementNoShortIf -> . WhileStatementNoShortIf
    (121) StatementNoShortIf -> . ForStatementNoShortIf
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (132) LabeledStatementNoShortIf -> . IDENTIFIER COLON StatementNoShortIf
    (146) IfThenElseStatementNoShortIf -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (160) WhileStatementNoShortIf -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (175) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (181) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (182) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 426
    IF              shift and go to state 418
    WHILE           shift and go to state 427
    FOR             shift and go to state 428
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    StatementNoShortIf             shift and go to state 590
    Statement                      shift and go to state 509
    StatementWithoutTrailingSubstatement shift and go to state 421
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    LabeledStatementNoShortIf      shift and go to state 422
    IfThenElseStatementNoShortIf   shift and go to state 423
    WhileStatementNoShortIf        shift and go to state 424
    ForStatementNoShortIf          shift and go to state 425
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    StatementExpression            shift and go to state 135
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 580

    (160) WhileStatementNoShortIf -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2 .

    ELSE            reduce using rule 160 (WhileStatementNoShortIf -> WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2 .)


state 581

    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 . RPAREN for_l1 Statement end_scope for_l2
    (177) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 . RPAREN for_l1 StatementNoShortIf end_scope for_l2

    RPAREN          shift and go to state 591


state 582

    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (179) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN . for_l1 StatementNoShortIf end_scope for_l2
    (183) for_l1 -> .

    IDENTIFIER      reduce using rule 183 (for_l1 -> .)
    IF              reduce using rule 183 (for_l1 -> .)
    WHILE           reduce using rule 183 (for_l1 -> .)
    FOR             reduce using rule 183 (for_l1 -> .)
    LBRACE          reduce using rule 183 (for_l1 -> .)
    SEMI            reduce using rule 183 (for_l1 -> .)
    SWITCH          reduce using rule 183 (for_l1 -> .)
    DO              reduce using rule 183 (for_l1 -> .)
    BREAK           reduce using rule 183 (for_l1 -> .)
    CONTINUE        reduce using rule 183 (for_l1 -> .)
    RETURN          reduce using rule 183 (for_l1 -> .)
    INC             reduce using rule 183 (for_l1 -> .)
    DEC             reduce using rule 183 (for_l1 -> .)
    NEW             reduce using rule 183 (for_l1 -> .)
    SUPER           reduce using rule 183 (for_l1 -> .)
    THIS            reduce using rule 183 (for_l1 -> .)
    LPAREN          reduce using rule 183 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 183 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 183 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 183 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 183 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 183 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 183 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 183 (for_l1 -> .)
    NULL            reduce using rule 183 (for_l1 -> .)

    for_l1                         shift and go to state 592

state 583

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate . for_l3 RPAREN for_l1 Statement end_scope for_l2
    (175) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate . for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (185) for_l3 -> .

    RPAREN          reduce using rule 185 (for_l3 -> .)

    for_l3                         shift and go to state 593

state 584

    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 . RPAREN for_l1 Statement end_scope for_l2
    (178) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 . RPAREN for_l1 StatementNoShortIf end_scope for_l2

    RPAREN          shift and go to state 594


state 585

    (173) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (181) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN . for_l1 StatementNoShortIf end_scope for_l2
    (183) for_l1 -> .

    IDENTIFIER      reduce using rule 183 (for_l1 -> .)
    IF              reduce using rule 183 (for_l1 -> .)
    WHILE           reduce using rule 183 (for_l1 -> .)
    FOR             reduce using rule 183 (for_l1 -> .)
    LBRACE          reduce using rule 183 (for_l1 -> .)
    SEMI            reduce using rule 183 (for_l1 -> .)
    SWITCH          reduce using rule 183 (for_l1 -> .)
    DO              reduce using rule 183 (for_l1 -> .)
    BREAK           reduce using rule 183 (for_l1 -> .)
    CONTINUE        reduce using rule 183 (for_l1 -> .)
    RETURN          reduce using rule 183 (for_l1 -> .)
    INC             reduce using rule 183 (for_l1 -> .)
    DEC             reduce using rule 183 (for_l1 -> .)
    NEW             reduce using rule 183 (for_l1 -> .)
    SUPER           reduce using rule 183 (for_l1 -> .)
    THIS            reduce using rule 183 (for_l1 -> .)
    LPAREN          reduce using rule 183 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 183 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 183 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 183 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 183 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 183 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 183 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 183 (for_l1 -> .)
    NULL            reduce using rule 183 (for_l1 -> .)

    for_l1                         shift and go to state 595

state 586

    (174) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (182) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 . StatementNoShortIf end_scope for_l2
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (117) StatementNoShortIf -> . StatementWithoutTrailingSubstatement
    (118) StatementNoShortIf -> . LabeledStatementNoShortIf
    (119) StatementNoShortIf -> . IfThenElseStatementNoShortIf
    (120) StatementNoShortIf -> . WhileStatementNoShortIf
    (121) StatementNoShortIf -> . ForStatementNoShortIf
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (132) LabeledStatementNoShortIf -> . IDENTIFIER COLON StatementNoShortIf
    (146) IfThenElseStatementNoShortIf -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (160) WhileStatementNoShortIf -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (175) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (181) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (182) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 426
    IF              shift and go to state 418
    WHILE           shift and go to state 427
    FOR             shift and go to state 428
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    Statement                      shift and go to state 518
    StatementNoShortIf             shift and go to state 596
    StatementWithoutTrailingSubstatement shift and go to state 421
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    LabeledStatementNoShortIf      shift and go to state 422
    IfThenElseStatementNoShortIf   shift and go to state 423
    WhileStatementNoShortIf        shift and go to state 424
    ForStatementNoShortIf          shift and go to state 425
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    StatementExpression            shift and go to state 135
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 587

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 . RPAREN for_l1 Statement end_scope for_l2
    (176) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 . RPAREN for_l1 StatementNoShortIf end_scope for_l2

    RPAREN          shift and go to state 597


state 588

    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (180) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN . for_l1 StatementNoShortIf end_scope for_l2
    (183) for_l1 -> .

    IDENTIFIER      reduce using rule 183 (for_l1 -> .)
    IF              reduce using rule 183 (for_l1 -> .)
    WHILE           reduce using rule 183 (for_l1 -> .)
    FOR             reduce using rule 183 (for_l1 -> .)
    LBRACE          reduce using rule 183 (for_l1 -> .)
    SEMI            reduce using rule 183 (for_l1 -> .)
    SWITCH          reduce using rule 183 (for_l1 -> .)
    DO              reduce using rule 183 (for_l1 -> .)
    BREAK           reduce using rule 183 (for_l1 -> .)
    CONTINUE        reduce using rule 183 (for_l1 -> .)
    RETURN          reduce using rule 183 (for_l1 -> .)
    INC             reduce using rule 183 (for_l1 -> .)
    DEC             reduce using rule 183 (for_l1 -> .)
    NEW             reduce using rule 183 (for_l1 -> .)
    SUPER           reduce using rule 183 (for_l1 -> .)
    THIS            reduce using rule 183 (for_l1 -> .)
    LPAREN          reduce using rule 183 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 183 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 183 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 183 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 183 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 183 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 183 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 183 (for_l1 -> .)
    NULL            reduce using rule 183 (for_l1 -> .)

    for_l1                         shift and go to state 598

state 589

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .

    RBRACE          reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IDENTIFIER      reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    IF              reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    WHILE           reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FOR             reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LBRACE          reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SEMI            reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SWITCH          reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DO              reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BREAK           reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CONTINUE        reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    RETURN          reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOLEAN         reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INC             reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEC             reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NEW             reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BYTE            reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SHORT           reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    INT             reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LONG            reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR            reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT           reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DOUBLE          reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    SUPER           reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    THIS            reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    LPAREN          reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DECIMAL_LITERAL reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    HEX_LITERAL     reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BINARY_LITERAL  reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    FLOAT_LITERAL   reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    BOOL_LITERAL    reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CHAR_LITERAL    reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    STRING_LITERAL  reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    NULL            reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    CASE            reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)
    DEFAULT         reduce using rule 167 (ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2 .)


state 590

    (146) IfThenElseStatementNoShortIf -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf . end_scope ifMark2
    (303) end_scope -> .

    ELSE            reduce using rule 303 (end_scope -> .)

    end_scope                      shift and go to state 599

state 591

    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (177) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN . for_l1 StatementNoShortIf end_scope for_l2
    (183) for_l1 -> .

    IDENTIFIER      reduce using rule 183 (for_l1 -> .)
    IF              reduce using rule 183 (for_l1 -> .)
    WHILE           reduce using rule 183 (for_l1 -> .)
    FOR             reduce using rule 183 (for_l1 -> .)
    LBRACE          reduce using rule 183 (for_l1 -> .)
    SEMI            reduce using rule 183 (for_l1 -> .)
    SWITCH          reduce using rule 183 (for_l1 -> .)
    DO              reduce using rule 183 (for_l1 -> .)
    BREAK           reduce using rule 183 (for_l1 -> .)
    CONTINUE        reduce using rule 183 (for_l1 -> .)
    RETURN          reduce using rule 183 (for_l1 -> .)
    INC             reduce using rule 183 (for_l1 -> .)
    DEC             reduce using rule 183 (for_l1 -> .)
    NEW             reduce using rule 183 (for_l1 -> .)
    SUPER           reduce using rule 183 (for_l1 -> .)
    THIS            reduce using rule 183 (for_l1 -> .)
    LPAREN          reduce using rule 183 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 183 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 183 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 183 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 183 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 183 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 183 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 183 (for_l1 -> .)
    NULL            reduce using rule 183 (for_l1 -> .)

    for_l1                         shift and go to state 600

state 592

    (171) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (179) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 . StatementNoShortIf end_scope for_l2
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (117) StatementNoShortIf -> . StatementWithoutTrailingSubstatement
    (118) StatementNoShortIf -> . LabeledStatementNoShortIf
    (119) StatementNoShortIf -> . IfThenElseStatementNoShortIf
    (120) StatementNoShortIf -> . WhileStatementNoShortIf
    (121) StatementNoShortIf -> . ForStatementNoShortIf
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (132) LabeledStatementNoShortIf -> . IDENTIFIER COLON StatementNoShortIf
    (146) IfThenElseStatementNoShortIf -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (160) WhileStatementNoShortIf -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (175) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (181) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (182) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 426
    IF              shift and go to state 418
    WHILE           shift and go to state 427
    FOR             shift and go to state 428
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    Statement                      shift and go to state 529
    StatementNoShortIf             shift and go to state 601
    StatementWithoutTrailingSubstatement shift and go to state 421
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    LabeledStatementNoShortIf      shift and go to state 422
    IfThenElseStatementNoShortIf   shift and go to state 423
    WhileStatementNoShortIf        shift and go to state 424
    ForStatementNoShortIf          shift and go to state 425
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    StatementExpression            shift and go to state 135
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 593

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 . RPAREN for_l1 Statement end_scope for_l2
    (175) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 . RPAREN for_l1 StatementNoShortIf end_scope for_l2

    RPAREN          shift and go to state 602


state 594

    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (178) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN . for_l1 StatementNoShortIf end_scope for_l2
    (183) for_l1 -> .

    IDENTIFIER      reduce using rule 183 (for_l1 -> .)
    IF              reduce using rule 183 (for_l1 -> .)
    WHILE           reduce using rule 183 (for_l1 -> .)
    FOR             reduce using rule 183 (for_l1 -> .)
    LBRACE          reduce using rule 183 (for_l1 -> .)
    SEMI            reduce using rule 183 (for_l1 -> .)
    SWITCH          reduce using rule 183 (for_l1 -> .)
    DO              reduce using rule 183 (for_l1 -> .)
    BREAK           reduce using rule 183 (for_l1 -> .)
    CONTINUE        reduce using rule 183 (for_l1 -> .)
    RETURN          reduce using rule 183 (for_l1 -> .)
    INC             reduce using rule 183 (for_l1 -> .)
    DEC             reduce using rule 183 (for_l1 -> .)
    NEW             reduce using rule 183 (for_l1 -> .)
    SUPER           reduce using rule 183 (for_l1 -> .)
    THIS            reduce using rule 183 (for_l1 -> .)
    LPAREN          reduce using rule 183 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 183 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 183 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 183 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 183 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 183 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 183 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 183 (for_l1 -> .)
    NULL            reduce using rule 183 (for_l1 -> .)

    for_l1                         shift and go to state 603

state 595

    (173) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (181) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 . StatementNoShortIf end_scope for_l2
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (117) StatementNoShortIf -> . StatementWithoutTrailingSubstatement
    (118) StatementNoShortIf -> . LabeledStatementNoShortIf
    (119) StatementNoShortIf -> . IfThenElseStatementNoShortIf
    (120) StatementNoShortIf -> . WhileStatementNoShortIf
    (121) StatementNoShortIf -> . ForStatementNoShortIf
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (132) LabeledStatementNoShortIf -> . IDENTIFIER COLON StatementNoShortIf
    (146) IfThenElseStatementNoShortIf -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (160) WhileStatementNoShortIf -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (175) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (181) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (182) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 426
    IF              shift and go to state 418
    WHILE           shift and go to state 427
    FOR             shift and go to state 428
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    Statement                      shift and go to state 532
    StatementNoShortIf             shift and go to state 604
    StatementWithoutTrailingSubstatement shift and go to state 421
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    LabeledStatementNoShortIf      shift and go to state 422
    IfThenElseStatementNoShortIf   shift and go to state 423
    WhileStatementNoShortIf        shift and go to state 424
    ForStatementNoShortIf          shift and go to state 425
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    StatementExpression            shift and go to state 135
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 596

    (182) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf . end_scope for_l2
    (303) end_scope -> .

    ELSE            reduce using rule 303 (end_scope -> .)

    end_scope                      shift and go to state 605

state 597

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (176) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN . for_l1 StatementNoShortIf end_scope for_l2
    (183) for_l1 -> .

    IDENTIFIER      reduce using rule 183 (for_l1 -> .)
    IF              reduce using rule 183 (for_l1 -> .)
    WHILE           reduce using rule 183 (for_l1 -> .)
    FOR             reduce using rule 183 (for_l1 -> .)
    LBRACE          reduce using rule 183 (for_l1 -> .)
    SEMI            reduce using rule 183 (for_l1 -> .)
    SWITCH          reduce using rule 183 (for_l1 -> .)
    DO              reduce using rule 183 (for_l1 -> .)
    BREAK           reduce using rule 183 (for_l1 -> .)
    CONTINUE        reduce using rule 183 (for_l1 -> .)
    RETURN          reduce using rule 183 (for_l1 -> .)
    INC             reduce using rule 183 (for_l1 -> .)
    DEC             reduce using rule 183 (for_l1 -> .)
    NEW             reduce using rule 183 (for_l1 -> .)
    SUPER           reduce using rule 183 (for_l1 -> .)
    THIS            reduce using rule 183 (for_l1 -> .)
    LPAREN          reduce using rule 183 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 183 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 183 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 183 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 183 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 183 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 183 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 183 (for_l1 -> .)
    NULL            reduce using rule 183 (for_l1 -> .)

    for_l1                         shift and go to state 606

state 598

    (172) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (180) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 . StatementNoShortIf end_scope for_l2
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (117) StatementNoShortIf -> . StatementWithoutTrailingSubstatement
    (118) StatementNoShortIf -> . LabeledStatementNoShortIf
    (119) StatementNoShortIf -> . IfThenElseStatementNoShortIf
    (120) StatementNoShortIf -> . WhileStatementNoShortIf
    (121) StatementNoShortIf -> . ForStatementNoShortIf
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (132) LabeledStatementNoShortIf -> . IDENTIFIER COLON StatementNoShortIf
    (146) IfThenElseStatementNoShortIf -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (160) WhileStatementNoShortIf -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (175) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (181) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (182) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 426
    IF              shift and go to state 418
    WHILE           shift and go to state 427
    FOR             shift and go to state 428
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    Statement                      shift and go to state 535
    StatementNoShortIf             shift and go to state 607
    StatementWithoutTrailingSubstatement shift and go to state 421
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    LabeledStatementNoShortIf      shift and go to state 422
    IfThenElseStatementNoShortIf   shift and go to state 423
    WhileStatementNoShortIf        shift and go to state 424
    ForStatementNoShortIf          shift and go to state 425
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    StatementExpression            shift and go to state 135
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 599

    (146) IfThenElseStatementNoShortIf -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope . ifMark2
    (143) ifMark2 -> .

    ELSE            reduce using rule 143 (ifMark2 -> .)

    ifMark2                        shift and go to state 608

state 600

    (169) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (177) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 . StatementNoShortIf end_scope for_l2
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (117) StatementNoShortIf -> . StatementWithoutTrailingSubstatement
    (118) StatementNoShortIf -> . LabeledStatementNoShortIf
    (119) StatementNoShortIf -> . IfThenElseStatementNoShortIf
    (120) StatementNoShortIf -> . WhileStatementNoShortIf
    (121) StatementNoShortIf -> . ForStatementNoShortIf
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (132) LabeledStatementNoShortIf -> . IDENTIFIER COLON StatementNoShortIf
    (146) IfThenElseStatementNoShortIf -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (160) WhileStatementNoShortIf -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (175) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (181) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (182) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 426
    IF              shift and go to state 418
    WHILE           shift and go to state 427
    FOR             shift and go to state 428
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    Statement                      shift and go to state 544
    StatementNoShortIf             shift and go to state 609
    StatementWithoutTrailingSubstatement shift and go to state 421
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    LabeledStatementNoShortIf      shift and go to state 422
    IfThenElseStatementNoShortIf   shift and go to state 423
    WhileStatementNoShortIf        shift and go to state 424
    ForStatementNoShortIf          shift and go to state 425
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    StatementExpression            shift and go to state 135
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 601

    (179) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf . end_scope for_l2
    (303) end_scope -> .

    ELSE            reduce using rule 303 (end_scope -> .)

    end_scope                      shift and go to state 610

state 602

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN . for_l1 Statement end_scope for_l2
    (175) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN . for_l1 StatementNoShortIf end_scope for_l2
    (183) for_l1 -> .

    IDENTIFIER      reduce using rule 183 (for_l1 -> .)
    IF              reduce using rule 183 (for_l1 -> .)
    WHILE           reduce using rule 183 (for_l1 -> .)
    FOR             reduce using rule 183 (for_l1 -> .)
    LBRACE          reduce using rule 183 (for_l1 -> .)
    SEMI            reduce using rule 183 (for_l1 -> .)
    SWITCH          reduce using rule 183 (for_l1 -> .)
    DO              reduce using rule 183 (for_l1 -> .)
    BREAK           reduce using rule 183 (for_l1 -> .)
    CONTINUE        reduce using rule 183 (for_l1 -> .)
    RETURN          reduce using rule 183 (for_l1 -> .)
    INC             reduce using rule 183 (for_l1 -> .)
    DEC             reduce using rule 183 (for_l1 -> .)
    NEW             reduce using rule 183 (for_l1 -> .)
    SUPER           reduce using rule 183 (for_l1 -> .)
    THIS            reduce using rule 183 (for_l1 -> .)
    LPAREN          reduce using rule 183 (for_l1 -> .)
    DECIMAL_LITERAL reduce using rule 183 (for_l1 -> .)
    HEX_LITERAL     reduce using rule 183 (for_l1 -> .)
    BINARY_LITERAL  reduce using rule 183 (for_l1 -> .)
    FLOAT_LITERAL   reduce using rule 183 (for_l1 -> .)
    BOOL_LITERAL    reduce using rule 183 (for_l1 -> .)
    CHAR_LITERAL    reduce using rule 183 (for_l1 -> .)
    STRING_LITERAL  reduce using rule 183 (for_l1 -> .)
    NULL            reduce using rule 183 (for_l1 -> .)

    for_l1                         shift and go to state 611

state 603

    (170) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (178) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 . StatementNoShortIf end_scope for_l2
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (117) StatementNoShortIf -> . StatementWithoutTrailingSubstatement
    (118) StatementNoShortIf -> . LabeledStatementNoShortIf
    (119) StatementNoShortIf -> . IfThenElseStatementNoShortIf
    (120) StatementNoShortIf -> . WhileStatementNoShortIf
    (121) StatementNoShortIf -> . ForStatementNoShortIf
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (132) LabeledStatementNoShortIf -> . IDENTIFIER COLON StatementNoShortIf
    (146) IfThenElseStatementNoShortIf -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (160) WhileStatementNoShortIf -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (175) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (181) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (182) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 426
    IF              shift and go to state 418
    WHILE           shift and go to state 427
    FOR             shift and go to state 428
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    Statement                      shift and go to state 547
    StatementNoShortIf             shift and go to state 612
    StatementWithoutTrailingSubstatement shift and go to state 421
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    LabeledStatementNoShortIf      shift and go to state 422
    IfThenElseStatementNoShortIf   shift and go to state 423
    WhileStatementNoShortIf        shift and go to state 424
    ForStatementNoShortIf          shift and go to state 425
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    StatementExpression            shift and go to state 135
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 604

    (181) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf . end_scope for_l2
    (303) end_scope -> .

    ELSE            reduce using rule 303 (end_scope -> .)

    end_scope                      shift and go to state 613

state 605

    (182) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope . for_l2
    (184) for_l2 -> .

    ELSE            reduce using rule 184 (for_l2 -> .)

    for_l2                         shift and go to state 614

state 606

    (168) ForStatement -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (176) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 . StatementNoShortIf end_scope for_l2
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (117) StatementNoShortIf -> . StatementWithoutTrailingSubstatement
    (118) StatementNoShortIf -> . LabeledStatementNoShortIf
    (119) StatementNoShortIf -> . IfThenElseStatementNoShortIf
    (120) StatementNoShortIf -> . WhileStatementNoShortIf
    (121) StatementNoShortIf -> . ForStatementNoShortIf
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (132) LabeledStatementNoShortIf -> . IDENTIFIER COLON StatementNoShortIf
    (146) IfThenElseStatementNoShortIf -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (160) WhileStatementNoShortIf -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (175) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (181) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (182) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 426
    IF              shift and go to state 418
    WHILE           shift and go to state 427
    FOR             shift and go to state 428
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    Statement                      shift and go to state 550
    StatementNoShortIf             shift and go to state 615
    StatementWithoutTrailingSubstatement shift and go to state 421
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    LabeledStatementNoShortIf      shift and go to state 422
    IfThenElseStatementNoShortIf   shift and go to state 423
    WhileStatementNoShortIf        shift and go to state 424
    ForStatementNoShortIf          shift and go to state 425
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    StatementExpression            shift and go to state 135
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 607

    (180) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf . end_scope for_l2
    (303) end_scope -> .

    ELSE            reduce using rule 303 (end_scope -> .)

    end_scope                      shift and go to state 616

state 608

    (146) IfThenElseStatementNoShortIf -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2 .

    ELSE            reduce using rule 146 (IfThenElseStatementNoShortIf -> IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2 .)


state 609

    (177) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf . end_scope for_l2
    (303) end_scope -> .

    ELSE            reduce using rule 303 (end_scope -> .)

    end_scope                      shift and go to state 617

state 610

    (179) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope . for_l2
    (184) for_l2 -> .

    ELSE            reduce using rule 184 (for_l2 -> .)

    for_l2                         shift and go to state 618

state 611

    (167) ForStatement -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 . Statement end_scope for_l2
    (175) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 . StatementNoShortIf end_scope for_l2
    (111) Statement -> . StatementWithoutTrailingSubstatement
    (112) Statement -> . LabeledStatement
    (113) Statement -> . IfThenStatement
    (114) Statement -> . IfThenElseStatement
    (115) Statement -> . WhileStatement
    (116) Statement -> . ForStatement
    (117) StatementNoShortIf -> . StatementWithoutTrailingSubstatement
    (118) StatementNoShortIf -> . LabeledStatementNoShortIf
    (119) StatementNoShortIf -> . IfThenElseStatementNoShortIf
    (120) StatementNoShortIf -> . WhileStatementNoShortIf
    (121) StatementNoShortIf -> . ForStatementNoShortIf
    (122) StatementWithoutTrailingSubstatement -> . Block
    (123) StatementWithoutTrailingSubstatement -> . EmptyStatement
    (124) StatementWithoutTrailingSubstatement -> . ExpressionStatement
    (125) StatementWithoutTrailingSubstatement -> . SwitchStatement
    (126) StatementWithoutTrailingSubstatement -> . DoStatement
    (127) StatementWithoutTrailingSubstatement -> . BreakStatement
    (128) StatementWithoutTrailingSubstatement -> . ContinueStatement
    (129) StatementWithoutTrailingSubstatement -> . ReturnStatement
    (131) LabeledStatement -> . IDENTIFIER COLON Statement
    (141) IfThenStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 Statement ifMark1 end_scope
    (145) IfThenElseStatement -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope Statement end_scope ifMark2
    (159) WhileStatement -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 Statement end_scope while_l2
    (167) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (168) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (169) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (170) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (171) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (172) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (173) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 Statement end_scope for_l2
    (174) ForStatement -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 Statement end_scope for_l2
    (132) LabeledStatementNoShortIf -> . IDENTIFIER COLON StatementNoShortIf
    (146) IfThenElseStatementNoShortIf -> . IF begin_scope LPAREN Expression RPAREN ifMark1 StatementNoShortIf end_scope ELSE ifMark3 begin_scope StatementNoShortIf end_scope ifMark2
    (160) WhileStatementNoShortIf -> . WHILE prep_fw_stack LPAREN begin_scope while_l1 Expression RPAREN while_l1 StatementNoShortIf end_scope while_l2
    (175) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (176) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (177) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (178) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (179) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (180) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (181) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (182) ForStatementNoShortIf -> . FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2
    (103) Block -> . LBRACE RBRACE
    (104) Block -> . LBRACE BlockStatements RBRACE
    (130) EmptyStatement -> . SEMI
    (133) ExpressionStatement -> . StatementExpression SEMI
    (147) SwitchStatement -> . SWITCH LPAREN Expression RPAREN SwitchBlock
    (164) DoStatement -> . DO prep_fw_stack begin_scope dwhile_l1 Statement WHILE LPAREN dwhile_l1 Expression RPAREN SEMI end_scope dwhile_l2
    (191) BreakStatement -> . BREAK IDENTIFIER SEMI
    (192) BreakStatement -> . BREAK SEMI
    (193) ContinueStatement -> . CONTINUE IDENTIFIER SEMI
    (194) ContinueStatement -> . CONTINUE SEMI
    (195) ReturnStatement -> . RETURN Expression SEMI
    (196) ReturnStatement -> . RETURN SEMI
    (134) StatementExpression -> . Assignment
    (135) StatementExpression -> . PreIncrementExpression
    (136) StatementExpression -> . PreDecrementExpression
    (137) StatementExpression -> . PostIncrementExpression
    (138) StatementExpression -> . PostDecrementExpression
    (139) StatementExpression -> . MethodInvocation
    (140) StatementExpression -> . ClassInstanceCreationExpression
    (282) Assignment -> . LeftHandSide AssignmentOperator AssignmentExpression
    (238) PreIncrementExpression -> . INC UnaryExpression
    (239) PreDecrementExpression -> . DEC UnaryExpression
    (231) PostIncrementExpression -> . PostfixExpression INC
    (232) PostDecrementExpression -> . PostfixExpression DEC
    (221) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN ArgumentList RPAREN
    (222) MethodInvocation -> . Name LPAREN ArgumentList RPAREN
    (223) MethodInvocation -> . Primary DOT IDENTIFIER LPAREN RPAREN
    (224) MethodInvocation -> . Name LPAREN RPAREN
    (206) ClassInstanceCreationExpression -> . NEW ClassType LPAREN RPAREN
    (207) ClassInstanceCreationExpression -> . NEW ClassType LPAREN ArgumentList RPAREN
    (283) LeftHandSide -> . Name
    (284) LeftHandSide -> . FieldAccess
    (285) LeftHandSide -> . ArrayAccess
    (227) PostfixExpression -> . Primary
    (228) PostfixExpression -> . Name
    (229) PostfixExpression -> . PostIncrementExpression
    (230) PostfixExpression -> . PostDecrementExpression
    (197) Primary -> . PrimaryNoNewArray
    (198) Primary -> . ArrayCreationExpression
    (28) Name -> . SimpleName
    (29) Name -> . QualifiedName
    (219) FieldAccess -> . Primary DOT Name
    (220) FieldAccess -> . SUPER DOT Name
    (225) ArrayAccess -> . Name LBRACK Expression RBRACK
    (226) ArrayAccess -> . PrimaryNoNewArray LBRACK Expression RBRACK
    (199) PrimaryNoNewArray -> . Literal
    (200) PrimaryNoNewArray -> . THIS
    (201) PrimaryNoNewArray -> . LPAREN Expression RPAREN
    (202) PrimaryNoNewArray -> . ClassInstanceCreationExpression
    (203) PrimaryNoNewArray -> . FieldAccess
    (204) PrimaryNoNewArray -> . MethodInvocation
    (205) PrimaryNoNewArray -> . ArrayAccess
    (210) ArrayCreationExpression -> . NEW PrimitiveType DimExprs Dims
    (211) ArrayCreationExpression -> . NEW PrimitiveType DimExprs
    (212) ArrayCreationExpression -> . NEW ClassType DimExprs Dims
    (213) ArrayCreationExpression -> . NEW ClassType DimExprs
    (30) SimpleName -> . IDENTIFIER
    (31) QualifiedName -> . Name DOT IDENTIFIER
    (2) Literal -> . DECIMAL_LITERAL
    (3) Literal -> . HEX_LITERAL
    (4) Literal -> . BINARY_LITERAL
    (5) Literal -> . FLOAT_LITERAL
    (6) Literal -> . BOOL_LITERAL
    (7) Literal -> . CHAR_LITERAL
    (8) Literal -> . STRING_LITERAL
    (9) Literal -> . NULL

    IDENTIFIER      shift and go to state 426
    IF              shift and go to state 418
    WHILE           shift and go to state 427
    FOR             shift and go to state 428
    LBRACE          shift and go to state 95
    SEMI            shift and go to state 114
    SWITCH          shift and go to state 136
    DO              shift and go to state 137
    BREAK           shift and go to state 138
    CONTINUE        shift and go to state 139
    RETURN          shift and go to state 140
    INC             shift and go to state 150
    DEC             shift and go to state 151
    NEW             shift and go to state 154
    SUPER           shift and go to state 160
    THIS            shift and go to state 162
    LPAREN          shift and go to state 132
    DECIMAL_LITERAL shift and go to state 163
    HEX_LITERAL     shift and go to state 164
    BINARY_LITERAL  shift and go to state 165
    FLOAT_LITERAL   shift and go to state 166
    BOOL_LITERAL    shift and go to state 167
    CHAR_LITERAL    shift and go to state 168
    STRING_LITERAL  shift and go to state 169
    NULL            shift and go to state 170

    Statement                      shift and go to state 561
    StatementNoShortIf             shift and go to state 619
    StatementWithoutTrailingSubstatement shift and go to state 421
    LabeledStatement               shift and go to state 116
    IfThenStatement                shift and go to state 117
    IfThenElseStatement            shift and go to state 118
    WhileStatement                 shift and go to state 119
    ForStatement                   shift and go to state 120
    LabeledStatementNoShortIf      shift and go to state 422
    IfThenElseStatementNoShortIf   shift and go to state 423
    WhileStatementNoShortIf        shift and go to state 424
    ForStatementNoShortIf          shift and go to state 425
    Block                          shift and go to state 122
    EmptyStatement                 shift and go to state 123
    ExpressionStatement            shift and go to state 124
    SwitchStatement                shift and go to state 125
    DoStatement                    shift and go to state 126
    BreakStatement                 shift and go to state 127
    ContinueStatement              shift and go to state 128
    ReturnStatement                shift and go to state 129
    StatementExpression            shift and go to state 135
    Assignment                     shift and go to state 141
    PreIncrementExpression         shift and go to state 142
    PreDecrementExpression         shift and go to state 143
    PostIncrementExpression        shift and go to state 144
    PostDecrementExpression        shift and go to state 145
    MethodInvocation               shift and go to state 146
    ClassInstanceCreationExpression shift and go to state 147
    LeftHandSide                   shift and go to state 149
    PostfixExpression              shift and go to state 152
    Primary                        shift and go to state 153
    Name                           shift and go to state 279
    FieldAccess                    shift and go to state 156
    ArrayAccess                    shift and go to state 157
    PrimaryNoNewArray              shift and go to state 158
    ArrayCreationExpression        shift and go to state 159
    SimpleName                     shift and go to state 155
    QualifiedName                  shift and go to state 78
    Literal                        shift and go to state 161

state 612

    (178) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf . end_scope for_l2
    (303) end_scope -> .

    ELSE            reduce using rule 303 (end_scope -> .)

    end_scope                      shift and go to state 620

state 613

    (181) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope . for_l2
    (184) for_l2 -> .

    ELSE            reduce using rule 184 (for_l2 -> .)

    for_l2                         shift and go to state 621

state 614

    (182) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .

    ELSE            reduce using rule 182 (ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .)


state 615

    (176) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf . end_scope for_l2
    (303) end_scope -> .

    ELSE            reduce using rule 303 (end_scope -> .)

    end_scope                      shift and go to state 622

state 616

    (180) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope . for_l2
    (184) for_l2 -> .

    ELSE            reduce using rule 184 (for_l2 -> .)

    for_l2                         shift and go to state 623

state 617

    (177) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope . for_l2
    (184) for_l2 -> .

    ELSE            reduce using rule 184 (for_l2 -> .)

    for_l2                         shift and go to state 624

state 618

    (179) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .

    ELSE            reduce using rule 179 (ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .)


state 619

    (175) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf . end_scope for_l2
    (303) end_scope -> .

    ELSE            reduce using rule 303 (end_scope -> .)

    end_scope                      shift and go to state 625

state 620

    (178) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope . for_l2
    (184) for_l2 -> .

    ELSE            reduce using rule 184 (for_l2 -> .)

    for_l2                         shift and go to state 626

state 621

    (181) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .

    ELSE            reduce using rule 181 (ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .)


state 622

    (176) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope . for_l2
    (184) for_l2 -> .

    ELSE            reduce using rule 184 (for_l2 -> .)

    for_l2                         shift and go to state 627

state 623

    (180) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .

    ELSE            reduce using rule 180 (ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .)


state 624

    (177) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .

    ELSE            reduce using rule 177 (ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .)


state 625

    (175) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope . for_l2
    (184) for_l2 -> .

    ELSE            reduce using rule 184 (for_l2 -> .)

    for_l2                         shift and go to state 628

state 626

    (178) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .

    ELSE            reduce using rule 178 (ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .)


state 627

    (176) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .

    ELSE            reduce using rule 176 (ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .)


state 628

    (175) ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .

    ELSE            reduce using rule 175 (ForStatementNoShortIf -> FOR prep_fw_stack LPAREN begin_scope ForInit SEMI for_l1 Expression SEMI for_l1 ForUpdate for_l3 RPAREN for_l1 StatementNoShortIf end_scope for_l2 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for STATIC in state 43 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 47 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 59 resolved as shift
WARNING: shift/reduce conflict for DOT in state 326 resolved as shift
WARNING: shift/reduce conflict for DOT in state 333 resolved as shift
